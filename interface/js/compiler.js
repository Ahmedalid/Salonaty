/* ---------------------- 
  Modernizr
---------------------- */
/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexboxlegacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-printshiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;



window.Modernizr = (function(window, document, undefined) {

  var version = '2.8.3',

    Modernizr = {},

    enableClasses = true,

    docElement = document.documentElement,

    mod = 'modernizr',
    modElem = document.createElement(mod),
    mStyle = modElem.style,

    inputElem = document.createElement('input'),

    smile = ':)',

    toString = {}.toString,

    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),



    omPrefixes = 'Webkit Moz O ms',

    cssomPrefixes = omPrefixes.split(' '),

    domPrefixes = omPrefixes.toLowerCase().split(' '),

    ns = {
      'svg': 'http://www.w3.org/2000/svg'
    },

    tests = {},
    inputs = {},
    attrs = {},

    classes = [],

    slice = classes.slice,

    featureName,


    injectElementWithStyles = function(rule, callback, nodes, testnames) {

      var style, ret, node, docOverflow,
        div = document.createElement('div'),
        body = document.body,
        fakeBody = body || document.createElement('body');

      if (parseInt(nodes, 10)) {
        while (nodes--) {
          node = document.createElement('div');
          node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
          div.appendChild(node);
        }
      }

      style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
      div.id = mod;
      (body ? div : fakeBody).innerHTML += style;
      fakeBody.appendChild(div);
      if (!body) {
        fakeBody.style.background = '';
        fakeBody.style.overflow = 'hidden';
        docOverflow = docElement.style.overflow;
        docElement.style.overflow = 'hidden';
        docElement.appendChild(fakeBody);
      }

      ret = callback(div, rule);
      if (!body) {
        fakeBody.parentNode.removeChild(fakeBody);
        docElement.style.overflow = docOverflow;
      } else {
        div.parentNode.removeChild(div);
      }

      return !!ret;

    },

    testMediaQuery = function(mq) {

      var matchMedia = window.matchMedia || window.msMatchMedia;
      if (matchMedia) {
        return matchMedia(mq) && matchMedia(mq).matches || false;
      }

      var bool;

      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function(node) {
        bool = (window.getComputedStyle ?
          getComputedStyle(node, null) :
          node.currentStyle)['position'] == 'absolute';
      });

      return bool;

    },


    isEventSupported = (function() {

      var TAGNAMES = {
        'select': 'input',
        'change': 'input',
        'submit': 'form',
        'reset': 'form',
        'error': 'img',
        'load': 'img',
        'abort': 'img'
      };

      function isEventSupported(eventName, element) {

        element = element || document.createElement(TAGNAMES[eventName] || 'div');
        eventName = 'on' + eventName;

        var isSupported = eventName in element;

        if (!isSupported) {
          if (!element.setAttribute) {
            element = document.createElement('div');
          }
          if (element.setAttribute && element.removeAttribute) {
            element.setAttribute(eventName, '');
            isSupported = is(element[eventName], 'function');

            if (!is(element[eventName], 'undefined')) {
              element[eventName] = undefined;
            }
            element.removeAttribute(eventName);
          }
        }

        element = null;
        return isSupported;
      }
      return isEventSupported;
    })(),


    _hasOwnProperty = ({}).hasOwnProperty,
    hasOwnProp;

  if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
    hasOwnProp = function(object, property) {
      return _hasOwnProperty.call(object, property);
    };
  } else {
    hasOwnProp = function(object, property) {
      return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
    };
  }


  if (!Function.prototype.bind) {
    Function.prototype.bind = function bind(that) {

      var target = this;

      if (typeof target != "function") {
        throw new TypeError();
      }

      var args = slice.call(arguments, 1),
        bound = function() {

          if (this instanceof bound) {

            var F = function() {};
            F.prototype = target.prototype;
            var self = new F();

            var result = target.apply(
              self,
              args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
              return result;
            }
            return self;

          } else {

            return target.apply(
              that,
              args.concat(slice.call(arguments))
            );

          }

        };

      return bound;
    };
  }

  function setCss(str) {
    mStyle.cssText = str;
  }

  function setCssAll(str1, str2) {
    return setCss(prefixes.join(str1 + ';') + (str2 || ''));
  }

  function is(obj, type) {
    return typeof obj === type;
  }

  function contains(str, substr) {
    return !!~('' + str).indexOf(substr);
  }

  function testProps(props, prefixed) {
    for (var i in props) {
      var prop = props[i];
      if (!contains(prop, "-") && mStyle[prop] !== undefined) {
        return prefixed == 'pfx' ? prop : true;
      }
    }
    return false;
  }

  function testDOMProps(props, obj, elem) {
    for (var i in props) {
      var item = obj[props[i]];
      if (item !== undefined) {

        if (elem === false) return props[i];

        if (is(item, 'function')) {
          return item.bind(elem || obj);
        }

        return item;
      }
    }
    return false;
  }

  function testPropsAll(prop, prefixed, elem) {

    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

    if (is(prefixed, "string") || is(prefixed, "undefined")) {
      return testProps(props, prefixed);

    } else {
      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
      return testDOMProps(props, prefixed, elem);
    }
  }
  tests['flexbox'] = function() {
    return testPropsAll('flexWrap');
  };


  tests['flexboxlegacy'] = function() {
    return testPropsAll('boxDirection');
  };


  tests['canvas'] = function() {
    var elem = document.createElement('canvas');
    return !!(elem.getContext && elem.getContext('2d'));
  };

  tests['canvastext'] = function() {
    return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
  };



  tests['webgl'] = function() {
    return !!window.WebGLRenderingContext;
  };


  tests['touch'] = function() {
    var bool;

    if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
      bool = true;
    } else {
      injectElementWithStyles(['@media (', prefixes.join('touch-enabled),('), mod, ')', '{#modernizr{top:9px;position:absolute}}'].join(''), function(node) {
        bool = node.offsetTop === 9;
      });
    }

    return bool;
  };



  tests['geolocation'] = function() {
    return 'geolocation' in navigator;
  };


  tests['postmessage'] = function() {
    return !!window.postMessage;
  };


  tests['websqldatabase'] = function() {
    return !!window.openDatabase;
  };

  tests['indexedDB'] = function() {
    return !!testPropsAll("indexedDB", window);
  };

  tests['hashchange'] = function() {
    return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
  };

  tests['history'] = function() {
    return !!(window.history && history.pushState);
  };

  tests['draganddrop'] = function() {
    var div = document.createElement('div');
    return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
  };

  tests['websockets'] = function() {
    return 'WebSocket' in window || 'MozWebSocket' in window;
  };


  tests['rgba'] = function() {
    setCss('background-color:rgba(150,255,150,.5)');

    return contains(mStyle.backgroundColor, 'rgba');
  };

  tests['hsla'] = function() {
    setCss('background-color:hsla(120,40%,100%,.5)');

    return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
  };

  tests['multiplebgs'] = function() {
    setCss('background:url(https://),url(https://),red url(https://)');

    return (/(url\s*\(.*?){3}/).test(mStyle.background);
  };
  tests['backgroundsize'] = function() {
    return testPropsAll('backgroundSize');
  };

  tests['borderimage'] = function() {
    return testPropsAll('borderImage');
  };



  tests['borderradius'] = function() {
    return testPropsAll('borderRadius');
  };

  tests['boxshadow'] = function() {
    return testPropsAll('boxShadow');
  };

  tests['textshadow'] = function() {
    return document.createElement('div').style.textShadow === '';
  };


  tests['opacity'] = function() {
    setCssAll('opacity:.55');

    return (/^0.55$/).test(mStyle.opacity);
  };


  tests['cssanimations'] = function() {
    return testPropsAll('animationName');
  };


  tests['csscolumns'] = function() {
    return testPropsAll('columnCount');
  };


  tests['cssgradients'] = function() {
    var str1 = 'background-image:',
      str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
      str3 = 'linear-gradient(left top,#9f9, white);';

    setCss(
      (str1 + '-webkit- '.split(' ').join(str2 + str1) +
        prefixes.join(str3 + str1)).slice(0, -str1.length)
    );

    return contains(mStyle.backgroundImage, 'gradient');
  };


  tests['cssreflections'] = function() {
    return testPropsAll('boxReflect');
  };


  tests['csstransforms'] = function() {
    return !!testPropsAll('transform');
  };


  tests['csstransforms3d'] = function() {

    var ret = !!testPropsAll('perspective');

    if (ret && 'webkitPerspective' in docElement.style) {

      injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function(node, rule) {
        ret = node.offsetLeft === 9 && node.offsetHeight === 3;
      });
    }
    return ret;
  };


  tests['csstransitions'] = function() {
    return testPropsAll('transition');
  };



  tests['fontface'] = function() {
    var bool;

    injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function(node, rule) {
      var style = document.getElementById('smodernizr'),
        sheet = style.sheet || style.styleSheet,
        cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';

      bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;
    });

    return bool;
  };

  tests['generatedcontent'] = function() {
    var bool;

    injectElementWithStyles(['#', mod, '{font:0/0 a}#', mod, ':after{content:"', smile, '";visibility:hidden;font:3px/1 a}'].join(''), function(node) {
      bool = node.offsetHeight >= 3;
    });

    return bool;
  };
  tests['video'] = function() {
    var elem = document.createElement('video'),
      bool = false;

    try {
      if (bool = !!elem.canPlayType) {
        bool = new Boolean(bool);
        bool.ogg = elem.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, '');

        bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, '');

        bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '');
      }

    } catch (e) {}

    return bool;
  };

  tests['audio'] = function() {
    var elem = document.createElement('audio'),
      bool = false;

    try {
      if (bool = !!elem.canPlayType) {
        bool = new Boolean(bool);
        bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '');
        bool.mp3 = elem.canPlayType('audio/mpeg;').replace(/^no$/, '');

        bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '');
        bool.m4a = (elem.canPlayType('audio/x-m4a;') ||
          elem.canPlayType('audio/aac;')).replace(/^no$/, '');
      }
    } catch (e) {}

    return bool;
  };


  tests['localstorage'] = function() {
    try {
      localStorage.setItem(mod, mod);
      localStorage.removeItem(mod);
      return true;
    } catch (e) {
      return false;
    }
  };

  tests['sessionstorage'] = function() {
    try {
      sessionStorage.setItem(mod, mod);
      sessionStorage.removeItem(mod);
      return true;
    } catch (e) {
      return false;
    }
  };


  tests['webworkers'] = function() {
    return !!window.Worker;
  };


  tests['applicationcache'] = function() {
    return !!window.applicationCache;
  };


  tests['svg'] = function() {
    return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
  };

  tests['inlinesvg'] = function() {
    var div = document.createElement('div');
    div.innerHTML = '<svg/>';
    return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
  };

  tests['smil'] = function() {
    return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
  };


  tests['svgclippaths'] = function() {
    return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
  };

  function webforms() {
    Modernizr['input'] = (function(props) {
      for (var i = 0, len = props.length; i < len; i++) {
        attrs[props[i]] = !!(props[i] in inputElem);
      }
      if (attrs.list) {
        attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);
      }
      return attrs;
    })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
    Modernizr['inputtypes'] = (function(props) {

      for (var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++) {

        inputElem.setAttribute('type', inputElemType = props[i]);
        bool = inputElem.type !== 'text';

        if (bool) {

          inputElem.value = smile;
          inputElem.style.cssText = 'position:absolute;visibility:hidden;';

          if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {

            docElement.appendChild(inputElem);
            defaultView = document.defaultView;

            bool = defaultView.getComputedStyle &&
              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&
              (inputElem.offsetHeight !== 0);

            docElement.removeChild(inputElem);

          } else if (/^(search|tel)$/.test(inputElemType)) {} else if (/^(url|email)$/.test(inputElemType)) {
            bool = inputElem.checkValidity && inputElem.checkValidity() === false;

          } else {
            bool = inputElem.value != smile;
          }
        }

        inputs[props[i]] = !!bool;
      }
      return inputs;
    })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
  }
  for (var feature in tests) {
    if (hasOwnProp(tests, feature)) {
      featureName = feature.toLowerCase();
      Modernizr[featureName] = tests[feature]();

      classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
    }
  }

  Modernizr.input || webforms();


  Modernizr.addTest = function(feature, test) {
    if (typeof feature == 'object') {
      for (var key in feature) {
        if (hasOwnProp(feature, key)) {
          Modernizr.addTest(key, feature[key]);
        }
      }
    } else {

      feature = feature.toLowerCase();

      if (Modernizr[feature] !== undefined) {
        return Modernizr;
      }

      test = typeof test == 'function' ? test() : test;

      if (typeof enableClasses !== "undefined" && enableClasses) {
        docElement.className += ' ' + (test ? '' : 'no-') + feature;
      }
      Modernizr[feature] = test;

    }

    return Modernizr;
  };


  setCss('');
  modElem = inputElem = null;


  Modernizr._version = version;

  Modernizr._prefixes = prefixes;
  Modernizr._domPrefixes = domPrefixes;
  Modernizr._cssomPrefixes = cssomPrefixes;

  Modernizr.mq = testMediaQuery;

  Modernizr.hasEvent = isEventSupported;

  Modernizr.testProp = function(prop) {
    return testProps([prop]);
  };

  Modernizr.testAllProps = testPropsAll;


  Modernizr.testStyles = injectElementWithStyles;
  Modernizr.prefixed = function(prop, obj, elem) {
    if (!obj) {
      return testPropsAll(prop, 'pfx');
    } else {
      return testPropsAll(prop, obj, elem);
    }
  };


  docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

    (enableClasses ? ' js ' + classes.join(' ') : '');

  return Modernizr;

})(this, this.document);
/**
 * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
 */
;
(function(window, document) {
  /*jshint evil:true */
  /** version */
  var version = '3.7.0';

  /** Preset options */
  var options = window.html5 || {};

  /** Used to skip problem elements */
  var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;

  /** Not all elements can be cloned in IE **/
  var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;

  /** Detect whether the browser supports default html5 styles */
  var supportsHtml5Styles;

  /** Name of the expando, to work with multiple documents or to re-shiv one document */
  var expando = '_html5shiv';

  /** The id for the the documents expando */
  var expanID = 0;

  /** Cached data for each document */
  var expandoData = {};

  /** Detect whether the browser supports unknown elements */
  var supportsUnknownElements;

  (function() {
    try {
      var a = document.createElement('a');
      a.innerHTML = '<xyz></xyz>';
      //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
      supportsHtml5Styles = ('hidden' in a);

      supportsUnknownElements = a.childNodes.length == 1 || (function() {
        // assign a false positive if unable to shiv
        (document.createElement)('a');
        var frag = document.createDocumentFragment();
        return (
          typeof frag.cloneNode == 'undefined' ||
          typeof frag.createDocumentFragment == 'undefined' ||
          typeof frag.createElement == 'undefined'
        );
      }());
    } catch (e) {
      // assign a false positive if detection fails => unable to shiv
      supportsHtml5Styles = true;
      supportsUnknownElements = true;
    }

  }());

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a style sheet with the given CSS text and adds it to the document.
   * @private
   * @param {Document} ownerDocument The document.
   * @param {String} cssText The CSS text.
   * @returns {StyleSheet} The style element.
   */
  function addStyleSheet(ownerDocument, cssText) {
    var p = ownerDocument.createElement('p'),
      parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

    p.innerHTML = 'x<style>' + cssText + '</style>';
    return parent.insertBefore(p.lastChild, parent.firstChild);
  }

  /**
   * Returns the value of `html5.elements` as an array.
   * @private
   * @returns {Array} An array of shived element node names.
   */
  function getElements() {
    var elements = html5.elements;
    return typeof elements == 'string' ? elements.split(' ') : elements;
  }

  /**
   * Returns the data associated to the given document
   * @private
   * @param {Document} ownerDocument The document.
   * @returns {Object} An object of data.
   */
  function getExpandoData(ownerDocument) {
    var data = expandoData[ownerDocument[expando]];
    if (!data) {
      data = {};
      expanID++;
      ownerDocument[expando] = expanID;
      expandoData[expanID] = data;
    }
    return data;
  }

  /**
   * returns a shived element for the given nodeName and document
   * @memberOf html5
   * @param {String} nodeName name of the element
   * @param {Document} ownerDocument The context document.
   * @returns {Object} The shived element.
   */
  function createElement(nodeName, ownerDocument, data) {
    if (!ownerDocument) {
      ownerDocument = document;
    }
    if (supportsUnknownElements) {
      return ownerDocument.createElement(nodeName);
    }
    if (!data) {
      data = getExpandoData(ownerDocument);
    }
    var node;

    if (data.cache[nodeName]) {
      node = data.cache[nodeName].cloneNode();
    } else if (saveClones.test(nodeName)) {
      node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
    } else {
      node = data.createElem(nodeName);
    }

    // Avoid adding some elements to fragments in IE < 9 because
    // * Attributes like `name` or `type` cannot be set/changed once an element
    //   is inserted into a document/fragment
    // * Link elements with `src` attributes that are inaccessible, as with
    //   a 403 response, will cause the tab/window to crash
    // * Script elements appended to fragments will execute when their `src`
    //   or `text` property is set
    return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
  }

  /**
   * returns a shived DocumentFragment for the given document
   * @memberOf html5
   * @param {Document} ownerDocument The context document.
   * @returns {Object} The shived DocumentFragment.
   */
  function createDocumentFragment(ownerDocument, data) {
    if (!ownerDocument) {
      ownerDocument = document;
    }
    if (supportsUnknownElements) {
      return ownerDocument.createDocumentFragment();
    }
    data = data || getExpandoData(ownerDocument);
    var clone = data.frag.cloneNode(),
      i = 0,
      elems = getElements(),
      l = elems.length;
    for (; i < l; i++) {
      clone.createElement(elems[i]);
    }
    return clone;
  }

  /**
   * Shivs the `createElement` and `createDocumentFragment` methods of the document.
   * @private
   * @param {Document|DocumentFragment} ownerDocument The document.
   * @param {Object} data of the document.
   */
  function shivMethods(ownerDocument, data) {
    if (!data.cache) {
      data.cache = {};
      data.createElem = ownerDocument.createElement;
      data.createFrag = ownerDocument.createDocumentFragment;
      data.frag = data.createFrag();
    }


    ownerDocument.createElement = function(nodeName) {
      //abort shiv
      if (!html5.shivMethods) {
        return data.createElem(nodeName);
      }
      return createElement(nodeName, ownerDocument, data);
    };

    ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
      'var n=f.cloneNode(),c=n.createElement;' +
      'h.shivMethods&&(' +
      // unroll the `createElement` calls
      getElements().join().replace(/\w+/g, function(nodeName) {
        data.createElem(nodeName);
        data.frag.createElement(nodeName);
        return 'c("' + nodeName + '")';
      }) +
      ');return n}'
    )(html5, data.frag);
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Shivs the given document.
   * @memberOf html5
   * @param {Document} ownerDocument The document to shiv.
   * @returns {Document} The shived document.
   */
  function shivDocument(ownerDocument) {
    if (!ownerDocument) {
      ownerDocument = document;
    }
    var data = getExpandoData(ownerDocument);

    if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
      data.hasCSS = !!addStyleSheet(ownerDocument,
        // corrects block display not defined in IE6/7/8/9
        'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
        // adds styling not present in IE6/7/8/9
        'mark{background:#FF0;color:#000}' +
        // hides non-rendered elements
        'template{display:none}'
      );
    }
    if (!supportsUnknownElements) {
      shivMethods(ownerDocument, data);
    }
    return ownerDocument;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The `html5` object is exposed so that more elements can be shived and
   * existing shiving can be detected on iframes.
   * @type Object
   * @example
   *
   * // options can be changed before the script is included
   * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
   */
  var html5 = {

    /**
     * An array or space separated string of node names of the elements to shiv.
     * @memberOf html5
     * @type Array|String
     */
    'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',

    /**
     * current version of html5shiv
     */
    'version': version,

    /**
     * A flag to indicate that the HTML5 style sheet should be inserted.
     * @memberOf html5
     * @type Boolean
     */
    'shivCSS': (options.shivCSS !== false),

    /**
     * Is equal to true if a browser supports creating unknown/HTML5 elements
     * @memberOf html5
     * @type boolean
     */
    'supportsUnknownElements': supportsUnknownElements,

    /**
     * A flag to indicate that the document's `createElement` and `createDocumentFragment`
     * methods should be overwritten.
     * @memberOf html5
     * @type Boolean
     */
    'shivMethods': (options.shivMethods !== false),

    /**
     * A string to describe the type of `html5` object ("default" or "default print").
     * @memberOf html5
     * @type String
     */
    'type': 'default',

    // shivs the document according to the specified `html5` object options
    'shivDocument': shivDocument,

    //creates a shived element
    createElement: createElement,

    //creates a shived documentFragment
    createDocumentFragment: createDocumentFragment
  };

  /*--------------------------------------------------------------------------*/

  // expose html5
  window.html5 = html5;

  // shiv the document
  shivDocument(document);

  /*------------------------------- Print Shiv -------------------------------*/

  /** Used to filter media types */
  var reMedia = /^$|\b(?:all|print)\b/;

  /** Used to namespace printable elements */
  var shivNamespace = 'html5shiv';

  /** Detect whether the browser supports shivable style sheets */
  var supportsShivableSheets = !supportsUnknownElements && (function() {
    // assign a false negative if unable to shiv
    var docEl = document.documentElement;
    return !(
      typeof document.namespaces == 'undefined' ||
      typeof document.parentWindow == 'undefined' ||
      typeof docEl.applyElement == 'undefined' ||
      typeof docEl.removeNode == 'undefined' ||
      typeof window.attachEvent == 'undefined'
    );
  }());

  /*--------------------------------------------------------------------------*/

  /**
   * Wraps all HTML5 elements in the given document with printable elements.
   * (eg. the "header" element is wrapped with the "html5shiv:header" element)
   * @private
   * @param {Document} ownerDocument The document.
   * @returns {Array} An array wrappers added.
   */
  function addWrappers(ownerDocument) {
    var node,
      nodes = ownerDocument.getElementsByTagName('*'),
      index = nodes.length,
      reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),
      result = [];

    while (index--) {
      node = nodes[index];
      if (reElements.test(node.nodeName)) {
        result.push(node.applyElement(createWrapper(node)));
      }
    }
    return result;
  }

  /**
   * Creates a printable wrapper for the given element.
   * @private
   * @param {Element} element The element.
   * @returns {Element} The wrapper.
   */
  function createWrapper(element) {
    var node,
      nodes = element.attributes,
      index = nodes.length,
      wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName);

    // copy element attributes to the wrapper
    while (index--) {
      node = nodes[index];
      node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);
    }
    // copy element styles to the wrapper
    wrapper.style.cssText = element.style.cssText;
    return wrapper;
  }

  /**
   * Shivs the given CSS text.
   * (eg. header{} becomes html5shiv\:header{})
   * @private
   * @param {String} cssText The CSS text to shiv.
   * @returns {String} The shived CSS text.
   */
  function shivCssText(cssText) {
    var pair,
      parts = cssText.split('{'),
      index = parts.length,
      reElements = RegExp('(^|[\\s,>+~])(' + getElements().join('|') + ')(?=[[\\s,>+~#.:]|$)', 'gi'),
      replacement = '$1' + shivNamespace + '\\:$2';

    while (index--) {
      pair = parts[index] = parts[index].split('}');
      pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);
      parts[index] = pair.join('}');
    }
    return parts.join('{');
  }

  /**
   * Removes the given wrappers, leaving the original elements.
   * @private
   * @params {Array} wrappers An array of printable wrappers.
   */
  function removeWrappers(wrappers) {
    var index = wrappers.length;
    while (index--) {
      wrappers[index].removeNode();
    }
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Shivs the given document for print.
   * @memberOf html5
   * @param {Document} ownerDocument The document to shiv.
   * @returns {Document} The shived document.
   */
  function shivPrint(ownerDocument) {
    var shivedSheet,
      wrappers,
      data = getExpandoData(ownerDocument),
      namespaces = ownerDocument.namespaces,
      ownerWindow = ownerDocument.parentWindow;

    if (!supportsShivableSheets || ownerDocument.printShived) {
      return ownerDocument;
    }
    if (typeof namespaces[shivNamespace] == 'undefined') {
      namespaces.add(shivNamespace);
    }

    function removeSheet() {
      clearTimeout(data._removeSheetTimer);
      if (shivedSheet) {
        shivedSheet.removeNode(true);
      }
      shivedSheet = null;
    }

    ownerWindow.attachEvent('onbeforeprint', function() {

      removeSheet();

      var imports,
        length,
        sheet,
        collection = ownerDocument.styleSheets,
        cssText = [],
        index = collection.length,
        sheets = Array(index);

      // convert styleSheets collection to an array
      while (index--) {
        sheets[index] = collection[index];
      }
      // concat all style sheet CSS text
      while ((sheet = sheets.pop())) {
        // IE does not enforce a same origin policy for external style sheets...
        // but has trouble with some dynamically created stylesheets
        if (!sheet.disabled && reMedia.test(sheet.media)) {

          try {
            imports = sheet.imports;
            length = imports.length;
          } catch (er) {
            length = 0;
          }

          for (index = 0; index < length; index++) {
            sheets.push(imports[index]);
          }

          try {
            cssText.push(sheet.cssText);
          } catch (er) {}
        }
      }

      // wrap all HTML5 elements with printable elements and add the shived style sheet
      cssText = shivCssText(cssText.reverse().join(''));
      wrappers = addWrappers(ownerDocument);
      shivedSheet = addStyleSheet(ownerDocument, cssText);

    });

    ownerWindow.attachEvent('onafterprint', function() {
      // remove wrappers, leaving the original elements, and remove the shived style sheet
      removeWrappers(wrappers);
      clearTimeout(data._removeSheetTimer);
      data._removeSheetTimer = setTimeout(removeSheet, 500);
    });

    ownerDocument.printShived = true;
    return ownerDocument;
  }

  /*--------------------------------------------------------------------------*/

  // expose API
  html5.type += ' print';
  html5.shivPrint = shivPrint;

  // shiv for print
  shivPrint(document);

}(this, document));
/*yepnope1.5.4|WTFPL*/
(function(a, b, c) {
  function d(a) {
    return "[object Function]" == o.call(a)
  }

  function e(a) {
    return "string" == typeof a
  }

  function f() {}

  function g(a) {
    return !a || "loaded" == a || "complete" == a || "uninitialized" == a
  }

  function h() {
    var a = p.shift();
    q = 1, a ? a.t ? m(function() {
      ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1)
    }, 0) : (a(), h()) : q = 0
  }

  function i(a, c, d, e, f, i, j) {
    function k(b) {
      if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), l.onload = l.onreadystatechange = null, b)) {
        "img" != a && m(function() {
          t.removeChild(l)
        }, 50);
        for (var d in y[c]) y[c].hasOwnProperty(d) && y[c][d].onload()
      }
    }
    var j = j || B.errorTimeout,
      l = b.createElement(a),
      o = 0,
      r = 0,
      u = {
        t: d,
        s: c,
        e: f,
        a: i,
        x: j
      };
    1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, l.type = a), l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function() {
      k.call(this, r)
    }, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), m(k, j)) : y[c].push(l))
  }

  function j(a, b, c, d, f) {
    return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 1 == p.length && h()), this
  }

  function k() {
    var a = B;
    return a.loader = {
      load: j,
      i: 0
    }, a
  }
  var l = b.documentElement,
    m = a.setTimeout,
    n = b.getElementsByTagName("script")[0],
    o = {}.toString,
    p = [],
    q = 0,
    r = "MozAppearance" in l.style,
    s = r && !!b.createRange().compareNode,
    t = s ? l : n.parentNode,
    l = a.opera && "[object Opera]" == o.call(a.opera),
    l = !!b.attachEvent && !l,
    u = r ? "object" : l ? "script" : "img",
    v = l ? "script" : u,
    w = Array.isArray || function(a) {
      return "[object Array]" == o.call(a)
    },
    x = [],
    y = {},
    z = {
      timeout: function(a, b) {
        return b.length && (a.timeout = b[0]), a
      }
    },
    A, B;
  B = function(a) {
    function b(a) {
      var a = a.split("!"),
        b = x.length,
        c = a.pop(),
        d = a.length,
        c = {
          url: c,
          origUrl: c,
          prefixes: a
        },
        e, f, g;
      for (f = 0; f < d; f++) g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
      for (f = 0; f < b; f++) c = x[f](c);
      return c
    }

    function g(a, e, f, g, h) {
      var i = b(a),
        j = i.autoCallback;
      i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), (d(e) || d(j)) && f.load(function() {
        k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), y[i.url] = 2
      })))
    }

    function h(a, b) {
      function c(a, c) {
        if (a) {
          if (e(a)) c || (j = function() {
            var a = [].slice.call(arguments);
            k.apply(this, a), l()
          }), g(a, j, b, 0, h);
          else if (Object(a) === a)
            for (n in m = function() {
                var b = 0,
                  c;
                for (c in a) a.hasOwnProperty(c) && b++;
                return b
              }(), a) a.hasOwnProperty(n) && (!c && !--m && (d(j) ? j = function() {
              var a = [].slice.call(arguments);
              k.apply(this, a), l()
            } : j[n] = function(a) {
              return function() {
                var b = [].slice.call(arguments);
                a && a.apply(this, b), l()
              }
            }(k[n])), g(a[n], j, b, n, h))
        } else !c && l()
      }
      var h = !!a.test,
        i = a.load || a.both,
        j = a.callback || f,
        k = j,
        l = a.complete || f,
        m, n;
      c(h ? a.yep : a.nope, !!i), i && c(i)
    }
    var i, j, l = this.yepnope.loader;
    if (e(a)) g(a, 0, l, 0);
    else if (w(a))
      for (i = 0; i < a.length; i++) j = a[i], e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l);
    else Object(a) === a && h(a, l)
  }, B.addPrefix = function(a, b) {
    z[a] = b
  }, B.addFilter = function(a) {
    x.push(a)
  }, B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", b.addEventListener("DOMContentLoaded", A = function() {
    b.removeEventListener("DOMContentLoaded", A, 0), b.readyState = "complete"
  }, 0)), a.yepnope = k(), a.yepnope.executeStack = h, a.yepnope.injectJs = function(a, c, d, e, i, j) {
    var k = b.createElement("script"),
      l, o, e = e || B.errorTimeout;
    k.src = a;
    for (o in d) k.setAttribute(o, d[o]);
    c = j ? h : c || f, k.onreadystatechange = k.onload = function() {
      !l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null)
    }, m(function() {
      l || (l = 1, c(1))
    }, e), i ? k.onload() : n.parentNode.insertBefore(k, n)
  }, a.yepnope.injectCss = function(a, c, d, e, g, i) {
    var e = b.createElement("link"),
      j, c = i ? h : c || f;
    e.href = a, e.rel = "stylesheet", e.type = "text/css";
    for (j in d) e.setAttribute(j, d[j]);
    g || (n.parentNode.insertBefore(e, n), m(c, 0))
  }
})(this, document);
Modernizr.load = function() {
  yepnope.apply(window, [].slice.call(arguments, 0));
};;
//-----------------------------------------------------------------------------------------------------------



/* ---------------------- 
  owl carousel plugin
---------------------- */

/**
 * Owl carousel
 * @version 2.0.0
 * @author Bartosz Wojciechowski
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */
;
(function($, window, document, undefined) {

  var drag, state, e;

  /**
   * Template for status information about drag and touch events.
   * @private
   */
  drag = {
    start: 0,
    startX: 0,
    startY: 0,
    current: 0,
    currentX: 0,
    currentY: 0,
    offsetX: 0,
    offsetY: 0,
    distance: null,
    startTime: 0,
    endTime: 0,
    updatedX: 0,
    targetEl: null
  };

  /**
   * Template for some status informations.
   * @private
   */
  state = {
    isTouch: false,
    isScrolling: false,
    isSwiping: false,
    direction: false,
    inMotion: false
  };

  /**
   * Event functions references.
   * @private
   */
  e = {
    _onDragStart: null,
    _onDragMove: null,
    _onDragEnd: null,
    _transitionEnd: null,
    _resizer: null,
    _responsiveCall: null,
    _goToLoop: null,
    _checkVisibile: null
  };

  /**
   * Creates a carousel.
   * @class The Owl Carousel.
   * @public
   * @param {HTMLElement|jQuery} element - The element to create the carousel for.
   * @param {Object} [options] - The options
   */
  function Owl(element, options) {

    /**
     * Current settings for the carousel.
     * @public
     */
    this.settings = null;

    /**
     * Current options set by the caller including defaults.
     * @public
     */
    this.options = $.extend({}, Owl.Defaults, options);

    /**
     * Plugin element.
     * @public
     */
    this.$element = $(element);

    /**
     * Caches informations about drag and touch events.
     */
    this.drag = $.extend({}, drag);

    /**
     * Caches some status informations.
     * @protected
     */
    this.state = $.extend({}, state);

    /**
     * @protected
     * @todo Must be documented
     */
    this.e = $.extend({}, e);

    /**
     * References to the running plugins of this carousel.
     * @protected
     */
    this._plugins = {};

    /**
     * Currently suppressed events to prevent them from beeing retriggered.
     * @protected
     */
    this._supress = {};

    /**
     * Absolute current position.
     * @protected
     */
    this._current = null;

    /**
     * Animation speed in milliseconds.
     * @protected
     */
    this._speed = null;

    /**
     * Coordinates of all items in pixel.
     * @todo The name of this member is missleading.
     * @protected
     */
    this._coordinates = [];

    /**
     * Current breakpoint.
     * @todo Real media queries would be nice.
     * @protected
     */
    this._breakpoint = null;

    /**
     * Current width of the plugin element.
     */
    this._width = null;

    /**
     * All real items.
     * @protected
     */
    this._items = [];

    /**
     * All cloned items.
     * @protected
     */
    this._clones = [];

    /**
     * Merge values of all items.
     * @todo Maybe this could be part of a plugin.
     * @protected
     */
    this._mergers = [];

    /**
     * Invalidated parts within the update process.
     * @protected
     */
    this._invalidated = {};

    /**
     * Ordered list of workers for the update process.
     * @protected
     */
    this._pipe = [];

    $.each(Owl.Plugins, $.proxy(function(key, plugin) {
      this._plugins[key[0].toLowerCase() + key.slice(1)] = new plugin(this);
    }, this));

    $.each(Owl.Pipe, $.proxy(function(priority, worker) {
      this._pipe.push({
        'filter': worker.filter,
        'run': $.proxy(worker.run, this)
      });
    }, this));

    this.setup();
    this.initialize();
  }

  /**
   * Default options for the carousel.
   * @public
   */
  Owl.Defaults = {
    items: 3,
    loop: false,
    center: false,

    mouseDrag: true,
    touchDrag: true,
    pullDrag: true,
    freeDrag: false,

    margin: 0,
    stagePadding: 0,

    merge: false,
    mergeFit: true,
    autoWidth: false,

    startPosition: 0,
    rtl: false,

    smartSpeed: 250,
    fluidSpeed: false,
    dragEndSpeed: false,

    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: window,
    responsiveClass: false,

    fallbackEasing: 'swing',

    info: false,

    nestedItemSelector: false,
    itemElement: 'div',
    stageElement: 'div',

    // Classes and Names
    themeClass: 'owl-theme',
    baseClass: 'owl-carousel',
    itemClass: 'owl-item',
    centerClass: 'center',
    activeClass: 'active'
  };

  /**
   * Enumeration for width.
   * @public
   * @readonly
   * @enum {String}
   */
  Owl.Width = {
    Default: 'default',
    Inner: 'inner',
    Outer: 'outer'
  };

  /**
   * Contains all registered plugins.
   * @public
   */
  Owl.Plugins = {};

  /**
   * Update pipe.
   */
  Owl.Pipe = [{
    filter: ['width', 'items', 'settings'],
    run: function(cache) {
      cache.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ['items', 'settings'],
    run: function() {
      var cached = this._clones,
        clones = this.$stage.children('.cloned');

      if (clones.length !== cached.length || (!this.settings.loop && cached.length > 0)) {
        this.$stage.children('.cloned').remove();
        this._clones = [];
      }
    }
  }, {
    filter: ['items', 'settings'],
    run: function() {
      var i, n,
        clones = this._clones,
        items = this._items,
        delta = this.settings.loop ? clones.length - Math.max(this.settings.items * 2, 4) : 0;

      for (i = 0, n = Math.abs(delta / 2); i < n; i++) {
        if (delta > 0) {
          this.$stage.children().eq(items.length + clones.length - 1).remove();
          clones.pop();
          this.$stage.children().eq(0).remove();
          clones.pop();
        } else {
          clones.push(clones.length / 2);
          this.$stage.append(items[clones[clones.length - 1]].clone().addClass('cloned'));
          clones.push(items.length - 1 - (clones.length - 1) / 2);
          this.$stage.prepend(items[clones[clones.length - 1]].clone().addClass('cloned'));
        }
      }
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function() {
      var rtl = (this.settings.rtl ? 1 : -1),
        width = (this.width() / this.settings.items).toFixed(3),
        coordinate = 0,
        merge, i, n;

      this._coordinates = [];
      for (i = 0, n = this._clones.length + this._items.length; i < n; i++) {
        merge = this._mergers[this.relative(i)];
        merge = (this.settings.mergeFit && Math.min(merge, this.settings.items)) || merge;
        coordinate += (this.settings.autoWidth ? this._items[this.relative(i)].width() + this.settings.margin : width * merge) * rtl;

        this._coordinates.push(coordinate);
      }
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function() {
      var i, n, width = (this.width() / this.settings.items).toFixed(3),
        css = {
          'width': Math.abs(this._coordinates[this._coordinates.length - 1]) + this.settings.stagePadding * 2,
          'padding-left': this.settings.stagePadding || '',
          'padding-right': this.settings.stagePadding || ''
        };

      this.$stage.css(css);

      css = {
        'width': this.settings.autoWidth ? 'auto' : width - this.settings.margin
      };
      css[this.settings.rtl ? 'margin-left' : 'margin-right'] = this.settings.margin;

      if (!this.settings.autoWidth && $.grep(this._mergers, function(v) {
          return v > 1
        }).length > 0) {
        for (i = 0, n = this._coordinates.length; i < n; i++) {
          css.width = Math.abs(this._coordinates[i]) - Math.abs(this._coordinates[i - 1] || 0) - this.settings.margin;
          this.$stage.children().eq(i).css(css);
        }
      } else {
        this.$stage.children().css(css);
      }
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function(cache) {
      cache.current && this.reset(this.$stage.children().index(cache.current));
    }
  }, {
    filter: ['position'],
    run: function() {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ['width', 'position', 'items', 'settings'],
    run: function() {
      var rtl = this.settings.rtl ? 1 : -1,
        padding = this.settings.stagePadding * 2,
        begin = this.coordinates(this.current()) + padding,
        end = begin + this.width() * rtl,
        inner, outer, matches = [],
        i, n;

      for (i = 0, n = this._coordinates.length; i < n; i++) {
        inner = this._coordinates[i - 1] || 0;
        outer = Math.abs(this._coordinates[i]) + padding * rtl;

        if ((this.op(inner, '<=', begin) && (this.op(inner, '>', end))) || (this.op(outer, '<', begin) && this.op(outer, '>', end))) {
          matches.push(i);
        }
      }

      this.$stage.children('.' + this.settings.activeClass).removeClass(this.settings.activeClass);
      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass(this.settings.activeClass);

      if (this.settings.center) {
        this.$stage.children('.' + this.settings.centerClass).removeClass(this.settings.centerClass);
        this.$stage.children().eq(this.current()).addClass(this.settings.centerClass);
      }
    }
  }];

  /**
   * Initializes the carousel.
   * @protected
   */
  Owl.prototype.initialize = function() {
    this.trigger('initialize');

    this.$element
      .addClass(this.settings.baseClass)
      .addClass(this.settings.themeClass)
      .toggleClass('owl-rtl', this.settings.rtl);

    // check support
    this.browserSupport();

    if (this.settings.autoWidth && this.state.imagesLoaded !== true) {
      var imgs, nestedSelector, width;
      imgs = this.$element.find('img');
      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;
      width = this.$element.children(nestedSelector).width();

      if (imgs.length && width <= 0) {
        this.preloadAutoWidthImages(imgs);
        return false;
      }
    }

    this.$element.addClass('owl-loading');

    // create stage
    this.$stage = $('<' + this.settings.stageElement + ' class="owl-stage"/>')
      .wrap('<div class="owl-stage-outer">');

    // append stage
    this.$element.append(this.$stage.parent());

    // append content
    this.replace(this.$element.children().not(this.$stage.parent()));

    // set view width
    this._width = this.$element.width();

    // update view
    this.refresh();

    this.$element.removeClass('owl-loading').addClass('owl-loaded');

    // attach generic events
    this.eventsCall();

    // attach generic events
    this.internalEvents();

    // attach custom control events
    this.addTriggerableEvents();

    this.trigger('initialized');
  };

  /**
   * Setups the current settings.
   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
   * @todo Support for media queries by using `matchMedia` would be nice.
   * @public
   */
  Owl.prototype.setup = function() {
    var viewport = this.viewport(),
      overwrites = this.options.responsive,
      match = -1,
      settings = null;

    if (!overwrites) {
      settings = $.extend({}, this.options);
    } else {
      $.each(overwrites, function(breakpoint) {
        if (breakpoint <= viewport && breakpoint > match) {
          match = Number(breakpoint);
        }
      });

      settings = $.extend({}, this.options, overwrites[match]);
      delete settings.responsive;

      // responsive class
      if (settings.responsiveClass) {
        this.$element.attr('class', function(i, c) {
          return c.replace(/\b owl-responsive-\S+/g, '');
        }).addClass('owl-responsive-' + match);
      }
    }

    if (this.settings === null || this._breakpoint !== match) {
      this.trigger('change', {
        property: {
          name: 'settings',
          value: settings
        }
      });
      this._breakpoint = match;
      this.settings = settings;
      this.invalidate('settings');
      this.trigger('changed', {
        property: {
          name: 'settings',
          value: this.settings
        }
      });
    }
  };

  /**
   * Updates option logic if necessery.
   * @protected
   */
  Owl.prototype.optionsLogic = function() {
    // Toggle Center class
    this.$element.toggleClass('owl-center', this.settings.center);

    // if items number is less than in body
    if (this.settings.loop && this._items.length < this.settings.items) {
      this.settings.loop = false;
    }

    if (this.settings.autoWidth) {
      this.settings.stagePadding = false;
      this.settings.merge = false;
    }
  };

  /**
   * Prepares an item before add.
   * @todo Rename event parameter `content` to `item`.
   * @protected
   * @returns {jQuery|HTMLElement} - The item container.
   */
  Owl.prototype.prepare = function(item) {
    var event = this.trigger('prepare', {
      content: item
    });

    if (!event.data) {
      event.data = $('<' + this.settings.itemElement + '/>')
        .addClass(this.settings.itemClass).append(item)
    }

    this.trigger('prepared', {
      content: event.data
    });

    return event.data;
  };

  /**
   * Updates the view.
   * @public
   */
  Owl.prototype.update = function() {
    var i = 0,
      n = this._pipe.length,
      filter = $.proxy(function(p) {
        return this[p]
      }, this._invalidated),
      cache = {};

    while (i < n) {
      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
        this._pipe[i].run(cache);
      }
      i++;
    }

    this._invalidated = {};
  };

  /**
   * Gets the width of the view.
   * @public
   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
   * @returns {Number} - The width of the view in pixel.
   */
  Owl.prototype.width = function(dimension) {
    dimension = dimension || Owl.Width.Default;
    switch (dimension) {
      case Owl.Width.Inner:
      case Owl.Width.Outer:
        return this._width;
      default:
        return this._width - this.settings.stagePadding * 2 + this.settings.margin;
    }
  };

  /**
   * Refreshes the carousel primarily for adaptive purposes.
   * @public
   */
  Owl.prototype.refresh = function() {
    if (this._items.length === 0) {
      return false;
    }

    var start = new Date().getTime();

    this.trigger('refresh');

    this.setup();

    this.optionsLogic();

    // hide and show methods helps here to set a proper widths,
    // this prevents scrollbar to be calculated in stage width
    this.$stage.addClass('owl-refresh');

    this.update();

    this.$stage.removeClass('owl-refresh');

    this.state.orientation = window.orientation;

    this.watchVisibility();

    this.trigger('refreshed');
  };

  /**
   * Save internal event references and add event based functions.
   * @protected
   */
  Owl.prototype.eventsCall = function() {
    // Save events references
    this.e._onDragStart = $.proxy(function(e) {
      this.onDragStart(e);
    }, this);
    this.e._onDragMove = $.proxy(function(e) {
      this.onDragMove(e);
    }, this);
    this.e._onDragEnd = $.proxy(function(e) {
      this.onDragEnd(e);
    }, this);
    this.e._onResize = $.proxy(function(e) {
      this.onResize(e);
    }, this);
    this.e._transitionEnd = $.proxy(function(e) {
      this.transitionEnd(e);
    }, this);
    this.e._preventClick = $.proxy(function(e) {
      this.preventClick(e);
    }, this);
  };

  /**
   * Checks window `resize` event.
   * @protected
   */
  Owl.prototype.onThrottledResize = function() {
    window.clearTimeout(this.resizeTimer);
    this.resizeTimer = window.setTimeout(this.e._onResize, this.settings.responsiveRefreshRate);
  };

  /**
   * Checks window `resize` event.
   * @protected
   */
  Owl.prototype.onResize = function() {
    if (!this._items.length) {
      return false;
    }

    if (this._width === this.$element.width()) {
      return false;
    }

    if (this.trigger('resize').isDefaultPrevented()) {
      return false;
    }

    this._width = this.$element.width();

    this.invalidate('width');

    this.refresh();

    this.trigger('resized');
  };

  /**
   * Checks for touch/mouse drag event type and add run event handlers.
   * @protected
   */
  Owl.prototype.eventsRouter = function(event) {
    var type = event.type;

    if (type === "mousedown" || type === "touchstart") {
      this.onDragStart(event);
    } else if (type === "mousemove" || type === "touchmove") {
      this.onDragMove(event);
    } else if (type === "mouseup" || type === "touchend") {
      this.onDragEnd(event);
    } else if (type === "touchcancel") {
      this.onDragEnd(event);
    }
  };

  /**
   * Checks for touch/mouse drag options and add necessery event handlers.
   * @protected
   */
  Owl.prototype.internalEvents = function() {
    var isTouch = isTouchSupport(),
      isTouchIE = isTouchSupportIE();

    if (this.settings.mouseDrag) {
      this.$stage.on('mousedown', $.proxy(function(event) {
        this.eventsRouter(event)
      }, this));
      this.$stage.on('dragstart', function() {
        return false
      });
      this.$stage.get(0).onselectstart = function() {
        return false
      };
    } else {
      this.$element.addClass('owl-text-select-on');
    }

    if (this.settings.touchDrag && !isTouchIE) {
      this.$stage.on('touchstart touchcancel', $.proxy(function(event) {
        this.eventsRouter(event)
      }, this));
    }

    // catch transitionEnd event
    if (this.transitionEndVendor) {
      this.on(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd, false);
    }

    // responsive
    if (this.settings.responsive !== false) {
      this.on(window, 'resize', $.proxy(this.onThrottledResize, this));
    }
  };

  /**
   * Handles touchstart/mousedown event.
   * @protected
   * @param {Event} event - The event arguments.
   */
  Owl.prototype.onDragStart = function(event) {
    var ev, isTouchEvent, pageX, pageY, animatedPos;

    ev = event.originalEvent || event || window.event;

    // prevent right click
    if (ev.which === 3 || this.state.isTouch) {
      return false;
    }

    if (ev.type === 'mousedown') {
      this.$stage.addClass('owl-grab');
    }

    this.trigger('drag');
    this.drag.startTime = new Date().getTime();
    this.speed(0);
    this.state.isTouch = true;
    this.state.isScrolling = false;
    this.state.isSwiping = false;
    this.drag.distance = 0;

    pageX = getTouches(ev).x;
    pageY = getTouches(ev).y;

    // get stage position left
    this.drag.offsetX = this.$stage.position().left;
    this.drag.offsetY = this.$stage.position().top;

    if (this.settings.rtl) {
      this.drag.offsetX = this.$stage.position().left + this.$stage.width() - this.width() + this.settings.margin;
    }

    // catch position // ie to fix
    if (this.state.inMotion && this.support3d) {
      animatedPos = this.getTransformProperty();
      this.drag.offsetX = animatedPos;
      this.animate(animatedPos);
      this.state.inMotion = true;
    } else if (this.state.inMotion && !this.support3d) {
      this.state.inMotion = false;
      return false;
    }

    this.drag.startX = pageX - this.drag.offsetX;
    this.drag.startY = pageY - this.drag.offsetY;

    this.drag.start = pageX - this.drag.startX;
    this.drag.targetEl = ev.target || ev.srcElement;
    this.drag.updatedX = this.drag.start;

    // to do/check
    // prevent links and images dragging;
    if (this.drag.targetEl.tagName === "IMG" || this.drag.targetEl.tagName === "A") {
      this.drag.targetEl.draggable = false;
    }

    $(document).on('mousemove.owl.dragEvents mouseup.owl.dragEvents touchmove.owl.dragEvents touchend.owl.dragEvents', $.proxy(function(event) {
      this.eventsRouter(event)
    }, this));
  };

  /**
   * Handles the touchmove/mousemove events.
   * @todo Simplify
   * @protected
   * @param {Event} event - The event arguments.
   */
  Owl.prototype.onDragMove = function(event) {
    var ev, isTouchEvent, pageX, pageY, minValue, maxValue, pull;

    if (!this.state.isTouch) {
      return;
    }

    if (this.state.isScrolling) {
      return;
    }

    ev = event.originalEvent || event || window.event;

    pageX = getTouches(ev).x;
    pageY = getTouches(ev).y;

    // Drag Direction
    this.drag.currentX = pageX - this.drag.startX;
    this.drag.currentY = pageY - this.drag.startY;
    this.drag.distance = this.drag.currentX - this.drag.offsetX;

    // Check move direction
    if (this.drag.distance < 0) {
      this.state.direction = this.settings.rtl ? 'right' : 'left';
    } else if (this.drag.distance > 0) {
      this.state.direction = this.settings.rtl ? 'left' : 'right';
    }
    // Loop
    if (this.settings.loop) {
      if (this.op(this.drag.currentX, '>', this.coordinates(this.minimum())) && this.state.direction === 'right') {
        this.drag.currentX -= (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);
      } else if (this.op(this.drag.currentX, '<', this.coordinates(this.maximum())) && this.state.direction === 'left') {
        this.drag.currentX += (this.settings.center && this.coordinates(0)) - this.coordinates(this._items.length);
      }
    } else {
      // pull
      minValue = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
      maxValue = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
      pull = this.settings.pullDrag ? this.drag.distance / 5 : 0;
      this.drag.currentX = Math.max(Math.min(this.drag.currentX, minValue + pull), maxValue + pull);
    }

    // Lock browser if swiping horizontal

    if ((this.drag.distance > 8 || this.drag.distance < -8)) {
      if (ev.preventDefault !== undefined) {
        ev.preventDefault();
      } else {
        ev.returnValue = false;
      }
      this.state.isSwiping = true;
    }

    this.drag.updatedX = this.drag.currentX;

    // Lock Owl if scrolling
    if ((this.drag.currentY > 16 || this.drag.currentY < -16) && this.state.isSwiping === false) {
      this.state.isScrolling = true;
      this.drag.updatedX = this.drag.start;
    }

    this.animate(this.drag.updatedX);
  };

  /**
   * Handles the touchend/mouseup events.
   * @protected
   */
  Owl.prototype.onDragEnd = function(event) {
    var compareTimes, distanceAbs, closest;

    if (!this.state.isTouch) {
      return;
    }

    if (event.type === 'mouseup') {
      this.$stage.removeClass('owl-grab');
    }

    this.trigger('dragged');

    // prevent links and images dragging;
    this.drag.targetEl.removeAttribute("draggable");

    // remove drag event listeners

    this.state.isTouch = false;
    this.state.isScrolling = false;
    this.state.isSwiping = false;

    // to check
    if (this.drag.distance === 0 && this.state.inMotion !== true) {
      this.state.inMotion = false;
      return false;
    }

    // prevent clicks while scrolling

    this.drag.endTime = new Date().getTime();
    compareTimes = this.drag.endTime - this.drag.startTime;
    distanceAbs = Math.abs(this.drag.distance);

    // to test
    if (distanceAbs > 3 || compareTimes > 300) {
      this.removeClick(this.drag.targetEl);
    }

    closest = this.closest(this.drag.updatedX);

    this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
    this.current(closest);
    this.invalidate('position');
    this.update();

    // if pullDrag is off then fire transitionEnd event manually when stick
    // to border
    if (!this.settings.pullDrag && this.drag.updatedX === this.coordinates(closest)) {
      this.transitionEnd();
    }

    this.drag.distance = 0;

    $(document).off('.owl.dragEvents');
  };

  /**
   * Attaches `preventClick` to disable link while swipping.
   * @protected
   * @param {HTMLElement} [target] - The target of the `click` event.
   */
  Owl.prototype.removeClick = function(target) {
    this.drag.targetEl = target;
    $(target).on('click.preventClick', this.e._preventClick);
    // to make sure click is removed:
    window.setTimeout(function() {
      $(target).off('click.preventClick');
    }, 300);
  };

  /**
   * Suppresses click event.
   * @protected
   * @param {Event} ev - The event arguments.
   */
  Owl.prototype.preventClick = function(ev) {
    if (ev.preventDefault) {
      ev.preventDefault();
    } else {
      ev.returnValue = false;
    }
    if (ev.stopPropagation) {
      ev.stopPropagation();
    }
    $(ev.target).off('click.preventClick');
  };

  /**
   * Catches stage position while animate (only CSS3).
   * @protected
   * @returns
   */
  Owl.prototype.getTransformProperty = function() {
    var transform, matrix3d;

    transform = window.getComputedStyle(this.$stage.get(0), null).getPropertyValue(this.vendorName + 'transform');
    // var transform = this.$stage.css(this.vendorName + 'transform')
    transform = transform.replace(/matrix(3d)?\(|\)/g, '').split(',');
    matrix3d = transform.length === 16;

    return matrix3d !== true ? transform[4] : transform[12];
  };

  /**
   * Gets absolute position of the closest item for a coordinate.
   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
   * @protected
   * @param {Number} coordinate - The coordinate in pixel.
   * @return {Number} - The absolute position of the closest item.
   */
  Owl.prototype.closest = function(coordinate) {
    var position = -1,
      pull = 30,
      width = this.width(),
      coordinates = this.coordinates();

    if (!this.settings.freeDrag) {
      // check closest item
      $.each(coordinates, $.proxy(function(index, value) {
        if (coordinate > value - pull && coordinate < value + pull) {
          position = index;
        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] || value - width)) {
          position = this.state.direction === 'left' ? index + 1 : index;
        }
        return position === -1;
      }, this));
    }

    if (!this.settings.loop) {
      // non loop boundries
      if (this.op(coordinate, '>', coordinates[this.minimum()])) {
        position = coordinate = this.minimum();
      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
        position = coordinate = this.maximum();
      }
    }

    return position;
  };

  /**
   * Animates the stage.
   * @public
   * @param {Number} coordinate - The coordinate in pixels.
   */
  Owl.prototype.animate = function(coordinate) {
    this.trigger('translate');
    this.state.inMotion = this.speed() > 0;

    if (this.support3d) {
      this.$stage.css({
        transform: 'translate3d(' + coordinate + 'px' + ',0px, 0px)',
        transition: (this.speed() / 1000) + 's'
      });
    } else if (this.state.isTouch) {
      this.$stage.css({
        left: coordinate + 'px'
      });
    } else {
      this.$stage.animate({
        left: coordinate
      }, this.speed() / 1000, this.settings.fallbackEasing, $.proxy(function() {
        if (this.state.inMotion) {
          this.transitionEnd();
        }
      }, this));
    }
  };

  /**
   * Sets the absolute position of the current item.
   * @public
   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
   * @returns {Number} - The absolute position of the current item.
   */
  Owl.prototype.current = function(position) {
    if (position === undefined) {
      return this._current;
    }

    if (this._items.length === 0) {
      return undefined;
    }

    position = this.normalize(position);

    if (this._current !== position) {
      var event = this.trigger('change', {
        property: {
          name: 'position',
          value: position
        }
      });

      if (event.data !== undefined) {
        position = this.normalize(event.data);
      }

      this._current = position;

      this.invalidate('position');

      this.trigger('changed', {
        property: {
          name: 'position',
          value: this._current
        }
      });
    }

    return this._current;
  };

  /**
   * Invalidates the given part of the update routine.
   * @param {String} part - The part to invalidate.
   */
  Owl.prototype.invalidate = function(part) {
    this._invalidated[part] = true;
  }

  /**
   * Resets the absolute position of the current item.
   * @public
   * @param {Number} position - The absolute position of the new item.
   */
  Owl.prototype.reset = function(position) {
    position = this.normalize(position);

    if (position === undefined) {
      return;
    }

    this._speed = 0;
    this._current = position;

    this.suppress(['translate', 'translated']);

    this.animate(this.coordinates(position));

    this.release(['translate', 'translated']);
  };

  /**
   * Normalizes an absolute or a relative position for an item.
   * @public
   * @param {Number} position - The absolute or relative position to normalize.
   * @param {Boolean} [relative=false] - Whether the given position is relative or not.
   * @returns {Number} - The normalized position.
   */
  Owl.prototype.normalize = function(position, relative) {
    var n = (relative ? this._items.length : this._items.length + this._clones.length);

    if (!$.isNumeric(position) || n < 1) {
      return undefined;
    }

    if (this._clones.length) {
      position = ((position % n) + n) % n;
    } else {
      position = Math.max(this.minimum(relative), Math.min(this.maximum(relative), position));
    }

    return position;
  };

  /**
   * Converts an absolute position for an item into a relative position.
   * @public
   * @param {Number} position - The absolute position to convert.
   * @returns {Number} - The converted position.
   */
  Owl.prototype.relative = function(position) {
    position = this.normalize(position);
    position = position - this._clones.length / 2;
    return this.normalize(position, true);
  };

  /**
   * Gets the maximum position for an item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */
  Owl.prototype.maximum = function(relative) {
    var maximum, width, i = 0,
      coordinate,
      settings = this.settings;

    if (relative) {
      return this._items.length - 1;
    }

    if (!settings.loop && settings.center) {
      maximum = this._items.length - 1;
    } else if (!settings.loop && !settings.center) {
      maximum = this._items.length - settings.items;
    } else if (settings.loop || settings.center) {
      maximum = this._items.length + settings.items;
    } else if (settings.autoWidth || settings.merge) {
      revert = settings.rtl ? 1 : -1;
      width = this.$stage.width() - this.$element.width();
      while (coordinate = this.coordinates(i)) {
        if (coordinate * revert >= width) {
          break;
        }
        maximum = ++i;
      }
    } else {
      throw 'Can not detect maximum absolute position.'
    }

    return maximum;
  };

  /**
   * Gets the minimum position for an item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */
  Owl.prototype.minimum = function(relative) {
    if (relative) {
      return 0;
    }

    return this._clones.length / 2;
  };

  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */
  Owl.prototype.items = function(position) {
    if (position === undefined) {
      return this._items.slice();
    }

    position = this.normalize(position, true);
    return this._items[position];
  };

  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */
  Owl.prototype.mergers = function(position) {
    if (position === undefined) {
      return this._mergers.slice();
    }

    position = this.normalize(position, true);
    return this._mergers[position];
  };

  /**
   * Gets the absolute positions of clones for an item.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
   */
  Owl.prototype.clones = function(position) {
    var odd = this._clones.length / 2,
      even = odd + this._items.length,
      map = function(index) {
        return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2
      };

    if (position === undefined) {
      return $.map(this._clones, function(v, i) {
        return map(i)
      });
    }

    return $.map(this._clones, function(v, i) {
      return v === position ? map(i) : null
    });
  };

  /**
   * Sets the current animation speed.
   * @public
   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
   * @returns {Number} - The current animation speed in milliseconds.
   */
  Owl.prototype.speed = function(speed) {
    if (speed !== undefined) {
      this._speed = speed;
    }

    return this._speed;
  };

  /**
   * Gets the coordinate of an item.
   * @todo The name of this method is missleanding.
   * @public
   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
   */
  Owl.prototype.coordinates = function(position) {
    var coordinate = null;

    if (position === undefined) {
      return $.map(this._coordinates, $.proxy(function(coordinate, index) {
        return this.coordinates(index);
      }, this));
    }

    if (this.settings.center) {
      coordinate = this._coordinates[position];
      coordinate += (this.width() - coordinate + (this._coordinates[position - 1] || 0)) / 2 * (this.settings.rtl ? -1 : 1);
    } else {
      coordinate = this._coordinates[position - 1] || 0;
    }

    return coordinate;
  };

  /**
   * Calculates the speed for a translation.
   * @protected
   * @param {Number} from - The absolute position of the start item.
   * @param {Number} to - The absolute position of the target item.
   * @param {Number} [factor=undefined] - The time factor in milliseconds.
   * @returns {Number} - The time in milliseconds for the translation.
   */
  Owl.prototype.duration = function(from, to, factor) {
    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));
  };

  /**
   * Slides to the specified item.
   * @public
   * @param {Number} position - The position of the item.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */
  Owl.prototype.to = function(position, speed) {
    if (this.settings.loop) {
      var distance = position - this.relative(this.current()),
        revert = this.current(),
        before = this.current(),
        after = this.current() + distance,
        direction = before - after < 0 ? true : false,
        items = this._clones.length + this._items.length;

      if (after < this.settings.items && direction === false) {
        revert = before + this._items.length;
        this.reset(revert);
      } else if (after >= items - this.settings.items && direction === true) {
        revert = before - this._items.length;
        this.reset(revert);
      }
      window.clearTimeout(this.e._goToLoop);
      this.e._goToLoop = window.setTimeout($.proxy(function() {
        this.speed(this.duration(this.current(), revert + distance, speed));
        this.current(revert + distance);
        this.update();
      }, this), 30);
    } else {
      this.speed(this.duration(this.current(), position, speed));
      this.current(position);
      this.update();
    }
  };

  /**
   * Slides to the next item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */
  Owl.prototype.next = function(speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) + 1, speed);
  };

  /**
   * Slides to the previous item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */
  Owl.prototype.prev = function(speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) - 1, speed);
  };

  /**
   * Handles the end of an animation.
   * @protected
   * @param {Event} event - The event arguments.
   */
  Owl.prototype.transitionEnd = function(event) {

    // if css2 animation then event object is undefined
    if (event !== undefined) {
      event.stopPropagation();

      // Catch only owl-stage transitionEnd event
      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
        return false;
      }
    }

    this.state.inMotion = false;
    this.trigger('translated');
  };

  /**
   * Gets viewport width.
   * @protected
   * @return {Number} - The width in pixel.
   */
  Owl.prototype.viewport = function() {
    var width;
    if (this.options.responsiveBaseElement !== window) {
      width = $(this.options.responsiveBaseElement).width();
    } else if (window.innerWidth) {
      width = window.innerWidth;
    } else if (document.documentElement && document.documentElement.clientWidth) {
      width = document.documentElement.clientWidth;
    } else {
      throw 'Can not detect viewport width.';
    }
    return width;
  };

  /**
   * Replaces the current content.
   * @public
   * @param {HTMLElement|jQuery|String} content - The new content.
   */
  Owl.prototype.replace = function(content) {
    this.$stage.empty();
    this._items = [];

    if (content) {
      content = (content instanceof jQuery) ? content : $(content);
    }

    if (this.settings.nestedItemSelector) {
      content = content.find('.' + this.settings.nestedItemSelector);
    }

    content.filter(function() {
      return this.nodeType === 1;
    }).each($.proxy(function(index, item) {
      item = this.prepare(item);
      this.$stage.append(item);
      this._items.push(item);
      this._mergers.push(item.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);
    }, this));

    this.reset($.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);

    this.invalidate('items');
  };

  /**
   * Adds an item.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {HTMLElement|jQuery|String} content - The item content to add.
   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
   */
  Owl.prototype.add = function(content, position) {
    position = position === undefined ? this._items.length : this.normalize(position, true);

    this.trigger('add', {
      content: content,
      position: position
    });

    if (this._items.length === 0 || position === this._items.length) {
      this.$stage.append(content);
      this._items.push(content);
      this._mergers.push(content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);
    } else {
      this._items[position].before(content);
      this._items.splice(position, 0, content);
      this._mergers.splice(position, 0, content.find('[data-merge]').andSelf('[data-merge]').attr('data-merge') * 1 || 1);
    }

    this.invalidate('items');

    this.trigger('added', {
      content: content,
      position: position
    });
  };

  /**
   * Removes an item by its position.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {Number} position - The relative position of the item to remove.
   */
  Owl.prototype.remove = function(position) {
    position = this.normalize(position, true);

    if (position === undefined) {
      return;
    }

    this.trigger('remove', {
      content: this._items[position],
      position: position
    });

    this._items[position].remove();
    this._items.splice(position, 1);
    this._mergers.splice(position, 1);

    this.invalidate('items');

    this.trigger('removed', {
      content: null,
      position: position
    });
  };

  /**
   * Adds triggerable events.
   * @protected
   */
  Owl.prototype.addTriggerableEvents = function() {
    var handler = $.proxy(function(callback, event) {
      return $.proxy(function(e) {
        if (e.relatedTarget !== this) {
          this.suppress([event]);
          callback.apply(this, [].slice.call(arguments, 1));
          this.release([event]);
        }
      }, this);
    }, this);

    $.each({
      'next': this.next,
      'prev': this.prev,
      'to': this.to,
      'destroy': this.destroy,
      'refresh': this.refresh,
      'replace': this.replace,
      'add': this.add,
      'remove': this.remove
    }, $.proxy(function(event, callback) {
      this.$element.on(event + '.owl.carousel', handler(callback, event + '.owl.carousel'));
    }, this));

  };

  /**
   * Watches the visibility of the carousel element.
   * @protected
   */
  Owl.prototype.watchVisibility = function() {

    // test on zepto
    if (!isElVisible(this.$element.get(0))) {
      this.$element.addClass('owl-hidden');
      window.clearInterval(this.e._checkVisibile);
      this.e._checkVisibile = window.setInterval($.proxy(checkVisible, this), 500);
    }

    function isElVisible(el) {
      return el.offsetWidth > 0 && el.offsetHeight > 0;
    }

    function checkVisible() {
      if (isElVisible(this.$element.get(0))) {
        this.$element.removeClass('owl-hidden');
        this.refresh();
        window.clearInterval(this.e._checkVisibile);
      }
    }
  };

  /**
   * Preloads images with auto width.
   * @protected
   * @todo Still to test
   */
  Owl.prototype.preloadAutoWidthImages = function(imgs) {
    var loaded, that, $el, img;

    loaded = 0;
    that = this;
    imgs.each(function(i, el) {
      $el = $(el);
      img = new Image();

      img.onload = function() {
        loaded++;
        $el.attr('src', img.src);
        $el.css('opacity', 1);
        if (loaded >= imgs.length) {
          that.state.imagesLoaded = true;
          that.initialize();
        }
      };

      img.src = $el.attr('src') || $el.attr('data-src') || $el.attr('data-src-retina');
    });
  };

  /**
   * Destroys the carousel.
   * @public
   */
  Owl.prototype.destroy = function() {

    if (this.$element.hasClass(this.settings.themeClass)) {
      this.$element.removeClass(this.settings.themeClass);
    }

    if (this.settings.responsive !== false) {
      $(window).off('resize.owl.carousel');
    }

    if (this.transitionEndVendor) {
      this.off(this.$stage.get(0), this.transitionEndVendor, this.e._transitionEnd);
    }

    for (var i in this._plugins) {
      this._plugins[i].destroy();
    }

    if (this.settings.mouseDrag || this.settings.touchDrag) {
      this.$stage.off('mousedown touchstart touchcancel');
      $(document).off('.owl.dragEvents');
      this.$stage.get(0).onselectstart = function() {};
      this.$stage.off('dragstart', function() {
        return false
      });
    }

    // remove event handlers in the ".owl.carousel" namespace
    this.$element.off('.owl');

    this.$stage.children('.cloned').remove();
    this.e = null;
    this.$element.removeData('owlCarousel');

    this.$stage.children().contents().unwrap();
    this.$stage.children().unwrap();
    this.$stage.unwrap();
  };

  /**
   * Operators to calculate right-to-left and left-to-right.
   * @protected
   * @param {Number} [a] - The left side operand.
   * @param {String} [o] - The operator.
   * @param {Number} [b] - The right side operand.
   */
  Owl.prototype.op = function(a, o, b) {
    var rtl = this.settings.rtl;
    switch (o) {
      case '<':
        return rtl ? a > b : a < b;
      case '>':
        return rtl ? a < b : a > b;
      case '>=':
        return rtl ? a <= b : a >= b;
      case '<=':
        return rtl ? a >= b : a <= b;
      default:
        break;
    }
  };

  /**
   * Attaches to an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The event handler to attach.
   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
   */
  Owl.prototype.on = function(element, event, listener, capture) {
    if (element.addEventListener) {
      element.addEventListener(event, listener, capture);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, listener);
    }
  };

  /**
   * Detaches from an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The attached event handler to detach.
   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
   */
  Owl.prototype.off = function(element, event, listener, capture) {
    if (element.removeEventListener) {
      element.removeEventListener(event, listener, capture);
    } else if (element.detachEvent) {
      element.detachEvent('on' + event, listener);
    }
  };

  /**
   * Triggers an public event.
   * @protected
   * @param {String} name - The event name.
   * @param {*} [data=null] - The event data.
   * @param {String} [namespace=.owl.carousel] - The event namespace.
   * @returns {Event} - The event arguments.
   */
  Owl.prototype.trigger = function(name, data, namespace) {
    var status = {
        item: {
          count: this._items.length,
          index: this.current()
        }
      },
      handler = $.camelCase(
        $.grep(['on', name, namespace], function(v) {
          return v
        })
        .join('-').toLowerCase()
      ),
      event = $.Event(
        [name, 'owl', namespace || 'carousel'].join('.').toLowerCase(),
        $.extend({
          relatedTarget: this
        }, status, data)
      );

    if (!this._supress[name]) {
      $.each(this._plugins, function(name, plugin) {
        if (plugin.onTrigger) {
          plugin.onTrigger(event);
        }
      });

      this.$element.trigger(event);

      if (this.settings && typeof this.settings[handler] === 'function') {
        this.settings[handler].apply(this, event);
      }
    }

    return event;
  };

  /**
   * Suppresses events.
   * @protected
   * @param {Array.<String>} events - The events to suppress.
   */
  Owl.prototype.suppress = function(events) {
    $.each(events, $.proxy(function(index, event) {
      this._supress[event] = true;
    }, this));
  }

  /**
   * Releases suppressed events.
   * @protected
   * @param {Array.<String>} events - The events to release.
   */
  Owl.prototype.release = function(events) {
    $.each(events, $.proxy(function(index, event) {
      delete this._supress[event];
    }, this));
  }

  /**
   * Checks the availability of some browser features.
   * @protected
   */
  Owl.prototype.browserSupport = function() {
    this.support3d = isPerspective();

    if (this.support3d) {
      this.transformVendor = isTransform();

      // take transitionend event name by detecting transition
      var endVendors = ['transitionend', 'webkitTransitionEnd', 'transitionend', 'oTransitionEnd'];
      this.transitionEndVendor = endVendors[isTransition()];

      // take vendor name from transform name
      this.vendorName = this.transformVendor.replace(/Transform/i, '');
      this.vendorName = this.vendorName !== '' ? '-' + this.vendorName.toLowerCase() + '-' : '';
    }

    this.state.orientation = window.orientation;
  };

  /**
   * Get touch/drag coordinats.
   * @private
   * @param {event} - mousedown/touchstart event
   * @returns {object} - Contains X and Y of current mouse/touch position
   */

  function getTouches(event) {
    if (event.touches !== undefined) {
      return {
        x: event.touches[0].pageX,
        y: event.touches[0].pageY
      };
    }

    if (event.touches === undefined) {
      if (event.pageX !== undefined) {
        return {
          x: event.pageX,
          y: event.pageY
        };
      }

      if (event.pageX === undefined) {
        return {
          x: event.clientX,
          y: event.clientY
        };
      }
    }
  }

  /**
   * Checks for CSS support.
   * @private
   * @param {Array} array - The CSS properties to check for.
   * @returns {Array} - Contains the supported CSS property name and its index or `false`.
   */
  function isStyleSupported(array) {
    var p, s, fake = document.createElement('div'),
      list = array;
    for (p in list) {
      s = list[p];
      if (typeof fake.style[s] !== 'undefined') {
        fake = null;
        return [s, p];
      }
    }
    return [false];
  }

  /**
   * Checks for CSS transition support.
   * @private
   * @todo Realy bad design
   * @returns {Number}
   */
  function isTransition() {
    return isStyleSupported(['transition', 'WebkitTransition', 'MozTransition', 'OTransition'])[1];
  }

  /**
   * Checks for CSS transform support.
   * @private
   * @returns {String} The supported property name or false.
   */
  function isTransform() {
    return isStyleSupported(['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform'])[0];
  }

  /**
   * Checks for CSS perspective support.
   * @private
   * @returns {String} The supported property name or false.
   */
  function isPerspective() {
    return isStyleSupported(['perspective', 'webkitPerspective', 'MozPerspective', 'OPerspective', 'MsPerspective'])[0];
  }

  /**
   * Checks wether touch is supported or not.
   * @private
   * @returns {Boolean}
   */
  function isTouchSupport() {
    return 'ontouchstart' in window || !!(navigator.msMaxTouchPoints);
  }

  /**
   * Checks wether touch is supported or not for IE.
   * @private
   * @returns {Boolean}
   */
  function isTouchSupportIE() {
    return window.navigator.msPointerEnabled;
  }

  /**
   * The jQuery Plugin for the Owl Carousel
   * @public
   */
  $.fn.owlCarousel = function(options) {
    return this.each(function() {
      if (!$(this).data('owlCarousel')) {
        $(this).data('owlCarousel', new Owl(this, options));
      }
    });
  };

  /**
   * The constructor for the jQuery Plugin
   * @public
   */
  $.fn.owlCarousel.Constructor = Owl;

})(window.Zepto || window.jQuery, window, document);


/**
 * Video Plugin
 * @version 2.0.0
 * @author Bartosz Wojciechowski
 * @license The MIT License (MIT)
 */
;
(function($, window, document, undefined) {

  /**
   * Creates the video plugin.
   * @class The Video Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Video = function(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;

    /**
     * Cache all video URLs.
     * @protected
     * @type {Object}
     */
    this._videos = {};

    /**
     * Current playing item.
     * @protected
     * @type {jQuery}
     */
    this._playing = null;

    /**
     * Whether this is in fullscreen or not.
     * @protected
     * @type {Boolean}
     */
    this._fullscreen = false;

    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */
    this._handlers = {
      'resize.owl.carousel': $.proxy(function(e) {
        if (this._core.settings.video && !this.isInFullScreen()) {
          e.preventDefault();
        }
      }, this),
      'refresh.owl.carousel changed.owl.carousel': $.proxy(function(e) {
        if (this._playing) {
          this.stop();
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function(e) {
        var $element = $(e.content).find('.owl-video');
        if ($element.length) {
          $element.css('display', 'none');
          this.fetch($element, $(e.content));
        }
      }, this)
    };

    // set default options
    this._core.options = $.extend({}, Video.Defaults, this._core.options);

    // register event handlers
    this._core.$element.on(this._handlers);

    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {
      this.play(e);
    }, this));
  };

  /**
   * Default options.
   * @public
   */
  Video.Defaults = {
    video: false,
    videoHeight: false,
    videoWidth: false
  };

  /**
   * Gets the video ID and the type (YouTube/Vimeo only).
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {jQuery} item - The item containing the video.
   */
  Video.prototype.fetch = function(target, item) {

    var type = target.attr('data-vimeo-id') ? 'vimeo' : 'youtube',
      id = target.attr('data-vimeo-id') || target.attr('data-youtube-id'),
      width = target.attr('data-width') || this._core.settings.videoWidth,
      height = target.attr('data-height') || this._core.settings.videoHeight,
      url = target.attr('href');

    if (url) {
      id = url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

      if (id[3].indexOf('youtu') > -1) {
        type = 'youtube';
      } else if (id[3].indexOf('vimeo') > -1) {
        type = 'vimeo';
      } else {
        throw new Error('Video URL not supported.');
      }
      id = id[6];
    } else {
      throw new Error('Missing video URL.');
    }

    this._videos[url] = {
      type: type,
      id: id,
      width: width,
      height: height
    };

    item.attr('data-video', url);

    this.thumbnail(target, this._videos[url]);
  };

  /**
   * Creates video thumbnail.
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {Object} info - The video info object.
   * @see `fetch`
   */
  Video.prototype.thumbnail = function(target, video) {

    var tnLink,
      icon,
      path,
      dimensions = video.width && video.height ? 'style="width:' + video.width + 'px;height:' + video.height + 'px;"' : '',
      customTn = target.find('img'),
      srcType = 'src',
      lazyClass = '',
      settings = this._core.settings,
      create = function(path) {
        icon = '<div class="owl-video-play-icon"></div>';

        if (settings.lazyLoad) {
          tnLink = '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + path + '"></div>';
        } else {
          tnLink = '<div class="owl-video-tn" style="opacity:1;background-image:url(' + path + ')"></div>';
        }
        target.after(tnLink);
        target.after(icon);
      };

    // wrap video content into owl-video-wrapper div
    target.wrap('<div class="owl-video-wrapper"' + dimensions + '></div>');

    if (this._core.settings.lazyLoad) {
      srcType = 'data-src';
      lazyClass = 'owl-lazy';
    }

    // custom thumbnail
    if (customTn.length) {
      create(customTn.attr(srcType));
      customTn.remove();
      return false;
    }

    if (video.type === 'youtube') {
      path = "http://img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
      create(path);
    } else if (video.type === 'vimeo') {
      $.ajax({
        type: 'GET',
        url: 'http://vimeo.com/api/v2/video/' + video.id + '.json',
        jsonp: 'callback',
        dataType: 'jsonp',
        success: function(data) {
          path = data[0].thumbnail_large;
          create(path);
        }
      });
    }
  };

  /**
   * Stops the current video.
   * @public
   */
  Video.prototype.stop = function() {
    this._core.trigger('stop', null, 'video');
    this._playing.find('.owl-video-frame').remove();
    this._playing.removeClass('owl-video-playing');
    this._playing = null;
  };

  /**
   * Starts the current video.
   * @public
   * @param {Event} ev - The event arguments.
   */
  Video.prototype.play = function(ev) {
    this._core.trigger('play', null, 'video');

    if (this._playing) {
      this.stop();
    }

    var target = $(ev.target || ev.srcElement),
      item = target.closest('.' + this._core.settings.itemClass),
      video = this._videos[item.attr('data-video')],
      width = video.width || '100%',
      height = video.height || this._core.$stage.height(),
      html, wrap;

    if (video.type === 'youtube') {
      html = '<iframe width="' + width + '" height="' + height + '" src="http://www.youtube.com/embed/' + video.id + '?autoplay=1&v=' + video.id + '" frameborder="0" allowfullscreen></iframe>';
    } else if (video.type === 'vimeo') {
      html = '<iframe src="http://player.vimeo.com/video/' + video.id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
    }

    item.addClass('owl-video-playing');
    this._playing = item;

    wrap = $('<div style="height:' + height + 'px; width:' + width + 'px" class="owl-video-frame">' + html + '</div>');
    target.after(wrap);
  };

  /**
   * Checks whether an video is currently in full screen mode or not.
   * @todo Bad style because looks like a readonly method but changes members.
   * @protected
   * @returns {Boolean}
   */
  Video.prototype.isInFullScreen = function() {

    // if Vimeo Fullscreen mode
    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;

    if (element && $(element).parent().hasClass('owl-video-frame')) {
      this._core.speed(0);
      this._fullscreen = true;
    }

    if (element && this._fullscreen && this._playing) {
      return false;
    }

    // comming back from fullscreen
    if (this._fullscreen) {
      this._fullscreen = false;
      return false;
    }

    // check full screen mode and window orientation
    if (this._playing) {
      if (this._core.state.orientation !== window.orientation) {
        this._core.state.orientation = window.orientation;
        return false;
      }
    }

    return true;
  };

  /**
   * Destroys the plugin.
   */
  Video.prototype.destroy = function() {
    var handler, property;

    this._core.$element.off('click.owl.video');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }
    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Video = Video;

})(window.Zepto || window.jQuery, window, document);

/**
 * Animate Plugin
 * @version 2.0.0
 * @author Bartosz Wojciechowski
 * @license The MIT License (MIT)
 */
;
(function($, window, document, undefined) {

  /**
   * Creates the animate plugin.
   * @class The Navigation Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Animate = function(scope) {
    this.core = scope;
    this.core.options = $.extend({}, Animate.Defaults, this.core.options);
    this.swapping = true;
    this.previous = undefined;
    this.next = undefined;

    this.handlers = {
      'change.owl.carousel': $.proxy(function(e) {
        if (e.property.name == 'position') {
          this.previous = this.core.current();
          this.next = e.property.value;
        }
      }, this),
      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {
        this.swapping = e.type == 'translated';
      }, this),
      'translate.owl.carousel': $.proxy(function(e) {
        if (this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
          this.swap();
        }
      }, this)
    };

    this.core.$element.on(this.handlers);
  };

  /**
   * Default options.
   * @public
   */
  Animate.Defaults = {
    animateOut: false,
    animateIn: false
  };

  /**
   * Toggles the animation classes whenever an translations starts.
   * @protected
   * @returns {Boolean|undefined}
   */
  Animate.prototype.swap = function() {

    if (this.core.settings.items !== 1 || !this.core.support3d) {
      return;
    }

    this.core.speed(0);

    var left,
      clear = $.proxy(this.clear, this),
      previous = this.core.$stage.children().eq(this.previous),
      next = this.core.$stage.children().eq(this.next),
      incoming = this.core.settings.animateIn,
      outgoing = this.core.settings.animateOut;

    if (this.core.current() === this.previous) {
      return;
    }

    if (outgoing) {
      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
      previous.css({
          'left': left + 'px'
        })
        .addClass('animated owl-animated-out')
        .addClass(outgoing)
        .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);
    }

    if (incoming) {
      next.addClass('animated owl-animated-in')
        .addClass(incoming)
        .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', clear);
    }
  };

  Animate.prototype.clear = function(e) {
    $(e.target).css({
        'left': ''
      })
      .removeClass('animated owl-animated-out owl-animated-in')
      .removeClass(this.core.settings.animateIn)
      .removeClass(this.core.settings.animateOut);
    this.core.transitionEnd();
  }

  /**
   * Destroys the plugin.
   * @public
   */
  Animate.prototype.destroy = function() {
    var handler, property;

    for (handler in this.handlers) {
      this.core.$element.off(handler, this.handlers[handler]);
    }
    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;

})(window.Zepto || window.jQuery, window, document);

/**
 * Autoplay Plugin
 * @version 2.0.0
 * @author Bartosz Wojciechowski
 * @license The MIT License (MIT)
 */
;
(function($, window, document, undefined) {

  /**
   * Creates the autoplay plugin.
   * @class The Autoplay Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Autoplay = function(scope) {
    this.core = scope;
    this.core.options = $.extend({}, Autoplay.Defaults, this.core.options);

    this.handlers = {
      'translated.owl.carousel refreshed.owl.carousel': $.proxy(function() {
        this.autoplay();
      }, this),
      'play.owl.autoplay': $.proxy(function(e, t, s) {
        this.play(t, s);
      }, this),
      'stop.owl.autoplay': $.proxy(function() {
        this.stop();
      }, this),
      'mouseover.owl.autoplay': $.proxy(function() {
        if (this.core.settings.autoplayHoverPause) {
          this.pause();
        }
      }, this),
      'mouseleave.owl.autoplay': $.proxy(function() {
        if (this.core.settings.autoplayHoverPause) {
          this.autoplay();
        }
      }, this)
    };

    this.core.$element.on(this.handlers);
  };

  /**
   * Default options.
   * @public
   */
  Autoplay.Defaults = {
    autoplay: false,
    autoplayTimeout: 5000,
    autoplayHoverPause: false,
    autoplaySpeed: false
  };

  /**
   * @protected
   * @todo Must be documented.
   */
  Autoplay.prototype.autoplay = function() {
    if (this.core.settings.autoplay && !this.core.state.videoPlay) {
      window.clearInterval(this.interval);

      this.interval = window.setInterval($.proxy(function() {
        this.play();
      }, this), this.core.settings.autoplayTimeout);
    } else {
      window.clearInterval(this.interval);
    }
  };

  /**
   * Starts the autoplay.
   * @public
   * @param {Number} [timeout] - ...
   * @param {Number} [speed] - ...
   * @returns {Boolean|undefined} - ...
   * @todo Must be documented.
   */
  Autoplay.prototype.play = function(timeout, speed) {
    // if tab is inactive - doesnt work in <IE10
    if (document.hidden === true) {
      return;
    }

    if (this.core.state.isTouch || this.core.state.isScrolling || this.core.state.isSwiping || this.core.state.inMotion) {
      return;
    }

    if (this.core.settings.autoplay === false) {
      window.clearInterval(this.interval);
      return;
    }

    this.core.next(this.core.settings.autoplaySpeed);
  };

  /**
   * Stops the autoplay.
   * @public
   */
  Autoplay.prototype.stop = function() {
    window.clearInterval(this.interval);
  };

  /**
   * Pauses the autoplay.
   * @public
   */
  Autoplay.prototype.pause = function() {
    window.clearInterval(this.interval);
  };

  /**
   * Destroys the plugin.
   */
  Autoplay.prototype.destroy = function() {
    var handler, property;

    window.clearInterval(this.interval);

    for (handler in this.handlers) {
      this.core.$element.off(handler, this.handlers[handler]);
    }
    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;

})(window.Zepto || window.jQuery, window, document);

/**
 * Navigation Plugin
 * @version 2.0.0
 * @author Artus Kolanowski
 * @license The MIT License (MIT)
 */
;
(function($, window, document, undefined) {
  'use strict';

  /**
   * Creates the navigation plugin.
   * @class The Navigation Plugin
   * @param {Owl} carousel - The Owl Carousel.
   */
  var Navigation = function(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;

    /**
     * Indicates whether the plugin is initialized or not.
     * @protected
     * @type {Boolean}
     */
    this._initialized = false;

    /**
     * The current paging indexes.
     * @protected
     * @type {Array}
     */
    this._pages = [];

    /**
     * All DOM elements of the user interface.
     * @protected
     * @type {Object}
     */
    this._controls = {};

    /**
     * Markup for an indicator.
     * @protected
     * @type {Array.<String>}
     */
    this._templates = [];

    /**
     * The carousel element.
     * @type {jQuery}
     */
    this.$element = this._core.$element;

    /**
     * Overridden methods of the carousel.
     * @protected
     * @type {Object}
     */
    this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    };

    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */
    this._handlers = {
      'prepared.owl.carousel': $.proxy(function(e) {
        if (this._core.settings.dotsData) {
          this._templates.push($(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));
        }
      }, this),
      'add.owl.carousel': $.proxy(function(e) {
        if (this._core.settings.dotsData) {
          this._templates.splice(e.position, 0, $(e.content).find('[data-dot]').andSelf('[data-dot]').attr('data-dot'));
        }
      }, this),
      'remove.owl.carousel prepared.owl.carousel': $.proxy(function(e) {
        if (this._core.settings.dotsData) {
          this._templates.splice(e.position, 1);
        }
      }, this),
      'change.owl.carousel': $.proxy(function(e) {
        if (e.property.name == 'position') {
          if (!this._core.state.revert && !this._core.settings.loop && this._core.settings.navRewind) {
            var current = this._core.current(),
              maximum = this._core.maximum(),
              minimum = this._core.minimum();
            e.data = e.property.value > maximum ? current >= maximum ? minimum : maximum : e.property.value < minimum ? maximum : e.property.value;
          }
        }
      }, this),
      'changed.owl.carousel': $.proxy(function(e) {
        if (e.property.name == 'position') {
          this.draw();
        }
      }, this),
      'refreshed.owl.carousel': $.proxy(function() {
        if (!this._initialized) {
          this.initialize();
          this._initialized = true;
        }
        this._core.trigger('refresh', null, 'navigation');
        this.update();
        this.draw();
        this._core.trigger('refreshed', null, 'navigation');
      }, this)
    };

    // set default options
    this._core.options = $.extend({}, Navigation.Defaults, this._core.options);

    // register event handlers
    this.$element.on(this._handlers);
  }

  /**
   * Default options.
   * @public
   * @todo Rename `slideBy` to `navBy`
   */
  Navigation.Defaults = {
    nav: false,
    navRewind: true,
    navText: ['', ''],
    navSpeed: false,
    navElement: 'div',
    navContainer: false,
    navContainerClass: 'owl-nav',
    navClass: ['owl-prev', 'owl-next'],
    slideBy: 1,
    dotClass: 'owl-dot',
    dotsClass: 'owl-dots',
    dots: true,
    dotsEach: false,
    dotData: false,
    dotsSpeed: false,
    dotsContainer: false,
    controlsClass: 'owl-controls'
  }

  /**
   * Initializes the layout of the plugin and extends the carousel.
   * @protected
   */
  Navigation.prototype.initialize = function() {
    var $container, override,
      options = this._core.settings;

    // create the indicator template
    if (!options.dotsData) {
      this._templates = [$('<div>')
        .addClass(options.dotClass)
        .append($('<span>'))
        .prop('outerHTML')
      ];
    }

    // create controls container if needed
    if (!options.navContainer || !options.dotsContainer) {
      this._controls.$container = $('<div>')
        .addClass(options.controlsClass)
        .appendTo(this.$element);
    }

    // create DOM structure for absolute navigation
    this._controls.$indicators = options.dotsContainer ? $(options.dotsContainer) : $('<div>').hide().addClass(options.dotsClass).appendTo(this._controls.$container);

    this._controls.$indicators.on('click', 'div', $.proxy(function(e) {
      var index = $(e.target).parent().is(this._controls.$indicators) ? $(e.target).index() : $(e.target).parent().index();

      e.preventDefault();

      this.to(index, options.dotsSpeed);
    }, this));

    // create DOM structure for relative navigation
    $container = options.navContainer ? $(options.navContainer) : $('<div>').addClass(options.navContainerClass).prependTo(this._controls.$container);

    this._controls.$next = $('<' + options.navElement + '>');
    this._controls.$previous = this._controls.$next.clone();

    this._controls.$previous
      .addClass(options.navClass[0])
      .html(options.navText[0])
      .hide()
      .prependTo($container)
      .on('click', $.proxy(function(e) {
        this.prev(options.navSpeed);
      }, this));
    this._controls.$next
      .addClass(options.navClass[1])
      .html(options.navText[1])
      .hide()
      .appendTo($container)
      .on('click', $.proxy(function(e) {
        this.next(options.navSpeed);
      }, this));

    // override public methods of the carousel
    for (override in this._overrides) {
      this._core[override] = $.proxy(this[override], this);
    }
  }

  /**
   * Destroys the plugin.
   * @protected
   */
  Navigation.prototype.destroy = function() {
    var handler, control, property, override;

    for (handler in this._handlers) {
      this.$element.off(handler, this._handlers[handler]);
    }
    for (control in this._controls) {
      this._controls[control].remove();
    }
    for (override in this.overides) {
      this._core[override] = this._overrides[override];
    }
    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  }

  /**
   * Updates the internal state.
   * @protected
   */
  Navigation.prototype.update = function() {
    var i, j, k,
      options = this._core.settings,
      lower = this._core.clones().length / 2,
      upper = lower + this._core.items().length,
      size = options.center || options.autoWidth || options.dotData ? 1 : options.dotsEach || options.items;

    if (options.slideBy !== 'page') {
      options.slideBy = Math.min(options.slideBy, options.items);
    }

    if (options.dots || options.slideBy == 'page') {
      this._pages = [];

      for (i = lower, j = 0, k = 0; i < upper; i++) {
        if (j >= size || j === 0) {
          this._pages.push({
            start: i - lower,
            end: i - lower + size - 1
          });
          j = 0, ++k;
        }
        j += this._core.mergers(this._core.relative(i));
      }
    }
  }

  /**
   * Draws the user interface.
   * @todo The option `dotData` wont work.
   * @protected
   */
  Navigation.prototype.draw = function() {
    var difference, i, html = '',
      options = this._core.settings,
      $items = this._core.$stage.children(),
      index = this._core.relative(this._core.current());

    if (options.nav && !options.loop && !options.navRewind) {
      this._controls.$previous.toggleClass('disabled', index <= 0);
      this._controls.$next.toggleClass('disabled', index >= this._core.maximum());
    }

    this._controls.$previous.toggle(options.nav);
    this._controls.$next.toggle(options.nav);

    if (options.dots) {
      difference = this._pages.length - this._controls.$indicators.children().length;

      if (options.dotData && difference !== 0) {
        for (i = 0; i < this._controls.$indicators.children().length; i++) {
          html += this._templates[this._core.relative(i)];
        }
        this._controls.$indicators.html(html);
      } else if (difference > 0) {
        html = new Array(difference + 1).join(this._templates[0]);
        this._controls.$indicators.append(html);
      } else if (difference < 0) {
        this._controls.$indicators.children().slice(difference).remove();
      }

      this._controls.$indicators.find('.active').removeClass('active');
      this._controls.$indicators.children().eq($.inArray(this.current(), this._pages)).addClass('active');
    }

    this._controls.$indicators.toggle(options.dots);
  }

  /**
   * Extends event data.
   * @protected
   * @param {Event} event - The event object which gets thrown.
   */
  Navigation.prototype.onTrigger = function(event) {
    var settings = this._core.settings;

    event.page = {
      index: $.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: settings && (settings.center || settings.autoWidth || settings.dotData ? 1 : settings.dotsEach || settings.items)
    };
  }

  /**
   * Gets the current page position of the carousel.
   * @protected
   * @returns {Number}
   */
  Navigation.prototype.current = function() {
    var index = this._core.relative(this._core.current());
    return $.grep(this._pages, function(o) {
      return o.start <= index && o.end >= index;
    }).pop();
  }

  /**
   * Gets the current succesor/predecessor position.
   * @protected
   * @returns {Number}
   */
  Navigation.prototype.getPosition = function(successor) {
    var position, length,
      options = this._core.settings;

    if (options.slideBy == 'page') {
      position = $.inArray(this.current(), this._pages);
      length = this._pages.length;
      successor ? ++position : --position;
      position = this._pages[((position % length) + length) % length].start;
    } else {
      position = this._core.relative(this._core.current());
      length = this._core.items().length;
      successor ? position += options.slideBy : position -= options.slideBy;
    }
    return position;
  }

  /**
   * Slides to the next item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */
  Navigation.prototype.next = function(speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
  }

  /**
   * Slides to the previous item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */
  Navigation.prototype.prev = function(speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
  }

  /**
   * Slides to the specified item or page.
   * @public
   * @param {Number} position - The position of the item or page.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
   */
  Navigation.prototype.to = function(position, speed, standard) {
    var length;

    if (!standard) {
      length = this._pages.length;
      $.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);
    } else {
      $.proxy(this._overrides.to, this._core)(position, speed);
    }
  }

  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;

})(window.Zepto || window.jQuery, window, document);

/**
 * Hash Plugin
 * @version 2.0.0
 * @author Artus Kolanowski
 * @license The MIT License (MIT)
 */
;
(function($, window, document, undefined) {
  'use strict';

  /**
   * Creates the hash plugin.
   * @class The Hash Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Hash = function(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;

    /**
     * Hash table for the hashes.
     * @protected
     * @type {Object}
     */
    this._hashes = {};

    /**
     * The carousel element.
     * @type {jQuery}
     */
    this.$element = this._core.$element;

    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */
    this._handlers = {
      'initialized.owl.carousel': $.proxy(function() {
        if (this._core.settings.startPosition == 'URLHash') {
          $(window).trigger('hashchange.owl.navigation');
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function(e) {
        var hash = $(e.content).find('[data-hash]').andSelf('[data-hash]').attr('data-hash');
        this._hashes[hash] = e.content;
      }, this)
    };

    // set default options
    this._core.options = $.extend({}, Hash.Defaults, this._core.options);

    // register the event handlers
    this.$element.on(this._handlers);

    // register event listener for hash navigation
    $(window).on('hashchange.owl.navigation', $.proxy(function() {
      var hash = window.location.hash.substring(1),
        items = this._core.$stage.children(),
        position = this._hashes[hash] && items.index(this._hashes[hash]) || 0;

      if (!hash) {
        return false;
      }

      this._core.to(position, false, true);
    }, this));
  }

  /**
   * Default options.
   * @public
   */
  Hash.Defaults = {
    URLhashListener: false
  }

  /**
   * Destroys the plugin.
   * @public
   */
  Hash.prototype.destroy = function() {
    var handler, property;

    $(window).off('hashchange.owl.navigation');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }
    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  }

  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;

})(window.Zepto || window.jQuery, window, document);

//--------------------------------------------------------------------------------------------



/* scrollbar */
/* == jquery mousewheel plugin == Version: 3.1.13, License: MIT License (MIT) */
! function(a) {
  "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery)
}(function(a) {
  function b(b) {
    var g = b || window.event,
      h = i.call(arguments, 1),
      j = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
      if (1 === g.deltaMode) {
        var q = a.data(this, "mousewheel-line-height");
        j *= q, m *= q, l *= q
      } else if (2 === g.deltaMode) {
        var r = a.data(this, "mousewheel-page-height");
        j *= r, m *= r, l *= r
      }
      if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {
        var s = this.getBoundingClientRect();
        o = b.clientX - s.left, p = b.clientY - s.top
      }
      return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h)
    }
  }

  function c() {
    f = null
  }

  function d(a, b) {
    return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0
  }
  var e, f, g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
    h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
    i = Array.prototype.slice;
  if (a.event.fixHooks)
    for (var j = g.length; j;) a.event.fixHooks[g[--j]] = a.event.mouseHooks;
  var k = a.event.special.mousewheel = {
    version: "3.1.12",
    setup: function() {
      if (this.addEventListener)
        for (var c = h.length; c;) this.addEventListener(h[--c], b, !1);
      else this.onmousewheel = b;
      a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this))
    },
    teardown: function() {
      if (this.removeEventListener)
        for (var c = h.length; c;) this.removeEventListener(h[--c], b, !1);
      else this.onmousewheel = null;
      a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height")
    },
    getLineHeight: function(b) {
      var c = a(b),
        d = c["offsetParent" in a.fn ? "offsetParent" : "parent"]();
      return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16
    },
    getPageHeight: function(b) {
      return a(b).height()
    },
    settings: {
      adjustOldDeltas: !0,
      normalizeOffset: !0
    }
  };
  a.fn.extend({
    mousewheel: function(a) {
      return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
    },
    unmousewheel: function(a) {
      return this.unbind("mousewheel", a)
    }
  })
});
! function(a) {
  "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a : a(jQuery)
}(function(a) {
  function b(b) {
    var g = b || window.event,
      h = i.call(arguments, 1),
      j = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
      if (1 === g.deltaMode) {
        var q = a.data(this, "mousewheel-line-height");
        j *= q, m *= q, l *= q
      } else if (2 === g.deltaMode) {
        var r = a.data(this, "mousewheel-page-height");
        j *= r, m *= r, l *= r
      }
      if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), k.settings.normalizeOffset && this.getBoundingClientRect) {
        var s = this.getBoundingClientRect();
        o = b.clientX - s.left, p = b.clientY - s.top
      }
      return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), (a.event.dispatch || a.event.handle).apply(this, h)
    }
  }

  function c() {
    f = null
  }

  function d(a, b) {
    return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0
  }
  var e, f, g = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
    h = "onwheel" in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
    i = Array.prototype.slice;
  if (a.event.fixHooks)
    for (var j = g.length; j;) a.event.fixHooks[g[--j]] = a.event.mouseHooks;
  var k = a.event.special.mousewheel = {
    version: "3.1.12",
    setup: function() {
      if (this.addEventListener)
        for (var c = h.length; c;) this.addEventListener(h[--c], b, !1);
      else this.onmousewheel = b;
      a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this))
    },
    teardown: function() {
      if (this.removeEventListener)
        for (var c = h.length; c;) this.removeEventListener(h[--c], b, !1);
      else this.onmousewheel = null;
      a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height")
    },
    getLineHeight: function(b) {
      var c = a(b),
        d = c["offsetParent" in a.fn ? "offsetParent" : "parent"]();
      return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16
    },
    getPageHeight: function(b) {
      return a(b).height()
    },
    settings: {
      adjustOldDeltas: !0,
      normalizeOffset: !0
    }
  };
  a.fn.extend({
    mousewheel: function(a) {
      return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
    },
    unmousewheel: function(a) {
      return this.unbind("mousewheel", a)
    }
  })
});
/* == malihu jquery custom scrollbar plugin == Version: 3.1.3, License: MIT License (MIT) */
! function(e) {
  "undefined" != typeof module && module.exports ? module.exports = e : e(jQuery, window, document)
}(function(e) {
  ! function(t) {
    var o = "function" == typeof define && define.amd,
      a = "undefined" != typeof module && module.exports,
      n = "https:" == document.location.protocol ? "https:" : "http:",
      i = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
    o || (a ? require("jquery-mousewheel")(e) : e.event.special.mousewheel || e("head").append(decodeURI("%3Cscript src=" + n + "//" + i + "%3E%3C/script%3E"))), t()
  }(function() {
    var t, o = "mCustomScrollbar",
      a = "mCS",
      n = ".mCustomScrollbar",
      i = {
        setTop: 0,
        setLeft: 0,
        axis: "y",
        scrollbarPosition: "inside",
        scrollInertia: 950,
        autoDraggerLength: !0,
        alwaysShowScrollbar: 0,
        snapOffset: 0,
        mouseWheel: {
          enable: !0,
          scrollAmount: "auto",
          axis: "y",
          deltaFactor: "auto",
          disableOver: ["select", "option", "keygen", "datalist", "textarea"]
        },
        scrollButtons: {
          scrollType: "stepless",
          scrollAmount: "auto"
        },
        keyboard: {
          enable: !0,
          scrollType: "stepless",
          scrollAmount: "auto"
        },
        contentTouchScroll: 25,
        documentTouchScroll: !0,
        advanced: {
          autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
          updateOnContentResize: !0,
          updateOnImageLoad: "auto",
          autoUpdateTimeout: 60
        },
        theme: "light",
        callbacks: {
          onTotalScrollOffset: 0,
          onTotalScrollBackOffset: 0,
          alwaysTriggerOffsets: !0
        }
      },
      r = 0,
      l = {},
      s = window.attachEvent && !window.addEventListener ? 1 : 0,
      c = !1,
      d = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"],
      u = {
        init: function(t) {
          var t = e.extend(!0, {}, i, t),
            o = f.call(this);
          if (t.live) {
            var s = t.liveSelector || this.selector || n,
              c = e(s);
            if ("off" === t.live) return void m(s);
            l[s] = setTimeout(function() {
              c.mCustomScrollbar(t), "once" === t.live && c.length && m(s)
            }, 500)
          } else m(s);
          return t.setWidth = t.set_width ? t.set_width : t.setWidth, t.setHeight = t.set_height ? t.set_height : t.setHeight, t.axis = t.horizontalScroll ? "x" : p(t.axis), t.scrollInertia = t.scrollInertia > 0 && t.scrollInertia < 17 ? 17 : t.scrollInertia, "object" != typeof t.mouseWheel && 1 == t.mouseWheel && (t.mouseWheel = {
            enable: !0,
            scrollAmount: "auto",
            axis: "y",
            preventDefault: !1,
            deltaFactor: "auto",
            normalizeDelta: !1,
            invert: !1
          }), t.mouseWheel.scrollAmount = t.mouseWheelPixels ? t.mouseWheelPixels : t.mouseWheel.scrollAmount, t.mouseWheel.normalizeDelta = t.advanced.normalizeMouseWheelDelta ? t.advanced.normalizeMouseWheelDelta : t.mouseWheel.normalizeDelta, t.scrollButtons.scrollType = g(t.scrollButtons.scrollType), h(t), e(o).each(function() {
            var o = e(this);
            if (!o.data(a)) {
              o.data(a, {
                idx: ++r,
                opt: t,
                scrollRatio: {
                  y: null,
                  x: null
                },
                overflowed: null,
                contentReset: {
                  y: null,
                  x: null
                },
                bindEvents: !1,
                tweenRunning: !1,
                sequential: {},
                langDir: o.css("direction"),
                cbOffsets: null,
                trigger: null,
                poll: {
                  size: {
                    o: 0,
                    n: 0
                  },
                  img: {
                    o: 0,
                    n: 0
                  },
                  change: {
                    o: 0,
                    n: 0
                  }
                }
              });
              var n = o.data(a),
                i = n.opt,
                l = o.data("mcs-axis"),
                s = o.data("mcs-scrollbar-position"),
                c = o.data("mcs-theme");
              l && (i.axis = l), s && (i.scrollbarPosition = s), c && (i.theme = c, h(i)), v.call(this), n && i.callbacks.onCreate && "function" == typeof i.callbacks.onCreate && i.callbacks.onCreate.call(this), e("#mCSB_" + n.idx + "_container img:not(." + d[2] + ")").addClass(d[2]), u.update.call(null, o)
            }
          })
        },
        update: function(t, o) {
          var n = t || f.call(this);
          return e(n).each(function() {
            var t = e(this);
            if (t.data(a)) {
              var n = t.data(a),
                i = n.opt,
                r = e("#mCSB_" + n.idx + "_container"),
                l = e("#mCSB_" + n.idx),
                s = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")];
              if (!r.length) return;
              n.tweenRunning && N(t), o && n && i.callbacks.onBeforeUpdate && "function" == typeof i.callbacks.onBeforeUpdate && i.callbacks.onBeforeUpdate.call(this), t.hasClass(d[3]) && t.removeClass(d[3]), t.hasClass(d[4]) && t.removeClass(d[4]), l.css("max-height", "none"), l.height() !== t.height() && l.css("max-height", t.height()), _.call(this), "y" === i.axis || i.advanced.autoExpandHorizontalScroll || r.css("width", x(r)), n.overflowed = y.call(this), M.call(this), i.autoDraggerLength && S.call(this), b.call(this), T.call(this);
              var c = [Math.abs(r[0].offsetTop), Math.abs(r[0].offsetLeft)];
              "x" !== i.axis && (n.overflowed[0] ? s[0].height() > s[0].parent().height() ? B.call(this) : (V(t, c[0].toString(), {
                dir: "y",
                dur: 0,
                overwrite: "none"
              }), n.contentReset.y = null) : (B.call(this), "y" === i.axis ? k.call(this) : "yx" === i.axis && n.overflowed[1] && V(t, c[1].toString(), {
                dir: "x",
                dur: 0,
                overwrite: "none"
              }))), "y" !== i.axis && (n.overflowed[1] ? s[1].width() > s[1].parent().width() ? B.call(this) : (V(t, c[1].toString(), {
                dir: "x",
                dur: 0,
                overwrite: "none"
              }), n.contentReset.x = null) : (B.call(this), "x" === i.axis ? k.call(this) : "yx" === i.axis && n.overflowed[0] && V(t, c[0].toString(), {
                dir: "y",
                dur: 0,
                overwrite: "none"
              }))), o && n && (2 === o && i.callbacks.onImageLoad && "function" == typeof i.callbacks.onImageLoad ? i.callbacks.onImageLoad.call(this) : 3 === o && i.callbacks.onSelectorChange && "function" == typeof i.callbacks.onSelectorChange ? i.callbacks.onSelectorChange.call(this) : i.callbacks.onUpdate && "function" == typeof i.callbacks.onUpdate && i.callbacks.onUpdate.call(this)), X.call(this)
            }
          })
        },
        scrollTo: function(t, o) {
          if ("undefined" != typeof t && null != t) {
            var n = f.call(this);
            return e(n).each(function() {
              var n = e(this);
              if (n.data(a)) {
                var i = n.data(a),
                  r = i.opt,
                  l = {
                    trigger: "external",
                    scrollInertia: r.scrollInertia,
                    scrollEasing: "mcsEaseInOut",
                    moveDragger: !1,
                    timeout: 60,
                    callbacks: !0,
                    onStart: !0,
                    onUpdate: !0,
                    onComplete: !0
                  },
                  s = e.extend(!0, {}, l, o),
                  c = q.call(this, t),
                  d = s.scrollInertia > 0 && s.scrollInertia < 17 ? 17 : s.scrollInertia;
                c[0] = Y.call(this, c[0], "y"), c[1] = Y.call(this, c[1], "x"), s.moveDragger && (c[0] *= i.scrollRatio.y, c[1] *= i.scrollRatio.x), s.dur = oe() ? 0 : d, setTimeout(function() {
                  null !== c[0] && "undefined" != typeof c[0] && "x" !== r.axis && i.overflowed[0] && (s.dir = "y", s.overwrite = "all", V(n, c[0].toString(), s)), null !== c[1] && "undefined" != typeof c[1] && "y" !== r.axis && i.overflowed[1] && (s.dir = "x", s.overwrite = "none", V(n, c[1].toString(), s))
                }, s.timeout)
              }
            })
          }
        },
        stop: function() {
          var t = f.call(this);
          return e(t).each(function() {
            var t = e(this);
            t.data(a) && N(t)
          })
        },
        disable: function(t) {
          var o = f.call(this);
          return e(o).each(function() {
            var o = e(this);
            if (o.data(a)) {
              {
                o.data(a)
              }
              X.call(this, "remove"), k.call(this), t && B.call(this), M.call(this, !0), o.addClass(d[3])
            }
          })
        },
        destroy: function() {
          var t = f.call(this);
          return e(t).each(function() {
            var n = e(this);
            if (n.data(a)) {
              var i = n.data(a),
                r = i.opt,
                l = e("#mCSB_" + i.idx),
                s = e("#mCSB_" + i.idx + "_container"),
                c = e(".mCSB_" + i.idx + "_scrollbar");
              r.live && m(r.liveSelector || e(t).selector), X.call(this, "remove"), k.call(this), B.call(this), n.removeData(a), K(this, "mcs"), c.remove(), s.find("img." + d[2]).removeClass(d[2]), l.replaceWith(s.contents()), n.removeClass(o + " _" + a + "_" + i.idx + " " + d[6] + " " + d[7] + " " + d[5] + " " + d[3]).addClass(d[4])
            }
          })
        }
      },
      f = function() {
        return "object" != typeof e(this) || e(this).length < 1 ? n : this
      },
      h = function(t) {
        var o = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
          a = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
          n = ["minimal", "minimal-dark"],
          i = ["minimal", "minimal-dark"],
          r = ["minimal", "minimal-dark"];
        t.autoDraggerLength = e.inArray(t.theme, o) > -1 ? !1 : t.autoDraggerLength, t.autoExpandScrollbar = e.inArray(t.theme, a) > -1 ? !1 : t.autoExpandScrollbar, t.scrollButtons.enable = e.inArray(t.theme, n) > -1 ? !1 : t.scrollButtons.enable, t.autoHideScrollbar = e.inArray(t.theme, i) > -1 ? !0 : t.autoHideScrollbar, t.scrollbarPosition = e.inArray(t.theme, r) > -1 ? "outside" : t.scrollbarPosition
      },
      m = function(e) {
        l[e] && (clearTimeout(l[e]), K(l, e))
      },
      p = function(e) {
        return "yx" === e || "xy" === e || "auto" === e ? "yx" : "x" === e || "horizontal" === e ? "x" : "y"
      },
      g = function(e) {
        return "stepped" === e || "pixels" === e || "step" === e || "click" === e ? "stepped" : "stepless"
      },
      v = function() {
        var t = e(this),
          n = t.data(a),
          i = n.opt,
          r = i.autoExpandScrollbar ? " " + d[1] + "_expand" : "",
          l = ["<div id='mCSB_" + n.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + n.idx + "_scrollbar mCS-" + i.theme + " mCSB_scrollTools_vertical" + r + "'><div class='" + d[12] + "'><div id='mCSB_" + n.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + n.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + n.idx + "_scrollbar mCS-" + i.theme + " mCSB_scrollTools_horizontal" + r + "'><div class='" + d[12] + "'><div id='mCSB_" + n.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
          s = "yx" === i.axis ? "mCSB_vertical_horizontal" : "x" === i.axis ? "mCSB_horizontal" : "mCSB_vertical",
          c = "yx" === i.axis ? l[0] + l[1] : "x" === i.axis ? l[1] : l[0],
          u = "yx" === i.axis ? "<div id='mCSB_" + n.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
          f = i.autoHideScrollbar ? " " + d[6] : "",
          h = "x" !== i.axis && "rtl" === n.langDir ? " " + d[7] : "";
        i.setWidth && t.css("width", i.setWidth), i.setHeight && t.css("height", i.setHeight), i.setLeft = "y" !== i.axis && "rtl" === n.langDir ? "989999px" : i.setLeft, t.addClass(o + " _" + a + "_" + n.idx + f + h).wrapInner("<div id='mCSB_" + n.idx + "' class='mCustomScrollBox mCS-" + i.theme + " " + s + "'><div id='mCSB_" + n.idx + "_container' class='mCSB_container' style='position:relative; top:" + i.setTop + "; left:" + i.setLeft + ";' dir=" + n.langDir + " /></div>");
        var m = e("#mCSB_" + n.idx),
          p = e("#mCSB_" + n.idx + "_container");
        "y" === i.axis || i.advanced.autoExpandHorizontalScroll || p.css("width", x(p)), "outside" === i.scrollbarPosition ? ("static" === t.css("position") && t.css("position", "relative"), t.css("overflow", "visible"), m.addClass("mCSB_outside").after(c)) : (m.addClass("mCSB_inside").append(c), p.wrap(u)), w.call(this);
        var g = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")];
        g[0].css("min-height", g[0].height()), g[1].css("min-width", g[1].width())
      },
      x = function(t) {
        var o = [t[0].scrollWidth, Math.max.apply(Math, t.children().map(function() {
            return e(this).outerWidth(!0)
          }).get())],
          a = t.parent().width();
        return o[0] > a ? o[0] : o[1] > a ? o[1] : "100%"
      },
      _ = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e("#mCSB_" + o.idx + "_container");
        if (n.advanced.autoExpandHorizontalScroll && "y" !== n.axis) {
          i.css({
            width: "auto",
            "min-width": 0,
            "overflow-x": "scroll"
          });
          var r = Math.ceil(i[0].scrollWidth);
          3 === n.advanced.autoExpandHorizontalScroll || 2 !== n.advanced.autoExpandHorizontalScroll && r > i.parent().width() ? i.css({
            width: r,
            "min-width": "100%",
            "overflow-x": "inherit"
          }) : i.css({
            "overflow-x": "inherit",
            position: "absolute"
          }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
            width: Math.ceil(i[0].getBoundingClientRect().right + .4) - Math.floor(i[0].getBoundingClientRect().left),
            "min-width": "100%",
            position: "relative"
          }).unwrap()
        }
      },
      w = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e(".mCSB_" + o.idx + "_scrollbar:first"),
          r = ee(n.scrollButtons.tabindex) ? "tabindex='" + n.scrollButtons.tabindex + "'" : "",
          l = ["<a href='#' class='" + d[13] + "' oncontextmenu='return false;' " + r + " />", "<a href='#' class='" + d[14] + "' oncontextmenu='return false;' " + r + " />", "<a href='#' class='" + d[15] + "' oncontextmenu='return false;' " + r + " />", "<a href='#' class='" + d[16] + "' oncontextmenu='return false;' " + r + " />"],
          s = ["x" === n.axis ? l[2] : l[0], "x" === n.axis ? l[3] : l[1], l[2], l[3]];
        n.scrollButtons.enable && i.prepend(s[0]).append(s[1]).next(".mCSB_scrollTools").prepend(s[2]).append(s[3])
      },
      S = function() {
        var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")],
          l = [n.height() / i.outerHeight(!1), n.width() / i.outerWidth(!1)],
          c = [parseInt(r[0].css("min-height")), Math.round(l[0] * r[0].parent().height()), parseInt(r[1].css("min-width")), Math.round(l[1] * r[1].parent().width())],
          d = s && c[1] < c[0] ? c[0] : c[1],
          u = s && c[3] < c[2] ? c[2] : c[3];
        r[0].css({
          height: d,
          "max-height": r[0].parent().height() - 10
        }).find(".mCSB_dragger_bar").css({
          "line-height": c[0] + "px"
        }), r[1].css({
          width: u,
          "max-width": r[1].parent().width() - 10
        })
      },
      b = function() {
        var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")],
          l = [i.outerHeight(!1) - n.height(), i.outerWidth(!1) - n.width()],
          s = [l[0] / (r[0].parent().height() - r[0].height()), l[1] / (r[1].parent().width() - r[1].width())];
        o.scrollRatio = {
          y: s[0],
          x: s[1]
        }
      },
      C = function(e, t, o) {
        var a = o ? d[0] + "_expanded" : "",
          n = e.closest(".mCSB_scrollTools");
        "active" === t ? (e.toggleClass(d[0] + " " + a), n.toggleClass(d[1]), e[0]._draggable = e[0]._draggable ? 0 : 1) : e[0]._draggable || ("hide" === t ? (e.removeClass(d[0]), n.removeClass(d[1])) : (e.addClass(d[0]), n.addClass(d[1])))
      },
      y = function() {
        var t = e(this),
          o = t.data(a),
          n = e("#mCSB_" + o.idx),
          i = e("#mCSB_" + o.idx + "_container"),
          r = null == o.overflowed ? i.height() : i.outerHeight(!1),
          l = null == o.overflowed ? i.width() : i.outerWidth(!1),
          s = i[0].scrollHeight,
          c = i[0].scrollWidth;
        return s > r && (r = s), c > l && (l = c), [r > n.height(), l > n.width()]
      },
      B = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = e("#mCSB_" + o.idx),
          r = e("#mCSB_" + o.idx + "_container"),
          l = [e("#mCSB_" + o.idx + "_dragger_vertical"), e("#mCSB_" + o.idx + "_dragger_horizontal")];
        if (N(t), ("x" !== n.axis && !o.overflowed[0] || "y" === n.axis && o.overflowed[0]) && (l[0].add(r).css("top", 0), V(t, "_resetY")), "y" !== n.axis && !o.overflowed[1] || "x" === n.axis && o.overflowed[1]) {
          var s = dx = 0;
          "rtl" === o.langDir && (s = i.width() - r.outerWidth(!1), dx = Math.abs(s / o.scrollRatio.x)), r.css("left", s), l[1].css("left", dx), V(t, "_resetX")
        }
      },
      T = function() {
        function t() {
          r = setTimeout(function() {
            e.event.special.mousewheel ? (clearTimeout(r), R.call(o[0])) : t()
          }, 100)
        }
        var o = e(this),
          n = o.data(a),
          i = n.opt;
        if (!n.bindEvents) {
          if (I.call(this), i.contentTouchScroll && D.call(this), E.call(this), i.mouseWheel.enable) {
            var r;
            t()
          }
          L.call(this), P.call(this), i.advanced.autoScrollOnFocus && z.call(this), i.scrollButtons.enable && H.call(this), i.keyboard.enable && U.call(this), n.bindEvents = !0
        }
      },
      k = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = a + "_" + o.idx,
          r = ".mCSB_" + o.idx + "_scrollbar",
          l = e("#mCSB_" + o.idx + ",#mCSB_" + o.idx + "_container,#mCSB_" + o.idx + "_container_wrapper," + r + " ." + d[12] + ",#mCSB_" + o.idx + "_dragger_vertical,#mCSB_" + o.idx + "_dragger_horizontal," + r + ">a"),
          s = e("#mCSB_" + o.idx + "_container");
        n.advanced.releaseDraggableSelectors && l.add(e(n.advanced.releaseDraggableSelectors)), n.advanced.extraDraggableSelectors && l.add(e(n.advanced.extraDraggableSelectors)), o.bindEvents && (e(document).add(e(!W() || top.document)).unbind("." + i), l.each(function() {
          e(this).unbind("." + i)
        }), clearTimeout(t[0]._focusTimeout), K(t[0], "_focusTimeout"), clearTimeout(o.sequential.step), K(o.sequential, "step"), clearTimeout(s[0].onCompleteTimeout), K(s[0], "onCompleteTimeout"), o.bindEvents = !1)
      },
      M = function(t) {
        var o = e(this),
          n = o.data(a),
          i = n.opt,
          r = e("#mCSB_" + n.idx + "_container_wrapper"),
          l = r.length ? r : e("#mCSB_" + n.idx + "_container"),
          s = [e("#mCSB_" + n.idx + "_scrollbar_vertical"), e("#mCSB_" + n.idx + "_scrollbar_horizontal")],
          c = [s[0].find(".mCSB_dragger"), s[1].find(".mCSB_dragger")];
        "x" !== i.axis && (n.overflowed[0] && !t ? (s[0].add(c[0]).add(s[0].children("a")).css("display", "block"), l.removeClass(d[8] + " " + d[10])) : (i.alwaysShowScrollbar ? (2 !== i.alwaysShowScrollbar && c[0].css("display", "none"), l.removeClass(d[10])) : (s[0].css("display", "none"), l.addClass(d[10])), l.addClass(d[8]))), "y" !== i.axis && (n.overflowed[1] && !t ? (s[1].add(c[1]).add(s[1].children("a")).css("display", "block"), l.removeClass(d[9] + " " + d[11])) : (i.alwaysShowScrollbar ? (2 !== i.alwaysShowScrollbar && c[1].css("display", "none"), l.removeClass(d[11])) : (s[1].css("display", "none"), l.addClass(d[11])), l.addClass(d[9]))), n.overflowed[0] || n.overflowed[1] ? o.removeClass(d[5]) : o.addClass(d[5])
      },
      O = function(t) {
        var o = t.type,
          a = t.target.ownerDocument !== document ? [e(frameElement).offset().top, e(frameElement).offset().left] : null,
          n = W() && t.target.ownerDocument !== top.document ? [e(t.view.frameElement).offset().top, e(t.view.frameElement).offset().left] : [0, 0];
        switch (o) {
          case "pointerdown":
          case "MSPointerDown":
          case "pointermove":
          case "MSPointerMove":
          case "pointerup":
          case "MSPointerUp":
            return a ? [t.originalEvent.pageY - a[0] + n[0], t.originalEvent.pageX - a[1] + n[1], !1] : [t.originalEvent.pageY, t.originalEvent.pageX, !1];
          case "touchstart":
          case "touchmove":
          case "touchend":
            var i = t.originalEvent.touches[0] || t.originalEvent.changedTouches[0],
              r = t.originalEvent.touches.length || t.originalEvent.changedTouches.length;
            return t.target.ownerDocument !== document ? [i.screenY, i.screenX, r > 1] : [i.pageY, i.pageX, r > 1];
          default:
            return a ? [t.pageY - a[0] + n[0], t.pageX - a[1] + n[1], !1] : [t.pageY, t.pageX, !1]
        }
      },
      I = function() {
        function t(e) {
          var t = m.find("iframe");
          if (t.length) {
            var o = e ? "auto" : "none";
            t.css("pointer-events", o)
          }
        }

        function o(e, t, o, a) {
          if (m[0].idleTimer = u.scrollInertia < 233 ? 250 : 0, n.attr("id") === h[1]) var i = "x",
            r = (n[0].offsetLeft - t + a) * d.scrollRatio.x;
          else var i = "y",
            r = (n[0].offsetTop - e + o) * d.scrollRatio.y;
          V(l, r.toString(), {
            dir: i,
            drag: !0
          })
        }
        var n, i, r, l = e(this),
          d = l.data(a),
          u = d.opt,
          f = a + "_" + d.idx,
          h = ["mCSB_" + d.idx + "_dragger_vertical", "mCSB_" + d.idx + "_dragger_horizontal"],
          m = e("#mCSB_" + d.idx + "_container"),
          p = e("#" + h[0] + ",#" + h[1]),
          g = u.advanced.releaseDraggableSelectors ? p.add(e(u.advanced.releaseDraggableSelectors)) : p,
          v = u.advanced.extraDraggableSelectors ? e(!W() || top.document).add(e(u.advanced.extraDraggableSelectors)) : e(!W() || top.document);
        p.bind("mousedown." + f + " touchstart." + f + " pointerdown." + f + " MSPointerDown." + f, function(o) {
          if (o.stopImmediatePropagation(), o.preventDefault(), Z(o)) {
            c = !0, s && (document.onselectstart = function() {
              return !1
            }), t(!1), N(l), n = e(this);
            var a = n.offset(),
              d = O(o)[0] - a.top,
              f = O(o)[1] - a.left,
              h = n.height() + a.top,
              m = n.width() + a.left;
            h > d && d > 0 && m > f && f > 0 && (i = d, r = f), C(n, "active", u.autoExpandScrollbar)
          }
        }).bind("touchmove." + f, function(e) {
          e.stopImmediatePropagation(), e.preventDefault();
          var t = n.offset(),
            a = O(e)[0] - t.top,
            l = O(e)[1] - t.left;
          o(i, r, a, l)
        }), e(document).add(v).bind("mousemove." + f + " pointermove." + f + " MSPointerMove." + f, function(e) {
          if (n) {
            var t = n.offset(),
              a = O(e)[0] - t.top,
              l = O(e)[1] - t.left;
            if (i === a && r === l) return;
            o(i, r, a, l)
          }
        }).add(g).bind("mouseup." + f + " touchend." + f + " pointerup." + f + " MSPointerUp." + f, function(e) {
          n && (C(n, "active", u.autoExpandScrollbar), n = null), c = !1, s && (document.onselectstart = null), t(!0)
        })
      },
      D = function() {
        function o(e) {
          if (!$(e) || c || O(e)[2]) return void(t = 0);
          t = 1, b = 0, C = 0, d = 1, y.removeClass("mCS_touch_action");
          var o = I.offset();
          u = O(e)[0] - o.top, f = O(e)[1] - o.left, z = [O(e)[0], O(e)[1]]
        }

        function n(e) {
          if ($(e) && !c && !O(e)[2] && (T.documentTouchScroll || e.preventDefault(), e.stopImmediatePropagation(), (!C || b) && d)) {
            g = G();
            var t = M.offset(),
              o = O(e)[0] - t.top,
              a = O(e)[1] - t.left,
              n = "mcsLinearOut";
            if (E.push(o), R.push(a), z[2] = Math.abs(O(e)[0] - z[0]), z[3] = Math.abs(O(e)[1] - z[1]), B.overflowed[0]) var i = D[0].parent().height() - D[0].height(),
              r = u - o > 0 && o - u > -(i * B.scrollRatio.y) && (2 * z[3] < z[2] || "yx" === T.axis);
            if (B.overflowed[1]) var l = D[1].parent().width() - D[1].width(),
              h = f - a > 0 && a - f > -(l * B.scrollRatio.x) && (2 * z[2] < z[3] || "yx" === T.axis);
            r || h ? (U || e.preventDefault(), b = 1) : (C = 1, y.addClass("mCS_touch_action")), U && e.preventDefault(), w = "yx" === T.axis ? [u - o, f - a] : "x" === T.axis ? [null, f - a] : [u - o, null], I[0].idleTimer = 250, B.overflowed[0] && s(w[0], A, n, "y", "all", !0), B.overflowed[1] && s(w[1], A, n, "x", L, !0)
          }
        }

        function i(e) {
          if (!$(e) || c || O(e)[2]) return void(t = 0);
          t = 1, e.stopImmediatePropagation(), N(y), p = G();
          var o = M.offset();
          h = O(e)[0] - o.top, m = O(e)[1] - o.left, E = [], R = []
        }

        function r(e) {
          if ($(e) && !c && !O(e)[2]) {
            d = 0, e.stopImmediatePropagation(), b = 0, C = 0, v = G();
            var t = M.offset(),
              o = O(e)[0] - t.top,
              a = O(e)[1] - t.left;
            if (!(v - g > 30)) {
              _ = 1e3 / (v - p);
              var n = "mcsEaseOut",
                i = 2.5 > _,
                r = i ? [E[E.length - 2], R[R.length - 2]] : [0, 0];
              x = i ? [o - r[0], a - r[1]] : [o - h, a - m];
              var u = [Math.abs(x[0]), Math.abs(x[1])];
              _ = i ? [Math.abs(x[0] / 4), Math.abs(x[1] / 4)] : [_, _];
              var f = [Math.abs(I[0].offsetTop) - x[0] * l(u[0] / _[0], _[0]), Math.abs(I[0].offsetLeft) - x[1] * l(u[1] / _[1], _[1])];
              w = "yx" === T.axis ? [f[0], f[1]] : "x" === T.axis ? [null, f[1]] : [f[0], null], S = [4 * u[0] + T.scrollInertia, 4 * u[1] + T.scrollInertia];
              var y = parseInt(T.contentTouchScroll) || 0;
              w[0] = u[0] > y ? w[0] : 0, w[1] = u[1] > y ? w[1] : 0, B.overflowed[0] && s(w[0], S[0], n, "y", L, !1), B.overflowed[1] && s(w[1], S[1], n, "x", L, !1)
            }
          }
        }

        function l(e, t) {
          var o = [1.5 * t, 2 * t, t / 1.5, t / 2];
          return e > 90 ? t > 4 ? o[0] : o[3] : e > 60 ? t > 3 ? o[3] : o[2] : e > 30 ? t > 8 ? o[1] : t > 6 ? o[0] : t > 4 ? t : o[2] : t > 8 ? t : o[3]
        }

        function s(e, t, o, a, n, i) {
          e && V(y, e.toString(), {
            dur: t,
            scrollEasing: o,
            dir: a,
            overwrite: n,
            drag: i
          })
        }
        var d, u, f, h, m, p, g, v, x, _, w, S, b, C, y = e(this),
          B = y.data(a),
          T = B.opt,
          k = a + "_" + B.idx,
          M = e("#mCSB_" + B.idx),
          I = e("#mCSB_" + B.idx + "_container"),
          D = [e("#mCSB_" + B.idx + "_dragger_vertical"), e("#mCSB_" + B.idx + "_dragger_horizontal")],
          E = [],
          R = [],
          A = 0,
          L = "yx" === T.axis ? "none" : "all",
          z = [],
          P = I.find("iframe"),
          H = ["touchstart." + k + " pointerdown." + k + " MSPointerDown." + k, "touchmove." + k + " pointermove." + k + " MSPointerMove." + k, "touchend." + k + " pointerup." + k + " MSPointerUp." + k],
          U = void 0 !== document.body.style.touchAction;
        I.bind(H[0], function(e) {
          o(e)
        }).bind(H[1], function(e) {
          n(e)
        }), M.bind(H[0], function(e) {
          i(e)
        }).bind(H[2], function(e) {
          r(e)
        }), P.length && P.each(function() {
          e(this).load(function() {
            W(this) && e(this.contentDocument || this.contentWindow.document).bind(H[0], function(e) {
              o(e), i(e)
            }).bind(H[1], function(e) {
              n(e)
            }).bind(H[2], function(e) {
              r(e)
            })
          })
        })
      },
      E = function() {
        function o() {
          return window.getSelection ? window.getSelection().toString() : document.selection && "Control" != document.selection.type ? document.selection.createRange().text : 0
        }

        function n(e, t, o) {
          d.type = o && i ? "stepped" : "stepless", d.scrollAmount = 10, F(r, e, t, "mcsLinearOut", o ? 60 : null)
        }
        var i, r = e(this),
          l = r.data(a),
          s = l.opt,
          d = l.sequential,
          u = a + "_" + l.idx,
          f = e("#mCSB_" + l.idx + "_container"),
          h = f.parent();
        f.bind("mousedown." + u, function(e) {
          t || i || (i = 1, c = !0)
        }).add(document).bind("mousemove." + u, function(e) {
          if (!t && i && o()) {
            var a = f.offset(),
              r = O(e)[0] - a.top + f[0].offsetTop,
              c = O(e)[1] - a.left + f[0].offsetLeft;
            r > 0 && r < h.height() && c > 0 && c < h.width() ? d.step && n("off", null, "stepped") : ("x" !== s.axis && l.overflowed[0] && (0 > r ? n("on", 38) : r > h.height() && n("on", 40)), "y" !== s.axis && l.overflowed[1] && (0 > c ? n("on", 37) : c > h.width() && n("on", 39)))
          }
        }).bind("mouseup." + u + " dragend." + u, function(e) {
          t || (i && (i = 0, n("off", null)), c = !1)
        })
      },
      R = function() {
        function t(t, a) {
          if (N(o), !A(o, t.target)) {
            var r = "auto" !== i.mouseWheel.deltaFactor ? parseInt(i.mouseWheel.deltaFactor) : s && t.deltaFactor < 100 ? 100 : t.deltaFactor || 100,
              d = i.scrollInertia;
            if ("x" === i.axis || "x" === i.mouseWheel.axis) var u = "x",
              f = [Math.round(r * n.scrollRatio.x), parseInt(i.mouseWheel.scrollAmount)],
              h = "auto" !== i.mouseWheel.scrollAmount ? f[1] : f[0] >= l.width() ? .9 * l.width() : f[0],
              m = Math.abs(e("#mCSB_" + n.idx + "_container")[0].offsetLeft),
              p = c[1][0].offsetLeft,
              g = c[1].parent().width() - c[1].width(),
              v = t.deltaX || t.deltaY || a;
            else var u = "y",
              f = [Math.round(r * n.scrollRatio.y), parseInt(i.mouseWheel.scrollAmount)],
              h = "auto" !== i.mouseWheel.scrollAmount ? f[1] : f[0] >= l.height() ? .9 * l.height() : f[0],
              m = Math.abs(e("#mCSB_" + n.idx + "_container")[0].offsetTop),
              p = c[0][0].offsetTop,
              g = c[0].parent().height() - c[0].height(),
              v = t.deltaY || a;
            "y" === u && !n.overflowed[0] || "x" === u && !n.overflowed[1] || ((i.mouseWheel.invert || t.webkitDirectionInvertedFromDevice) && (v = -v), i.mouseWheel.normalizeDelta && (v = 0 > v ? -1 : 1), (v > 0 && 0 !== p || 0 > v && p !== g || i.mouseWheel.preventDefault) && (t.stopImmediatePropagation(), t.preventDefault()), t.deltaFactor < 2 && !i.mouseWheel.normalizeDelta && (h = t.deltaFactor, d = 17), V(o, (m - v * h).toString(), {
              dir: u,
              dur: d
            }))
          }
        }
        if (e(this).data(a)) {
          var o = e(this),
            n = o.data(a),
            i = n.opt,
            r = a + "_" + n.idx,
            l = e("#mCSB_" + n.idx),
            c = [e("#mCSB_" + n.idx + "_dragger_vertical"), e("#mCSB_" + n.idx + "_dragger_horizontal")],
            d = e("#mCSB_" + n.idx + "_container").find("iframe");
          d.length && d.each(function() {
            e(this).load(function() {
              W(this) && e(this.contentDocument || this.contentWindow.document).bind("mousewheel." + r, function(e, o) {
                t(e, o)
              })
            })
          }), l.bind("mousewheel." + r, function(e, o) {
            t(e, o)
          })
        }
      },
      W = function(e) {
        var t = null;
        if (e) {
          try {
            var o = e.contentDocument || e.contentWindow.document;
            t = o.body.innerHTML
          } catch (a) {}
          return null !== t
        }
        try {
          var o = top.document;
          t = o.body.innerHTML
        } catch (a) {}
        return null !== t
      },
      A = function(t, o) {
        var n = o.nodeName.toLowerCase(),
          i = t.data(a).opt.mouseWheel.disableOver,
          r = ["select", "textarea"];
        return e.inArray(n, i) > -1 && !(e.inArray(n, r) > -1 && !e(o).is(":focus"))
      },
      L = function() {
        var t, o = e(this),
          n = o.data(a),
          i = a + "_" + n.idx,
          r = e("#mCSB_" + n.idx + "_container"),
          l = r.parent(),
          s = e(".mCSB_" + n.idx + "_scrollbar ." + d[12]);
        s.bind("mousedown." + i + " touchstart." + i + " pointerdown." + i + " MSPointerDown." + i, function(o) {
          c = !0, e(o.target).hasClass("mCSB_dragger") || (t = 1)
        }).bind("touchend." + i + " pointerup." + i + " MSPointerUp." + i, function(e) {
          c = !1
        }).bind("click." + i, function(a) {
          if (t && (t = 0, e(a.target).hasClass(d[12]) || e(a.target).hasClass("mCSB_draggerRail"))) {
            N(o);
            var i = e(this),
              s = i.find(".mCSB_dragger");
            if (i.parent(".mCSB_scrollTools_horizontal").length > 0) {
              if (!n.overflowed[1]) return;
              var c = "x",
                u = a.pageX > s.offset().left ? -1 : 1,
                f = Math.abs(r[0].offsetLeft) - .9 * u * l.width()
            } else {
              if (!n.overflowed[0]) return;
              var c = "y",
                u = a.pageY > s.offset().top ? -1 : 1,
                f = Math.abs(r[0].offsetTop) - .9 * u * l.height()
            }
            V(o, f.toString(), {
              dir: c,
              scrollEasing: "mcsEaseInOut"
            })
          }
        })
      },
      z = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = a + "_" + o.idx,
          r = e("#mCSB_" + o.idx + "_container"),
          l = r.parent();
        r.bind("focusin." + i, function(o) {
          var a = e(document.activeElement),
            i = r.find(".mCustomScrollBox").length,
            s = 0;
          a.is(n.advanced.autoScrollOnFocus) && (N(t), clearTimeout(t[0]._focusTimeout), t[0]._focusTimer = i ? (s + 17) * i : 0, t[0]._focusTimeout = setTimeout(function() {
            var e = [te(a)[0], te(a)[1]],
              o = [r[0].offsetTop, r[0].offsetLeft],
              i = [o[0] + e[0] >= 0 && o[0] + e[0] < l.height() - a.outerHeight(!1), o[1] + e[1] >= 0 && o[0] + e[1] < l.width() - a.outerWidth(!1)],
              c = "yx" !== n.axis || i[0] || i[1] ? "all" : "none";
            "x" === n.axis || i[0] || V(t, e[0].toString(), {
              dir: "y",
              scrollEasing: "mcsEaseInOut",
              overwrite: c,
              dur: s
            }), "y" === n.axis || i[1] || V(t, e[1].toString(), {
              dir: "x",
              scrollEasing: "mcsEaseInOut",
              overwrite: c,
              dur: s
            })
          }, t[0]._focusTimer))
        })
      },
      P = function() {
        var t = e(this),
          o = t.data(a),
          n = a + "_" + o.idx,
          i = e("#mCSB_" + o.idx + "_container").parent();
        i.bind("scroll." + n, function(t) {
          (0 !== i.scrollTop() || 0 !== i.scrollLeft()) && e(".mCSB_" + o.idx + "_scrollbar").css("visibility", "hidden")
        })
      },
      H = function() {
        var t = e(this),
          o = t.data(a),
          n = o.opt,
          i = o.sequential,
          r = a + "_" + o.idx,
          l = ".mCSB_" + o.idx + "_scrollbar",
          s = e(l + ">a");
        s.bind("mousedown." + r + " touchstart." + r + " pointerdown." + r + " MSPointerDown." + r + " mouseup." + r + " touchend." + r + " pointerup." + r + " MSPointerUp." + r + " mouseout." + r + " pointerout." + r + " MSPointerOut." + r + " click." + r, function(a) {
          function r(e, o) {
            i.scrollAmount = n.scrollButtons.scrollAmount, F(t, e, o)
          }
          if (a.preventDefault(), Z(a)) {
            var l = e(this).attr("class");
            switch (i.type = n.scrollButtons.scrollType, a.type) {
              case "mousedown":
              case "touchstart":
              case "pointerdown":
              case "MSPointerDown":
                if ("stepped" === i.type) return;
                c = !0, o.tweenRunning = !1, r("on", l);
                break;
              case "mouseup":
              case "touchend":
              case "pointerup":
              case "MSPointerUp":
              case "mouseout":
              case "pointerout":
              case "MSPointerOut":
                if ("stepped" === i.type) return;
                c = !1, i.dir && r("off", l);
                break;
              case "click":
                if ("stepped" !== i.type || o.tweenRunning) return;
                r("on", l)
            }
          }
        })
      },
      U = function() {
        function t(t) {
          function a(e, t) {
            r.type = i.keyboard.scrollType, r.scrollAmount = i.keyboard.scrollAmount, "stepped" === r.type && n.tweenRunning || F(o, e, t)
          }
          switch (t.type) {
            case "blur":
              n.tweenRunning && r.dir && a("off", null);
              break;
            case "keydown":
            case "keyup":
              var l = t.keyCode ? t.keyCode : t.which,
                s = "on";
              if ("x" !== i.axis && (38 === l || 40 === l) || "y" !== i.axis && (37 === l || 39 === l)) {
                if ((38 === l || 40 === l) && !n.overflowed[0] || (37 === l || 39 === l) && !n.overflowed[1]) return;
                "keyup" === t.type && (s = "off"), e(document.activeElement).is(u) || (t.preventDefault(), t.stopImmediatePropagation(), a(s, l))
              } else if (33 === l || 34 === l) {
                if ((n.overflowed[0] || n.overflowed[1]) && (t.preventDefault(), t.stopImmediatePropagation()), "keyup" === t.type) {
                  N(o);
                  var f = 34 === l ? -1 : 1;
                  if ("x" === i.axis || "yx" === i.axis && n.overflowed[1] && !n.overflowed[0]) var h = "x",
                    m = Math.abs(c[0].offsetLeft) - .9 * f * d.width();
                  else var h = "y",
                    m = Math.abs(c[0].offsetTop) - .9 * f * d.height();
                  V(o, m.toString(), {
                    dir: h,
                    scrollEasing: "mcsEaseInOut"
                  })
                }
              } else if ((35 === l || 36 === l) && !e(document.activeElement).is(u) && ((n.overflowed[0] || n.overflowed[1]) && (t.preventDefault(), t.stopImmediatePropagation()), "keyup" === t.type)) {
                if ("x" === i.axis || "yx" === i.axis && n.overflowed[1] && !n.overflowed[0]) var h = "x",
                  m = 35 === l ? Math.abs(d.width() - c.outerWidth(!1)) : 0;
                else var h = "y",
                  m = 35 === l ? Math.abs(d.height() - c.outerHeight(!1)) : 0;
                V(o, m.toString(), {
                  dir: h,
                  scrollEasing: "mcsEaseInOut"
                })
              }
          }
        }
        var o = e(this),
          n = o.data(a),
          i = n.opt,
          r = n.sequential,
          l = a + "_" + n.idx,
          s = e("#mCSB_" + n.idx),
          c = e("#mCSB_" + n.idx + "_container"),
          d = c.parent(),
          u = "input,textarea,select,datalist,keygen,[contenteditable='true']",
          f = c.find("iframe"),
          h = ["blur." + l + " keydown." + l + " keyup." + l];
        f.length && f.each(function() {
          e(this).load(function() {
            W(this) && e(this.contentDocument || this.contentWindow.document).bind(h[0], function(e) {
              t(e)
            })
          })
        }), s.attr("tabindex", "0").bind(h[0], function(e) {
          t(e)
        })
      },
      F = function(t, o, n, i, r) {
        function l(e) {
          u.snapAmount && (f.scrollAmount = u.snapAmount instanceof Array ? "x" === f.dir[0] ? u.snapAmount[1] : u.snapAmount[0] : u.snapAmount);
          var o = "stepped" !== f.type,
            a = r ? r : e ? o ? p / 1.5 : g : 1e3 / 60,
            n = e ? o ? 7.5 : 40 : 2.5,
            s = [Math.abs(h[0].offsetTop), Math.abs(h[0].offsetLeft)],
            d = [c.scrollRatio.y > 10 ? 10 : c.scrollRatio.y, c.scrollRatio.x > 10 ? 10 : c.scrollRatio.x],
            m = "x" === f.dir[0] ? s[1] + f.dir[1] * d[1] * n : s[0] + f.dir[1] * d[0] * n,
            v = "x" === f.dir[0] ? s[1] + f.dir[1] * parseInt(f.scrollAmount) : s[0] + f.dir[1] * parseInt(f.scrollAmount),
            x = "auto" !== f.scrollAmount ? v : m,
            _ = i ? i : e ? o ? "mcsLinearOut" : "mcsEaseInOut" : "mcsLinear",
            w = e ? !0 : !1;
          return e && 17 > a && (x = "x" === f.dir[0] ? s[1] : s[0]), V(t, x.toString(), {
            dir: f.dir[0],
            scrollEasing: _,
            dur: a,
            onComplete: w
          }), e ? void(f.dir = !1) : (clearTimeout(f.step), void(f.step = setTimeout(function() {
            l()
          }, a)))
        }

        function s() {
          clearTimeout(f.step), K(f, "step"), N(t)
        }
        var c = t.data(a),
          u = c.opt,
          f = c.sequential,
          h = e("#mCSB_" + c.idx + "_container"),
          m = "stepped" === f.type ? !0 : !1,
          p = u.scrollInertia < 26 ? 26 : u.scrollInertia,
          g = u.scrollInertia < 1 ? 17 : u.scrollInertia;
        switch (o) {
          case "on":
            if (f.dir = [n === d[16] || n === d[15] || 39 === n || 37 === n ? "x" : "y", n === d[13] || n === d[15] || 38 === n || 37 === n ? -1 : 1], N(t), ee(n) && "stepped" === f.type) return;
            l(m);
            break;
          case "off":
            s(), (m || c.tweenRunning && f.dir) && l(!0)
        }
      },
      q = function(t) {
        var o = e(this).data(a).opt,
          n = [];
        return "function" == typeof t && (t = t()), t instanceof Array ? n = t.length > 1 ? [t[0], t[1]] : "x" === o.axis ? [null, t[0]] : [t[0], null] : (n[0] = t.y ? t.y : t.x || "x" === o.axis ? null : t, n[1] = t.x ? t.x : t.y || "y" === o.axis ? null : t), "function" == typeof n[0] && (n[0] = n[0]()), "function" == typeof n[1] && (n[1] = n[1]()), n
      },
      Y = function(t, o) {
        if (null != t && "undefined" != typeof t) {
          var n = e(this),
            i = n.data(a),
            r = i.opt,
            l = e("#mCSB_" + i.idx + "_container"),
            s = l.parent(),
            c = typeof t;
          o || (o = "x" === r.axis ? "x" : "y");
          var d = "x" === o ? l.outerWidth(!1) : l.outerHeight(!1),
            f = "x" === o ? l[0].offsetLeft : l[0].offsetTop,
            h = "x" === o ? "left" : "top";
          switch (c) {
            case "function":
              return t();
            case "object":
              var m = t.jquery ? t : e(t);
              if (!m.length) return;
              return "x" === o ? te(m)[1] : te(m)[0];
            case "string":
            case "number":
              if (ee(t)) return Math.abs(t);
              if (-1 !== t.indexOf("%")) return Math.abs(d * parseInt(t) / 100);
              if (-1 !== t.indexOf("-=")) return Math.abs(f - parseInt(t.split("-=")[1]));
              if (-1 !== t.indexOf("+=")) {
                var p = f + parseInt(t.split("+=")[1]);
                return p >= 0 ? 0 : Math.abs(p)
              }
              if (-1 !== t.indexOf("px") && ee(t.split("px")[0])) return Math.abs(t.split("px")[0]);
              if ("top" === t || "left" === t) return 0;
              if ("bottom" === t) return Math.abs(s.height() - l.outerHeight(!1));
              if ("right" === t) return Math.abs(s.width() - l.outerWidth(!1));
              if ("first" === t || "last" === t) {
                var m = l.find(":" + t);
                return "x" === o ? te(m)[1] : te(m)[0]
              }
              return e(t).length ? "x" === o ? te(e(t))[1] : te(e(t))[0] : (l.css(h, t), void u.update.call(null, n[0]))
          }
        }
      },
      X = function(t) {
        function o() {
          return clearTimeout(f[0].autoUpdate), 0 === l.parents("html").length ? void(l = null) : void(f[0].autoUpdate = setTimeout(function() {
            return c.advanced.updateOnSelectorChange && (s.poll.change.n = i(), s.poll.change.n !== s.poll.change.o) ? (s.poll.change.o = s.poll.change.n, void r(3)) : c.advanced.updateOnContentResize && (s.poll.size.n = l[0].scrollHeight + l[0].scrollWidth + f[0].offsetHeight + l[0].offsetHeight + l[0].offsetWidth, s.poll.size.n !== s.poll.size.o) ? (s.poll.size.o = s.poll.size.n, void r(1)) : !c.advanced.updateOnImageLoad || "auto" === c.advanced.updateOnImageLoad && "y" === c.axis || (s.poll.img.n = f.find("img").length, s.poll.img.n === s.poll.img.o) ? void((c.advanced.updateOnSelectorChange || c.advanced.updateOnContentResize || c.advanced.updateOnImageLoad) && o()) : (s.poll.img.o = s.poll.img.n, void f.find("img").each(function() {
              n(this)
            }))
          }, c.advanced.autoUpdateTimeout))
        }

        function n(t) {
          function o(e, t) {
            return function() {
              return t.apply(e, arguments)
            }
          }

          function a() {
            this.onload = null, e(t).addClass(d[2]), r(2)
          }
          if (e(t).hasClass(d[2])) return void r();
          var n = new Image;
          n.onload = o(n, a), n.src = t.src
        }

        function i() {
          c.advanced.updateOnSelectorChange === !0 && (c.advanced.updateOnSelectorChange = "*");
          var e = 0,
            t = f.find(c.advanced.updateOnSelectorChange);

          return c.advanced.updateOnSelectorChange && t.length > 0 && t.each(function() {
            e += this.offsetHeight + this.offsetWidth
          }), e
        }

        function r(e) {
          clearTimeout(f[0].autoUpdate), u.update.call(null, l[0], e)
        }
        var l = e(this),
          s = l.data(a),
          c = s.opt,
          f = e("#mCSB_" + s.idx + "_container");
        return t ? (clearTimeout(f[0].autoUpdate), void K(f[0], "autoUpdate")) : void o()
      },
      j = function(e, t, o) {
        return Math.round(e / t) * t - o
      },
      N = function(t) {
        var o = t.data(a),
          n = e("#mCSB_" + o.idx + "_container,#mCSB_" + o.idx + "_container_wrapper,#mCSB_" + o.idx + "_dragger_vertical,#mCSB_" + o.idx + "_dragger_horizontal");
        n.each(function() {
          J.call(this)
        })
      },
      V = function(t, o, n) {
        function i(e) {
          return s && c.callbacks[e] && "function" == typeof c.callbacks[e]
        }

        function r() {
          return [c.callbacks.alwaysTriggerOffsets || w >= S[0] + y, c.callbacks.alwaysTriggerOffsets || -B >= w]
        }

        function l() {
          var e = [h[0].offsetTop, h[0].offsetLeft],
            o = [x[0].offsetTop, x[0].offsetLeft],
            a = [h.outerHeight(!1), h.outerWidth(!1)],
            i = [f.height(), f.width()];
          t[0].mcs = {
            content: h,
            top: e[0],
            left: e[1],
            draggerTop: o[0],
            draggerLeft: o[1],
            topPct: Math.round(100 * Math.abs(e[0]) / (Math.abs(a[0]) - i[0])),
            leftPct: Math.round(100 * Math.abs(e[1]) / (Math.abs(a[1]) - i[1])),
            direction: n.dir
          }
        }
        var s = t.data(a),
          c = s.opt,
          d = {
            trigger: "internal",
            dir: "y",
            scrollEasing: "mcsEaseOut",
            drag: !1,
            dur: c.scrollInertia,
            overwrite: "all",
            callbacks: !0,
            onStart: !0,
            onUpdate: !0,
            onComplete: !0
          },
          n = e.extend(d, n),
          u = [n.dur, n.drag ? 0 : n.dur],
          f = e("#mCSB_" + s.idx),
          h = e("#mCSB_" + s.idx + "_container"),
          m = h.parent(),
          p = c.callbacks.onTotalScrollOffset ? q.call(t, c.callbacks.onTotalScrollOffset) : [0, 0],
          g = c.callbacks.onTotalScrollBackOffset ? q.call(t, c.callbacks.onTotalScrollBackOffset) : [0, 0];
        if (s.trigger = n.trigger, (0 !== m.scrollTop() || 0 !== m.scrollLeft()) && (e(".mCSB_" + s.idx + "_scrollbar").css("visibility", "visible"), m.scrollTop(0).scrollLeft(0)), "_resetY" !== o || s.contentReset.y || (i("onOverflowYNone") && c.callbacks.onOverflowYNone.call(t[0]), s.contentReset.y = 1), "_resetX" !== o || s.contentReset.x || (i("onOverflowXNone") && c.callbacks.onOverflowXNone.call(t[0]), s.contentReset.x = 1), "_resetY" !== o && "_resetX" !== o) {
          if (!s.contentReset.y && t[0].mcs || !s.overflowed[0] || (i("onOverflowY") && c.callbacks.onOverflowY.call(t[0]), s.contentReset.x = null), !s.contentReset.x && t[0].mcs || !s.overflowed[1] || (i("onOverflowX") && c.callbacks.onOverflowX.call(t[0]), s.contentReset.x = null), c.snapAmount) {
            var v = c.snapAmount instanceof Array ? "x" === n.dir ? c.snapAmount[1] : c.snapAmount[0] : c.snapAmount;
            o = j(o, v, c.snapOffset)
          }
          switch (n.dir) {
            case "x":
              var x = e("#mCSB_" + s.idx + "_dragger_horizontal"),
                _ = "left",
                w = h[0].offsetLeft,
                S = [f.width() - h.outerWidth(!1), x.parent().width() - x.width()],
                b = [o, 0 === o ? 0 : o / s.scrollRatio.x],
                y = p[1],
                B = g[1],
                T = y > 0 ? y / s.scrollRatio.x : 0,
                k = B > 0 ? B / s.scrollRatio.x : 0;
              break;
            case "y":
              var x = e("#mCSB_" + s.idx + "_dragger_vertical"),
                _ = "top",
                w = h[0].offsetTop,
                S = [f.height() - h.outerHeight(!1), x.parent().height() - x.height()],
                b = [o, 0 === o ? 0 : o / s.scrollRatio.y],
                y = p[0],
                B = g[0],
                T = y > 0 ? y / s.scrollRatio.y : 0,
                k = B > 0 ? B / s.scrollRatio.y : 0
          }
          b[1] < 0 || 0 === b[0] && 0 === b[1] ? b = [0, 0] : b[1] >= S[1] ? b = [S[0], S[1]] : b[0] = -b[0], t[0].mcs || (l(), i("onInit") && c.callbacks.onInit.call(t[0])), clearTimeout(h[0].onCompleteTimeout), Q(x[0], _, Math.round(b[1]), u[1], n.scrollEasing), (s.tweenRunning || !(0 === w && b[0] >= 0 || w === S[0] && b[0] <= S[0])) && Q(h[0], _, Math.round(b[0]), u[0], n.scrollEasing, n.overwrite, {
            onStart: function() {
              n.callbacks && n.onStart && !s.tweenRunning && (i("onScrollStart") && (l(), c.callbacks.onScrollStart.call(t[0])), s.tweenRunning = !0, C(x), s.cbOffsets = r())
            },
            onUpdate: function() {
              n.callbacks && n.onUpdate && i("whileScrolling") && (l(), c.callbacks.whileScrolling.call(t[0]))
            },
            onComplete: function() {
              if (n.callbacks && n.onComplete) {
                "yx" === c.axis && clearTimeout(h[0].onCompleteTimeout);
                var e = h[0].idleTimer || 0;
                h[0].onCompleteTimeout = setTimeout(function() {
                  i("onScroll") && (l(), c.callbacks.onScroll.call(t[0])), i("onTotalScroll") && b[1] >= S[1] - T && s.cbOffsets[0] && (l(), c.callbacks.onTotalScroll.call(t[0])), i("onTotalScrollBack") && b[1] <= k && s.cbOffsets[1] && (l(), c.callbacks.onTotalScrollBack.call(t[0])), s.tweenRunning = !1, h[0].idleTimer = 0, C(x, "hide")
                }, e)
              }
            }
          })
        }
      },
      Q = function(e, t, o, a, n, i, r) {
        function l() {
          S.stop || (x || m.call(), x = G() - v, s(), x >= S.time && (S.time = x > S.time ? x + f - (x - S.time) : x + f - 1, S.time < x + 1 && (S.time = x + 1)), S.time < a ? S.id = h(l) : g.call())
        }

        function s() {
          a > 0 ? (S.currVal = u(S.time, _, b, a, n), w[t] = Math.round(S.currVal) + "px") : w[t] = o + "px", p.call()
        }

        function c() {
          f = 1e3 / 60, S.time = x + f, h = window.requestAnimationFrame ? window.requestAnimationFrame : function(e) {
            return s(), setTimeout(e, .01)
          }, S.id = h(l)
        }

        function d() {
          null != S.id && (window.requestAnimationFrame ? window.cancelAnimationFrame(S.id) : clearTimeout(S.id), S.id = null)
        }

        function u(e, t, o, a, n) {
          switch (n) {
            case "linear":
            case "mcsLinear":
              return o * e / a + t;
            case "mcsLinearOut":
              return e /= a, e--, o * Math.sqrt(1 - e * e) + t;
            case "easeInOutSmooth":
              return e /= a / 2, 1 > e ? o / 2 * e * e + t : (e--, -o / 2 * (e * (e - 2) - 1) + t);
            case "easeInOutStrong":
              return e /= a / 2, 1 > e ? o / 2 * Math.pow(2, 10 * (e - 1)) + t : (e--, o / 2 * (-Math.pow(2, -10 * e) + 2) + t);
            case "easeInOut":
            case "mcsEaseInOut":
              return e /= a / 2, 1 > e ? o / 2 * e * e * e + t : (e -= 2, o / 2 * (e * e * e + 2) + t);
            case "easeOutSmooth":
              return e /= a, e--, -o * (e * e * e * e - 1) + t;
            case "easeOutStrong":
              return o * (-Math.pow(2, -10 * e / a) + 1) + t;
            case "easeOut":
            case "mcsEaseOut":
            default:
              var i = (e /= a) * e,
                r = i * e;
              return t + o * (.499999999999997 * r * i + -2.5 * i * i + 5.5 * r + -6.5 * i + 4 * e)
          }
        }
        e._mTween || (e._mTween = {
          top: {},
          left: {}
        });
        var f, h, r = r || {},
          m = r.onStart || function() {},
          p = r.onUpdate || function() {},
          g = r.onComplete || function() {},
          v = G(),
          x = 0,
          _ = e.offsetTop,
          w = e.style,
          S = e._mTween[t];
        "left" === t && (_ = e.offsetLeft);
        var b = o - _;
        S.stop = 0, "none" !== i && d(), c()
      },
      G = function() {
        return window.performance && window.performance.now ? window.performance.now() : window.performance && window.performance.webkitNow ? window.performance.webkitNow() : Date.now ? Date.now() : (new Date).getTime()
      },
      J = function() {
        var e = this;
        e._mTween || (e._mTween = {
          top: {},
          left: {}
        });
        for (var t = ["top", "left"], o = 0; o < t.length; o++) {
          var a = t[o];
          e._mTween[a].id && (window.requestAnimationFrame ? window.cancelAnimationFrame(e._mTween[a].id) : clearTimeout(e._mTween[a].id), e._mTween[a].id = null, e._mTween[a].stop = 1)
        }
      },
      K = function(e, t) {
        try {
          delete e[t]
        } catch (o) {
          e[t] = null
        }
      },
      Z = function(e) {
        return !(e.which && 1 !== e.which)
      },
      $ = function(e) {
        var t = e.originalEvent.pointerType;
        return !(t && "touch" !== t && 2 !== t)
      },
      ee = function(e) {
        return !isNaN(parseFloat(e)) && isFinite(e)
      },
      te = function(e) {
        var t = e.parents(".mCSB_container");
        return [e.offset().top - t.offset().top, e.offset().left - t.offset().left]
      },
      oe = function() {
        function e() {
          var e = ["webkit", "moz", "ms", "o"];
          if ("hidden" in document) return "hidden";
          for (var t = 0; t < e.length; t++)
            if (e[t] + "Hidden" in document) return e[t] + "Hidden";
          return null
        }
        var t = e();
        return t ? document[t] : !1
      };
    e.fn[o] = function(t) {
      return u[t] ? u[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? void e.error("Method " + t + " does not exist") : u.init.apply(this, arguments)
    }, e[o] = function(t) {
      return u[t] ? u[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? void e.error("Method " + t + " does not exist") : u.init.apply(this, arguments)
    }, e[o].defaults = i, window[o] = !0, e(window).load(function() {
      e(n)[o](), e.extend(e.expr[":"], {
        mcsInView: e.expr[":"].mcsInView || function(t) {
          var o, a, n = e(t),
            i = n.parents(".mCSB_container");
          if (i.length) return o = i.parent(), a = [i[0].offsetTop, i[0].offsetLeft], a[0] + te(n)[0] >= 0 && a[0] + te(n)[0] < o.height() - n.outerHeight(!1) && a[1] + te(n)[1] >= 0 && a[1] + te(n)[1] < o.width() - n.outerWidth(!1)
        },
        mcsOverflow: e.expr[":"].mcsOverflow || function(t) {
          var o = e(t).data(a);
          if (o) return o.overflowed[0] || o.overflowed[1]
        }
      })
    })
  })
});



/* ---------------------- 
  choosen
---------------------- */

// choosen

// Chosen, a Select Box Enhancer for jQuery and Prototype
// by Patrick Filler for Harvest, http://getharvest.com
//
// Version 0.13.0
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `grunt build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;

      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: this.escapeExpression(group.label),
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    SelectParser.prototype.escapeExpression = function(text) {
      var map, unsafe_chars;

      if ((text == null) || text === false) {
        return "";
      }
      if (!/[\&\<\>\"\'\`]/.test(text)) {
        return text;
      }
      map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
      };
      unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
      return text.replace(unsafe_chars, function(chr) {
        return map[chr] || "&amp;";
      });
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;

    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {
    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;

      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      return this.inherit_select_classes = this.options.inherit_select_classes || false;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;

      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;

      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.results_option_build = function(options) {
      var content, data, _i, _len, _ref;

      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group && (data.search_match || data.group_match)) {
          content += this.result_add_group(data);
        } else if (!data.empty && data.search_match) {
          content += this.result_add_option(data);
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(data.text);
          }
        }
      }
      return content;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;

      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
      return "<li class=\"" + (classes.join(' ')) + "\"" + style + " data-option-array-index=\"" + option.array_index + "\">" + option.search_text + "</li>";
    };

    AbstractChosen.prototype.result_add_group = function(group) {
      return "<li class=\"group-result\">" + group.search_text + "</li>";
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.result_single_selected = null;
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.winnow_results = function() {
      var option, regex, regexAnchor, results, searchText, startpos, text, zregex, _i, _len, _ref;

      this.no_results_clear();
      results = 0;
      searchText = this.get_search_text();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.empty) {
          if (option.group) {
            option.group_match = false;
          }
          if (!(option.group && !this.group_search)) {
            option.search_match = false;
            option.search_text = option.group ? option.label : option.html;
            option.search_match = this.search_string_match(option.search_text, regex);
            if (option.search_match) {
              results += 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                startpos = option.search_text.search(zregex);
                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              }
              if (option.group_array_index != null) {
                this.results_data[option.group_array_index].group_match = true;
              }
            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
              option.search_match = true;
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        this.result_clear_highlight();
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };

    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var part, parts, _i, _len;

      if (regex.test(search_string)) {
        return true;
      } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
        parts = search_string.replace(/\[|\]/g, "").split(" ");
        if (parts.length) {
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            part = parts[_i];
            if (regex.test(part)) {
              return true;
            }
          }
        }
      }
    };

    AbstractChosen.prototype.choices_count = function() {
      var option, _i, _len, _ref;

      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;

      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.browser_is_supported = function() {
      var _ref;

      if (window.navigator.appName === "Microsoft Internet Explorer") {
        return (null !== (_ref = document.documentMode) && _ref >= 8);
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

(function() {
  var $, Chosen, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
      }

      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    };

  root = this;

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this;

        $this = $(this);
        if (!$this.hasClass("chzn-done")) {
          return $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {
    __extends(Chosen, _super);

    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field_jq.addClass("chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props;

      container_classes = ["chzn-container"];
      container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chzn-rtl");
      }
      container_props = {
        'class': container_classes.join(' '),
        'style': "width: " + (this.container_width()) + ";",
        'title': this.form_field.title
      };
      if (this.form_field.id.length) {
        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chzn";
      }
      this.container = $("<div />", container_props);
      if (this.is_multiple) {
        this.container.html('<div class="overflow-hidden"><ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul></div><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
      } else {
        this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find('div.chzn-drop').first();
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
      }
      this.results_build();
      this.set_tab_index();
      this.set_label_behavior();
      return this.form_field_jq.trigger("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;

      this.container.mousedown(function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.mouseup(function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.mouseenter(function(evt) {
        _this.mouse_enter(evt);
      });
      this.container.mouseleave(function(evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.mouseup(function(evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.mouseover(function(evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.mouseout(function(evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind('mousewheel DOMMouseScroll', function(evt) {
        _this.search_results_mousewheel(evt);
      });
      this.form_field_jq.bind("liszt:updated", function(evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("liszt:activate", function(evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("liszt:open", function(evt) {
        _this.container_mousedown(evt);
      });
      this.search_field.blur(function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.keyup(function(evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.keydown(function(evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.focus(function(evt) {
        _this.input_focus(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.click(function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.click(function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta, _ref1, _ref2;

      delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(document).unbind("click", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if (this.container.is($(evt.target).closest('.chzn-container'))) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.search_field[0].readOnly = true;
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.search_field[0].readOnly = false;
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({
        first: true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;

      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      this.container.addClass("chzn-with-drop");
      this.form_field_jq.trigger("liszt:showing_dropdown", {
        chosen: this
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };

    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.html(content);
    };

    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chzn-with-drop");
        this.form_field_jq.trigger("liszt:hiding_dropdown", {
          chosen: this
        });
      }
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;

      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        return this.search_field.attr("tabindex", ti);
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      var _this = this;

      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.click(function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;

      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;

      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link,
        _this = this;

      choice = $('<li />', {
        "class": "search-choice"
      }).html("<span>" + item.html + "</span>");
      if (item.disabled) {
        choice.addClass('search-choice-disabled');
      } else {
        close_link = $('<a />', {
          href: '#',
          "class": 'search-choice-close',
          rel: item.array_index
        });
        close_link.click(function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link.attr("rel"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_option_count = null;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, item;

      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("liszt:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
        }
        high.addClass("result-selected");
        item = this.results_data[high[0].getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(item.text);
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        return this.search_field_scale();
      }
    };

    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chzn-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chzn-default");
      }
      return this.selected_item.find("span").text(text);
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result_data;

      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
      return this.selected_item.addClass("chzn-single-with-deselect");
    };

    Chosen.prototype.get_search_text = function() {
      if (this.search_field.val() === this.default_text) {
        return "";
      } else {
        return $('<div/>').text($.trim(this.search_field.val())).html();
      }
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;

      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;

      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      return this.search_results.append(no_results_html);
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var next_sib;

      if (this.results_showing && this.result_highlight) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;

      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;

      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref1;

      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var div, f_width, h, style, style_block, styles, w, _i, _len;

      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        f_width = this.container.outerWidth();
        if (w > f_width - 10) {
          w = f_width - 10;
        }
        return this.search_field.css({
          'width': w + 'px'
        });
      }
    };

    return Chosen;

  })(AbstractChosen);

  root.Chosen = Chosen;

}).call(this);
//--------------------------------------------------------------------------------------------



/* ---------------------- 
  jQuery UI
---------------------- */
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
  if ( typeof define === "function" && define.amd ) {

    // AMD. Register as an anonymous module.
    define([ "jquery" ], factory );
  } else {

    // Browser globals
    factory( jQuery );
  }
}(function( $ ) {

$.ui = $.ui || {};

var version = $.ui.version = "1.12.1";


/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/



var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
  return function( elems ) {
    var events, elem, i;
    for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
      try {

        // Only trigger remove when necessary to save time
        events = $._data( elem, "events" );
        if ( events && events.remove ) {
          $( elem ).triggerHandler( "remove" );
        }

      // Http://bugs.jquery.com/ticket/8235
      } catch ( e ) {}
    }
    orig( elems );
  };
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
  var existingConstructor, constructor, basePrototype;

  // ProxiedPrototype allows the provided prototype to remain unmodified
  // so that it can be used as a mixin for multiple widgets (#8876)
  var proxiedPrototype = {};

  var namespace = name.split( "." )[ 0 ];
  name = name.split( "." )[ 1 ];
  var fullName = namespace + "-" + name;

  if ( !prototype ) {
    prototype = base;
    base = $.Widget;
  }

  if ( $.isArray( prototype ) ) {
    prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
  }

  // Create selector for plugin
  $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
    return !!$.data( elem, fullName );
  };

  $[ namespace ] = $[ namespace ] || {};
  existingConstructor = $[ namespace ][ name ];
  constructor = $[ namespace ][ name ] = function( options, element ) {

    // Allow instantiation without "new" keyword
    if ( !this._createWidget ) {
      return new constructor( options, element );
    }

    // Allow instantiation without initializing for simple inheritance
    // must use "new" keyword (the code above always passes args)
    if ( arguments.length ) {
      this._createWidget( options, element );
    }
  };

  // Extend with the existing constructor to carry over any static properties
  $.extend( constructor, existingConstructor, {
    version: prototype.version,

    // Copy the object used to create the prototype in case we need to
    // redefine the widget later
    _proto: $.extend( {}, prototype ),

    // Track widgets that inherit from this widget in case this widget is
    // redefined after a widget inherits from it
    _childConstructors: []
  } );

  basePrototype = new base();

  // We need to make the options hash a property directly on the new instance
  // otherwise we'll modify the options hash on the prototype that we're
  // inheriting from
  basePrototype.options = $.widget.extend( {}, basePrototype.options );
  $.each( prototype, function( prop, value ) {
    if ( !$.isFunction( value ) ) {
      proxiedPrototype[ prop ] = value;
      return;
    }
    proxiedPrototype[ prop ] = ( function() {
      function _super() {
        return base.prototype[ prop ].apply( this, arguments );
      }

      function _superApply( args ) {
        return base.prototype[ prop ].apply( this, args );
      }

      return function() {
        var __super = this._super;
        var __superApply = this._superApply;
        var returnValue;

        this._super = _super;
        this._superApply = _superApply;

        returnValue = value.apply( this, arguments );

        this._super = __super;
        this._superApply = __superApply;

        return returnValue;
      };
    } )();
  } );
  constructor.prototype = $.widget.extend( basePrototype, {

    // TODO: remove support for widgetEventPrefix
    // always use the name + a colon as the prefix, e.g., draggable:start
    // don't prefix for widgets that aren't DOM-based
    widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
  }, proxiedPrototype, {
    constructor: constructor,
    namespace: namespace,
    widgetName: name,
    widgetFullName: fullName
  } );

  // If this widget is being redefined then we need to find all widgets that
  // are inheriting from it and redefine all of them so that they inherit from
  // the new version of this widget. We're essentially trying to replace one
  // level in the prototype chain.
  if ( existingConstructor ) {
    $.each( existingConstructor._childConstructors, function( i, child ) {
      var childPrototype = child.prototype;

      // Redefine the child widget using the same prototype that was
      // originally used, but inherit from the new version of the base
      $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
        child._proto );
    } );

    // Remove the list of existing child constructors from the old constructor
    // so the old child constructors can be garbage collected
    delete existingConstructor._childConstructors;
  } else {
    base._childConstructors.push( constructor );
  }

  $.widget.bridge( name, constructor );

  return constructor;
};

$.widget.extend = function( target ) {
  var input = widgetSlice.call( arguments, 1 );
  var inputIndex = 0;
  var inputLength = input.length;
  var key;
  var value;

  for ( ; inputIndex < inputLength; inputIndex++ ) {
    for ( key in input[ inputIndex ] ) {
      value = input[ inputIndex ][ key ];
      if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

        // Clone objects
        if ( $.isPlainObject( value ) ) {
          target[ key ] = $.isPlainObject( target[ key ] ) ?
            $.widget.extend( {}, target[ key ], value ) :

            // Don't extend strings, arrays, etc. with objects
            $.widget.extend( {}, value );

        // Copy everything else by reference
        } else {
          target[ key ] = value;
        }
      }
    }
  }
  return target;
};

$.widget.bridge = function( name, object ) {
  var fullName = object.prototype.widgetFullName || name;
  $.fn[ name ] = function( options ) {
    var isMethodCall = typeof options === "string";
    var args = widgetSlice.call( arguments, 1 );
    var returnValue = this;

    if ( isMethodCall ) {

      // If this is an empty collection, we need to have the instance method
      // return undefined instead of the jQuery instance
      if ( !this.length && options === "instance" ) {
        returnValue = undefined;
      } else {
        this.each( function() {
          var methodValue;
          var instance = $.data( this, fullName );

          if ( options === "instance" ) {
            returnValue = instance;
            return false;
          }

          if ( !instance ) {
            return $.error( "cannot call methods on " + name +
              " prior to initialization; " +
              "attempted to call method '" + options + "'" );
          }

          if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
            return $.error( "no such method '" + options + "' for " + name +
              " widget instance" );
          }

          methodValue = instance[ options ].apply( instance, args );

          if ( methodValue !== instance && methodValue !== undefined ) {
            returnValue = methodValue && methodValue.jquery ?
              returnValue.pushStack( methodValue.get() ) :
              methodValue;
            return false;
          }
        } );
      }
    } else {

      // Allow multiple hashes to be passed on init
      if ( args.length ) {
        options = $.widget.extend.apply( null, [ options ].concat( args ) );
      }

      this.each( function() {
        var instance = $.data( this, fullName );
        if ( instance ) {
          instance.option( options || {} );
          if ( instance._init ) {
            instance._init();
          }
        } else {
          $.data( this, fullName, new object( options, this ) );
        }
      } );
    }

    return returnValue;
  };
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
  widgetName: "widget",
  widgetEventPrefix: "",
  defaultElement: "<div>",

  options: {
    classes: {},
    disabled: false,

    // Callbacks
    create: null
  },

  _createWidget: function( options, element ) {
    element = $( element || this.defaultElement || this )[ 0 ];
    this.element = $( element );
    this.uuid = widgetUuid++;
    this.eventNamespace = "." + this.widgetName + this.uuid;

    this.bindings = $();
    this.hoverable = $();
    this.focusable = $();
    this.classesElementLookup = {};

    if ( element !== this ) {
      $.data( element, this.widgetFullName, this );
      this._on( true, this.element, {
        remove: function( event ) {
          if ( event.target === element ) {
            this.destroy();
          }
        }
      } );
      this.document = $( element.style ?

        // Element within the document
        element.ownerDocument :

        // Element is window or document
        element.document || element );
      this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
    }

    this.options = $.widget.extend( {},
      this.options,
      this._getCreateOptions(),
      options );

    this._create();

    if ( this.options.disabled ) {
      this._setOptionDisabled( this.options.disabled );
    }

    this._trigger( "create", null, this._getCreateEventData() );
    this._init();
  },

  _getCreateOptions: function() {
    return {};
  },

  _getCreateEventData: $.noop,

  _create: $.noop,

  _init: $.noop,

  destroy: function() {
    var that = this;

    this._destroy();
    $.each( this.classesElementLookup, function( key, value ) {
      that._removeClass( value, key );
    } );

    // We can probably remove the unbind calls in 2.0
    // all event bindings should go through this._on()
    this.element
      .off( this.eventNamespace )
      .removeData( this.widgetFullName );
    this.widget()
      .off( this.eventNamespace )
      .removeAttr( "aria-disabled" );

    // Clean up events and states
    this.bindings.off( this.eventNamespace );
  },

  _destroy: $.noop,

  widget: function() {
    return this.element;
  },

  option: function( key, value ) {
    var options = key;
    var parts;
    var curOption;
    var i;

    if ( arguments.length === 0 ) {

      // Don't return a reference to the internal hash
      return $.widget.extend( {}, this.options );
    }

    if ( typeof key === "string" ) {

      // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
      options = {};
      parts = key.split( "." );
      key = parts.shift();
      if ( parts.length ) {
        curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
        for ( i = 0; i < parts.length - 1; i++ ) {
          curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
          curOption = curOption[ parts[ i ] ];
        }
        key = parts.pop();
        if ( arguments.length === 1 ) {
          return curOption[ key ] === undefined ? null : curOption[ key ];
        }
        curOption[ key ] = value;
      } else {
        if ( arguments.length === 1 ) {
          return this.options[ key ] === undefined ? null : this.options[ key ];
        }
        options[ key ] = value;
      }
    }

    this._setOptions( options );

    return this;
  },

  _setOptions: function( options ) {
    var key;

    for ( key in options ) {
      this._setOption( key, options[ key ] );
    }

    return this;
  },

  _setOption: function( key, value ) {
    if ( key === "classes" ) {
      this._setOptionClasses( value );
    }

    this.options[ key ] = value;

    if ( key === "disabled" ) {
      this._setOptionDisabled( value );
    }

    return this;
  },

  _setOptionClasses: function( value ) {
    var classKey, elements, currentElements;

    for ( classKey in value ) {
      currentElements = this.classesElementLookup[ classKey ];
      if ( value[ classKey ] === this.options.classes[ classKey ] ||
          !currentElements ||
          !currentElements.length ) {
        continue;
      }

      // We are doing this to create a new jQuery object because the _removeClass() call
      // on the next line is going to destroy the reference to the current elements being
      // tracked. We need to save a copy of this collection so that we can add the new classes
      // below.
      elements = $( currentElements.get() );
      this._removeClass( currentElements, classKey );

      // We don't use _addClass() here, because that uses this.options.classes
      // for generating the string of classes. We want to use the value passed in from
      // _setOption(), this is the new value of the classes option which was passed to
      // _setOption(). We pass this value directly to _classes().
      elements.addClass( this._classes( {
        element: elements,
        keys: classKey,
        classes: value,
        add: true
      } ) );
    }
  },

  _setOptionDisabled: function( value ) {
    this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

    // If the widget is becoming disabled, then nothing is interactive
    if ( value ) {
      this._removeClass( this.hoverable, null, "ui-state-hover" );
      this._removeClass( this.focusable, null, "ui-state-focus" );
    }
  },

  enable: function() {
    return this._setOptions( { disabled: false } );
  },

  disable: function() {
    return this._setOptions( { disabled: true } );
  },

  _classes: function( options ) {
    var full = [];
    var that = this;

    options = $.extend( {
      element: this.element,
      classes: this.options.classes || {}
    }, options );

    function processClassString( classes, checkOption ) {
      var current, i;
      for ( i = 0; i < classes.length; i++ ) {
        current = that.classesElementLookup[ classes[ i ] ] || $();
        if ( options.add ) {
          current = $( $.unique( current.get().concat( options.element.get() ) ) );
        } else {
          current = $( current.not( options.element ).get() );
        }
        that.classesElementLookup[ classes[ i ] ] = current;
        full.push( classes[ i ] );
        if ( checkOption && options.classes[ classes[ i ] ] ) {
          full.push( options.classes[ classes[ i ] ] );
        }
      }
    }

    this._on( options.element, {
      "remove": "_untrackClassesElement"
    } );

    if ( options.keys ) {
      processClassString( options.keys.match( /\S+/g ) || [], true );
    }
    if ( options.extra ) {
      processClassString( options.extra.match( /\S+/g ) || [] );
    }

    return full.join( " " );
  },

  _untrackClassesElement: function( event ) {
    var that = this;
    $.each( that.classesElementLookup, function( key, value ) {
      if ( $.inArray( event.target, value ) !== -1 ) {
        that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
      }
    } );
  },

  _removeClass: function( element, keys, extra ) {
    return this._toggleClass( element, keys, extra, false );
  },

  _addClass: function( element, keys, extra ) {
    return this._toggleClass( element, keys, extra, true );
  },

  _toggleClass: function( element, keys, extra, add ) {
    add = ( typeof add === "boolean" ) ? add : extra;
    var shift = ( typeof element === "string" || element === null ),
      options = {
        extra: shift ? keys : extra,
        keys: shift ? element : keys,
        element: shift ? this.element : element,
        add: add
      };
    options.element.toggleClass( this._classes( options ), add );
    return this;
  },

  _on: function( suppressDisabledCheck, element, handlers ) {
    var delegateElement;
    var instance = this;

    // No suppressDisabledCheck flag, shuffle arguments
    if ( typeof suppressDisabledCheck !== "boolean" ) {
      handlers = element;
      element = suppressDisabledCheck;
      suppressDisabledCheck = false;
    }

    // No element argument, shuffle and use this.element
    if ( !handlers ) {
      handlers = element;
      element = this.element;
      delegateElement = this.widget();
    } else {
      element = delegateElement = $( element );
      this.bindings = this.bindings.add( element );
    }

    $.each( handlers, function( event, handler ) {
      function handlerProxy() {

        // Allow widgets to customize the disabled handling
        // - disabled as an array instead of boolean
        // - disabled class as method for disabling individual parts
        if ( !suppressDisabledCheck &&
            ( instance.options.disabled === true ||
            $( this ).hasClass( "ui-state-disabled" ) ) ) {
          return;
        }
        return ( typeof handler === "string" ? instance[ handler ] : handler )
          .apply( instance, arguments );
      }

      // Copy the guid so direct unbinding works
      if ( typeof handler !== "string" ) {
        handlerProxy.guid = handler.guid =
          handler.guid || handlerProxy.guid || $.guid++;
      }

      var match = event.match( /^([\w:-]*)\s*(.*)$/ );
      var eventName = match[ 1 ] + instance.eventNamespace;
      var selector = match[ 2 ];

      if ( selector ) {
        delegateElement.on( eventName, selector, handlerProxy );
      } else {
        element.on( eventName, handlerProxy );
      }
    } );
  },

  _off: function( element, eventName ) {
    eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
      this.eventNamespace;
    element.off( eventName ).off( eventName );

    // Clear the stack to avoid memory leaks (#10056)
    this.bindings = $( this.bindings.not( element ).get() );
    this.focusable = $( this.focusable.not( element ).get() );
    this.hoverable = $( this.hoverable.not( element ).get() );
  },

  _delay: function( handler, delay ) {
    function handlerProxy() {
      return ( typeof handler === "string" ? instance[ handler ] : handler )
        .apply( instance, arguments );
    }
    var instance = this;
    return setTimeout( handlerProxy, delay || 0 );
  },

  _hoverable: function( element ) {
    this.hoverable = this.hoverable.add( element );
    this._on( element, {
      mouseenter: function( event ) {
        this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
      },
      mouseleave: function( event ) {
        this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
      }
    } );
  },

  _focusable: function( element ) {
    this.focusable = this.focusable.add( element );
    this._on( element, {
      focusin: function( event ) {
        this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
      },
      focusout: function( event ) {
        this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
      }
    } );
  },

  _trigger: function( type, event, data ) {
    var prop, orig;
    var callback = this.options[ type ];

    data = data || {};
    event = $.Event( event );
    event.type = ( type === this.widgetEventPrefix ?
      type :
      this.widgetEventPrefix + type ).toLowerCase();

    // The original event may come from any element
    // so we need to reset the target on the new event
    event.target = this.element[ 0 ];

    // Copy original event properties over to the new event
    orig = event.originalEvent;
    if ( orig ) {
      for ( prop in orig ) {
        if ( !( prop in event ) ) {
          event[ prop ] = orig[ prop ];
        }
      }
    }

    this.element.trigger( event, data );
    return !( $.isFunction( callback ) &&
      callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
      event.isDefaultPrevented() );
  }
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
  $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
    if ( typeof options === "string" ) {
      options = { effect: options };
    }

    var hasOptions;
    var effectName = !options ?
      method :
      options === true || typeof options === "number" ?
        defaultEffect :
        options.effect || defaultEffect;

    options = options || {};
    if ( typeof options === "number" ) {
      options = { duration: options };
    }

    hasOptions = !$.isEmptyObject( options );
    options.complete = callback;

    if ( options.delay ) {
      element.delay( options.delay );
    }

    if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
      element[ method ]( options );
    } else if ( effectName !== method && element[ effectName ] ) {
      element[ effectName ]( options.duration, options.easing, callback );
    } else {
      element.queue( function( next ) {
        $( this )[ method ]();
        if ( callback ) {
          callback.call( element[ 0 ] );
        }
        next();
      } );
    }
  };
} );

var widget = $.widget;


/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


( function() {
var cachedScrollbarWidth,
  max = Math.max,
  abs = Math.abs,
  rhorizontal = /left|center|right/,
  rvertical = /top|center|bottom/,
  roffset = /[\+\-]\d+(\.[\d]+)?%?/,
  rposition = /^\w+/,
  rpercent = /%$/,
  _position = $.fn.position;

function getOffsets( offsets, width, height ) {
  return [
    parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
    parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
  ];
}

function parseCss( element, property ) {
  return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
  var raw = elem[ 0 ];
  if ( raw.nodeType === 9 ) {
    return {
      width: elem.width(),
      height: elem.height(),
      offset: { top: 0, left: 0 }
    };
  }
  if ( $.isWindow( raw ) ) {
    return {
      width: elem.width(),
      height: elem.height(),
      offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
    };
  }
  if ( raw.preventDefault ) {
    return {
      width: 0,
      height: 0,
      offset: { top: raw.pageY, left: raw.pageX }
    };
  }
  return {
    width: elem.outerWidth(),
    height: elem.outerHeight(),
    offset: elem.offset()
  };
}

$.position = {
  scrollbarWidth: function() {
    if ( cachedScrollbarWidth !== undefined ) {
      return cachedScrollbarWidth;
    }
    var w1, w2,
      div = $( "<div " +
        "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
        "<div style='height:100px;width:auto;'></div></div>" ),
      innerDiv = div.children()[ 0 ];

    $( "body" ).append( div );
    w1 = innerDiv.offsetWidth;
    div.css( "overflow", "scroll" );

    w2 = innerDiv.offsetWidth;

    if ( w1 === w2 ) {
      w2 = div[ 0 ].clientWidth;
    }

    div.remove();

    return ( cachedScrollbarWidth = w1 - w2 );
  },
  getScrollInfo: function( within ) {
    var overflowX = within.isWindow || within.isDocument ? "" :
        within.element.css( "overflow-x" ),
      overflowY = within.isWindow || within.isDocument ? "" :
        within.element.css( "overflow-y" ),
      hasOverflowX = overflowX === "scroll" ||
        ( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
      hasOverflowY = overflowY === "scroll" ||
        ( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
    return {
      width: hasOverflowY ? $.position.scrollbarWidth() : 0,
      height: hasOverflowX ? $.position.scrollbarWidth() : 0
    };
  },
  getWithinInfo: function( element ) {
    var withinElement = $( element || window ),
      isWindow = $.isWindow( withinElement[ 0 ] ),
      isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
      hasOffset = !isWindow && !isDocument;
    return {
      element: withinElement,
      isWindow: isWindow,
      isDocument: isDocument,
      offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
      scrollLeft: withinElement.scrollLeft(),
      scrollTop: withinElement.scrollTop(),
      width: withinElement.outerWidth(),
      height: withinElement.outerHeight()
    };
  }
};

$.fn.position = function( options ) {
  if ( !options || !options.of ) {
    return _position.apply( this, arguments );
  }

  // Make a copy, we don't want to modify arguments
  options = $.extend( {}, options );

  var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
    target = $( options.of ),
    within = $.position.getWithinInfo( options.within ),
    scrollInfo = $.position.getScrollInfo( within ),
    collision = ( options.collision || "flip" ).split( " " ),
    offsets = {};

  dimensions = getDimensions( target );
  if ( target[ 0 ].preventDefault ) {

    // Force left top to allow flipping
    options.at = "left top";
  }
  targetWidth = dimensions.width;
  targetHeight = dimensions.height;
  targetOffset = dimensions.offset;

  // Clone to reuse original targetOffset later
  basePosition = $.extend( {}, targetOffset );

  // Force my and at to have valid horizontal and vertical positions
  // if a value is missing or invalid, it will be converted to center
  $.each( [ "my", "at" ], function() {
    var pos = ( options[ this ] || "" ).split( " " ),
      horizontalOffset,
      verticalOffset;

    if ( pos.length === 1 ) {
      pos = rhorizontal.test( pos[ 0 ] ) ?
        pos.concat( [ "center" ] ) :
        rvertical.test( pos[ 0 ] ) ?
          [ "center" ].concat( pos ) :
          [ "center", "center" ];
    }
    pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
    pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

    // Calculate offsets
    horizontalOffset = roffset.exec( pos[ 0 ] );
    verticalOffset = roffset.exec( pos[ 1 ] );
    offsets[ this ] = [
      horizontalOffset ? horizontalOffset[ 0 ] : 0,
      verticalOffset ? verticalOffset[ 0 ] : 0
    ];

    // Reduce to just the positions without the offsets
    options[ this ] = [
      rposition.exec( pos[ 0 ] )[ 0 ],
      rposition.exec( pos[ 1 ] )[ 0 ]
    ];
  } );

  // Normalize collision option
  if ( collision.length === 1 ) {
    collision[ 1 ] = collision[ 0 ];
  }

  if ( options.at[ 0 ] === "right" ) {
    basePosition.left += targetWidth;
  } else if ( options.at[ 0 ] === "center" ) {
    basePosition.left += targetWidth / 2;
  }

  if ( options.at[ 1 ] === "bottom" ) {
    basePosition.top += targetHeight;
  } else if ( options.at[ 1 ] === "center" ) {
    basePosition.top += targetHeight / 2;
  }

  atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
  basePosition.left += atOffset[ 0 ];
  basePosition.top += atOffset[ 1 ];

  return this.each( function() {
    var collisionPosition, using,
      elem = $( this ),
      elemWidth = elem.outerWidth(),
      elemHeight = elem.outerHeight(),
      marginLeft = parseCss( this, "marginLeft" ),
      marginTop = parseCss( this, "marginTop" ),
      collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
        scrollInfo.width,
      collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
        scrollInfo.height,
      position = $.extend( {}, basePosition ),
      myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

    if ( options.my[ 0 ] === "right" ) {
      position.left -= elemWidth;
    } else if ( options.my[ 0 ] === "center" ) {
      position.left -= elemWidth / 2;
    }

    if ( options.my[ 1 ] === "bottom" ) {
      position.top -= elemHeight;
    } else if ( options.my[ 1 ] === "center" ) {
      position.top -= elemHeight / 2;
    }

    position.left += myOffset[ 0 ];
    position.top += myOffset[ 1 ];

    collisionPosition = {
      marginLeft: marginLeft,
      marginTop: marginTop
    };

    $.each( [ "left", "top" ], function( i, dir ) {
      if ( $.ui.position[ collision[ i ] ] ) {
        $.ui.position[ collision[ i ] ][ dir ]( position, {
          targetWidth: targetWidth,
          targetHeight: targetHeight,
          elemWidth: elemWidth,
          elemHeight: elemHeight,
          collisionPosition: collisionPosition,
          collisionWidth: collisionWidth,
          collisionHeight: collisionHeight,
          offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
          my: options.my,
          at: options.at,
          within: within,
          elem: elem
        } );
      }
    } );

    if ( options.using ) {

      // Adds feedback as second argument to using callback, if present
      using = function( props ) {
        var left = targetOffset.left - position.left,
          right = left + targetWidth - elemWidth,
          top = targetOffset.top - position.top,
          bottom = top + targetHeight - elemHeight,
          feedback = {
            target: {
              element: target,
              left: targetOffset.left,
              top: targetOffset.top,
              width: targetWidth,
              height: targetHeight
            },
            element: {
              element: elem,
              left: position.left,
              top: position.top,
              width: elemWidth,
              height: elemHeight
            },
            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
          };
        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
          feedback.horizontal = "center";
        }
        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
          feedback.vertical = "middle";
        }
        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
          feedback.important = "horizontal";
        } else {
          feedback.important = "vertical";
        }
        options.using.call( this, props, feedback );
      };
    }

    elem.offset( $.extend( position, { using: using } ) );
  } );
};

$.ui.position = {
  fit: {
    left: function( position, data ) {
      var within = data.within,
        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
        outerWidth = within.width,
        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
        overLeft = withinOffset - collisionPosLeft,
        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
        newOverRight;

      // Element is wider than within
      if ( data.collisionWidth > outerWidth ) {

        // Element is initially over the left side of within
        if ( overLeft > 0 && overRight <= 0 ) {
          newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
            withinOffset;
          position.left += overLeft - newOverRight;

        // Element is initially over right side of within
        } else if ( overRight > 0 && overLeft <= 0 ) {
          position.left = withinOffset;

        // Element is initially over both left and right sides of within
        } else {
          if ( overLeft > overRight ) {
            position.left = withinOffset + outerWidth - data.collisionWidth;
          } else {
            position.left = withinOffset;
          }
        }

      // Too far left -> align with left edge
      } else if ( overLeft > 0 ) {
        position.left += overLeft;

      // Too far right -> align with right edge
      } else if ( overRight > 0 ) {
        position.left -= overRight;

      // Adjust based on position and margin
      } else {
        position.left = max( position.left - collisionPosLeft, position.left );
      }
    },
    top: function( position, data ) {
      var within = data.within,
        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
        outerHeight = data.within.height,
        collisionPosTop = position.top - data.collisionPosition.marginTop,
        overTop = withinOffset - collisionPosTop,
        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
        newOverBottom;

      // Element is taller than within
      if ( data.collisionHeight > outerHeight ) {

        // Element is initially over the top of within
        if ( overTop > 0 && overBottom <= 0 ) {
          newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
            withinOffset;
          position.top += overTop - newOverBottom;

        // Element is initially over bottom of within
        } else if ( overBottom > 0 && overTop <= 0 ) {
          position.top = withinOffset;

        // Element is initially over both top and bottom of within
        } else {
          if ( overTop > overBottom ) {
            position.top = withinOffset + outerHeight - data.collisionHeight;
          } else {
            position.top = withinOffset;
          }
        }

      // Too far up -> align with top
      } else if ( overTop > 0 ) {
        position.top += overTop;

      // Too far down -> align with bottom edge
      } else if ( overBottom > 0 ) {
        position.top -= overBottom;

      // Adjust based on position and margin
      } else {
        position.top = max( position.top - collisionPosTop, position.top );
      }
    }
  },
  flip: {
    left: function( position, data ) {
      var within = data.within,
        withinOffset = within.offset.left + within.scrollLeft,
        outerWidth = within.width,
        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
        overLeft = collisionPosLeft - offsetLeft,
        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
        myOffset = data.my[ 0 ] === "left" ?
          -data.elemWidth :
          data.my[ 0 ] === "right" ?
            data.elemWidth :
            0,
        atOffset = data.at[ 0 ] === "left" ?
          data.targetWidth :
          data.at[ 0 ] === "right" ?
            -data.targetWidth :
            0,
        offset = -2 * data.offset[ 0 ],
        newOverRight,
        newOverLeft;

      if ( overLeft < 0 ) {
        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
          outerWidth - withinOffset;
        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
          position.left += myOffset + atOffset + offset;
        }
      } else if ( overRight > 0 ) {
        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
          atOffset + offset - offsetLeft;
        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
          position.left += myOffset + atOffset + offset;
        }
      }
    },
    top: function( position, data ) {
      var within = data.within,
        withinOffset = within.offset.top + within.scrollTop,
        outerHeight = within.height,
        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
        collisionPosTop = position.top - data.collisionPosition.marginTop,
        overTop = collisionPosTop - offsetTop,
        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
        top = data.my[ 1 ] === "top",
        myOffset = top ?
          -data.elemHeight :
          data.my[ 1 ] === "bottom" ?
            data.elemHeight :
            0,
        atOffset = data.at[ 1 ] === "top" ?
          data.targetHeight :
          data.at[ 1 ] === "bottom" ?
            -data.targetHeight :
            0,
        offset = -2 * data.offset[ 1 ],
        newOverTop,
        newOverBottom;
      if ( overTop < 0 ) {
        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
          outerHeight - withinOffset;
        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
          position.top += myOffset + atOffset + offset;
        }
      } else if ( overBottom > 0 ) {
        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
          offset - offsetTop;
        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
          position.top += myOffset + atOffset + offset;
        }
      }
    }
  },
  flipfit: {
    left: function() {
      $.ui.position.flip.left.apply( this, arguments );
      $.ui.position.fit.left.apply( this, arguments );
    },
    top: function() {
      $.ui.position.flip.top.apply( this, arguments );
      $.ui.position.fit.top.apply( this, arguments );
    }
  }
};

} )();

var position = $.ui.position;


/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/


var data = $.extend( $.expr[ ":" ], {
  data: $.expr.createPseudo ?
    $.expr.createPseudo( function( dataName ) {
      return function( elem ) {
        return !!$.data( elem, dataName );
      };
    } ) :

    // Support: jQuery <1.8
    function( elem, i, match ) {
      return !!$.data( elem, match[ 3 ] );
    }
} );

/*!
 * jQuery UI Disable Selection 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated


var disableSelection = $.fn.extend( {
  disableSelection: ( function() {
    var eventType = "onselectstart" in document.createElement( "div" ) ?
      "selectstart" :
      "mousedown";

    return function() {
      return this.on( eventType + ".ui-disableSelection", function( event ) {
        event.preventDefault();
      } );
    };
  } )(),

  enableSelection: function() {
    return this.off( ".ui-disableSelection" );
  }
} );


/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Effects Core
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/category/effects-core/
//>>demos: http://jqueryui.com/effect/



var dataSpace = "ui-effects-",
  dataSpaceStyle = "ui-effects-style",
  dataSpaceAnimated = "ui-effects-animated",

  // Create a local jQuery because jQuery Color relies on it and the
  // global may not exist with AMD and a custom build (#10199)
  jQuery = $;

$.effects = {
  effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
( function( jQuery, undefined ) {

  var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
    "borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

  // Plusequals test for += 100 -= 100
  rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

  // A set of RE's that can match strings and generate color tuples.
  stringParsers = [ {
      re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function( execResult ) {
        return [
          execResult[ 1 ],
          execResult[ 2 ],
          execResult[ 3 ],
          execResult[ 4 ]
        ];
      }
    }, {
      re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      parse: function( execResult ) {
        return [
          execResult[ 1 ] * 2.55,
          execResult[ 2 ] * 2.55,
          execResult[ 3 ] * 2.55,
          execResult[ 4 ]
        ];
      }
    }, {

      // This regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
      parse: function( execResult ) {
        return [
          parseInt( execResult[ 1 ], 16 ),
          parseInt( execResult[ 2 ], 16 ),
          parseInt( execResult[ 3 ], 16 )
        ];
      }
    }, {

      // This regex ignores A-F because it's compared against an already lowercased string
      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
      parse: function( execResult ) {
        return [
          parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
          parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
          parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
        ];
      }
    }, {
      re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
      space: "hsla",
      parse: function( execResult ) {
        return [
          execResult[ 1 ],
          execResult[ 2 ] / 100,
          execResult[ 3 ] / 100,
          execResult[ 4 ]
        ];
      }
    } ],

  // JQuery.Color( )
  color = jQuery.Color = function( color, green, blue, alpha ) {
    return new jQuery.Color.fn.parse( color, green, blue, alpha );
  },
  spaces = {
    rgba: {
      props: {
        red: {
          idx: 0,
          type: "byte"
        },
        green: {
          idx: 1,
          type: "byte"
        },
        blue: {
          idx: 2,
          type: "byte"
        }
      }
    },

    hsla: {
      props: {
        hue: {
          idx: 0,
          type: "degrees"
        },
        saturation: {
          idx: 1,
          type: "percent"
        },
        lightness: {
          idx: 2,
          type: "percent"
        }
      }
    }
  },
  propTypes = {
    "byte": {
      floor: true,
      max: 255
    },
    "percent": {
      max: 1
    },
    "degrees": {
      mod: 360,
      floor: true
    }
  },
  support = color.support = {},

  // Element for support tests
  supportElem = jQuery( "<p>" )[ 0 ],

  // Colors = jQuery.Color.names
  colors,

  // Local aliases of functions called often
  each = jQuery.each;

// Determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// Define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
  space.cache = "_" + spaceName;
  space.props.alpha = {
    idx: 3,
    type: "percent",
    def: 1
  };
} );

function clamp( value, prop, allowEmpty ) {
  var type = propTypes[ prop.type ] || {};

  if ( value == null ) {
    return ( allowEmpty || !prop.def ) ? null : prop.def;
  }

  // ~~ is an short way of doing floor for positive numbers
  value = type.floor ? ~~value : parseFloat( value );

  // IE will pass in empty strings as value for alpha,
  // which will hit this case
  if ( isNaN( value ) ) {
    return prop.def;
  }

  if ( type.mod ) {

    // We add mod before modding to make sure that negatives values
    // get converted properly: -10 -> 350
    return ( value + type.mod ) % type.mod;
  }

  // For now all property types without mod have min and max
  return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
  var inst = color(),
    rgba = inst._rgba = [];

  string = string.toLowerCase();

  each( stringParsers, function( i, parser ) {
    var parsed,
      match = parser.re.exec( string ),
      values = match && parser.parse( match ),
      spaceName = parser.space || "rgba";

    if ( values ) {
      parsed = inst[ spaceName ]( values );

      // If this was an rgba parse the assignment might happen twice
      // oh well....
      inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
      rgba = inst._rgba = parsed._rgba;

      // Exit each( stringParsers ) here because we matched
      return false;
    }
  } );

  // Found a stringParser that handled it
  if ( rgba.length ) {

    // If this came from a parsed string, force "transparent" when alpha is 0
    // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
    if ( rgba.join() === "0,0,0,0" ) {
      jQuery.extend( rgba, colors.transparent );
    }
    return inst;
  }

  // Named colors
  return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
  parse: function( red, green, blue, alpha ) {
    if ( red === undefined ) {
      this._rgba = [ null, null, null, null ];
      return this;
    }
    if ( red.jquery || red.nodeType ) {
      red = jQuery( red ).css( green );
      green = undefined;
    }

    var inst = this,
      type = jQuery.type( red ),
      rgba = this._rgba = [];

    // More than 1 argument specified - assume ( red, green, blue, alpha )
    if ( green !== undefined ) {
      red = [ red, green, blue, alpha ];
      type = "array";
    }

    if ( type === "string" ) {
      return this.parse( stringParse( red ) || colors._default );
    }

    if ( type === "array" ) {
      each( spaces.rgba.props, function( key, prop ) {
        rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
      } );
      return this;
    }

    if ( type === "object" ) {
      if ( red instanceof color ) {
        each( spaces, function( spaceName, space ) {
          if ( red[ space.cache ] ) {
            inst[ space.cache ] = red[ space.cache ].slice();
          }
        } );
      } else {
        each( spaces, function( spaceName, space ) {
          var cache = space.cache;
          each( space.props, function( key, prop ) {

            // If the cache doesn't exist, and we know how to convert
            if ( !inst[ cache ] && space.to ) {

              // If the value was null, we don't need to copy it
              // if the key was alpha, we don't need to copy it either
              if ( key === "alpha" || red[ key ] == null ) {
                return;
              }
              inst[ cache ] = space.to( inst._rgba );
            }

            // This is the only case where we allow nulls for ALL properties.
            // call clamp with alwaysAllowEmpty
            inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
          } );

          // Everything defined but alpha?
          if ( inst[ cache ] &&
              jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {

            // Use the default of 1
            inst[ cache ][ 3 ] = 1;
            if ( space.from ) {
              inst._rgba = space.from( inst[ cache ] );
            }
          }
        } );
      }
      return this;
    }
  },
  is: function( compare ) {
    var is = color( compare ),
      same = true,
      inst = this;

    each( spaces, function( _, space ) {
      var localCache,
        isCache = is[ space.cache ];
      if ( isCache ) {
        localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
        each( space.props, function( _, prop ) {
          if ( isCache[ prop.idx ] != null ) {
            same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
            return same;
          }
        } );
      }
      return same;
    } );
    return same;
  },
  _space: function() {
    var used = [],
      inst = this;
    each( spaces, function( spaceName, space ) {
      if ( inst[ space.cache ] ) {
        used.push( spaceName );
      }
    } );
    return used.pop();
  },
  transition: function( other, distance ) {
    var end = color( other ),
      spaceName = end._space(),
      space = spaces[ spaceName ],
      startColor = this.alpha() === 0 ? color( "transparent" ) : this,
      start = startColor[ space.cache ] || space.to( startColor._rgba ),
      result = start.slice();

    end = end[ space.cache ];
    each( space.props, function( key, prop ) {
      var index = prop.idx,
        startValue = start[ index ],
        endValue = end[ index ],
        type = propTypes[ prop.type ] || {};

      // If null, don't override start value
      if ( endValue === null ) {
        return;
      }

      // If null - use end
      if ( startValue === null ) {
        result[ index ] = endValue;
      } else {
        if ( type.mod ) {
          if ( endValue - startValue > type.mod / 2 ) {
            startValue += type.mod;
          } else if ( startValue - endValue > type.mod / 2 ) {
            startValue -= type.mod;
          }
        }
        result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
      }
    } );
    return this[ spaceName ]( result );
  },
  blend: function( opaque ) {

    // If we are already opaque - return ourself
    if ( this._rgba[ 3 ] === 1 ) {
      return this;
    }

    var rgb = this._rgba.slice(),
      a = rgb.pop(),
      blend = color( opaque )._rgba;

    return color( jQuery.map( rgb, function( v, i ) {
      return ( 1 - a ) * blend[ i ] + a * v;
    } ) );
  },
  toRgbaString: function() {
    var prefix = "rgba(",
      rgba = jQuery.map( this._rgba, function( v, i ) {
        return v == null ? ( i > 2 ? 1 : 0 ) : v;
      } );

    if ( rgba[ 3 ] === 1 ) {
      rgba.pop();
      prefix = "rgb(";
    }

    return prefix + rgba.join() + ")";
  },
  toHslaString: function() {
    var prefix = "hsla(",
      hsla = jQuery.map( this.hsla(), function( v, i ) {
        if ( v == null ) {
          v = i > 2 ? 1 : 0;
        }

        // Catch 1 and 2
        if ( i && i < 3 ) {
          v = Math.round( v * 100 ) + "%";
        }
        return v;
      } );

    if ( hsla[ 3 ] === 1 ) {
      hsla.pop();
      prefix = "hsl(";
    }
    return prefix + hsla.join() + ")";
  },
  toHexString: function( includeAlpha ) {
    var rgba = this._rgba.slice(),
      alpha = rgba.pop();

    if ( includeAlpha ) {
      rgba.push( ~~( alpha * 255 ) );
    }

    return "#" + jQuery.map( rgba, function( v ) {

      // Default to 0 when nulls exist
      v = ( v || 0 ).toString( 16 );
      return v.length === 1 ? "0" + v : v;
    } ).join( "" );
  },
  toString: function() {
    return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
  }
} );
color.fn.parse.prototype = color.fn;

// Hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
  h = ( h + 1 ) % 1;
  if ( h * 6 < 1 ) {
    return p + ( q - p ) * h * 6;
  }
  if ( h * 2 < 1 ) {
    return q;
  }
  if ( h * 3 < 2 ) {
    return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
  }
  return p;
}

spaces.hsla.to = function( rgba ) {
  if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
    return [ null, null, null, rgba[ 3 ] ];
  }
  var r = rgba[ 0 ] / 255,
    g = rgba[ 1 ] / 255,
    b = rgba[ 2 ] / 255,
    a = rgba[ 3 ],
    max = Math.max( r, g, b ),
    min = Math.min( r, g, b ),
    diff = max - min,
    add = max + min,
    l = add * 0.5,
    h, s;

  if ( min === max ) {
    h = 0;
  } else if ( r === max ) {
    h = ( 60 * ( g - b ) / diff ) + 360;
  } else if ( g === max ) {
    h = ( 60 * ( b - r ) / diff ) + 120;
  } else {
    h = ( 60 * ( r - g ) / diff ) + 240;
  }

  // Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
  // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
  if ( diff === 0 ) {
    s = 0;
  } else if ( l <= 0.5 ) {
    s = diff / add;
  } else {
    s = diff / ( 2 - add );
  }
  return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
  if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
    return [ null, null, null, hsla[ 3 ] ];
  }
  var h = hsla[ 0 ] / 360,
    s = hsla[ 1 ],
    l = hsla[ 2 ],
    a = hsla[ 3 ],
    q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
    p = 2 * l - q;

  return [
    Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
    Math.round( hue2rgb( p, q, h ) * 255 ),
    Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
    a
  ];
};

each( spaces, function( spaceName, space ) {
  var props = space.props,
    cache = space.cache,
    to = space.to,
    from = space.from;

  // Makes rgba() and hsla()
  color.fn[ spaceName ] = function( value ) {

    // Generate a cache for this space if it doesn't exist
    if ( to && !this[ cache ] ) {
      this[ cache ] = to( this._rgba );
    }
    if ( value === undefined ) {
      return this[ cache ].slice();
    }

    var ret,
      type = jQuery.type( value ),
      arr = ( type === "array" || type === "object" ) ? value : arguments,
      local = this[ cache ].slice();

    each( props, function( key, prop ) {
      var val = arr[ type === "object" ? key : prop.idx ];
      if ( val == null ) {
        val = local[ prop.idx ];
      }
      local[ prop.idx ] = clamp( val, prop );
    } );

    if ( from ) {
      ret = color( from( local ) );
      ret[ cache ] = local;
      return ret;
    } else {
      return color( local );
    }
  };

  // Makes red() green() blue() alpha() hue() saturation() lightness()
  each( props, function( key, prop ) {

    // Alpha is included in more than one space
    if ( color.fn[ key ] ) {
      return;
    }
    color.fn[ key ] = function( value ) {
      var vtype = jQuery.type( value ),
        fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
        local = this[ fn ](),
        cur = local[ prop.idx ],
        match;

      if ( vtype === "undefined" ) {
        return cur;
      }

      if ( vtype === "function" ) {
        value = value.call( this, cur );
        vtype = jQuery.type( value );
      }
      if ( value == null && prop.empty ) {
        return this;
      }
      if ( vtype === "string" ) {
        match = rplusequals.exec( value );
        if ( match ) {
          value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
        }
      }
      local[ prop.idx ] = value;
      return this[ fn ]( local );
    };
  } );
} );

// Add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
  var hooks = hook.split( " " );
  each( hooks, function( i, hook ) {
    jQuery.cssHooks[ hook ] = {
      set: function( elem, value ) {
        var parsed, curElem,
          backgroundColor = "";

        if ( value !== "transparent" && ( jQuery.type( value ) !== "string" ||
            ( parsed = stringParse( value ) ) ) ) {
          value = color( parsed || value );
          if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
            curElem = hook === "backgroundColor" ? elem.parentNode : elem;
            while (
              ( backgroundColor === "" || backgroundColor === "transparent" ) &&
              curElem && curElem.style
            ) {
              try {
                backgroundColor = jQuery.css( curElem, "backgroundColor" );
                curElem = curElem.parentNode;
              } catch ( e ) {
              }
            }

            value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
              backgroundColor :
              "_default" );
          }

          value = value.toRgbaString();
        }
        try {
          elem.style[ hook ] = value;
        } catch ( e ) {

          // Wrapped to prevent IE from throwing errors on "invalid" values like
          // 'auto' or 'inherit'
        }
      }
    };
    jQuery.fx.step[ hook ] = function( fx ) {
      if ( !fx.colorInit ) {
        fx.start = color( fx.elem, hook );
        fx.end = color( fx.end );
        fx.colorInit = true;
      }
      jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
    };
  } );

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
  expand: function( value ) {
    var expanded = {};

    each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
      expanded[ "border" + part + "Color" ] = value;
    } );
    return expanded;
  }
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {

  // 4.1. Basic color keywords
  aqua: "#00ffff",
  black: "#000000",
  blue: "#0000ff",
  fuchsia: "#ff00ff",
  gray: "#808080",
  green: "#008000",
  lime: "#00ff00",
  maroon: "#800000",
  navy: "#000080",
  olive: "#808000",
  purple: "#800080",
  red: "#ff0000",
  silver: "#c0c0c0",
  teal: "#008080",
  white: "#ffffff",
  yellow: "#ffff00",

  // 4.2.3. "transparent" color keyword
  transparent: [ null, null, null, 0 ],

  _default: "#ffffff"
};

} )( jQuery );

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
( function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
  shorthandStyles = {
    border: 1,
    borderBottom: 1,
    borderColor: 1,
    borderLeft: 1,
    borderRight: 1,
    borderTop: 1,
    borderWidth: 1,
    margin: 1,
    padding: 1
  };

$.each(
  [ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
  function( _, prop ) {
    $.fx.step[ prop ] = function( fx ) {
      if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
        jQuery.style( fx.elem, prop, fx.end );
        fx.setAttr = true;
      }
    };
  }
);

function getElementStyles( elem ) {
  var key, len,
    style = elem.ownerDocument.defaultView ?
      elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
      elem.currentStyle,
    styles = {};

  if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
    len = style.length;
    while ( len-- ) {
      key = style[ len ];
      if ( typeof style[ key ] === "string" ) {
        styles[ $.camelCase( key ) ] = style[ key ];
      }
    }

  // Support: Opera, IE <9
  } else {
    for ( key in style ) {
      if ( typeof style[ key ] === "string" ) {
        styles[ key ] = style[ key ];
      }
    }
  }

  return styles;
}

function styleDifference( oldStyle, newStyle ) {
  var diff = {},
    name, value;

  for ( name in newStyle ) {
    value = newStyle[ name ];
    if ( oldStyle[ name ] !== value ) {
      if ( !shorthandStyles[ name ] ) {
        if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
          diff[ name ] = value;
        }
      }
    }
  }

  return diff;
}

// Support: jQuery <1.8
if ( !$.fn.addBack ) {
  $.fn.addBack = function( selector ) {
    return this.add( selector == null ?
      this.prevObject : this.prevObject.filter( selector )
    );
  };
}

$.effects.animateClass = function( value, duration, easing, callback ) {
  var o = $.speed( duration, easing, callback );

  return this.queue( function() {
    var animated = $( this ),
      baseClass = animated.attr( "class" ) || "",
      applyClassChange,
      allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

    // Map the animated objects to store the original styles.
    allAnimations = allAnimations.map( function() {
      var el = $( this );
      return {
        el: el,
        start: getElementStyles( this )
      };
    } );

    // Apply class change
    applyClassChange = function() {
      $.each( classAnimationActions, function( i, action ) {
        if ( value[ action ] ) {
          animated[ action + "Class" ]( value[ action ] );
        }
      } );
    };
    applyClassChange();

    // Map all animated objects again - calculate new styles and diff
    allAnimations = allAnimations.map( function() {
      this.end = getElementStyles( this.el[ 0 ] );
      this.diff = styleDifference( this.start, this.end );
      return this;
    } );

    // Apply original class
    animated.attr( "class", baseClass );

    // Map all animated objects again - this time collecting a promise
    allAnimations = allAnimations.map( function() {
      var styleInfo = this,
        dfd = $.Deferred(),
        opts = $.extend( {}, o, {
          queue: false,
          complete: function() {
            dfd.resolve( styleInfo );
          }
        } );

      this.el.animate( this.diff, opts );
      return dfd.promise();
    } );

    // Once all animations have completed:
    $.when.apply( $, allAnimations.get() ).done( function() {

      // Set the final class
      applyClassChange();

      // For each animated element,
      // clear all css properties that were animated
      $.each( arguments, function() {
        var el = this.el;
        $.each( this.diff, function( key ) {
          el.css( key, "" );
        } );
      } );

      // This is guarnteed to be there if you use jQuery.speed()
      // it also handles dequeuing the next anim...
      o.complete.call( animated[ 0 ] );
    } );
  } );
};

$.fn.extend( {
  addClass: ( function( orig ) {
    return function( classNames, speed, easing, callback ) {
      return speed ?
        $.effects.animateClass.call( this,
          { add: classNames }, speed, easing, callback ) :
        orig.apply( this, arguments );
    };
  } )( $.fn.addClass ),

  removeClass: ( function( orig ) {
    return function( classNames, speed, easing, callback ) {
      return arguments.length > 1 ?
        $.effects.animateClass.call( this,
          { remove: classNames }, speed, easing, callback ) :
        orig.apply( this, arguments );
    };
  } )( $.fn.removeClass ),

  toggleClass: ( function( orig ) {
    return function( classNames, force, speed, easing, callback ) {
      if ( typeof force === "boolean" || force === undefined ) {
        if ( !speed ) {

          // Without speed parameter
          return orig.apply( this, arguments );
        } else {
          return $.effects.animateClass.call( this,
            ( force ? { add: classNames } : { remove: classNames } ),
            speed, easing, callback );
        }
      } else {

        // Without force parameter
        return $.effects.animateClass.call( this,
          { toggle: classNames }, force, speed, easing );
      }
    };
  } )( $.fn.toggleClass ),

  switchClass: function( remove, add, speed, easing, callback ) {
    return $.effects.animateClass.call( this, {
      add: add,
      remove: remove
    }, speed, easing, callback );
  }
} );

} )();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

( function() {

if ( $.expr && $.expr.filters && $.expr.filters.animated ) {
  $.expr.filters.animated = ( function( orig ) {
    return function( elem ) {
      return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
    };
  } )( $.expr.filters.animated );
}

if ( $.uiBackCompat !== false ) {
  $.extend( $.effects, {

    // Saves a set of properties in a data storage
    save: function( element, set ) {
      var i = 0, length = set.length;
      for ( ; i < length; i++ ) {
        if ( set[ i ] !== null ) {
          element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
        }
      }
    },

    // Restores a set of previously saved properties from a data storage
    restore: function( element, set ) {
      var val, i = 0, length = set.length;
      for ( ; i < length; i++ ) {
        if ( set[ i ] !== null ) {
          val = element.data( dataSpace + set[ i ] );
          element.css( set[ i ], val );
        }
      }
    },

    setMode: function( el, mode ) {
      if ( mode === "toggle" ) {
        mode = el.is( ":hidden" ) ? "show" : "hide";
      }
      return mode;
    },

    // Wraps the element around a wrapper that copies position properties
    createWrapper: function( element ) {

      // If the element is already wrapped, return it
      if ( element.parent().is( ".ui-effects-wrapper" ) ) {
        return element.parent();
      }

      // Wrap the element
      var props = {
          width: element.outerWidth( true ),
          height: element.outerHeight( true ),
          "float": element.css( "float" )
        },
        wrapper = $( "<div></div>" )
          .addClass( "ui-effects-wrapper" )
          .css( {
            fontSize: "100%",
            background: "transparent",
            border: "none",
            margin: 0,
            padding: 0
          } ),

        // Store the size in case width/height are defined in % - Fixes #5245
        size = {
          width: element.width(),
          height: element.height()
        },
        active = document.activeElement;

      // Support: Firefox
      // Firefox incorrectly exposes anonymous content
      // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
      try {
        active.id;
      } catch ( e ) {
        active = document.body;
      }

      element.wrap( wrapper );

      // Fixes #7595 - Elements lose focus when wrapped.
      if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
        $( active ).trigger( "focus" );
      }

      // Hotfix for jQuery 1.4 since some change in wrap() seems to actually
      // lose the reference to the wrapped element
      wrapper = element.parent();

      // Transfer positioning properties to the wrapper
      if ( element.css( "position" ) === "static" ) {
        wrapper.css( { position: "relative" } );
        element.css( { position: "relative" } );
      } else {
        $.extend( props, {
          position: element.css( "position" ),
          zIndex: element.css( "z-index" )
        } );
        $.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
          props[ pos ] = element.css( pos );
          if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
            props[ pos ] = "auto";
          }
        } );
        element.css( {
          position: "relative",
          top: 0,
          left: 0,
          right: "auto",
          bottom: "auto"
        } );
      }
      element.css( size );

      return wrapper.css( props ).show();
    },

    removeWrapper: function( element ) {
      var active = document.activeElement;

      if ( element.parent().is( ".ui-effects-wrapper" ) ) {
        element.parent().replaceWith( element );

        // Fixes #7595 - Elements lose focus when wrapped.
        if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
          $( active ).trigger( "focus" );
        }
      }

      return element;
    }
  } );
}

$.extend( $.effects, {
  version: "1.12.1",

  define: function( name, mode, effect ) {
    if ( !effect ) {
      effect = mode;
      mode = "effect";
    }

    $.effects.effect[ name ] = effect;
    $.effects.effect[ name ].mode = mode;

    return effect;
  },

  scaledDimensions: function( element, percent, direction ) {
    if ( percent === 0 ) {
      return {
        height: 0,
        width: 0,
        outerHeight: 0,
        outerWidth: 0
      };
    }

    var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
      y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

    return {
      height: element.height() * y,
      width: element.width() * x,
      outerHeight: element.outerHeight() * y,
      outerWidth: element.outerWidth() * x
    };

  },

  clipToBox: function( animation ) {
    return {
      width: animation.clip.right - animation.clip.left,
      height: animation.clip.bottom - animation.clip.top,
      left: animation.clip.left,
      top: animation.clip.top
    };
  },

  // Injects recently queued functions to be first in line (after "inprogress")
  unshift: function( element, queueLength, count ) {
    var queue = element.queue();

    if ( queueLength > 1 ) {
      queue.splice.apply( queue,
        [ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
    }
    element.dequeue();
  },

  saveStyle: function( element ) {
    element.data( dataSpaceStyle, element[ 0 ].style.cssText );
  },

  restoreStyle: function( element ) {
    element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
    element.removeData( dataSpaceStyle );
  },

  mode: function( element, mode ) {
    var hidden = element.is( ":hidden" );

    if ( mode === "toggle" ) {
      mode = hidden ? "show" : "hide";
    }
    if ( hidden ? mode === "hide" : mode === "show" ) {
      mode = "none";
    }
    return mode;
  },

  // Translates a [top,left] array into a baseline value
  getBaseline: function( origin, original ) {
    var y, x;

    switch ( origin[ 0 ] ) {
    case "top":
      y = 0;
      break;
    case "middle":
      y = 0.5;
      break;
    case "bottom":
      y = 1;
      break;
    default:
      y = origin[ 0 ] / original.height;
    }

    switch ( origin[ 1 ] ) {
    case "left":
      x = 0;
      break;
    case "center":
      x = 0.5;
      break;
    case "right":
      x = 1;
      break;
    default:
      x = origin[ 1 ] / original.width;
    }

    return {
      x: x,
      y: y
    };
  },

  // Creates a placeholder element so that the original element can be made absolute
  createPlaceholder: function( element ) {
    var placeholder,
      cssPosition = element.css( "position" ),
      position = element.position();

    // Lock in margins first to account for form elements, which
    // will change margin if you explicitly set height
    // see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
    // Support: Safari
    element.css( {
      marginTop: element.css( "marginTop" ),
      marginBottom: element.css( "marginBottom" ),
      marginLeft: element.css( "marginLeft" ),
      marginRight: element.css( "marginRight" )
    } )
    .outerWidth( element.outerWidth() )
    .outerHeight( element.outerHeight() );

    if ( /^(static|relative)/.test( cssPosition ) ) {
      cssPosition = "absolute";

      placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

        // Convert inline to inline block to account for inline elements
        // that turn to inline block based on content (like img)
        display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
          "inline-block" :
          "block",
        visibility: "hidden",

        // Margins need to be set to account for margin collapse
        marginTop: element.css( "marginTop" ),
        marginBottom: element.css( "marginBottom" ),
        marginLeft: element.css( "marginLeft" ),
        marginRight: element.css( "marginRight" ),
        "float": element.css( "float" )
      } )
      .outerWidth( element.outerWidth() )
      .outerHeight( element.outerHeight() )
      .addClass( "ui-effects-placeholder" );

      element.data( dataSpace + "placeholder", placeholder );
    }

    element.css( {
      position: cssPosition,
      left: position.left,
      top: position.top
    } );

    return placeholder;
  },

  removePlaceholder: function( element ) {
    var dataKey = dataSpace + "placeholder",
        placeholder = element.data( dataKey );

    if ( placeholder ) {
      placeholder.remove();
      element.removeData( dataKey );
    }
  },

  // Removes a placeholder if it exists and restores
  // properties that were modified during placeholder creation
  cleanUp: function( element ) {
    $.effects.restoreStyle( element );
    $.effects.removePlaceholder( element );
  },

  setTransition: function( element, list, factor, value ) {
    value = value || {};
    $.each( list, function( i, x ) {
      var unit = element.cssUnit( x );
      if ( unit[ 0 ] > 0 ) {
        value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
      }
    } );
    return value;
  }
} );

// Return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

  // Allow passing all options as the first parameter
  if ( $.isPlainObject( effect ) ) {
    options = effect;
    effect = effect.effect;
  }

  // Convert to an object
  effect = { effect: effect };

  // Catch (effect, null, ...)
  if ( options == null ) {
    options = {};
  }

  // Catch (effect, callback)
  if ( $.isFunction( options ) ) {
    callback = options;
    speed = null;
    options = {};
  }

  // Catch (effect, speed, ?)
  if ( typeof options === "number" || $.fx.speeds[ options ] ) {
    callback = speed;
    speed = options;
    options = {};
  }

  // Catch (effect, options, callback)
  if ( $.isFunction( speed ) ) {
    callback = speed;
    speed = null;
  }

  // Add options to effect
  if ( options ) {
    $.extend( effect, options );
  }

  speed = speed || options.duration;
  effect.duration = $.fx.off ? 0 :
    typeof speed === "number" ? speed :
    speed in $.fx.speeds ? $.fx.speeds[ speed ] :
    $.fx.speeds._default;

  effect.complete = callback || options.complete;

  return effect;
}

function standardAnimationOption( option ) {

  // Valid standard speeds (nothing, number, named speed)
  if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
    return true;
  }

  // Invalid strings - treat as "normal" speed
  if ( typeof option === "string" && !$.effects.effect[ option ] ) {
    return true;
  }

  // Complete callback
  if ( $.isFunction( option ) ) {
    return true;
  }

  // Options hash (but not naming an effect)
  if ( typeof option === "object" && !option.effect ) {
    return true;
  }

  // Didn't match any standard API
  return false;
}

$.fn.extend( {
  effect: function( /* effect, options, speed, callback */ ) {
    var args = _normalizeArguments.apply( this, arguments ),
      effectMethod = $.effects.effect[ args.effect ],
      defaultMode = effectMethod.mode,
      queue = args.queue,
      queueName = queue || "fx",
      complete = args.complete,
      mode = args.mode,
      modes = [],
      prefilter = function( next ) {
        var el = $( this ),
          normalizedMode = $.effects.mode( el, mode ) || defaultMode;

        // Sentinel for duck-punching the :animated psuedo-selector
        el.data( dataSpaceAnimated, true );

        // Save effect mode for later use,
        // we can't just call $.effects.mode again later,
        // as the .show() below destroys the initial state
        modes.push( normalizedMode );

        // See $.uiBackCompat inside of run() for removal of defaultMode in 1.13
        if ( defaultMode && ( normalizedMode === "show" ||
            ( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
          el.show();
        }

        if ( !defaultMode || normalizedMode !== "none" ) {
          $.effects.saveStyle( el );
        }

        if ( $.isFunction( next ) ) {
          next();
        }
      };

    if ( $.fx.off || !effectMethod ) {

      // Delegate to the original method (e.g., .show()) if possible
      if ( mode ) {
        return this[ mode ]( args.duration, complete );
      } else {
        return this.each( function() {
          if ( complete ) {
            complete.call( this );
          }
        } );
      }
    }

    function run( next ) {
      var elem = $( this );

      function cleanup() {
        elem.removeData( dataSpaceAnimated );

        $.effects.cleanUp( elem );

        if ( args.mode === "hide" ) {
          elem.hide();
        }

        done();
      }

      function done() {
        if ( $.isFunction( complete ) ) {
          complete.call( elem[ 0 ] );
        }

        if ( $.isFunction( next ) ) {
          next();
        }
      }

      // Override mode option on a per element basis,
      // as toggle can be either show or hide depending on element state
      args.mode = modes.shift();

      if ( $.uiBackCompat !== false && !defaultMode ) {
        if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

          // Call the core method to track "olddisplay" properly
          elem[ mode ]();
          done();
        } else {
          effectMethod.call( elem[ 0 ], args, done );
        }
      } else {
        if ( args.mode === "none" ) {

          // Call the core method to track "olddisplay" properly
          elem[ mode ]();
          done();
        } else {
          effectMethod.call( elem[ 0 ], args, cleanup );
        }
      }
    }

    // Run prefilter on all elements first to ensure that
    // any showing or hiding happens before placeholder creation,
    // which ensures that any layout changes are correctly captured.
    return queue === false ?
      this.each( prefilter ).each( run ) :
      this.queue( queueName, prefilter ).queue( queueName, run );
  },

  show: ( function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "show";
        return this.effect.call( this, args );
      }
    };
  } )( $.fn.show ),

  hide: ( function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "hide";
        return this.effect.call( this, args );
      }
    };
  } )( $.fn.hide ),

  toggle: ( function( orig ) {
    return function( option ) {
      if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
        return orig.apply( this, arguments );
      } else {
        var args = _normalizeArguments.apply( this, arguments );
        args.mode = "toggle";
        return this.effect.call( this, args );
      }
    };
  } )( $.fn.toggle ),

  cssUnit: function( key ) {
    var style = this.css( key ),
      val = [];

    $.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
      if ( style.indexOf( unit ) > 0 ) {
        val = [ parseFloat( style ), unit ];
      }
    } );
    return val;
  },

  cssClip: function( clipObj ) {
    if ( clipObj ) {
      return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
        clipObj.bottom + "px " + clipObj.left + "px)" );
    }
    return parseClip( this.css( "clip" ), this );
  },

  transfer: function( options, done ) {
    var element = $( this ),
      target = $( options.to ),
      targetFixed = target.css( "position" ) === "fixed",
      body = $( "body" ),
      fixTop = targetFixed ? body.scrollTop() : 0,
      fixLeft = targetFixed ? body.scrollLeft() : 0,
      endPosition = target.offset(),
      animation = {
        top: endPosition.top - fixTop,
        left: endPosition.left - fixLeft,
        height: target.innerHeight(),
        width: target.innerWidth()
      },
      startPosition = element.offset(),
      transfer = $( "<div class='ui-effects-transfer'></div>" )
        .appendTo( "body" )
        .addClass( options.className )
        .css( {
          top: startPosition.top - fixTop,
          left: startPosition.left - fixLeft,
          height: element.innerHeight(),
          width: element.innerWidth(),
          position: targetFixed ? "fixed" : "absolute"
        } )
        .animate( animation, options.duration, options.easing, function() {
          transfer.remove();
          if ( $.isFunction( done ) ) {
            done();
          }
        } );
  }
} );

function parseClip( str, element ) {
    var outerWidth = element.outerWidth(),
      outerHeight = element.outerHeight(),
      clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
      values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

    return {
      top: parseFloat( values[ 1 ] ) || 0,
      right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
      bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
      left: parseFloat( values[ 4 ] ) || 0
    };
}

$.fx.step.clip = function( fx ) {
  if ( !fx.clipInit ) {
    fx.start = $( fx.elem ).cssClip();
    if ( typeof fx.end === "string" ) {
      fx.end = parseClip( fx.end, fx.elem );
    }
    fx.clipInit = true;
  }

  $( fx.elem ).cssClip( {
    top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
    right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
    bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
    left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
  } );
};

} )();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

( function() {

// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
  baseEasings[ name ] = function( p ) {
    return Math.pow( p, i + 2 );
  };
} );

$.extend( baseEasings, {
  Sine: function( p ) {
    return 1 - Math.cos( p * Math.PI / 2 );
  },
  Circ: function( p ) {
    return 1 - Math.sqrt( 1 - p * p );
  },
  Elastic: function( p ) {
    return p === 0 || p === 1 ? p :
      -Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
  },
  Back: function( p ) {
    return p * p * ( 3 * p - 2 );
  },
  Bounce: function( p ) {
    var pow2,
      bounce = 4;

    while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
    return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
  }
} );

$.each( baseEasings, function( name, easeIn ) {
  $.easing[ "easeIn" + name ] = easeIn;
  $.easing[ "easeOut" + name ] = function( p ) {
    return 1 - easeIn( 1 - p );
  };
  $.easing[ "easeInOut" + name ] = function( p ) {
    return p < 0.5 ?
      easeIn( p * 2 ) / 2 :
      1 - easeIn( p * -2 + 2 ) / 2;
  };
} );

} )();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Blind Effect
//>>group: Effects
//>>description: Blinds the element.
//>>docs: http://api.jqueryui.com/blind-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBlind = $.effects.define( "blind", "hide", function( options, done ) {
  var map = {
      up: [ "bottom", "top" ],
      vertical: [ "bottom", "top" ],
      down: [ "top", "bottom" ],
      left: [ "right", "left" ],
      horizontal: [ "right", "left" ],
      right: [ "left", "right" ]
    },
    element = $( this ),
    direction = options.direction || "up",
    start = element.cssClip(),
    animate = { clip: $.extend( {}, start ) },
    placeholder = $.effects.createPlaceholder( element );

  animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

  if ( options.mode === "show" ) {
    element.cssClip( animate.clip );
    if ( placeholder ) {
      placeholder.css( $.effects.clipToBox( animate ) );
    }

    animate.clip = start;
  }

  if ( placeholder ) {
    placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
  }

  element.animate( animate, {
    queue: false,
    duration: options.duration,
    easing: options.easing,
    complete: done
  } );
} );


/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Bounce Effect
//>>group: Effects
//>>description: Bounces an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/bounce-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBounce = $.effects.define( "bounce", function( options, done ) {
  var upAnim, downAnim, refValue,
    element = $( this ),

    // Defaults:
    mode = options.mode,
    hide = mode === "hide",
    show = mode === "show",
    direction = options.direction || "up",
    distance = options.distance,
    times = options.times || 5,

    // Number of internal animations
    anims = times * 2 + ( show || hide ? 1 : 0 ),
    speed = options.duration / anims,
    easing = options.easing,

    // Utility:
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    motion = ( direction === "up" || direction === "left" ),
    i = 0,

    queuelen = element.queue().length;

  $.effects.createPlaceholder( element );

  refValue = element.css( ref );

  // Default distance for the BIGGEST bounce is the outer Distance / 3
  if ( !distance ) {
    distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
  }

  if ( show ) {
    downAnim = { opacity: 1 };
    downAnim[ ref ] = refValue;

    // If we are showing, force opacity 0 and set the initial position
    // then do the "first" animation
    element
      .css( "opacity", 0 )
      .css( ref, motion ? -distance * 2 : distance * 2 )
      .animate( downAnim, speed, easing );
  }

  // Start at the smallest distance if we are hiding
  if ( hide ) {
    distance = distance / Math.pow( 2, times - 1 );
  }

  downAnim = {};
  downAnim[ ref ] = refValue;

  // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
  for ( ; i < times; i++ ) {
    upAnim = {};
    upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

    element
      .animate( upAnim, speed, easing )
      .animate( downAnim, speed, easing );

    distance = hide ? distance * 2 : distance / 2;
  }

  // Last Bounce when Hiding
  if ( hide ) {
    upAnim = { opacity: 0 };
    upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

    element.animate( upAnim, speed, easing );
  }

  element.queue( done );

  $.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Clip Effect
//>>group: Effects
//>>description: Clips the element on and off like an old TV.
//>>docs: http://api.jqueryui.com/clip-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectClip = $.effects.define( "clip", "hide", function( options, done ) {
  var start,
    animate = {},
    element = $( this ),
    direction = options.direction || "vertical",
    both = direction === "both",
    horizontal = both || direction === "horizontal",
    vertical = both || direction === "vertical";

  start = element.cssClip();
  animate.clip = {
    top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
    right: horizontal ? ( start.right - start.left ) / 2 : start.right,
    bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
    left: horizontal ? ( start.right - start.left ) / 2 : start.left
  };

  $.effects.createPlaceholder( element );

  if ( options.mode === "show" ) {
    element.cssClip( animate.clip );
    animate.clip = start;
  }

  element.animate( animate, {
    queue: false,
    duration: options.duration,
    easing: options.easing,
    complete: done
  } );

} );


/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Drop Effect
//>>group: Effects
//>>description: Moves an element in one direction and hides it at the same time.
//>>docs: http://api.jqueryui.com/drop-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectDrop = $.effects.define( "drop", "hide", function( options, done ) {

  var distance,
    element = $( this ),
    mode = options.mode,
    show = mode === "show",
    direction = options.direction || "left",
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
    oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
    animation = {
      opacity: 0
    };

  $.effects.createPlaceholder( element );

  distance = options.distance ||
    element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

  animation[ ref ] = motion + distance;

  if ( show ) {
    element.css( animation );

    animation[ ref ] = oppositeMotion + distance;
    animation.opacity = 1;
  }

  // Animate
  element.animate( animation, {
    queue: false,
    duration: options.duration,
    easing: options.easing,
    complete: done
  } );
} );


/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Explode Effect
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/explode-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectExplode = $.effects.define( "explode", "hide", function( options, done ) {

  var i, j, left, top, mx, my,
    rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
    cells = rows,
    element = $( this ),
    mode = options.mode,
    show = mode === "show",

    // Show and then visibility:hidden the element before calculating offset
    offset = element.show().css( "visibility", "hidden" ).offset(),

    // Width and height of a piece
    width = Math.ceil( element.outerWidth() / cells ),
    height = Math.ceil( element.outerHeight() / rows ),
    pieces = [];

  // Children animate complete:
  function childComplete() {
    pieces.push( this );
    if ( pieces.length === rows * cells ) {
      animComplete();
    }
  }

  // Clone the element for each row and cell.
  for ( i = 0; i < rows; i++ ) { // ===>
    top = offset.top + i * height;
    my = i - ( rows - 1 ) / 2;

    for ( j = 0; j < cells; j++ ) { // |||
      left = offset.left + j * width;
      mx = j - ( cells - 1 ) / 2;

      // Create a clone of the now hidden main element that will be absolute positioned
      // within a wrapper div off the -left and -top equal to size of our pieces
      element
        .clone()
        .appendTo( "body" )
        .wrap( "<div></div>" )
        .css( {
          position: "absolute",
          visibility: "visible",
          left: -j * width,
          top: -i * height
        } )

        // Select the wrapper - make it overflow: hidden and absolute positioned based on
        // where the original was located +left and +top equal to the size of pieces
        .parent()
          .addClass( "ui-effects-explode" )
          .css( {
            position: "absolute",
            overflow: "hidden",
            width: width,
            height: height,
            left: left + ( show ? mx * width : 0 ),
            top: top + ( show ? my * height : 0 ),
            opacity: show ? 0 : 1
          } )
          .animate( {
            left: left + ( show ? 0 : mx * width ),
            top: top + ( show ? 0 : my * height ),
            opacity: show ? 1 : 0
          }, options.duration || 500, options.easing, childComplete );
    }
  }

  function animComplete() {
    element.css( {
      visibility: "visible"
    } );
    $( pieces ).remove();
    done();
  }
} );


/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fade Effect
//>>group: Effects
//>>description: Fades the element.
//>>docs: http://api.jqueryui.com/fade-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFade = $.effects.define( "fade", "toggle", function( options, done ) {
  var show = options.mode === "show";

  $( this )
    .css( "opacity", show ? 0 : 1 )
    .animate( {
      opacity: show ? 1 : 0
    }, {
      queue: false,
      duration: options.duration,
      easing: options.easing,
      complete: done
    } );
} );


/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fold Effect
//>>group: Effects
//>>description: Folds an element first horizontally and then vertically.
//>>docs: http://api.jqueryui.com/fold-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFold = $.effects.define( "fold", "hide", function( options, done ) {

  // Create element
  var element = $( this ),
    mode = options.mode,
    show = mode === "show",
    hide = mode === "hide",
    size = options.size || 15,
    percent = /([0-9]+)%/.exec( size ),
    horizFirst = !!options.horizFirst,
    ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
    duration = options.duration / 2,

    placeholder = $.effects.createPlaceholder( element ),

    start = element.cssClip(),
    animation1 = { clip: $.extend( {}, start ) },
    animation2 = { clip: $.extend( {}, start ) },

    distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

    queuelen = element.queue().length;

  if ( percent ) {
    size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
  }
  animation1.clip[ ref[ 0 ] ] = size;
  animation2.clip[ ref[ 0 ] ] = size;
  animation2.clip[ ref[ 1 ] ] = 0;

  if ( show ) {
    element.cssClip( animation2.clip );
    if ( placeholder ) {
      placeholder.css( $.effects.clipToBox( animation2 ) );
    }

    animation2.clip = start;
  }

  // Animate
  element
    .queue( function( next ) {
      if ( placeholder ) {
        placeholder
          .animate( $.effects.clipToBox( animation1 ), duration, options.easing )
          .animate( $.effects.clipToBox( animation2 ), duration, options.easing );
      }

      next();
    } )
    .animate( animation1, duration, options.easing )
    .animate( animation2, duration, options.easing )
    .queue( done );

  $.effects.unshift( element, queuelen, 4 );
} );


/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Highlight Effect
//>>group: Effects
//>>description: Highlights the background of an element in a defined color for a custom duration.
//>>docs: http://api.jqueryui.com/highlight-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectHighlight = $.effects.define( "highlight", "show", function( options, done ) {
  var element = $( this ),
    animation = {
      backgroundColor: element.css( "backgroundColor" )
    };

  if ( options.mode === "hide" ) {
    animation.opacity = 0;
  }

  $.effects.saveStyle( element );

  element
    .css( {
      backgroundImage: "none",
      backgroundColor: options.color || "#ffff99"
    } )
    .animate( animation, {
      queue: false,
      duration: options.duration,
      easing: options.easing,
      complete: done
    } );
} );


/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Size Effect
//>>group: Effects
//>>description: Resize an element to a specified width and height.
//>>docs: http://api.jqueryui.com/size-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSize = $.effects.define( "size", function( options, done ) {

  // Create element
  var baseline, factor, temp,
    element = $( this ),

    // Copy for children
    cProps = [ "fontSize" ],
    vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
    hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

    // Set options
    mode = options.mode,
    restore = mode !== "effect",
    scale = options.scale || "both",
    origin = options.origin || [ "middle", "center" ],
    position = element.css( "position" ),
    pos = element.position(),
    original = $.effects.scaledDimensions( element ),
    from = options.from || original,
    to = options.to || $.effects.scaledDimensions( element, 0 );

  $.effects.createPlaceholder( element );

  if ( mode === "show" ) {
    temp = from;
    from = to;
    to = temp;
  }

  // Set scaling factor
  factor = {
    from: {
      y: from.height / original.height,
      x: from.width / original.width
    },
    to: {
      y: to.height / original.height,
      x: to.width / original.width
    }
  };

  // Scale the css box
  if ( scale === "box" || scale === "both" ) {

    // Vertical props scaling
    if ( factor.from.y !== factor.to.y ) {
      from = $.effects.setTransition( element, vProps, factor.from.y, from );
      to = $.effects.setTransition( element, vProps, factor.to.y, to );
    }

    // Horizontal props scaling
    if ( factor.from.x !== factor.to.x ) {
      from = $.effects.setTransition( element, hProps, factor.from.x, from );
      to = $.effects.setTransition( element, hProps, factor.to.x, to );
    }
  }

  // Scale the content
  if ( scale === "content" || scale === "both" ) {

    // Vertical props scaling
    if ( factor.from.y !== factor.to.y ) {
      from = $.effects.setTransition( element, cProps, factor.from.y, from );
      to = $.effects.setTransition( element, cProps, factor.to.y, to );
    }
  }

  // Adjust the position properties based on the provided origin points
  if ( origin ) {
    baseline = $.effects.getBaseline( origin, original );
    from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
    from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
    to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
    to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
  }
  element.css( from );

  // Animate the children if desired
  if ( scale === "content" || scale === "both" ) {

    vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
    hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

    // Only animate children with width attributes specified
    // TODO: is this right? should we include anything with css width specified as well
    element.find( "*[width]" ).each( function() {
      var child = $( this ),
        childOriginal = $.effects.scaledDimensions( child ),
        childFrom = {
          height: childOriginal.height * factor.from.y,
          width: childOriginal.width * factor.from.x,
          outerHeight: childOriginal.outerHeight * factor.from.y,
          outerWidth: childOriginal.outerWidth * factor.from.x
        },
        childTo = {
          height: childOriginal.height * factor.to.y,
          width: childOriginal.width * factor.to.x,
          outerHeight: childOriginal.height * factor.to.y,
          outerWidth: childOriginal.width * factor.to.x
        };

      // Vertical props scaling
      if ( factor.from.y !== factor.to.y ) {
        childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
        childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
      }

      // Horizontal props scaling
      if ( factor.from.x !== factor.to.x ) {
        childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
        childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
      }

      if ( restore ) {
        $.effects.saveStyle( child );
      }

      // Animate children
      child.css( childFrom );
      child.animate( childTo, options.duration, options.easing, function() {

        // Restore children
        if ( restore ) {
          $.effects.restoreStyle( child );
        }
      } );
    } );
  }

  // Animate
  element.animate( to, {
    queue: false,
    duration: options.duration,
    easing: options.easing,
    complete: function() {

      var offset = element.offset();

      if ( to.opacity === 0 ) {
        element.css( "opacity", from.opacity );
      }

      if ( !restore ) {
        element
          .css( "position", position === "static" ? "relative" : position )
          .offset( offset );

        // Need to save style here so that automatic style restoration
        // doesn't restore to the original styles from before the animation.
        $.effects.saveStyle( element );
      }

      done();
    }
  } );

} );


/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Scale Effect
//>>group: Effects
//>>description: Grows or shrinks an element and its content.
//>>docs: http://api.jqueryui.com/scale-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectScale = $.effects.define( "scale", function( options, done ) {

  // Create element
  var el = $( this ),
    mode = options.mode,
    percent = parseInt( options.percent, 10 ) ||
      ( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

    newOptions = $.extend( true, {
      from: $.effects.scaledDimensions( el ),
      to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
      origin: options.origin || [ "middle", "center" ]
    }, options );

  // Fade option to support puff
  if ( options.fade ) {
    newOptions.from.opacity = 1;
    newOptions.to.opacity = 0;
  }

  $.effects.effect.size.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Puff Effect
//>>group: Effects
//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
//>>docs: http://api.jqueryui.com/puff-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPuff = $.effects.define( "puff", "hide", function( options, done ) {
  var newOptions = $.extend( true, {}, options, {
    fade: true,
    percent: parseInt( options.percent, 10 ) || 150
  } );

  $.effects.effect.scale.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Pulsate Effect
//>>group: Effects
//>>description: Pulsates an element n times by changing the opacity to zero and back.
//>>docs: http://api.jqueryui.com/pulsate-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPulsate = $.effects.define( "pulsate", "show", function( options, done ) {
  var element = $( this ),
    mode = options.mode,
    show = mode === "show",
    hide = mode === "hide",
    showhide = show || hide,

    // Showing or hiding leaves off the "last" animation
    anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
    duration = options.duration / anims,
    animateTo = 0,
    i = 1,
    queuelen = element.queue().length;

  if ( show || !element.is( ":visible" ) ) {
    element.css( "opacity", 0 ).show();
    animateTo = 1;
  }

  // Anims - 1 opacity "toggles"
  for ( ; i < anims; i++ ) {
    element.animate( { opacity: animateTo }, duration, options.easing );
    animateTo = 1 - animateTo;
  }

  element.animate( { opacity: animateTo }, duration, options.easing );

  element.queue( done );

  $.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Shake Effect
//>>group: Effects
//>>description: Shakes an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/shake-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectShake = $.effects.define( "shake", function( options, done ) {

  var i = 1,
    element = $( this ),
    direction = options.direction || "left",
    distance = options.distance || 20,
    times = options.times || 3,
    anims = times * 2 + 1,
    speed = Math.round( options.duration / anims ),
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    positiveMotion = ( direction === "up" || direction === "left" ),
    animation = {},
    animation1 = {},
    animation2 = {},

    queuelen = element.queue().length;

  $.effects.createPlaceholder( element );

  // Animation
  animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
  animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
  animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

  // Animate
  element.animate( animation, speed, options.easing );

  // Shakes
  for ( ; i < times; i++ ) {
    element
      .animate( animation1, speed, options.easing )
      .animate( animation2, speed, options.easing );
  }

  element
    .animate( animation1, speed, options.easing )
    .animate( animation, speed / 2, options.easing )
    .queue( done );

  $.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slide Effect
//>>group: Effects
//>>description: Slides an element in and out of the viewport.
//>>docs: http://api.jqueryui.com/slide-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSlide = $.effects.define( "slide", "show", function( options, done ) {
  var startClip, startRef,
    element = $( this ),
    map = {
      up: [ "bottom", "top" ],
      down: [ "top", "bottom" ],
      left: [ "right", "left" ],
      right: [ "left", "right" ]
    },
    mode = options.mode,
    direction = options.direction || "left",
    ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
    positiveMotion = ( direction === "up" || direction === "left" ),
    distance = options.distance ||
      element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
    animation = {};

  $.effects.createPlaceholder( element );

  startClip = element.cssClip();
  startRef = element.position()[ ref ];

  // Define hide animation
  animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
  animation.clip = element.cssClip();
  animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

  // Reverse the animation if we're showing
  if ( mode === "show" ) {
    element.cssClip( animation.clip );
    element.css( ref, animation[ ref ] );
    animation.clip = startClip;
    animation[ ref ] = startRef;
  }

  // Actually animate
  element.animate( animation, {
    queue: false,
    duration: options.duration,
    easing: options.easing,
    complete: done
  } );
} );


/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Transfer Effect
//>>group: Effects
//>>description: Displays a transfer effect from one element to another.
//>>docs: http://api.jqueryui.com/transfer-effect/
//>>demos: http://jqueryui.com/effect/



var effect;
if ( $.uiBackCompat !== false ) {
  effect = $.effects.define( "transfer", function( options, done ) {
    $( this ).transfer( options, done );
  } );
}
var effectsEffectTransfer = effect;


/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/



// Selectors
$.ui.focusable = function( element, hasTabindex ) {
  var map, mapName, img, focusableIfVisible, fieldset,
    nodeName = element.nodeName.toLowerCase();

  if ( "area" === nodeName ) {
    map = element.parentNode;
    mapName = map.name;
    if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
      return false;
    }
    img = $( "img[usemap='#" + mapName + "']" );
    return img.length > 0 && img.is( ":visible" );
  }

  if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
    focusableIfVisible = !element.disabled;

    if ( focusableIfVisible ) {

      // Form controls within a disabled fieldset are disabled.
      // However, controls within the fieldset's legend do not get disabled.
      // Since controls generally aren't placed inside legends, we skip
      // this portion of the check.
      fieldset = $( element ).closest( "fieldset" )[ 0 ];
      if ( fieldset ) {
        focusableIfVisible = !fieldset.disabled;
      }
    }
  } else if ( "a" === nodeName ) {
    focusableIfVisible = element.href || hasTabindex;
  } else {
    focusableIfVisible = hasTabindex;
  }

  return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
  var visibility = element.css( "visibility" );
  while ( visibility === "inherit" ) {
    element = element.parent();
    visibility = element.css( "visibility" );
  }
  return visibility !== "hidden";
}

$.extend( $.expr[ ":" ], {
  focusable: function( element ) {
    return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
  }
} );

var focusable = $.ui.focusable;




// Support: IE8 Only
// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
// with a string, so we need to find the proper form.
var form = $.fn.form = function() {
  return typeof this[ 0 ].form === "string" ? this.closest( "form" ) : $( this[ 0 ].form );
};


/*!
 * jQuery UI Form Reset Mixin 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Form Reset Mixin
//>>group: Core
//>>description: Refresh input widgets when their form is reset
//>>docs: http://api.jqueryui.com/form-reset-mixin/



var formResetMixin = $.ui.formResetMixin = {
  _formResetHandler: function() {
    var form = $( this );

    // Wait for the form reset to actually happen before refreshing
    setTimeout( function() {
      var instances = form.data( "ui-form-reset-instances" );
      $.each( instances, function() {
        this.refresh();
      } );
    } );
  },

  _bindFormResetHandler: function() {
    this.form = this.element.form();
    if ( !this.form.length ) {
      return;
    }

    var instances = this.form.data( "ui-form-reset-instances" ) || [];
    if ( !instances.length ) {

      // We don't use _on() here because we use a single event handler per form
      this.form.on( "reset.ui-form-reset", this._formResetHandler );
    }
    instances.push( this );
    this.form.data( "ui-form-reset-instances", instances );
  },

  _unbindFormResetHandler: function() {
    if ( !this.form.length ) {
      return;
    }

    var instances = this.form.data( "ui-form-reset-instances" );
    instances.splice( $.inArray( this, instances ), 1 );
    if ( instances.length ) {
      this.form.data( "ui-form-reset-instances", instances );
    } else {
      this.form
        .removeData( "ui-form-reset-instances" )
        .off( "reset.ui-form-reset" );
    }
  }
};


/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */

//>>label: jQuery 1.7 Support
//>>group: Core
//>>description: Support version 1.7.x of jQuery core



// Support: jQuery 1.7 only
// Not a great way to check versions, but since we only support 1.7+ and only
// need to detect <1.8, this is a simple check that should suffice. Checking
// for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
// and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
// 1.7 anymore). See #11197 for why we're not using feature detection.
if ( $.fn.jquery.substring( 0, 3 ) === "1.7" ) {

  // Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
  // Unlike jQuery Core 1.8+, these only support numeric values to set the
  // dimensions in pixels
  $.each( [ "Width", "Height" ], function( i, name ) {
    var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
      type = name.toLowerCase(),
      orig = {
        innerWidth: $.fn.innerWidth,
        innerHeight: $.fn.innerHeight,
        outerWidth: $.fn.outerWidth,
        outerHeight: $.fn.outerHeight
      };

    function reduce( elem, size, border, margin ) {
      $.each( side, function() {
        size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
        if ( border ) {
          size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
        }
        if ( margin ) {
          size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
        }
      } );
      return size;
    }

    $.fn[ "inner" + name ] = function( size ) {
      if ( size === undefined ) {
        return orig[ "inner" + name ].call( this );
      }

      return this.each( function() {
        $( this ).css( type, reduce( this, size ) + "px" );
      } );
    };

    $.fn[ "outer" + name ] = function( size, margin ) {
      if ( typeof size !== "number" ) {
        return orig[ "outer" + name ].call( this, size );
      }

      return this.each( function() {
        $( this ).css( type, reduce( this, size, true, margin ) + "px" );
      } );
    };
  } );

  $.fn.addBack = function( selector ) {
    return this.add( selector == null ?
      this.prevObject : this.prevObject.filter( selector )
    );
  };
}

;
/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


var keycode = $.ui.keyCode = {
  BACKSPACE: 8,
  COMMA: 188,
  DELETE: 46,
  DOWN: 40,
  END: 35,
  ENTER: 13,
  ESCAPE: 27,
  HOME: 36,
  LEFT: 37,
  PAGE_DOWN: 34,
  PAGE_UP: 33,
  PERIOD: 190,
  RIGHT: 39,
  SPACE: 32,
  TAB: 9,
  UP: 38
};




// Internal use only
var escapeSelector = $.ui.escapeSelector = ( function() {
  var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
  return function( selector ) {
    return selector.replace( selectorEscape, "\\$1" );
  };
} )();


/*!
 * jQuery UI Labels 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: labels
//>>group: Core
//>>description: Find all the labels associated with a given input
//>>docs: http://api.jqueryui.com/labels/



var labels = $.fn.labels = function() {
  var ancestor, selector, id, labels, ancestors;

  // Check control.labels first
  if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
    return this.pushStack( this[ 0 ].labels );
  }

  // Support: IE <= 11, FF <= 37, Android <= 2.3 only
  // Above browsers do not support control.labels. Everything below is to support them
  // as well as document fragments. control.labels does not work on document fragments
  labels = this.eq( 0 ).parents( "label" );

  // Look for the label based on the id
  id = this.attr( "id" );
  if ( id ) {

    // We don't search against the document in case the element
    // is disconnected from the DOM
    ancestor = this.eq( 0 ).parents().last();

    // Get a full set of top level ancestors
    ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

    // Create a selector for the label based on the id
    selector = "label[for='" + $.ui.escapeSelector( id ) + "']";

    labels = labels.add( ancestors.find( selector ).addBack( selector ) );

  }

  // Return whatever we have found for labels
  return this.pushStack( labels );
};


/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/



var scrollParent = $.fn.scrollParent = function( includeHidden ) {
  var position = this.css( "position" ),
    excludeStaticParent = position === "absolute",
    overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
    scrollParent = this.parents().filter( function() {
      var parent = $( this );
      if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
        return false;
      }
      return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
        parent.css( "overflow-x" ) );
    } ).eq( 0 );

  return position === "fixed" || !scrollParent.length ?
    $( this[ 0 ].ownerDocument || document ) :
    scrollParent;
};


/*!
 * jQuery UI Tabbable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/



var tabbable = $.extend( $.expr[ ":" ], {
  tabbable: function( element ) {
    var tabIndex = $.attr( element, "tabindex" ),
      hasTabindex = tabIndex != null;
    return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
  }
} );


/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/



var uniqueId = $.fn.extend( {
  uniqueId: ( function() {
    var uuid = 0;

    return function() {
      return this.each( function() {
        if ( !this.id ) {
          this.id = "ui-id-" + ( ++uuid );
        }
      } );
    };
  } )(),

  removeUniqueId: function() {
    return this.each( function() {
      if ( /^ui-id-\d+$/.test( this.id ) ) {
        $( this ).removeAttr( "id" );
      }
    } );
  }
} );


/*!
 * jQuery UI Accordion 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Accordion
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/accordion/
//>>demos: http://jqueryui.com/accordion/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/accordion.css
//>>css.theme: ../../themes/base/theme.css



var widgetsAccordion = $.widget( "ui.accordion", {
  version: "1.12.1",
  options: {
    active: 0,
    animate: {},
    classes: {
      "ui-accordion-header": "ui-corner-top",
      "ui-accordion-header-collapsed": "ui-corner-all",
      "ui-accordion-content": "ui-corner-bottom"
    },
    collapsible: false,
    event: "click",
    header: "> li > :first-child, > :not(li):even",
    heightStyle: "auto",
    icons: {
      activeHeader: "ui-icon-triangle-1-s",
      header: "ui-icon-triangle-1-e"
    },

    // Callbacks
    activate: null,
    beforeActivate: null
  },

  hideProps: {
    borderTopWidth: "hide",
    borderBottomWidth: "hide",
    paddingTop: "hide",
    paddingBottom: "hide",
    height: "hide"
  },

  showProps: {
    borderTopWidth: "show",
    borderBottomWidth: "show",
    paddingTop: "show",
    paddingBottom: "show",
    height: "show"
  },

  _create: function() {
    var options = this.options;

    this.prevShow = this.prevHide = $();
    this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
    this.element.attr( "role", "tablist" );

    // Don't allow collapsible: false and active: false / null
    if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
      options.active = 0;
    }

    this._processPanels();

    // handle negative values
    if ( options.active < 0 ) {
      options.active += this.headers.length;
    }
    this._refresh();
  },

  _getCreateEventData: function() {
    return {
      header: this.active,
      panel: !this.active.length ? $() : this.active.next()
    };
  },

  _createIcons: function() {
    var icon, children,
      icons = this.options.icons;

    if ( icons ) {
      icon = $( "<span>" );
      this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
      icon.prependTo( this.headers );
      children = this.active.children( ".ui-accordion-header-icon" );
      this._removeClass( children, icons.header )
        ._addClass( children, null, icons.activeHeader )
        ._addClass( this.headers, "ui-accordion-icons" );
    }
  },

  _destroyIcons: function() {
    this._removeClass( this.headers, "ui-accordion-icons" );
    this.headers.children( ".ui-accordion-header-icon" ).remove();
  },

  _destroy: function() {
    var contents;

    // Clean up main element
    this.element.removeAttr( "role" );

    // Clean up headers
    this.headers
      .removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
      .removeUniqueId();

    this._destroyIcons();

    // Clean up content panels
    contents = this.headers.next()
      .css( "display", "" )
      .removeAttr( "role aria-hidden aria-labelledby" )
      .removeUniqueId();

    if ( this.options.heightStyle !== "content" ) {
      contents.css( "height", "" );
    }
  },

  _setOption: function( key, value ) {
    if ( key === "active" ) {

      // _activate() will handle invalid values and update this.options
      this._activate( value );
      return;
    }

    if ( key === "event" ) {
      if ( this.options.event ) {
        this._off( this.headers, this.options.event );
      }
      this._setupEvents( value );
    }

    this._super( key, value );

    // Setting collapsible: false while collapsed; open first panel
    if ( key === "collapsible" && !value && this.options.active === false ) {
      this._activate( 0 );
    }

    if ( key === "icons" ) {
      this._destroyIcons();
      if ( value ) {
        this._createIcons();
      }
    }
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this.element.attr( "aria-disabled", value );

    // Support: IE8 Only
    // #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
    // so we need to add the disabled class to the headers and panels
    this._toggleClass( null, "ui-state-disabled", !!value );
    this._toggleClass( this.headers.add( this.headers.next() ), null, "ui-state-disabled",
      !!value );
  },

  _keydown: function( event ) {
    if ( event.altKey || event.ctrlKey ) {
      return;
    }

    var keyCode = $.ui.keyCode,
      length = this.headers.length,
      currentIndex = this.headers.index( event.target ),
      toFocus = false;

    switch ( event.keyCode ) {
    case keyCode.RIGHT:
    case keyCode.DOWN:
      toFocus = this.headers[ ( currentIndex + 1 ) % length ];
      break;
    case keyCode.LEFT:
    case keyCode.UP:
      toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
      break;
    case keyCode.SPACE:
    case keyCode.ENTER:
      this._eventHandler( event );
      break;
    case keyCode.HOME:
      toFocus = this.headers[ 0 ];
      break;
    case keyCode.END:
      toFocus = this.headers[ length - 1 ];
      break;
    }

    if ( toFocus ) {
      $( event.target ).attr( "tabIndex", -1 );
      $( toFocus ).attr( "tabIndex", 0 );
      $( toFocus ).trigger( "focus" );
      event.preventDefault();
    }
  },

  _panelKeyDown: function( event ) {
    if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
      $( event.currentTarget ).prev().trigger( "focus" );
    }
  },

  refresh: function() {
    var options = this.options;
    this._processPanels();

    // Was collapsed or no panel
    if ( ( options.active === false && options.collapsible === true ) ||
        !this.headers.length ) {
      options.active = false;
      this.active = $();

    // active false only when collapsible is true
    } else if ( options.active === false ) {
      this._activate( 0 );

    // was active, but active panel is gone
    } else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

      // all remaining panel are disabled
      if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
        options.active = false;
        this.active = $();

      // activate previous panel
      } else {
        this._activate( Math.max( 0, options.active - 1 ) );
      }

    // was active, active panel still exists
    } else {

      // make sure active index is correct
      options.active = this.headers.index( this.active );
    }

    this._destroyIcons();

    this._refresh();
  },

  _processPanels: function() {
    var prevHeaders = this.headers,
      prevPanels = this.panels;

    this.headers = this.element.find( this.options.header );
    this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
      "ui-state-default" );

    this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
    this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

    // Avoid memory leaks (#10056)
    if ( prevPanels ) {
      this._off( prevHeaders.not( this.headers ) );
      this._off( prevPanels.not( this.panels ) );
    }
  },

  _refresh: function() {
    var maxHeight,
      options = this.options,
      heightStyle = options.heightStyle,
      parent = this.element.parent();

    this.active = this._findActive( options.active );
    this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
      ._removeClass( this.active, "ui-accordion-header-collapsed" );
    this._addClass( this.active.next(), "ui-accordion-content-active" );
    this.active.next().show();

    this.headers
      .attr( "role", "tab" )
      .each( function() {
        var header = $( this ),
          headerId = header.uniqueId().attr( "id" ),
          panel = header.next(),
          panelId = panel.uniqueId().attr( "id" );
        header.attr( "aria-controls", panelId );
        panel.attr( "aria-labelledby", headerId );
      } )
      .next()
        .attr( "role", "tabpanel" );

    this.headers
      .not( this.active )
        .attr( {
          "aria-selected": "false",
          "aria-expanded": "false",
          tabIndex: -1
        } )
        .next()
          .attr( {
            "aria-hidden": "true"
          } )
          .hide();

    // Make sure at least one header is in the tab order
    if ( !this.active.length ) {
      this.headers.eq( 0 ).attr( "tabIndex", 0 );
    } else {
      this.active.attr( {
        "aria-selected": "true",
        "aria-expanded": "true",
        tabIndex: 0
      } )
        .next()
          .attr( {
            "aria-hidden": "false"
          } );
    }

    this._createIcons();

    this._setupEvents( options.event );

    if ( heightStyle === "fill" ) {
      maxHeight = parent.height();
      this.element.siblings( ":visible" ).each( function() {
        var elem = $( this ),
          position = elem.css( "position" );

        if ( position === "absolute" || position === "fixed" ) {
          return;
        }
        maxHeight -= elem.outerHeight( true );
      } );

      this.headers.each( function() {
        maxHeight -= $( this ).outerHeight( true );
      } );

      this.headers.next()
        .each( function() {
          $( this ).height( Math.max( 0, maxHeight -
            $( this ).innerHeight() + $( this ).height() ) );
        } )
        .css( "overflow", "auto" );
    } else if ( heightStyle === "auto" ) {
      maxHeight = 0;
      this.headers.next()
        .each( function() {
          var isVisible = $( this ).is( ":visible" );
          if ( !isVisible ) {
            $( this ).show();
          }
          maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
          if ( !isVisible ) {
            $( this ).hide();
          }
        } )
        .height( maxHeight );
    }
  },

  _activate: function( index ) {
    var active = this._findActive( index )[ 0 ];

    // Trying to activate the already active panel
    if ( active === this.active[ 0 ] ) {
      return;
    }

    // Trying to collapse, simulate a click on the currently active header
    active = active || this.active[ 0 ];

    this._eventHandler( {
      target: active,
      currentTarget: active,
      preventDefault: $.noop
    } );
  },

  _findActive: function( selector ) {
    return typeof selector === "number" ? this.headers.eq( selector ) : $();
  },

  _setupEvents: function( event ) {
    var events = {
      keydown: "_keydown"
    };
    if ( event ) {
      $.each( event.split( " " ), function( index, eventName ) {
        events[ eventName ] = "_eventHandler";
      } );
    }

    this._off( this.headers.add( this.headers.next() ) );
    this._on( this.headers, events );
    this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
    this._hoverable( this.headers );
    this._focusable( this.headers );
  },

  _eventHandler: function( event ) {
    var activeChildren, clickedChildren,
      options = this.options,
      active = this.active,
      clicked = $( event.currentTarget ),
      clickedIsActive = clicked[ 0 ] === active[ 0 ],
      collapsing = clickedIsActive && options.collapsible,
      toShow = collapsing ? $() : clicked.next(),
      toHide = active.next(),
      eventData = {
        oldHeader: active,
        oldPanel: toHide,
        newHeader: collapsing ? $() : clicked,
        newPanel: toShow
      };

    event.preventDefault();

    if (

        // click on active header, but not collapsible
        ( clickedIsActive && !options.collapsible ) ||

        // allow canceling activation
        ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
      return;
    }

    options.active = collapsing ? false : this.headers.index( clicked );

    // When the call to ._toggle() comes after the class changes
    // it causes a very odd bug in IE 8 (see #6720)
    this.active = clickedIsActive ? $() : clicked;
    this._toggle( eventData );

    // Switch classes
    // corner classes on the previously active header stay after the animation
    this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
    if ( options.icons ) {
      activeChildren = active.children( ".ui-accordion-header-icon" );
      this._removeClass( activeChildren, null, options.icons.activeHeader )
        ._addClass( activeChildren, null, options.icons.header );
    }

    if ( !clickedIsActive ) {
      this._removeClass( clicked, "ui-accordion-header-collapsed" )
        ._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
      if ( options.icons ) {
        clickedChildren = clicked.children( ".ui-accordion-header-icon" );
        this._removeClass( clickedChildren, null, options.icons.header )
          ._addClass( clickedChildren, null, options.icons.activeHeader );
      }

      this._addClass( clicked.next(), "ui-accordion-content-active" );
    }
  },

  _toggle: function( data ) {
    var toShow = data.newPanel,
      toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

    // Handle activating a panel during the animation for another activation
    this.prevShow.add( this.prevHide ).stop( true, true );
    this.prevShow = toShow;
    this.prevHide = toHide;

    if ( this.options.animate ) {
      this._animate( toShow, toHide, data );
    } else {
      toHide.hide();
      toShow.show();
      this._toggleComplete( data );
    }

    toHide.attr( {
      "aria-hidden": "true"
    } );
    toHide.prev().attr( {
      "aria-selected": "false",
      "aria-expanded": "false"
    } );

    // if we're switching panels, remove the old header from the tab order
    // if we're opening from collapsed state, remove the previous header from the tab order
    // if we're collapsing, then keep the collapsing header in the tab order
    if ( toShow.length && toHide.length ) {
      toHide.prev().attr( {
        "tabIndex": -1,
        "aria-expanded": "false"
      } );
    } else if ( toShow.length ) {
      this.headers.filter( function() {
        return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
      } )
        .attr( "tabIndex", -1 );
    }

    toShow
      .attr( "aria-hidden", "false" )
      .prev()
        .attr( {
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        } );
  },

  _animate: function( toShow, toHide, data ) {
    var total, easing, duration,
      that = this,
      adjust = 0,
      boxSizing = toShow.css( "box-sizing" ),
      down = toShow.length &&
        ( !toHide.length || ( toShow.index() < toHide.index() ) ),
      animate = this.options.animate || {},
      options = down && animate.down || animate,
      complete = function() {
        that._toggleComplete( data );
      };

    if ( typeof options === "number" ) {
      duration = options;
    }
    if ( typeof options === "string" ) {
      easing = options;
    }

    // fall back from options to animation in case of partial down settings
    easing = easing || options.easing || animate.easing;
    duration = duration || options.duration || animate.duration;

    if ( !toHide.length ) {
      return toShow.animate( this.showProps, duration, easing, complete );
    }
    if ( !toShow.length ) {
      return toHide.animate( this.hideProps, duration, easing, complete );
    }

    total = toShow.show().outerHeight();
    toHide.animate( this.hideProps, {
      duration: duration,
      easing: easing,
      step: function( now, fx ) {
        fx.now = Math.round( now );
      }
    } );
    toShow
      .hide()
      .animate( this.showProps, {
        duration: duration,
        easing: easing,
        complete: complete,
        step: function( now, fx ) {
          fx.now = Math.round( now );
          if ( fx.prop !== "height" ) {
            if ( boxSizing === "content-box" ) {
              adjust += fx.now;
            }
          } else if ( that.options.heightStyle !== "content" ) {
            fx.now = Math.round( total - toHide.outerHeight() - adjust );
            adjust = 0;
          }
        }
      } );
  },

  _toggleComplete: function( data ) {
    var toHide = data.oldPanel,
      prev = toHide.prev();

    this._removeClass( toHide, "ui-accordion-content-active" );
    this._removeClass( prev, "ui-accordion-header-active" )
      ._addClass( prev, "ui-accordion-header-collapsed" );

    // Work around for rendering bug in IE (#5421)
    if ( toHide.length ) {
      toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
    }
    this._trigger( "activate", null, data );
  }
} );



var safeActiveElement = $.ui.safeActiveElement = function( document ) {
  var activeElement;

  // Support: IE 9 only
  // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
  try {
    activeElement = document.activeElement;
  } catch ( error ) {
    activeElement = document.body;
  }

  // Support: IE 9 - 11 only
  // IE may return null instead of an element
  // Interestingly, this only seems to occur when NOT in an iframe
  if ( !activeElement ) {
    activeElement = document.body;
  }

  // Support: IE 11 only
  // IE11 returns a seemingly empty object in some cases when accessing
  // document.activeElement from an <iframe>
  if ( !activeElement.nodeName ) {
    activeElement = document.body;
  }

  return activeElement;
};


/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css



var widgetsMenu = $.widget( "ui.menu", {
  version: "1.12.1",
  defaultElement: "<ul>",
  delay: 300,
  options: {
    icons: {
      submenu: "ui-icon-caret-1-e"
    },
    items: "> *",
    menus: "ul",
    position: {
      my: "left top",
      at: "right top"
    },
    role: "menu",

    // Callbacks
    blur: null,
    focus: null,
    select: null
  },

  _create: function() {
    this.activeMenu = this.element;

    // Flag used to prevent firing of the click handler
    // as the event bubbles up through nested menus
    this.mouseHandled = false;
    this.element
      .uniqueId()
      .attr( {
        role: this.options.role,
        tabIndex: 0
      } );

    this._addClass( "ui-menu", "ui-widget ui-widget-content" );
    this._on( {

      // Prevent focus from sticking to links inside menu after clicking
      // them (focus should always stay on UL during navigation).
      "mousedown .ui-menu-item": function( event ) {
        event.preventDefault();
      },
      "click .ui-menu-item": function( event ) {
        var target = $( event.target );
        var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
        if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
          this.select( event );

          // Only set the mouseHandled flag if the event will bubble, see #9469.
          if ( !event.isPropagationStopped() ) {
            this.mouseHandled = true;
          }

          // Open submenu on click
          if ( target.has( ".ui-menu" ).length ) {
            this.expand( event );
          } else if ( !this.element.is( ":focus" ) &&
              active.closest( ".ui-menu" ).length ) {

            // Redirect focus to the menu
            this.element.trigger( "focus", [ true ] );

            // If the active item is on the top level, let it stay active.
            // Otherwise, blur the active item since it is no longer visible.
            if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
              clearTimeout( this.timer );
            }
          }
        }
      },
      "mouseenter .ui-menu-item": function( event ) {

        // Ignore mouse events while typeahead is active, see #10458.
        // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
        // is over an item in the menu
        if ( this.previousFilter ) {
          return;
        }

        var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
          target = $( event.currentTarget );

        // Ignore bubbled events on parent items, see #11641
        if ( actualTarget[ 0 ] !== target[ 0 ] ) {
          return;
        }

        // Remove ui-state-active class from siblings of the newly focused menu item
        // to avoid a jump caused by adjacent elements both having a class with a border
        this._removeClass( target.siblings().children( ".ui-state-active" ),
          null, "ui-state-active" );
        this.focus( event, target );
      },
      mouseleave: "collapseAll",
      "mouseleave .ui-menu": "collapseAll",
      focus: function( event, keepActiveItem ) {

        // If there's already an active item, keep it active
        // If not, activate the first item
        var item = this.active || this.element.find( this.options.items ).eq( 0 );

        if ( !keepActiveItem ) {
          this.focus( event, item );
        }
      },
      blur: function( event ) {
        this._delay( function() {
          var notContained = !$.contains(
            this.element[ 0 ],
            $.ui.safeActiveElement( this.document[ 0 ] )
          );
          if ( notContained ) {
            this.collapseAll( event );
          }
        } );
      },
      keydown: "_keydown"
    } );

    this.refresh();

    // Clicks outside of a menu collapse any open menus
    this._on( this.document, {
      click: function( event ) {
        if ( this._closeOnDocumentClick( event ) ) {
          this.collapseAll( event );
        }

        // Reset the mouseHandled flag
        this.mouseHandled = false;
      }
    } );
  },

  _destroy: function() {
    var items = this.element.find( ".ui-menu-item" )
        .removeAttr( "role aria-disabled" ),
      submenus = items.children( ".ui-menu-item-wrapper" )
        .removeUniqueId()
        .removeAttr( "tabIndex role aria-haspopup" );

    // Destroy (sub)menus
    this.element
      .removeAttr( "aria-activedescendant" )
      .find( ".ui-menu" ).addBack()
        .removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
          "tabIndex" )
        .removeUniqueId()
        .show();

    submenus.children().each( function() {
      var elem = $( this );
      if ( elem.data( "ui-menu-submenu-caret" ) ) {
        elem.remove();
      }
    } );
  },

  _keydown: function( event ) {
    var match, prev, character, skip,
      preventDefault = true;

    switch ( event.keyCode ) {
    case $.ui.keyCode.PAGE_UP:
      this.previousPage( event );
      break;
    case $.ui.keyCode.PAGE_DOWN:
      this.nextPage( event );
      break;
    case $.ui.keyCode.HOME:
      this._move( "first", "first", event );
      break;
    case $.ui.keyCode.END:
      this._move( "last", "last", event );
      break;
    case $.ui.keyCode.UP:
      this.previous( event );
      break;
    case $.ui.keyCode.DOWN:
      this.next( event );
      break;
    case $.ui.keyCode.LEFT:
      this.collapse( event );
      break;
    case $.ui.keyCode.RIGHT:
      if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
        this.expand( event );
      }
      break;
    case $.ui.keyCode.ENTER:
    case $.ui.keyCode.SPACE:
      this._activate( event );
      break;
    case $.ui.keyCode.ESCAPE:
      this.collapse( event );
      break;
    default:
      preventDefault = false;
      prev = this.previousFilter || "";
      skip = false;

      // Support number pad values
      character = event.keyCode >= 96 && event.keyCode <= 105 ?
        ( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

      clearTimeout( this.filterTimer );

      if ( character === prev ) {
        skip = true;
      } else {
        character = prev + character;
      }

      match = this._filterMenuItems( character );
      match = skip && match.index( this.active.next() ) !== -1 ?
        this.active.nextAll( ".ui-menu-item" ) :
        match;

      // If no matches on the current filter, reset to the last character pressed
      // to move down the menu to the first item that starts with that character
      if ( !match.length ) {
        character = String.fromCharCode( event.keyCode );
        match = this._filterMenuItems( character );
      }

      if ( match.length ) {
        this.focus( event, match );
        this.previousFilter = character;
        this.filterTimer = this._delay( function() {
          delete this.previousFilter;
        }, 1000 );
      } else {
        delete this.previousFilter;
      }
    }

    if ( preventDefault ) {
      event.preventDefault();
    }
  },

  _activate: function( event ) {
    if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
      if ( this.active.children( "[aria-haspopup='true']" ).length ) {
        this.expand( event );
      } else {
        this.select( event );
      }
    }
  },

  refresh: function() {
    var menus, items, newSubmenus, newItems, newWrappers,
      that = this,
      icon = this.options.icons.submenu,
      submenus = this.element.find( this.options.menus );

    this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

    // Initialize nested menus
    newSubmenus = submenus.filter( ":not(.ui-menu)" )
      .hide()
      .attr( {
        role: this.options.role,
        "aria-hidden": "true",
        "aria-expanded": "false"
      } )
      .each( function() {
        var menu = $( this ),
          item = menu.prev(),
          submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

        that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
        item
          .attr( "aria-haspopup", "true" )
          .prepend( submenuCaret );
        menu.attr( "aria-labelledby", item.attr( "id" ) );
      } );

    this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

    menus = submenus.add( this.element );
    items = menus.find( this.options.items );

    // Initialize menu-items containing spaces and/or dashes only as dividers
    items.not( ".ui-menu-item" ).each( function() {
      var item = $( this );
      if ( that._isDivider( item ) ) {
        that._addClass( item, "ui-menu-divider", "ui-widget-content" );
      }
    } );

    // Don't refresh list items that are already adapted
    newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
    newWrappers = newItems.children()
      .not( ".ui-menu" )
        .uniqueId()
        .attr( {
          tabIndex: -1,
          role: this._itemRole()
        } );
    this._addClass( newItems, "ui-menu-item" )
      ._addClass( newWrappers, "ui-menu-item-wrapper" );

    // Add aria-disabled attribute to any disabled menu item
    items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

    // If the active item has been removed, blur the menu
    if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
      this.blur();
    }
  },

  _itemRole: function() {
    return {
      menu: "menuitem",
      listbox: "option"
    }[ this.options.role ];
  },

  _setOption: function( key, value ) {
    if ( key === "icons" ) {
      var icons = this.element.find( ".ui-menu-icon" );
      this._removeClass( icons, null, this.options.icons.submenu )
        ._addClass( icons, null, value.submenu );
    }
    this._super( key, value );
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this.element.attr( "aria-disabled", String( value ) );
    this._toggleClass( null, "ui-state-disabled", !!value );
  },

  focus: function( event, item ) {
    var nested, focused, activeParent;
    this.blur( event, event && event.type === "focus" );

    this._scrollIntoView( item );

    this.active = item.first();

    focused = this.active.children( ".ui-menu-item-wrapper" );
    this._addClass( focused, null, "ui-state-active" );

    // Only update aria-activedescendant if there's a role
    // otherwise we assume focus is managed elsewhere
    if ( this.options.role ) {
      this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
    }

    // Highlight active parent menu item, if any
    activeParent = this.active
      .parent()
        .closest( ".ui-menu-item" )
          .children( ".ui-menu-item-wrapper" );
    this._addClass( activeParent, null, "ui-state-active" );

    if ( event && event.type === "keydown" ) {
      this._close();
    } else {
      this.timer = this._delay( function() {
        this._close();
      }, this.delay );
    }

    nested = item.children( ".ui-menu" );
    if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
      this._startOpening( nested );
    }
    this.activeMenu = item.parent();

    this._trigger( "focus", event, { item: item } );
  },

  _scrollIntoView: function( item ) {
    var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
    if ( this._hasScroll() ) {
      borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
      paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
      offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
      scroll = this.activeMenu.scrollTop();
      elementHeight = this.activeMenu.height();
      itemHeight = item.outerHeight();

      if ( offset < 0 ) {
        this.activeMenu.scrollTop( scroll + offset );
      } else if ( offset + itemHeight > elementHeight ) {
        this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
      }
    }
  },

  blur: function( event, fromFocus ) {
    if ( !fromFocus ) {
      clearTimeout( this.timer );
    }

    if ( !this.active ) {
      return;
    }

    this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
      null, "ui-state-active" );

    this._trigger( "blur", event, { item: this.active } );
    this.active = null;
  },

  _startOpening: function( submenu ) {
    clearTimeout( this.timer );

    // Don't open if already open fixes a Firefox bug that caused a .5 pixel
    // shift in the submenu position when mousing over the caret icon
    if ( submenu.attr( "aria-hidden" ) !== "true" ) {
      return;
    }

    this.timer = this._delay( function() {
      this._close();
      this._open( submenu );
    }, this.delay );
  },

  _open: function( submenu ) {
    var position = $.extend( {
      of: this.active
    }, this.options.position );

    clearTimeout( this.timer );
    this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
      .hide()
      .attr( "aria-hidden", "true" );

    submenu
      .show()
      .removeAttr( "aria-hidden" )
      .attr( "aria-expanded", "true" )
      .position( position );
  },

  collapseAll: function( event, all ) {
    clearTimeout( this.timer );
    this.timer = this._delay( function() {

      // If we were passed an event, look for the submenu that contains the event
      var currentMenu = all ? this.element :
        $( event && event.target ).closest( this.element.find( ".ui-menu" ) );

      // If we found no valid submenu ancestor, use the main menu to close all
      // sub menus anyway
      if ( !currentMenu.length ) {
        currentMenu = this.element;
      }

      this._close( currentMenu );

      this.blur( event );

      // Work around active item staying active after menu is blurred
      this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

      this.activeMenu = currentMenu;
    }, this.delay );
  },

  // With no arguments, closes the currently active menu - if nothing is active
  // it closes all menus.  If passed an argument, it will search for menus BELOW
  _close: function( startMenu ) {
    if ( !startMenu ) {
      startMenu = this.active ? this.active.parent() : this.element;
    }

    startMenu.find( ".ui-menu" )
      .hide()
      .attr( "aria-hidden", "true" )
      .attr( "aria-expanded", "false" );
  },

  _closeOnDocumentClick: function( event ) {
    return !$( event.target ).closest( ".ui-menu" ).length;
  },

  _isDivider: function( item ) {

    // Match hyphen, em dash, en dash
    return !/[^\-\u2014\u2013\s]/.test( item.text() );
  },

  collapse: function( event ) {
    var newItem = this.active &&
      this.active.parent().closest( ".ui-menu-item", this.element );
    if ( newItem && newItem.length ) {
      this._close();
      this.focus( event, newItem );
    }
  },

  expand: function( event ) {
    var newItem = this.active &&
      this.active
        .children( ".ui-menu " )
          .find( this.options.items )
            .first();

    if ( newItem && newItem.length ) {
      this._open( newItem.parent() );

      // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
      this._delay( function() {
        this.focus( event, newItem );
      } );
    }
  },

  next: function( event ) {
    this._move( "next", "first", event );
  },

  previous: function( event ) {
    this._move( "prev", "last", event );
  },

  isFirstItem: function() {
    return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
  },

  isLastItem: function() {
    return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
  },

  _move: function( direction, filter, event ) {
    var next;
    if ( this.active ) {
      if ( direction === "first" || direction === "last" ) {
        next = this.active
          [ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
          .eq( -1 );
      } else {
        next = this.active
          [ direction + "All" ]( ".ui-menu-item" )
          .eq( 0 );
      }
    }
    if ( !next || !next.length || !this.active ) {
      next = this.activeMenu.find( this.options.items )[ filter ]();
    }

    this.focus( event, next );
  },

  nextPage: function( event ) {
    var item, base, height;

    if ( !this.active ) {
      this.next( event );
      return;
    }
    if ( this.isLastItem() ) {
      return;
    }
    if ( this._hasScroll() ) {
      base = this.active.offset().top;
      height = this.element.height();
      this.active.nextAll( ".ui-menu-item" ).each( function() {
        item = $( this );
        return item.offset().top - base - height < 0;
      } );

      this.focus( event, item );
    } else {
      this.focus( event, this.activeMenu.find( this.options.items )
        [ !this.active ? "first" : "last" ]() );
    }
  },

  previousPage: function( event ) {
    var item, base, height;
    if ( !this.active ) {
      this.next( event );
      return;
    }
    if ( this.isFirstItem() ) {
      return;
    }
    if ( this._hasScroll() ) {
      base = this.active.offset().top;
      height = this.element.height();
      this.active.prevAll( ".ui-menu-item" ).each( function() {
        item = $( this );
        return item.offset().top - base + height > 0;
      } );

      this.focus( event, item );
    } else {
      this.focus( event, this.activeMenu.find( this.options.items ).first() );
    }
  },

  _hasScroll: function() {
    return this.element.outerHeight() < this.element.prop( "scrollHeight" );
  },

  select: function( event ) {

    // TODO: It should never be possible to not have an active item at this
    // point, but the tests don't trigger mouseenter before click.
    this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
    var ui = { item: this.active };
    if ( !this.active.has( ".ui-menu" ).length ) {
      this.collapseAll( event, true );
    }
    this._trigger( "select", event, ui );
  },

  _filterMenuItems: function( character ) {
    var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
      regex = new RegExp( "^" + escapedCharacter, "i" );

    return this.activeMenu
      .find( this.options.items )

        // Only match on items, not dividers or other content (#10571)
        .filter( ".ui-menu-item" )
          .filter( function() {
            return regex.test(
              $.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
          } );
  }
} );


/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.autocomplete", {
  version: "1.12.1",
  defaultElement: "<input>",
  options: {
    appendTo: null,
    autoFocus: false,
    delay: 300,
    minLength: 1,
    position: {
      my: "left top",
      at: "left bottom",
      collision: "none"
    },
    source: null,

    // Callbacks
    change: null,
    close: null,
    focus: null,
    open: null,
    response: null,
    search: null,
    select: null
  },

  requestIndex: 0,
  pending: 0,

  _create: function() {

    // Some browsers only repeat keydown events, not keypress events,
    // so we use the suppressKeyPress flag to determine if we've already
    // handled the keydown event. #7269
    // Unfortunately the code for & in keypress is the same as the up arrow,
    // so we use the suppressKeyPressRepeat flag to avoid handling keypress
    // events when we know the keydown event was used to modify the
    // search term. #7799
    var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
      nodeName = this.element[ 0 ].nodeName.toLowerCase(),
      isTextarea = nodeName === "textarea",
      isInput = nodeName === "input";

    // Textareas are always multi-line
    // Inputs are always single-line, even if inside a contentEditable element
    // IE also treats inputs as contentEditable
    // All other element types are determined by whether or not they're contentEditable
    this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

    this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
    this.isNewMenu = true;

    this._addClass( "ui-autocomplete-input" );
    this.element.attr( "autocomplete", "off" );

    this._on( this.element, {
      keydown: function( event ) {
        if ( this.element.prop( "readOnly" ) ) {
          suppressKeyPress = true;
          suppressInput = true;
          suppressKeyPressRepeat = true;
          return;
        }

        suppressKeyPress = false;
        suppressInput = false;
        suppressKeyPressRepeat = false;
        var keyCode = $.ui.keyCode;
        switch ( event.keyCode ) {
        case keyCode.PAGE_UP:
          suppressKeyPress = true;
          this._move( "previousPage", event );
          break;
        case keyCode.PAGE_DOWN:
          suppressKeyPress = true;
          this._move( "nextPage", event );
          break;
        case keyCode.UP:
          suppressKeyPress = true;
          this._keyEvent( "previous", event );
          break;
        case keyCode.DOWN:
          suppressKeyPress = true;
          this._keyEvent( "next", event );
          break;
        case keyCode.ENTER:

          // when menu is open and has focus
          if ( this.menu.active ) {

            // #6055 - Opera still allows the keypress to occur
            // which causes forms to submit
            suppressKeyPress = true;
            event.preventDefault();
            this.menu.select( event );
          }
          break;
        case keyCode.TAB:
          if ( this.menu.active ) {
            this.menu.select( event );
          }
          break;
        case keyCode.ESCAPE:
          if ( this.menu.element.is( ":visible" ) ) {
            if ( !this.isMultiLine ) {
              this._value( this.term );
            }
            this.close( event );

            // Different browsers have different default behavior for escape
            // Single press can mean undo or clear
            // Double press in IE means clear the whole form
            event.preventDefault();
          }
          break;
        default:
          suppressKeyPressRepeat = true;

          // search timeout should be triggered before the input value is changed
          this._searchTimeout( event );
          break;
        }
      },
      keypress: function( event ) {
        if ( suppressKeyPress ) {
          suppressKeyPress = false;
          if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
            event.preventDefault();
          }
          return;
        }
        if ( suppressKeyPressRepeat ) {
          return;
        }

        // Replicate some key handlers to allow them to repeat in Firefox and Opera
        var keyCode = $.ui.keyCode;
        switch ( event.keyCode ) {
        case keyCode.PAGE_UP:
          this._move( "previousPage", event );
          break;
        case keyCode.PAGE_DOWN:
          this._move( "nextPage", event );
          break;
        case keyCode.UP:
          this._keyEvent( "previous", event );
          break;
        case keyCode.DOWN:
          this._keyEvent( "next", event );
          break;
        }
      },
      input: function( event ) {
        if ( suppressInput ) {
          suppressInput = false;
          event.preventDefault();
          return;
        }
        this._searchTimeout( event );
      },
      focus: function() {
        this.selectedItem = null;
        this.previous = this._value();
      },
      blur: function( event ) {
        if ( this.cancelBlur ) {
          delete this.cancelBlur;
          return;
        }

        clearTimeout( this.searching );
        this.close( event );
        this._change( event );
      }
    } );

    this._initSource();
    this.menu = $( "<ul>" )
      .appendTo( this._appendTo() )
      .menu( {

        // disable ARIA support, the live region takes care of that
        role: null
      } )
      .hide()
      .menu( "instance" );

    this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
    this._on( this.menu.element, {
      mousedown: function( event ) {

        // prevent moving focus out of the text field
        event.preventDefault();

        // IE doesn't prevent moving focus even with event.preventDefault()
        // so we set a flag to know when we should ignore the blur event
        this.cancelBlur = true;
        this._delay( function() {
          delete this.cancelBlur;

          // Support: IE 8 only
          // Right clicking a menu item or selecting text from the menu items will
          // result in focus moving out of the input. However, we've already received
          // and ignored the blur event because of the cancelBlur flag set above. So
          // we restore focus to ensure that the menu closes properly based on the user's
          // next actions.
          if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
            this.element.trigger( "focus" );
          }
        } );
      },
      menufocus: function( event, ui ) {
        var label, item;

        // support: Firefox
        // Prevent accidental activation of menu items in Firefox (#7024 #9118)
        if ( this.isNewMenu ) {
          this.isNewMenu = false;
          if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
            this.menu.blur();

            this.document.one( "mousemove", function() {
              $( event.target ).trigger( event.originalEvent );
            } );

            return;
          }
        }

        item = ui.item.data( "ui-autocomplete-item" );
        if ( false !== this._trigger( "focus", event, { item: item } ) ) {

          // use value to match what will end up in the input, if it was a key event
          if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
            this._value( item.value );
          }
        }

        // Announce the value in the liveRegion
        label = ui.item.attr( "aria-label" ) || item.value;
        if ( label && $.trim( label ).length ) {
          this.liveRegion.children().hide();
          $( "<div>" ).text( label ).appendTo( this.liveRegion );
        }
      },
      menuselect: function( event, ui ) {
        var item = ui.item.data( "ui-autocomplete-item" ),
          previous = this.previous;

        // Only trigger when focus was lost (click on menu)
        if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
          this.element.trigger( "focus" );
          this.previous = previous;

          // #6109 - IE triggers two focus events and the second
          // is asynchronous, so we need to reset the previous
          // term synchronously and asynchronously :-(
          this._delay( function() {
            this.previous = previous;
            this.selectedItem = item;
          } );
        }

        if ( false !== this._trigger( "select", event, { item: item } ) ) {
          this._value( item.value );
        }

        // reset the term after the select event
        // this allows custom select handling to work properly
        this.term = this._value();

        this.close( event );
        this.selectedItem = item;
      }
    } );

    this.liveRegion = $( "<div>", {
      role: "status",
      "aria-live": "assertive",
      "aria-relevant": "additions"
    } )
      .appendTo( this.document[ 0 ].body );

    this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

    // Turning off autocomplete prevents the browser from remembering the
    // value when navigating through history, so we re-enable autocomplete
    // if the page is unloaded before the widget is destroyed. #7790
    this._on( this.window, {
      beforeunload: function() {
        this.element.removeAttr( "autocomplete" );
      }
    } );
  },

  _destroy: function() {
    clearTimeout( this.searching );
    this.element.removeAttr( "autocomplete" );
    this.menu.element.remove();
    this.liveRegion.remove();
  },

  _setOption: function( key, value ) {
    this._super( key, value );
    if ( key === "source" ) {
      this._initSource();
    }
    if ( key === "appendTo" ) {
      this.menu.element.appendTo( this._appendTo() );
    }
    if ( key === "disabled" && value && this.xhr ) {
      this.xhr.abort();
    }
  },

  _isEventTargetInWidget: function( event ) {
    var menuElement = this.menu.element[ 0 ];

    return event.target === this.element[ 0 ] ||
      event.target === menuElement ||
      $.contains( menuElement, event.target );
  },

  _closeOnClickOutside: function( event ) {
    if ( !this._isEventTargetInWidget( event ) ) {
      this.close();
    }
  },

  _appendTo: function() {
    var element = this.options.appendTo;

    if ( element ) {
      element = element.jquery || element.nodeType ?
        $( element ) :
        this.document.find( element ).eq( 0 );
    }

    if ( !element || !element[ 0 ] ) {
      element = this.element.closest( ".ui-front, dialog" );
    }

    if ( !element.length ) {
      element = this.document[ 0 ].body;
    }

    return element;
  },

  _initSource: function() {
    var array, url,
      that = this;
    if ( $.isArray( this.options.source ) ) {
      array = this.options.source;
      this.source = function( request, response ) {
        response( $.ui.autocomplete.filter( array, request.term ) );
      };
    } else if ( typeof this.options.source === "string" ) {
      url = this.options.source;
      this.source = function( request, response ) {
        if ( that.xhr ) {
          that.xhr.abort();
        }
        that.xhr = $.ajax( {
          url: url,
          data: request,
          dataType: "json",
          success: function( data ) {
            response( data );
          },
          error: function() {
            response( [] );
          }
        } );
      };
    } else {
      this.source = this.options.source;
    }
  },

  _searchTimeout: function( event ) {
    clearTimeout( this.searching );
    this.searching = this._delay( function() {

      // Search if the value has changed, or if the user retypes the same value (see #7434)
      var equalValues = this.term === this._value(),
        menuVisible = this.menu.element.is( ":visible" ),
        modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

      if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
        this.selectedItem = null;
        this.search( null, event );
      }
    }, this.options.delay );
  },

  search: function( value, event ) {
    value = value != null ? value : this._value();

    // Always save the actual value, not the one passed as an argument
    this.term = this._value();

    if ( value.length < this.options.minLength ) {
      return this.close( event );
    }

    if ( this._trigger( "search", event ) === false ) {
      return;
    }

    return this._search( value );
  },

  _search: function( value ) {
    this.pending++;
    this._addClass( "ui-autocomplete-loading" );
    this.cancelSearch = false;

    this.source( { term: value }, this._response() );
  },

  _response: function() {
    var index = ++this.requestIndex;

    return $.proxy( function( content ) {
      if ( index === this.requestIndex ) {
        this.__response( content );
      }

      this.pending--;
      if ( !this.pending ) {
        this._removeClass( "ui-autocomplete-loading" );
      }
    }, this );
  },

  __response: function( content ) {
    if ( content ) {
      content = this._normalize( content );
    }
    this._trigger( "response", null, { content: content } );
    if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
      this._suggest( content );
      this._trigger( "open" );
    } else {

      // use ._close() instead of .close() so we don't cancel future searches
      this._close();
    }
  },

  close: function( event ) {
    this.cancelSearch = true;
    this._close( event );
  },

  _close: function( event ) {

    // Remove the handler that closes the menu on outside clicks
    this._off( this.document, "mousedown" );

    if ( this.menu.element.is( ":visible" ) ) {
      this.menu.element.hide();
      this.menu.blur();
      this.isNewMenu = true;
      this._trigger( "close", event );
    }
  },

  _change: function( event ) {
    if ( this.previous !== this._value() ) {
      this._trigger( "change", event, { item: this.selectedItem } );
    }
  },

  _normalize: function( items ) {

    // assume all items have the right format when the first item is complete
    if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
      return items;
    }
    return $.map( items, function( item ) {
      if ( typeof item === "string" ) {
        return {
          label: item,
          value: item
        };
      }
      return $.extend( {}, item, {
        label: item.label || item.value,
        value: item.value || item.label
      } );
    } );
  },

  _suggest: function( items ) {
    var ul = this.menu.element.empty();
    this._renderMenu( ul, items );
    this.isNewMenu = true;
    this.menu.refresh();

    // Size and position menu
    ul.show();
    this._resizeMenu();
    ul.position( $.extend( {
      of: this.element
    }, this.options.position ) );

    if ( this.options.autoFocus ) {
      this.menu.next();
    }

    // Listen for interactions outside of the widget (#6642)
    this._on( this.document, {
      mousedown: "_closeOnClickOutside"
    } );
  },

  _resizeMenu: function() {
    var ul = this.menu.element;
    ul.outerWidth( Math.max(

      // Firefox wraps long text (possibly a rounding bug)
      // so we add 1px to avoid the wrapping (#7513)
      ul.width( "" ).outerWidth() + 1,
      this.element.outerWidth()
    ) );
  },

  _renderMenu: function( ul, items ) {
    var that = this;
    $.each( items, function( index, item ) {
      that._renderItemData( ul, item );
    } );
  },

  _renderItemData: function( ul, item ) {
    return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
  },

  _renderItem: function( ul, item ) {
    return $( "<li>" )
      .append( $( "<div>" ).text( item.label ) )
      .appendTo( ul );
  },

  _move: function( direction, event ) {
    if ( !this.menu.element.is( ":visible" ) ) {
      this.search( null, event );
      return;
    }
    if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
        this.menu.isLastItem() && /^next/.test( direction ) ) {

      if ( !this.isMultiLine ) {
        this._value( this.term );
      }

      this.menu.blur();
      return;
    }
    this.menu[ direction ]( event );
  },

  widget: function() {
    return this.menu.element;
  },

  _value: function() {
    return this.valueMethod.apply( this.element, arguments );
  },

  _keyEvent: function( keyEvent, event ) {
    if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
      this._move( keyEvent, event );

      // Prevents moving cursor to beginning/end of the text field in some browsers
      event.preventDefault();
    }
  },

  // Support: Chrome <=50
  // We should be able to just use this.element.prop( "isContentEditable" )
  // but hidden elements always report false in Chrome.
  // https://code.google.com/p/chromium/issues/detail?id=313082
  _isContentEditable: function( element ) {
    if ( !element.length ) {
      return false;
    }

    var editable = element.prop( "contentEditable" );

    if ( editable === "inherit" ) {
      return this._isContentEditable( element.parent() );
    }

    return editable === "true";
  }
} );

$.extend( $.ui.autocomplete, {
  escapeRegex: function( value ) {
    return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
  },
  filter: function( array, term ) {
    var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
    return $.grep( array, function( value ) {
      return matcher.test( value.label || value.value || value );
    } );
  }
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
  options: {
    messages: {
      noResults: "No search results.",
      results: function( amount ) {
        return amount + ( amount > 1 ? " results are" : " result is" ) +
          " available, use up and down arrow keys to navigate.";
      }
    }
  },

  __response: function( content ) {
    var message;
    this._superApply( arguments );
    if ( this.options.disabled || this.cancelSearch ) {
      return;
    }
    if ( content && content.length ) {
      message = this.options.messages.results( content.length );
    } else {
      message = this.options.messages.noResults;
    }
    this.liveRegion.children().hide();
    $( "<div>" ).text( message ).appendTo( this.liveRegion );
  }
} );

var widgetsAutocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Controlgroup
//>>group: Widgets
//>>description: Visually groups form control widgets
//>>docs: http://api.jqueryui.com/controlgroup/
//>>demos: http://jqueryui.com/controlgroup/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/controlgroup.css
//>>css.theme: ../../themes/base/theme.css


var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

var widgetsControlgroup = $.widget( "ui.controlgroup", {
  version: "1.12.1",
  defaultElement: "<div>",
  options: {
    direction: "horizontal",
    disabled: null,
    onlyVisible: true,
    items: {
      "button": "input[type=button], input[type=submit], input[type=reset], button, a",
      "controlgroupLabel": ".ui-controlgroup-label",
      "checkboxradio": "input[type='checkbox'], input[type='radio']",
      "selectmenu": "select",
      "spinner": ".ui-spinner-input"
    }
  },

  _create: function() {
    this._enhance();
  },

  // To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
  _enhance: function() {
    this.element.attr( "role", "toolbar" );
    this.refresh();
  },

  _destroy: function() {
    this._callChildMethod( "destroy" );
    this.childWidgets.removeData( "ui-controlgroup-data" );
    this.element.removeAttr( "role" );
    if ( this.options.items.controlgroupLabel ) {
      this.element
        .find( this.options.items.controlgroupLabel )
        .find( ".ui-controlgroup-label-contents" )
        .contents().unwrap();
    }
  },

  _initWidgets: function() {
    var that = this,
      childWidgets = [];

    // First we iterate over each of the items options
    $.each( this.options.items, function( widget, selector ) {
      var labels;
      var options = {};

      // Make sure the widget has a selector set
      if ( !selector ) {
        return;
      }

      if ( widget === "controlgroupLabel" ) {
        labels = that.element.find( selector );
        labels.each( function() {
          var element = $( this );

          if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
            return;
          }
          element.contents()
            .wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
        } );
        that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
        childWidgets = childWidgets.concat( labels.get() );
        return;
      }

      // Make sure the widget actually exists
      if ( !$.fn[ widget ] ) {
        return;
      }

      // We assume everything is in the middle to start because we can't determine
      // first / last elements until all enhancments are done.
      if ( that[ "_" + widget + "Options" ] ) {
        options = that[ "_" + widget + "Options" ]( "middle" );
      } else {
        options = { classes: {} };
      }

      // Find instances of this widget inside controlgroup and init them
      that.element
        .find( selector )
        .each( function() {
          var element = $( this );
          var instance = element[ widget ]( "instance" );

          // We need to clone the default options for this type of widget to avoid
          // polluting the variable options which has a wider scope than a single widget.
          var instanceOptions = $.widget.extend( {}, options );

          // If the button is the child of a spinner ignore it
          // TODO: Find a more generic solution
          if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
            return;
          }

          // Create the widget if it doesn't exist
          if ( !instance ) {
            instance = element[ widget ]()[ widget ]( "instance" );
          }
          if ( instance ) {
            instanceOptions.classes =
              that._resolveClassesValues( instanceOptions.classes, instance );
          }
          element[ widget ]( instanceOptions );

          // Store an instance of the controlgroup to be able to reference
          // from the outermost element for changing options and refresh
          var widgetElement = element[ widget ]( "widget" );
          $.data( widgetElement[ 0 ], "ui-controlgroup-data",
            instance ? instance : element[ widget ]( "instance" ) );

          childWidgets.push( widgetElement[ 0 ] );
        } );
    } );

    this.childWidgets = $( $.unique( childWidgets ) );
    this._addClass( this.childWidgets, "ui-controlgroup-item" );
  },

  _callChildMethod: function( method ) {
    this.childWidgets.each( function() {
      var element = $( this ),
        data = element.data( "ui-controlgroup-data" );
      if ( data && data[ method ] ) {
        data[ method ]();
      }
    } );
  },

  _updateCornerClass: function( element, position ) {
    var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
    var add = this._buildSimpleOptions( position, "label" ).classes.label;

    this._removeClass( element, null, remove );
    this._addClass( element, null, add );
  },

  _buildSimpleOptions: function( position, key ) {
    var direction = this.options.direction === "vertical";
    var result = {
      classes: {}
    };
    result.classes[ key ] = {
      "middle": "",
      "first": "ui-corner-" + ( direction ? "top" : "left" ),
      "last": "ui-corner-" + ( direction ? "bottom" : "right" ),
      "only": "ui-corner-all"
    }[ position ];

    return result;
  },

  _spinnerOptions: function( position ) {
    var options = this._buildSimpleOptions( position, "ui-spinner" );

    options.classes[ "ui-spinner-up" ] = "";
    options.classes[ "ui-spinner-down" ] = "";

    return options;
  },

  _buttonOptions: function( position ) {
    return this._buildSimpleOptions( position, "ui-button" );
  },

  _checkboxradioOptions: function( position ) {
    return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
  },

  _selectmenuOptions: function( position ) {
    var direction = this.options.direction === "vertical";
    return {
      width: direction ? "auto" : false,
      classes: {
        middle: {
          "ui-selectmenu-button-open": "",
          "ui-selectmenu-button-closed": ""
        },
        first: {
          "ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
          "ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
        },
        last: {
          "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
          "ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
        },
        only: {
          "ui-selectmenu-button-open": "ui-corner-top",
          "ui-selectmenu-button-closed": "ui-corner-all"
        }

      }[ position ]
    };
  },

  _resolveClassesValues: function( classes, instance ) {
    var result = {};
    $.each( classes, function( key ) {
      var current = instance.options.classes[ key ] || "";
      current = $.trim( current.replace( controlgroupCornerRegex, "" ) );
      result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
    } );
    return result;
  },

  _setOption: function( key, value ) {
    if ( key === "direction" ) {
      this._removeClass( "ui-controlgroup-" + this.options.direction );
    }

    this._super( key, value );
    if ( key === "disabled" ) {
      this._callChildMethod( value ? "disable" : "enable" );
      return;
    }

    this.refresh();
  },

  refresh: function() {
    var children,
      that = this;

    this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

    if ( this.options.direction === "horizontal" ) {
      this._addClass( null, "ui-helper-clearfix" );
    }
    this._initWidgets();

    children = this.childWidgets;

    // We filter here because we need to track all childWidgets not just the visible ones
    if ( this.options.onlyVisible ) {
      children = children.filter( ":visible" );
    }

    if ( children.length ) {

      // We do this last because we need to make sure all enhancment is done
      // before determining first and last
      $.each( [ "first", "last" ], function( index, value ) {
        var instance = children[ value ]().data( "ui-controlgroup-data" );

        if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
          var options = that[ "_" + instance.widgetName + "Options" ](
            children.length === 1 ? "only" : value
          );
          options.classes = that._resolveClassesValues( options.classes, instance );
          instance.element[ instance.widgetName ]( options );
        } else {
          that._updateCornerClass( children[ value ](), value );
        }
      } );

      // Finally call the refresh method on each of the child widgets.
      this._callChildMethod( "refresh" );
    }
  }
} );

/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Checkboxradio
//>>group: Widgets
//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
//>>docs: http://api.jqueryui.com/checkboxradio/
//>>demos: http://jqueryui.com/checkboxradio/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.structure: ../../themes/base/checkboxradio.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
  version: "1.12.1",
  options: {
    disabled: null,
    label: null,
    icon: true,
    classes: {
      "ui-checkboxradio-label": "ui-corner-all",
      "ui-checkboxradio-icon": "ui-corner-all"
    }
  },

  _getCreateOptions: function() {
    var disabled, labels;
    var that = this;
    var options = this._super() || {};

    // We read the type here, because it makes more sense to throw a element type error first,
    // rather then the error for lack of a label. Often if its the wrong type, it
    // won't have a label (e.g. calling on a div, btn, etc)
    this._readType();

    labels = this.element.labels();

    // If there are multiple labels, use the last one
    this.label = $( labels[ labels.length - 1 ] );
    if ( !this.label.length ) {
      $.error( "No label found for checkboxradio widget" );
    }

    this.originalLabel = "";

    // We need to get the label text but this may also need to make sure it does not contain the
    // input itself.
    this.label.contents().not( this.element[ 0 ] ).each( function() {

      // The label contents could be text, html, or a mix. We concat each element to get a
      // string representation of the label, without the input as part of it.
      that.originalLabel += this.nodeType === 3 ? $( this ).text() : this.outerHTML;
    } );

    // Set the label option if we found label text
    if ( this.originalLabel ) {
      options.label = this.originalLabel;
    }

    disabled = this.element[ 0 ].disabled;
    if ( disabled != null ) {
      options.disabled = disabled;
    }
    return options;
  },

  _create: function() {
    var checked = this.element[ 0 ].checked;

    this._bindFormResetHandler();

    if ( this.options.disabled == null ) {
      this.options.disabled = this.element[ 0 ].disabled;
    }

    this._setOption( "disabled", this.options.disabled );
    this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
    this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

    if ( this.type === "radio" ) {
      this._addClass( this.label, "ui-checkboxradio-radio-label" );
    }

    if ( this.options.label && this.options.label !== this.originalLabel ) {
      this._updateLabel();
    } else if ( this.originalLabel ) {
      this.options.label = this.originalLabel;
    }

    this._enhance();

    if ( checked ) {
      this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
      if ( this.icon ) {
        this._addClass( this.icon, null, "ui-state-hover" );
      }
    }

    this._on( {
      change: "_toggleClasses",
      focus: function() {
        this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
      },
      blur: function() {
        this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
      }
    } );
  },

  _readType: function() {
    var nodeName = this.element[ 0 ].nodeName.toLowerCase();
    this.type = this.element[ 0 ].type;
    if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
      $.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
        " and element.type=" + this.type );
    }
  },

  // Support jQuery Mobile enhanced option
  _enhance: function() {
    this._updateIcon( this.element[ 0 ].checked );
  },

  widget: function() {
    return this.label;
  },

  _getRadioGroup: function() {
    var group;
    var name = this.element[ 0 ].name;
    var nameSelector = "input[name='" + $.ui.escapeSelector( name ) + "']";

    if ( !name ) {
      return $( [] );
    }

    if ( this.form.length ) {
      group = $( this.form[ 0 ].elements ).filter( nameSelector );
    } else {

      // Not inside a form, check all inputs that also are not inside a form
      group = $( nameSelector ).filter( function() {
        return $( this ).form().length === 0;
      } );
    }

    return group.not( this.element );
  },

  _toggleClasses: function() {
    var checked = this.element[ 0 ].checked;
    this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

    if ( this.options.icon && this.type === "checkbox" ) {
      this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
        ._toggleClass( this.icon, null, "ui-icon-blank", !checked );
    }

    if ( this.type === "radio" ) {
      this._getRadioGroup()
        .each( function() {
          var instance = $( this ).checkboxradio( "instance" );

          if ( instance ) {
            instance._removeClass( instance.label,
              "ui-checkboxradio-checked", "ui-state-active" );
          }
        } );
    }
  },

  _destroy: function() {
    this._unbindFormResetHandler();

    if ( this.icon ) {
      this.icon.remove();
      this.iconSpace.remove();
    }
  },

  _setOption: function( key, value ) {

    // We don't allow the value to be set to nothing
    if ( key === "label" && !value ) {
      return;
    }

    this._super( key, value );

    if ( key === "disabled" ) {
      this._toggleClass( this.label, null, "ui-state-disabled", value );
      this.element[ 0 ].disabled = value;

      // Don't refresh when setting disabled
      return;
    }
    this.refresh();
  },

  _updateIcon: function( checked ) {
    var toAdd = "ui-icon ui-icon-background ";

    if ( this.options.icon ) {
      if ( !this.icon ) {
        this.icon = $( "<span>" );
        this.iconSpace = $( "<span> </span>" );
        this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
      }

      if ( this.type === "checkbox" ) {
        toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
        this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
      } else {
        toAdd += "ui-icon-blank";
      }
      this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
      if ( !checked ) {
        this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
      }
      this.icon.prependTo( this.label ).after( this.iconSpace );
    } else if ( this.icon !== undefined ) {
      this.icon.remove();
      this.iconSpace.remove();
      delete this.icon;
    }
  },

  _updateLabel: function() {

    // Remove the contents of the label ( minus the icon, icon space, and input )
    var contents = this.label.contents().not( this.element[ 0 ] );
    if ( this.icon ) {
      contents = contents.not( this.icon[ 0 ] );
    }
    if ( this.iconSpace ) {
      contents = contents.not( this.iconSpace[ 0 ] );
    }
    contents.remove();

    this.label.append( this.options.label );
  },

  refresh: function() {
    var checked = this.element[ 0 ].checked,
      isDisabled = this.element[ 0 ].disabled;

    this._updateIcon( checked );
    this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
    if ( this.options.label !== null ) {
      this._updateLabel();
    }

    if ( isDisabled !== this.options.disabled ) {
      this._setOptions( { "disabled": isDisabled } );
    }
  }

} ] );

var widgetsCheckboxradio = $.ui.checkboxradio;


/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.button", {
  version: "1.12.1",
  defaultElement: "<button>",
  options: {
    classes: {
      "ui-button": "ui-corner-all"
    },
    disabled: null,
    icon: null,
    iconPosition: "beginning",
    label: null,
    showLabel: true
  },

  _getCreateOptions: function() {
    var disabled,

      // This is to support cases like in jQuery Mobile where the base widget does have
      // an implementation of _getCreateOptions
      options = this._super() || {};

    this.isInput = this.element.is( "input" );

    disabled = this.element[ 0 ].disabled;
    if ( disabled != null ) {
      options.disabled = disabled;
    }

    this.originalLabel = this.isInput ? this.element.val() : this.element.html();
    if ( this.originalLabel ) {
      options.label = this.originalLabel;
    }

    return options;
  },

  _create: function() {
    if ( !this.option.showLabel & !this.options.icon ) {
      this.options.showLabel = true;
    }

    // We have to check the option again here even though we did in _getCreateOptions,
    // because null may have been passed on init which would override what was set in
    // _getCreateOptions
    if ( this.options.disabled == null ) {
      this.options.disabled = this.element[ 0 ].disabled || false;
    }

    this.hasTitle = !!this.element.attr( "title" );

    // Check to see if the label needs to be set or if its already correct
    if ( this.options.label && this.options.label !== this.originalLabel ) {
      if ( this.isInput ) {
        this.element.val( this.options.label );
      } else {
        this.element.html( this.options.label );
      }
    }
    this._addClass( "ui-button", "ui-widget" );
    this._setOption( "disabled", this.options.disabled );
    this._enhance();

    if ( this.element.is( "a" ) ) {
      this._on( {
        "keyup": function( event ) {
          if ( event.keyCode === $.ui.keyCode.SPACE ) {
            event.preventDefault();

            // Support: PhantomJS <= 1.9, IE 8 Only
            // If a native click is available use it so we actually cause navigation
            // otherwise just trigger a click event
            if ( this.element[ 0 ].click ) {
              this.element[ 0 ].click();
            } else {
              this.element.trigger( "click" );
            }
          }
        }
      } );
    }
  },

  _enhance: function() {
    if ( !this.element.is( "button" ) ) {
      this.element.attr( "role", "button" );
    }

    if ( this.options.icon ) {
      this._updateIcon( "icon", this.options.icon );
      this._updateTooltip();
    }
  },

  _updateTooltip: function() {
    this.title = this.element.attr( "title" );

    if ( !this.options.showLabel && !this.title ) {
      this.element.attr( "title", this.options.label );
    }
  },

  _updateIcon: function( option, value ) {
    var icon = option !== "iconPosition",
      position = icon ? this.options.iconPosition : value,
      displayBlock = position === "top" || position === "bottom";

    // Create icon
    if ( !this.icon ) {
      this.icon = $( "<span>" );

      this._addClass( this.icon, "ui-button-icon", "ui-icon" );

      if ( !this.options.showLabel ) {
        this._addClass( "ui-button-icon-only" );
      }
    } else if ( icon ) {

      // If we are updating the icon remove the old icon class
      this._removeClass( this.icon, null, this.options.icon );
    }

    // If we are updating the icon add the new icon class
    if ( icon ) {
      this._addClass( this.icon, null, value );
    }

    this._attachIcon( position );

    // If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
    // the iconSpace if there is one.
    if ( displayBlock ) {
      this._addClass( this.icon, null, "ui-widget-icon-block" );
      if ( this.iconSpace ) {
        this.iconSpace.remove();
      }
    } else {

      // Position is beginning or end so remove the ui-widget-icon-block class and add the
      // space if it does not exist
      if ( !this.iconSpace ) {
        this.iconSpace = $( "<span> </span>" );
        this._addClass( this.iconSpace, "ui-button-icon-space" );
      }
      this._removeClass( this.icon, null, "ui-wiget-icon-block" );
      this._attachIconSpace( position );
    }
  },

  _destroy: function() {
    this.element.removeAttr( "role" );

    if ( this.icon ) {
      this.icon.remove();
    }
    if ( this.iconSpace ) {
      this.iconSpace.remove();
    }
    if ( !this.hasTitle ) {
      this.element.removeAttr( "title" );
    }
  },

  _attachIconSpace: function( iconPosition ) {
    this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
  },

  _attachIcon: function( iconPosition ) {
    this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
  },

  _setOptions: function( options ) {
    var newShowLabel = options.showLabel === undefined ?
        this.options.showLabel :
        options.showLabel,
      newIcon = options.icon === undefined ? this.options.icon : options.icon;

    if ( !newShowLabel && !newIcon ) {
      options.showLabel = true;
    }
    this._super( options );
  },

  _setOption: function( key, value ) {
    if ( key === "icon" ) {
      if ( value ) {
        this._updateIcon( key, value );
      } else if ( this.icon ) {
        this.icon.remove();
        if ( this.iconSpace ) {
          this.iconSpace.remove();
        }
      }
    }

    if ( key === "iconPosition" ) {
      this._updateIcon( key, value );
    }

    // Make sure we can't end up with a button that has neither text nor icon
    if ( key === "showLabel" ) {
        this._toggleClass( "ui-button-icon-only", null, !value );
        this._updateTooltip();
    }

    if ( key === "label" ) {
      if ( this.isInput ) {
        this.element.val( value );
      } else {

        // If there is an icon, append it, else nothing then append the value
        // this avoids removal of the icon when setting label text
        this.element.html( value );
        if ( this.icon ) {
          this._attachIcon( this.options.iconPosition );
          this._attachIconSpace( this.options.iconPosition );
        }
      }
    }

    this._super( key, value );

    if ( key === "disabled" ) {
      this._toggleClass( null, "ui-state-disabled", value );
      this.element[ 0 ].disabled = value;
      if ( value ) {
        this.element.blur();
      }
    }
  },

  refresh: function() {

    // Make sure to only check disabled if its an element that supports this otherwise
    // check for the disabled class to determine state
    var isDisabled = this.element.is( "input, button" ) ?
      this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

    if ( isDisabled !== this.options.disabled ) {
      this._setOptions( { disabled: isDisabled } );
    }

    this._updateTooltip();
  }
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

  // Text and Icons options
  $.widget( "ui.button", $.ui.button, {
    options: {
      text: true,
      icons: {
        primary: null,
        secondary: null
      }
    },

    _create: function() {
      if ( this.options.showLabel && !this.options.text ) {
        this.options.showLabel = this.options.text;
      }
      if ( !this.options.showLabel && this.options.text ) {
        this.options.text = this.options.showLabel;
      }
      if ( !this.options.icon && ( this.options.icons.primary ||
          this.options.icons.secondary ) ) {
        if ( this.options.icons.primary ) {
          this.options.icon = this.options.icons.primary;
        } else {
          this.options.icon = this.options.icons.secondary;
          this.options.iconPosition = "end";
        }
      } else if ( this.options.icon ) {
        this.options.icons.primary = this.options.icon;
      }
      this._super();
    },

    _setOption: function( key, value ) {
      if ( key === "text" ) {
        this._super( "showLabel", value );
        return;
      }
      if ( key === "showLabel" ) {
        this.options.text = value;
      }
      if ( key === "icon" ) {
        this.options.icons.primary = value;
      }
      if ( key === "icons" ) {
        if ( value.primary ) {
          this._super( "icon", value.primary );
          this._super( "iconPosition", "beginning" );
        } else if ( value.secondary ) {
          this._super( "icon", value.secondary );
          this._super( "iconPosition", "end" );
        }
      }
      this._superApply( arguments );
    }
  } );

  $.fn.button = ( function( orig ) {
    return function() {
      if ( !this.length || ( this.length && this[ 0 ].tagName !== "INPUT" ) ||
          ( this.length && this[ 0 ].tagName === "INPUT" && (
            this.attr( "type" ) !== "checkbox" && this.attr( "type" ) !== "radio"
          ) ) ) {
        return orig.apply( this, arguments );
      }
      if ( !$.ui.checkboxradio ) {
        $.error( "Checkboxradio widget missing" );
      }
      if ( arguments.length === 0 ) {
        return this.checkboxradio( {
          "icon": false
        } );
      }
      return this.checkboxradio.apply( this, arguments );
    };
  } )( $.fn.button );

  $.fn.buttonset = function() {
    if ( !$.ui.controlgroup ) {
      $.error( "Controlgroup widget missing" );
    }
    if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
      return this.controlgroup.apply( this,
        [ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
    }
    if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
      return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
    }
    if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
      arguments[ 0 ].items = {
        button: arguments[ 0 ].items
      };
    }
    return this.controlgroup.apply( this, arguments );
  };
}

var widgetsButton = $.ui.button;


// jscs:disable maximumLineLength
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css



$.extend( $.ui, { datepicker: { version: "1.12.1" } } );

var datepicker_instActive;

function datepicker_getZindex( elem ) {
  var position, value;
  while ( elem.length && elem[ 0 ] !== document ) {

    // Ignore z-index if position is set to a value where z-index is ignored by the browser
    // This makes behavior of this function consistent across browsers
    // WebKit always returns auto if the element is positioned
    position = elem.css( "position" );
    if ( position === "absolute" || position === "relative" || position === "fixed" ) {

      // IE returns 0 when zIndex is not specified
      // other browsers return a string
      // we ignore the case of nested elements with an explicit value of 0
      // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
      value = parseInt( elem.css( "zIndex" ), 10 );
      if ( !isNaN( value ) && value !== 0 ) {
        return value;
      }
    }
    elem = elem.parent();
  }

  return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
  this._curInst = null; // The current instance in use
  this._keyEvent = false; // If the last event was a key event
  this._disabledInputs = []; // List of date picker inputs that have been disabled
  this._datepickerShowing = false; // True if the popup picker is showing , false if not
  this._inDialog = false; // True if showing within a "dialog", false if not
  this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
  this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
  this._appendClass = "ui-datepicker-append"; // The name of the append marker class
  this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
  this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
  this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
  this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
  this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
  this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
  this.regional = []; // Available regional settings, indexed by language code
  this.regional[ "" ] = { // Default regional settings
    closeText: "Done", // Display text for close link
    prevText: "Prev", // Display text for previous month link
    nextText: "Next", // Display text for next month link
    currentText: "Today", // Display text for current month link
    monthNames: [ "January","February","March","April","May","June",
      "July","August","September","October","November","December" ], // Names of months for drop-down and formatting
    monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
    dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
    dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
    dayNamesMin: [ "Su","Mo","Tu","We","Th","Fr","Sa" ], // Column headings for days starting at Sunday
    weekHeader: "Wk", // Column header for week of the year
    dateFormat: "mm/dd/yy", // See format options on parseDate
    firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
    isRTL: false, // True if right-to-left language, false if left-to-right
    showMonthAfterYear: false, // True if the year select precedes month, false for month then year
    yearSuffix: "" // Additional text to append to the year in the month headers
  };
  this._defaults = { // Global defaults for all the date picker instances
    showOn: "focus", // "focus" for popup on focus,
      // "button" for trigger button, or "both" for either
    showAnim: "fadeIn", // Name of jQuery animation for popup
    showOptions: {}, // Options for enhanced animations
    defaultDate: null, // Used when field is blank: actual date,
      // +/-number for offset from today, null for today
    appendText: "", // Display text following the input box, e.g. showing the format
    buttonText: "...", // Text for trigger button
    buttonImage: "", // URL for trigger button image
    buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
    hideIfNoPrevNext: false, // True to hide next/previous month links
      // if not applicable, false to just disable them
    navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
    gotoCurrent: false, // True if today link goes back to current selection instead
    changeMonth: false, // True if month can be selected directly, false if only prev/next
    changeYear: false, // True if year can be selected directly, false if only prev/next
    yearRange: "c-10:c+10", // Range of years to display in drop-down,
      // either relative to today's year (-nn:+nn), relative to currently displayed year
      // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
    showOtherMonths: false, // True to show dates in other months, false to leave blank
    selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
    showWeek: false, // True to show week of the year, false to not show it
    calculateWeek: this.iso8601Week, // How to calculate the week of the year,
      // takes a Date and returns the number of the week for it
    shortYearCutoff: "+10", // Short year values < this are in the current century,
      // > this are in the previous century,
      // string value starting with "+" for current year + value
    minDate: null, // The earliest selectable date, or null for no limit
    maxDate: null, // The latest selectable date, or null for no limit
    duration: "fast", // Duration of display/closure
    beforeShowDay: null, // Function that takes a date and returns an array with
      // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
      // [2] = cell title (optional), e.g. $.datepicker.noWeekends
    beforeShow: null, // Function that takes an input field and
      // returns a set of custom settings for the date picker
    onSelect: null, // Define a callback function when a date is selected
    onChangeMonthYear: null, // Define a callback function when the month or year is changed
    onClose: null, // Define a callback function when the datepicker is closed
    numberOfMonths: 1, // Number of months to show at a time
    showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
    stepMonths: 1, // Number of months to step back/forward
    stepBigMonths: 12, // Number of months to step back/forward for the big links
    altField: "", // Selector for an alternate field to store selected dates into
    altFormat: "", // The date format to use for the alternate field
    constrainInput: true, // The input is constrained by the current date format
    showButtonPanel: false, // True to show button panel, false to not show it
    autoSize: false, // True to size the input for the date format, false to leave as is
    disabled: false // The initial disabled state
  };
  $.extend( this._defaults, this.regional[ "" ] );
  this.regional.en = $.extend( true, {}, this.regional[ "" ] );
  this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
  this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
}

$.extend( Datepicker.prototype, {
  /* Class name added to elements to indicate already configured with a date picker. */
  markerClassName: "hasDatepicker",

  //Keep track of the maximum number of rows displayed (see #7043)
  maxRows: 4,

  // TODO rename to "widget" when switching to widget factory
  _widgetDatepicker: function() {
    return this.dpDiv;
  },

  /* Override the default settings for all instances of the date picker.
   * @param  settings  object - the new settings to use as defaults (anonymous object)
   * @return the manager object
   */
  setDefaults: function( settings ) {
    datepicker_extendRemove( this._defaults, settings || {} );
    return this;
  },

  /* Attach the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  settings  object - the new settings to use for this date picker instance (anonymous)
   */
  _attachDatepicker: function( target, settings ) {
    var nodeName, inline, inst;
    nodeName = target.nodeName.toLowerCase();
    inline = ( nodeName === "div" || nodeName === "span" );
    if ( !target.id ) {
      this.uuid += 1;
      target.id = "dp" + this.uuid;
    }
    inst = this._newInst( $( target ), inline );
    inst.settings = $.extend( {}, settings || {} );
    if ( nodeName === "input" ) {
      this._connectDatepicker( target, inst );
    } else if ( inline ) {
      this._inlineDatepicker( target, inst );
    }
  },

  /* Create a new instance object. */
  _newInst: function( target, inline ) {
    var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
    return { id: id, input: target, // associated target
      selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
      drawMonth: 0, drawYear: 0, // month being drawn
      inline: inline, // is datepicker inline or not
      dpDiv: ( !inline ? this.dpDiv : // presentation div
      datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
  },

  /* Attach the date picker to an input field. */
  _connectDatepicker: function( target, inst ) {
    var input = $( target );
    inst.append = $( [] );
    inst.trigger = $( [] );
    if ( input.hasClass( this.markerClassName ) ) {
      return;
    }
    this._attachments( input, inst );
    input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
      on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
    this._autoSize( inst );
    $.data( target, "datepicker", inst );

    //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
    if ( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }
  },

  /* Make attachments based on settings. */
  _attachments: function( input, inst ) {
    var showOn, buttonText, buttonImage,
      appendText = this._get( inst, "appendText" ),
      isRTL = this._get( inst, "isRTL" );

    if ( inst.append ) {
      inst.append.remove();
    }
    if ( appendText ) {
      inst.append = $( "<span class='" + this._appendClass + "'>" + appendText + "</span>" );
      input[ isRTL ? "before" : "after" ]( inst.append );
    }

    input.off( "focus", this._showDatepicker );

    if ( inst.trigger ) {
      inst.trigger.remove();
    }

    showOn = this._get( inst, "showOn" );
    if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
      input.on( "focus", this._showDatepicker );
    }
    if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
      buttonText = this._get( inst, "buttonText" );
      buttonImage = this._get( inst, "buttonImage" );
      inst.trigger = $( this._get( inst, "buttonImageOnly" ) ?
        $( "<img/>" ).addClass( this._triggerClass ).
          attr( { src: buttonImage, alt: buttonText, title: buttonText } ) :
        $( "<button type='button'></button>" ).addClass( this._triggerClass ).
          html( !buttonImage ? buttonText : $( "<img/>" ).attr(
          { src:buttonImage, alt:buttonText, title:buttonText } ) ) );
      input[ isRTL ? "before" : "after" ]( inst.trigger );
      inst.trigger.on( "click", function() {
        if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
          $.datepicker._hideDatepicker();
        } else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
          $.datepicker._hideDatepicker();
          $.datepicker._showDatepicker( input[ 0 ] );
        } else {
          $.datepicker._showDatepicker( input[ 0 ] );
        }
        return false;
      } );
    }
  },

  /* Apply the maximum length for the date format. */
  _autoSize: function( inst ) {
    if ( this._get( inst, "autoSize" ) && !inst.inline ) {
      var findMax, max, maxI, i,
        date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
        dateFormat = this._get( inst, "dateFormat" );

      if ( dateFormat.match( /[DM]/ ) ) {
        findMax = function( names ) {
          max = 0;
          maxI = 0;
          for ( i = 0; i < names.length; i++ ) {
            if ( names[ i ].length > max ) {
              max = names[ i ].length;
              maxI = i;
            }
          }
          return maxI;
        };
        date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
          "monthNames" : "monthNamesShort" ) ) ) );
        date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
          "dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
      }
      inst.input.attr( "size", this._formatDate( inst, date ).length );
    }
  },

  /* Attach an inline date picker to a div. */
  _inlineDatepicker: function( target, inst ) {
    var divSpan = $( target );
    if ( divSpan.hasClass( this.markerClassName ) ) {
      return;
    }
    divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
    $.data( target, "datepicker", inst );
    this._setDate( inst, this._getDefaultDate( inst ), true );
    this._updateDatepicker( inst );
    this._updateAlternate( inst );

    //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
    if ( inst.settings.disabled ) {
      this._disableDatepicker( target );
    }

    // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
    // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
    inst.dpDiv.css( "display", "block" );
  },

  /* Pop-up the date picker in a "dialog" box.
   * @param  input element - ignored
   * @param  date string or Date - the initial date to display
   * @param  onSelect  function - the function to call when a date is selected
   * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
   * @param  pos int[2] - coordinates for the dialog's position within the screen or
   *          event - with x/y coordinates or
   *          leave empty for default (screen centre)
   * @return the manager object
   */
  _dialogDatepicker: function( input, date, onSelect, settings, pos ) {
    var id, browserWidth, browserHeight, scrollX, scrollY,
      inst = this._dialogInst; // internal instance

    if ( !inst ) {
      this.uuid += 1;
      id = "dp" + this.uuid;
      this._dialogInput = $( "<input type='text' id='" + id +
        "' style='position: absolute; top: -100px; width: 0px;'/>" );
      this._dialogInput.on( "keydown", this._doKeyDown );
      $( "body" ).append( this._dialogInput );
      inst = this._dialogInst = this._newInst( this._dialogInput, false );
      inst.settings = {};
      $.data( this._dialogInput[ 0 ], "datepicker", inst );
    }
    datepicker_extendRemove( inst.settings, settings || {} );
    date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
    this._dialogInput.val( date );

    this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
    if ( !this._pos ) {
      browserWidth = document.documentElement.clientWidth;
      browserHeight = document.documentElement.clientHeight;
      scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
      scrollY = document.documentElement.scrollTop || document.body.scrollTop;
      this._pos = // should use actual width/height below
        [ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
    }

    // Move input on screen for focus, but hidden behind dialog
    this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
    inst.settings.onSelect = onSelect;
    this._inDialog = true;
    this.dpDiv.addClass( this._dialogClass );
    this._showDatepicker( this._dialogInput[ 0 ] );
    if ( $.blockUI ) {
      $.blockUI( this.dpDiv );
    }
    $.data( this._dialogInput[ 0 ], "datepicker", inst );
    return this;
  },

  /* Detach a datepicker from its control.
   * @param  target element - the target input field or division or span
   */
  _destroyDatepicker: function( target ) {
    var nodeName,
      $target = $( target ),
      inst = $.data( target, "datepicker" );

    if ( !$target.hasClass( this.markerClassName ) ) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    $.removeData( target, "datepicker" );
    if ( nodeName === "input" ) {
      inst.append.remove();
      inst.trigger.remove();
      $target.removeClass( this.markerClassName ).
        off( "focus", this._showDatepicker ).
        off( "keydown", this._doKeyDown ).
        off( "keypress", this._doKeyPress ).
        off( "keyup", this._doKeyUp );
    } else if ( nodeName === "div" || nodeName === "span" ) {
      $target.removeClass( this.markerClassName ).empty();
    }

    if ( datepicker_instActive === inst ) {
      datepicker_instActive = null;
    }
  },

  /* Enable the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   */
  _enableDatepicker: function( target ) {
    var nodeName, inline,
      $target = $( target ),
      inst = $.data( target, "datepicker" );

    if ( !$target.hasClass( this.markerClassName ) ) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    if ( nodeName === "input" ) {
      target.disabled = false;
      inst.trigger.filter( "button" ).
        each( function() { this.disabled = false; } ).end().
        filter( "img" ).css( { opacity: "1.0", cursor: "" } );
    } else if ( nodeName === "div" || nodeName === "span" ) {
      inline = $target.children( "." + this._inlineClass );
      inline.children().removeClass( "ui-state-disabled" );
      inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
        prop( "disabled", false );
    }
    this._disabledInputs = $.map( this._disabledInputs,
      function( value ) { return ( value === target ? null : value ); } ); // delete entry
  },

  /* Disable the date picker to a jQuery selection.
   * @param  target element - the target input field or division or span
   */
  _disableDatepicker: function( target ) {
    var nodeName, inline,
      $target = $( target ),
      inst = $.data( target, "datepicker" );

    if ( !$target.hasClass( this.markerClassName ) ) {
      return;
    }

    nodeName = target.nodeName.toLowerCase();
    if ( nodeName === "input" ) {
      target.disabled = true;
      inst.trigger.filter( "button" ).
        each( function() { this.disabled = true; } ).end().
        filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
    } else if ( nodeName === "div" || nodeName === "span" ) {
      inline = $target.children( "." + this._inlineClass );
      inline.children().addClass( "ui-state-disabled" );
      inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
        prop( "disabled", true );
    }
    this._disabledInputs = $.map( this._disabledInputs,
      function( value ) { return ( value === target ? null : value ); } ); // delete entry
    this._disabledInputs[ this._disabledInputs.length ] = target;
  },

  /* Is the first field in a jQuery collection disabled as a datepicker?
   * @param  target element - the target input field or division or span
   * @return boolean - true if disabled, false if enabled
   */
  _isDisabledDatepicker: function( target ) {
    if ( !target ) {
      return false;
    }
    for ( var i = 0; i < this._disabledInputs.length; i++ ) {
      if ( this._disabledInputs[ i ] === target ) {
        return true;
      }
    }
    return false;
  },

  /* Retrieve the instance data for the target control.
   * @param  target  element - the target input field or division or span
   * @return  object - the associated instance data
   * @throws  error if a jQuery problem getting data
   */
  _getInst: function( target ) {
    try {
      return $.data( target, "datepicker" );
    }
    catch ( err ) {
      throw "Missing instance data for this datepicker";
    }
  },

  /* Update or retrieve the settings for a date picker attached to an input field or division.
   * @param  target  element - the target input field or division or span
   * @param  name object - the new settings to update or
   *        string - the name of the setting to change or retrieve,
   *        when retrieving also "all" for all instance settings or
   *        "defaults" for all global defaults
   * @param  value   any - the new value for the setting
   *        (omit if above is an object or to retrieve a value)
   */
  _optionDatepicker: function( target, name, value ) {
    var settings, date, minDate, maxDate,
      inst = this._getInst( target );

    if ( arguments.length === 2 && typeof name === "string" ) {
      return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
        ( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
        this._get( inst, name ) ) : null ) );
    }

    settings = name || {};
    if ( typeof name === "string" ) {
      settings = {};
      settings[ name ] = value;
    }

    if ( inst ) {
      if ( this._curInst === inst ) {
        this._hideDatepicker();
      }

      date = this._getDateDatepicker( target, true );
      minDate = this._getMinMaxDate( inst, "min" );
      maxDate = this._getMinMaxDate( inst, "max" );
      datepicker_extendRemove( inst.settings, settings );

      // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
      if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
        inst.settings.minDate = this._formatDate( inst, minDate );
      }
      if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
        inst.settings.maxDate = this._formatDate( inst, maxDate );
      }
      if ( "disabled" in settings ) {
        if ( settings.disabled ) {
          this._disableDatepicker( target );
        } else {
          this._enableDatepicker( target );
        }
      }
      this._attachments( $( target ), inst );
      this._autoSize( inst );
      this._setDate( inst, date );
      this._updateAlternate( inst );
      this._updateDatepicker( inst );
    }
  },

  // Change method deprecated
  _changeDatepicker: function( target, name, value ) {
    this._optionDatepicker( target, name, value );
  },

  /* Redraw the date picker attached to an input field or division.
   * @param  target  element - the target input field or division or span
   */
  _refreshDatepicker: function( target ) {
    var inst = this._getInst( target );
    if ( inst ) {
      this._updateDatepicker( inst );
    }
  },

  /* Set the dates for a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  date Date - the new date
   */
  _setDateDatepicker: function( target, date ) {
    var inst = this._getInst( target );
    if ( inst ) {
      this._setDate( inst, date );
      this._updateDatepicker( inst );
      this._updateAlternate( inst );
    }
  },

  /* Get the date(s) for the first entry in a jQuery selection.
   * @param  target element - the target input field or division or span
   * @param  noDefault boolean - true if no default date is to be used
   * @return Date - the current date
   */
  _getDateDatepicker: function( target, noDefault ) {
    var inst = this._getInst( target );
    if ( inst && !inst.inline ) {
      this._setDateFromField( inst, noDefault );
    }
    return ( inst ? this._getDate( inst ) : null );
  },

  /* Handle keystrokes. */
  _doKeyDown: function( event ) {
    var onSelect, dateStr, sel,
      inst = $.datepicker._getInst( event.target ),
      handled = true,
      isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

    inst._keyEvent = true;
    if ( $.datepicker._datepickerShowing ) {
      switch ( event.keyCode ) {
        case 9: $.datepicker._hideDatepicker();
            handled = false;
            break; // hide on tab out
        case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
                  $.datepicker._currentClass + ")", inst.dpDiv );
            if ( sel[ 0 ] ) {
              $.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
            }

            onSelect = $.datepicker._get( inst, "onSelect" );
            if ( onSelect ) {
              dateStr = $.datepicker._formatDate( inst );

              // Trigger custom callback
              onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
            } else {
              $.datepicker._hideDatepicker();
            }

            return false; // don't submit the form
        case 27: $.datepicker._hideDatepicker();
            break; // hide on escape
        case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
              -$.datepicker._get( inst, "stepBigMonths" ) :
              -$.datepicker._get( inst, "stepMonths" ) ), "M" );
            break; // previous month/year on page up/+ ctrl
        case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
              +$.datepicker._get( inst, "stepBigMonths" ) :
              +$.datepicker._get( inst, "stepMonths" ) ), "M" );
            break; // next month/year on page down/+ ctrl
        case 35: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._clearDate( event.target );
            }
            handled = event.ctrlKey || event.metaKey;
            break; // clear on ctrl or command +end
        case 36: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._gotoToday( event.target );
            }
            handled = event.ctrlKey || event.metaKey;
            break; // current on ctrl or command +home
        case 37: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
            }
            handled = event.ctrlKey || event.metaKey;

            // -1 day on ctrl or command +left
            if ( event.originalEvent.altKey ) {
              $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                -$.datepicker._get( inst, "stepBigMonths" ) :
                -$.datepicker._get( inst, "stepMonths" ) ), "M" );
            }

            // next month/year on alt +left on Mac
            break;
        case 38: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._adjustDate( event.target, -7, "D" );
            }
            handled = event.ctrlKey || event.metaKey;
            break; // -1 week on ctrl or command +up
        case 39: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
            }
            handled = event.ctrlKey || event.metaKey;

            // +1 day on ctrl or command +right
            if ( event.originalEvent.altKey ) {
              $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                +$.datepicker._get( inst, "stepBigMonths" ) :
                +$.datepicker._get( inst, "stepMonths" ) ), "M" );
            }

            // next month/year on alt +right
            break;
        case 40: if ( event.ctrlKey || event.metaKey ) {
              $.datepicker._adjustDate( event.target, +7, "D" );
            }
            handled = event.ctrlKey || event.metaKey;
            break; // +1 week on ctrl or command +down
        default: handled = false;
      }
    } else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
      $.datepicker._showDatepicker( this );
    } else {
      handled = false;
    }

    if ( handled ) {
      event.preventDefault();
      event.stopPropagation();
    }
  },

  /* Filter entered characters - based on date format. */
  _doKeyPress: function( event ) {
    var chars, chr,
      inst = $.datepicker._getInst( event.target );

    if ( $.datepicker._get( inst, "constrainInput" ) ) {
      chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
      chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
      return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
    }
  },

  /* Synchronise manual entry and field/alternate field. */
  _doKeyUp: function( event ) {
    var date,
      inst = $.datepicker._getInst( event.target );

    if ( inst.input.val() !== inst.lastVal ) {
      try {
        date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
          ( inst.input ? inst.input.val() : null ),
          $.datepicker._getFormatConfig( inst ) );

        if ( date ) { // only if valid
          $.datepicker._setDateFromField( inst );
          $.datepicker._updateAlternate( inst );
          $.datepicker._updateDatepicker( inst );
        }
      }
      catch ( err ) {
      }
    }
    return true;
  },

  /* Pop-up the date picker for a given input field.
   * If false returned from beforeShow event handler do not show.
   * @param  input  element - the input field attached to the date picker or
   *          event - if triggered by focus
   */
  _showDatepicker: function( input ) {
    input = input.target || input;
    if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
      input = $( "input", input.parentNode )[ 0 ];
    }

    if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
      return;
    }

    var inst, beforeShow, beforeShowSettings, isFixed,
      offset, showAnim, duration;

    inst = $.datepicker._getInst( input );
    if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
      $.datepicker._curInst.dpDiv.stop( true, true );
      if ( inst && $.datepicker._datepickerShowing ) {
        $.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
      }
    }

    beforeShow = $.datepicker._get( inst, "beforeShow" );
    beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
    if ( beforeShowSettings === false ) {
      return;
    }
    datepicker_extendRemove( inst.settings, beforeShowSettings );

    inst.lastVal = null;
    $.datepicker._lastInput = input;
    $.datepicker._setDateFromField( inst );

    if ( $.datepicker._inDialog ) { // hide cursor
      input.value = "";
    }
    if ( !$.datepicker._pos ) { // position below input
      $.datepicker._pos = $.datepicker._findPos( input );
      $.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
    }

    isFixed = false;
    $( input ).parents().each( function() {
      isFixed |= $( this ).css( "position" ) === "fixed";
      return !isFixed;
    } );

    offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
    $.datepicker._pos = null;

    //to avoid flashes on Firefox
    inst.dpDiv.empty();

    // determine sizing offscreen
    inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
    $.datepicker._updateDatepicker( inst );

    // fix width for dynamic number of date pickers
    // and adjust position before showing
    offset = $.datepicker._checkOffset( inst, offset, isFixed );
    inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
      "static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
      left: offset.left + "px", top: offset.top + "px" } );

    if ( !inst.inline ) {
      showAnim = $.datepicker._get( inst, "showAnim" );
      duration = $.datepicker._get( inst, "duration" );
      inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
      $.datepicker._datepickerShowing = true;

      if ( $.effects && $.effects.effect[ showAnim ] ) {
        inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
      } else {
        inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
      }

      if ( $.datepicker._shouldFocusInput( inst ) ) {
        inst.input.trigger( "focus" );
      }

      $.datepicker._curInst = inst;
    }
  },

  /* Generate the date picker content. */
  _updateDatepicker: function( inst ) {
    this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
    datepicker_instActive = inst; // for delegate hover events
    inst.dpDiv.empty().append( this._generateHTML( inst ) );
    this._attachHandlers( inst );

    var origyearshtml,
      numMonths = this._getNumberOfMonths( inst ),
      cols = numMonths[ 1 ],
      width = 17,
      activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

    if ( activeCell.length > 0 ) {
      datepicker_handleMouseover.apply( activeCell.get( 0 ) );
    }

    inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
    if ( cols > 1 ) {
      inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
    }
    inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
      "Class" ]( "ui-datepicker-multi" );
    inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
      "Class" ]( "ui-datepicker-rtl" );

    if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
      inst.input.trigger( "focus" );
    }

    // Deffered render of the years select (to avoid flashes on Firefox)
    if ( inst.yearshtml ) {
      origyearshtml = inst.yearshtml;
      setTimeout( function() {

        //assure that inst.yearshtml didn't change.
        if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
          inst.dpDiv.find( "select.ui-datepicker-year:first" ).replaceWith( inst.yearshtml );
        }
        origyearshtml = inst.yearshtml = null;
      }, 0 );
    }
  },

  // #6694 - don't focus the input if it's already focused
  // this breaks the change event in IE
  // Support: IE and jQuery <1.9
  _shouldFocusInput: function( inst ) {
    return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
  },

  /* Check positioning to remain on screen. */
  _checkOffset: function( inst, offset, isFixed ) {
    var dpWidth = inst.dpDiv.outerWidth(),
      dpHeight = inst.dpDiv.outerHeight(),
      inputWidth = inst.input ? inst.input.outerWidth() : 0,
      inputHeight = inst.input ? inst.input.outerHeight() : 0,
      viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
      viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

    offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
    offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
    offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

    // Now check if datepicker is showing outside window viewport - move to a better place if so.
    offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
      Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
    offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
      Math.abs( dpHeight + inputHeight ) : 0 );

    return offset;
  },

  /* Find an object's position on the screen. */
  _findPos: function( obj ) {
    var position,
      inst = this._getInst( obj ),
      isRTL = this._get( inst, "isRTL" );

    while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden( obj ) ) ) {
      obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
    }

    position = $( obj ).offset();
    return [ position.left, position.top ];
  },

  /* Hide the date picker from view.
   * @param  input  element - the input field attached to the date picker
   */
  _hideDatepicker: function( input ) {
    var showAnim, duration, postProcess, onClose,
      inst = this._curInst;

    if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
      return;
    }

    if ( this._datepickerShowing ) {
      showAnim = this._get( inst, "showAnim" );
      duration = this._get( inst, "duration" );
      postProcess = function() {
        $.datepicker._tidyDialog( inst );
      };

      // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
      if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
        inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
      } else {
        inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
          ( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
      }

      if ( !showAnim ) {
        postProcess();
      }
      this._datepickerShowing = false;

      onClose = this._get( inst, "onClose" );
      if ( onClose ) {
        onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
      }

      this._lastInput = null;
      if ( this._inDialog ) {
        this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
        if ( $.blockUI ) {
          $.unblockUI();
          $( "body" ).append( this.dpDiv );
        }
      }
      this._inDialog = false;
    }
  },

  /* Tidy up after a dialog display. */
  _tidyDialog: function( inst ) {
    inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
  },

  /* Close date picker if clicked elsewhere. */
  _checkExternalClick: function( event ) {
    if ( !$.datepicker._curInst ) {
      return;
    }

    var $target = $( event.target ),
      inst = $.datepicker._getInst( $target[ 0 ] );

    if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
        $target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
        !$target.hasClass( $.datepicker.markerClassName ) &&
        !$target.closest( "." + $.datepicker._triggerClass ).length &&
        $.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
      ( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
        $.datepicker._hideDatepicker();
    }
  },

  /* Adjust one of the date sub-fields. */
  _adjustDate: function( id, offset, period ) {
    var target = $( id ),
      inst = this._getInst( target[ 0 ] );

    if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
      return;
    }
    this._adjustInstDate( inst, offset +
      ( period === "M" ? this._get( inst, "showCurrentAtPos" ) : 0 ), // undo positioning
      period );
    this._updateDatepicker( inst );
  },

  /* Action for current link. */
  _gotoToday: function( id ) {
    var date,
      target = $( id ),
      inst = this._getInst( target[ 0 ] );

    if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
      inst.selectedDay = inst.currentDay;
      inst.drawMonth = inst.selectedMonth = inst.currentMonth;
      inst.drawYear = inst.selectedYear = inst.currentYear;
    } else {
      date = new Date();
      inst.selectedDay = date.getDate();
      inst.drawMonth = inst.selectedMonth = date.getMonth();
      inst.drawYear = inst.selectedYear = date.getFullYear();
    }
    this._notifyChange( inst );
    this._adjustDate( target );
  },

  /* Action for selecting a new month/year. */
  _selectMonthYear: function( id, select, period ) {
    var target = $( id ),
      inst = this._getInst( target[ 0 ] );

    inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
    inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
      parseInt( select.options[ select.selectedIndex ].value, 10 );

    this._notifyChange( inst );
    this._adjustDate( target );
  },

  /* Action for selecting a day. */
  _selectDay: function( id, month, year, td ) {
    var inst,
      target = $( id );

    if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
      return;
    }

    inst = this._getInst( target[ 0 ] );
    inst.selectedDay = inst.currentDay = $( "a", td ).html();
    inst.selectedMonth = inst.currentMonth = month;
    inst.selectedYear = inst.currentYear = year;
    this._selectDate( id, this._formatDate( inst,
      inst.currentDay, inst.currentMonth, inst.currentYear ) );
  },

  /* Erase the input field and hide the date picker. */
  _clearDate: function( id ) {
    var target = $( id );
    this._selectDate( target, "" );
  },

  /* Update the input field with the selected date. */
  _selectDate: function( id, dateStr ) {
    var onSelect,
      target = $( id ),
      inst = this._getInst( target[ 0 ] );

    dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
    if ( inst.input ) {
      inst.input.val( dateStr );
    }
    this._updateAlternate( inst );

    onSelect = this._get( inst, "onSelect" );
    if ( onSelect ) {
      onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
    } else if ( inst.input ) {
      inst.input.trigger( "change" ); // fire the change event
    }

    if ( inst.inline ) {
      this._updateDatepicker( inst );
    } else {
      this._hideDatepicker();
      this._lastInput = inst.input[ 0 ];
      if ( typeof( inst.input[ 0 ] ) !== "object" ) {
        inst.input.trigger( "focus" ); // restore focus
      }
      this._lastInput = null;
    }
  },

  /* Update any alternate field to synchronise with the main field. */
  _updateAlternate: function( inst ) {
    var altFormat, date, dateStr,
      altField = this._get( inst, "altField" );

    if ( altField ) { // update alternate field too
      altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
      date = this._getDate( inst );
      dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
      $( altField ).val( dateStr );
    }
  },

  /* Set as beforeShowDay function to prevent selection of weekends.
   * @param  date  Date - the date to customise
   * @return [boolean, string] - is this date selectable?, what is its CSS class?
   */
  noWeekends: function( date ) {
    var day = date.getDay();
    return [ ( day > 0 && day < 6 ), "" ];
  },

  /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
   * @param  date  Date - the date to get the week for
   * @return  number - the number of the week within the year that contains this date
   */
  iso8601Week: function( date ) {
    var time,
      checkDate = new Date( date.getTime() );

    // Find Thursday of this week starting on Monday
    checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

    time = checkDate.getTime();
    checkDate.setMonth( 0 ); // Compare with Jan 1
    checkDate.setDate( 1 );
    return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
  },

  /* Parse a string value into a date object.
   * See formatDate below for the possible formats.
   *
   * @param  format string - the expected format of the date
   * @param  value string - the date in the above format
   * @param  settings Object - attributes include:
   *          shortYearCutoff  number - the cutoff year for determining the century (optional)
   *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
   *          dayNames    string[7] - names of the days from Sunday (optional)
   *          monthNamesShort string[12] - abbreviated names of the months (optional)
   *          monthNames    string[12] - names of the months (optional)
   * @return  Date - the extracted date value or null if value is blank
   */
  parseDate: function( format, value, settings ) {
    if ( format == null || value == null ) {
      throw "Invalid arguments";
    }

    value = ( typeof value === "object" ? value.toString() : value + "" );
    if ( value === "" ) {
      return null;
    }

    var iFormat, dim, extra,
      iValue = 0,
      shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
      shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
        new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
      dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
      dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
      monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
      monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
      year = -1,
      month = -1,
      day = -1,
      doy = -1,
      literal = false,
      date,

      // Check whether a format character is doubled
      lookAhead = function( match ) {
        var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
        if ( matches ) {
          iFormat++;
        }
        return matches;
      },

      // Extract a number from the string value
      getNumber = function( match ) {
        var isDoubled = lookAhead( match ),
          size = ( match === "@" ? 14 : ( match === "!" ? 20 :
          ( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
          minSize = ( match === "y" ? size : 1 ),
          digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
          num = value.substring( iValue ).match( digits );
        if ( !num ) {
          throw "Missing number at position " + iValue;
        }
        iValue += num[ 0 ].length;
        return parseInt( num[ 0 ], 10 );
      },

      // Extract a name from the string value and convert to an index
      getName = function( match, shortNames, longNames ) {
        var index = -1,
          names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
            return [ [ k, v ] ];
          } ).sort( function( a, b ) {
            return -( a[ 1 ].length - b[ 1 ].length );
          } );

        $.each( names, function( i, pair ) {
          var name = pair[ 1 ];
          if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
            index = pair[ 0 ];
            iValue += name.length;
            return false;
          }
        } );
        if ( index !== -1 ) {
          return index + 1;
        } else {
          throw "Unknown name at position " + iValue;
        }
      },

      // Confirm that a literal character matches the string value
      checkLiteral = function() {
        if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
          throw "Unexpected literal at position " + iValue;
        }
        iValue++;
      };

    for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
      if ( literal ) {
        if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
          literal = false;
        } else {
          checkLiteral();
        }
      } else {
        switch ( format.charAt( iFormat ) ) {
          case "d":
            day = getNumber( "d" );
            break;
          case "D":
            getName( "D", dayNamesShort, dayNames );
            break;
          case "o":
            doy = getNumber( "o" );
            break;
          case "m":
            month = getNumber( "m" );
            break;
          case "M":
            month = getName( "M", monthNamesShort, monthNames );
            break;
          case "y":
            year = getNumber( "y" );
            break;
          case "@":
            date = new Date( getNumber( "@" ) );
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case "!":
            date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();
            break;
          case "'":
            if ( lookAhead( "'" ) ) {
              checkLiteral();
            } else {
              literal = true;
            }
            break;
          default:
            checkLiteral();
        }
      }
    }

    if ( iValue < value.length ) {
      extra = value.substr( iValue );
      if ( !/^\s+/.test( extra ) ) {
        throw "Extra/unparsed characters found in date: " + extra;
      }
    }

    if ( year === -1 ) {
      year = new Date().getFullYear();
    } else if ( year < 100 ) {
      year += new Date().getFullYear() - new Date().getFullYear() % 100 +
        ( year <= shortYearCutoff ? 0 : -100 );
    }

    if ( doy > -1 ) {
      month = 1;
      day = doy;
      do {
        dim = this._getDaysInMonth( year, month - 1 );
        if ( day <= dim ) {
          break;
        }
        month++;
        day -= dim;
      } while ( true );
    }

    date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
    if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
      throw "Invalid date"; // E.g. 31/02/00
    }
    return date;
  },

  /* Standard date formats. */
  ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
  COOKIE: "D, dd M yy",
  ISO_8601: "yy-mm-dd",
  RFC_822: "D, d M y",
  RFC_850: "DD, dd-M-y",
  RFC_1036: "D, d M y",
  RFC_1123: "D, d M yy",
  RFC_2822: "D, d M yy",
  RSS: "D, d M y", // RFC 822
  TICKS: "!",
  TIMESTAMP: "@",
  W3C: "yy-mm-dd", // ISO 8601

  _ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
    Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

  /* Format a date object into a string value.
   * The format can be combinations of the following:
   * d  - day of month (no leading zero)
   * dd - day of month (two digit)
   * o  - day of year (no leading zeros)
   * oo - day of year (three digit)
   * D  - day name short
   * DD - day name long
   * m  - month of year (no leading zero)
   * mm - month of year (two digit)
   * M  - month name short
   * MM - month name long
   * y  - year (two digit)
   * yy - year (four digit)
   * @ - Unix timestamp (ms since 01/01/1970)
   * ! - Windows ticks (100ns since 01/01/0001)
   * "..." - literal text
   * '' - single quote
   *
   * @param  format string - the desired format of the date
   * @param  date Date - the date value to format
   * @param  settings Object - attributes include:
   *          dayNamesShort string[7] - abbreviated names of the days from Sunday (optional)
   *          dayNames    string[7] - names of the days from Sunday (optional)
   *          monthNamesShort string[12] - abbreviated names of the months (optional)
   *          monthNames    string[12] - names of the months (optional)
   * @return  string - the date in the above format
   */
  formatDate: function( format, date, settings ) {
    if ( !date ) {
      return "";
    }

    var iFormat,
      dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
      dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
      monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
      monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

      // Check whether a format character is doubled
      lookAhead = function( match ) {
        var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
        if ( matches ) {
          iFormat++;
        }
        return matches;
      },

      // Format a number, with leading zero if necessary
      formatNumber = function( match, value, len ) {
        var num = "" + value;
        if ( lookAhead( match ) ) {
          while ( num.length < len ) {
            num = "0" + num;
          }
        }
        return num;
      },

      // Format a name, short or long as requested
      formatName = function( match, value, shortNames, longNames ) {
        return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
      },
      output = "",
      literal = false;

    if ( date ) {
      for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
        if ( literal ) {
          if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
            literal = false;
          } else {
            output += format.charAt( iFormat );
          }
        } else {
          switch ( format.charAt( iFormat ) ) {
            case "d":
              output += formatNumber( "d", date.getDate(), 2 );
              break;
            case "D":
              output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
              break;
            case "o":
              output += formatNumber( "o",
                Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
              break;
            case "m":
              output += formatNumber( "m", date.getMonth() + 1, 2 );
              break;
            case "M":
              output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
              break;
            case "y":
              output += ( lookAhead( "y" ) ? date.getFullYear() :
                ( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
              break;
            case "@":
              output += date.getTime();
              break;
            case "!":
              output += date.getTime() * 10000 + this._ticksTo1970;
              break;
            case "'":
              if ( lookAhead( "'" ) ) {
                output += "'";
              } else {
                literal = true;
              }
              break;
            default:
              output += format.charAt( iFormat );
          }
        }
      }
    }
    return output;
  },

  /* Extract all possible characters from the date format. */
  _possibleChars: function( format ) {
    var iFormat,
      chars = "",
      literal = false,

      // Check whether a format character is doubled
      lookAhead = function( match ) {
        var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
        if ( matches ) {
          iFormat++;
        }
        return matches;
      };

    for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
      if ( literal ) {
        if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
          literal = false;
        } else {
          chars += format.charAt( iFormat );
        }
      } else {
        switch ( format.charAt( iFormat ) ) {
          case "d": case "m": case "y": case "@":
            chars += "0123456789";
            break;
          case "D": case "M":
            return null; // Accept anything
          case "'":
            if ( lookAhead( "'" ) ) {
              chars += "'";
            } else {
              literal = true;
            }
            break;
          default:
            chars += format.charAt( iFormat );
        }
      }
    }
    return chars;
  },

  /* Get a setting value, defaulting if necessary. */
  _get: function( inst, name ) {
    return inst.settings[ name ] !== undefined ?
      inst.settings[ name ] : this._defaults[ name ];
  },

  /* Parse existing date and initialise date picker. */
  _setDateFromField: function( inst, noDefault ) {
    if ( inst.input.val() === inst.lastVal ) {
      return;
    }

    var dateFormat = this._get( inst, "dateFormat" ),
      dates = inst.lastVal = inst.input ? inst.input.val() : null,
      defaultDate = this._getDefaultDate( inst ),
      date = defaultDate,
      settings = this._getFormatConfig( inst );

    try {
      date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
    } catch ( event ) {
      dates = ( noDefault ? "" : dates );
    }
    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    inst.currentDay = ( dates ? date.getDate() : 0 );
    inst.currentMonth = ( dates ? date.getMonth() : 0 );
    inst.currentYear = ( dates ? date.getFullYear() : 0 );
    this._adjustInstDate( inst );
  },

  /* Retrieve the default date shown on opening. */
  _getDefaultDate: function( inst ) {
    return this._restrictMinMax( inst,
      this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
  },

  /* A date may be specified as an exact value or a relative one. */
  _determineDate: function( inst, date, defaultDate ) {
    var offsetNumeric = function( offset ) {
        var date = new Date();
        date.setDate( date.getDate() + offset );
        return date;
      },
      offsetString = function( offset ) {
        try {
          return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
            offset, $.datepicker._getFormatConfig( inst ) );
        }
        catch ( e ) {

          // Ignore
        }

        var date = ( offset.toLowerCase().match( /^c/ ) ?
          $.datepicker._getDate( inst ) : null ) || new Date(),
          year = date.getFullYear(),
          month = date.getMonth(),
          day = date.getDate(),
          pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
          matches = pattern.exec( offset );

        while ( matches ) {
          switch ( matches[ 2 ] || "d" ) {
            case "d" : case "D" :
              day += parseInt( matches[ 1 ], 10 ); break;
            case "w" : case "W" :
              day += parseInt( matches[ 1 ], 10 ) * 7; break;
            case "m" : case "M" :
              month += parseInt( matches[ 1 ], 10 );
              day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
              break;
            case "y": case "Y" :
              year += parseInt( matches[ 1 ], 10 );
              day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
              break;
          }
          matches = pattern.exec( offset );
        }
        return new Date( year, month, day );
      },
      newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
        ( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

    newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
    if ( newDate ) {
      newDate.setHours( 0 );
      newDate.setMinutes( 0 );
      newDate.setSeconds( 0 );
      newDate.setMilliseconds( 0 );
    }
    return this._daylightSavingAdjust( newDate );
  },

  /* Handle switch to/from daylight saving.
   * Hours may be non-zero on daylight saving cut-over:
   * > 12 when midnight changeover, but then cannot generate
   * midnight datetime, so jump to 1AM, otherwise reset.
   * @param  date  (Date) the date to check
   * @return  (Date) the corrected date
   */
  _daylightSavingAdjust: function( date ) {
    if ( !date ) {
      return null;
    }
    date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
    return date;
  },

  /* Set the date(s) directly. */
  _setDate: function( inst, date, noChange ) {
    var clear = !date,
      origMonth = inst.selectedMonth,
      origYear = inst.selectedYear,
      newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

    inst.selectedDay = inst.currentDay = newDate.getDate();
    inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
    inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
    if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
      this._notifyChange( inst );
    }
    this._adjustInstDate( inst );
    if ( inst.input ) {
      inst.input.val( clear ? "" : this._formatDate( inst ) );
    }
  },

  /* Retrieve the date(s) directly. */
  _getDate: function( inst ) {
    var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
      this._daylightSavingAdjust( new Date(
      inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
      return startDate;
  },

  /* Attach the onxxx handlers.  These are declared statically so
   * they work with static code transformers like Caja.
   */
  _attachHandlers: function( inst ) {
    var stepMonths = this._get( inst, "stepMonths" ),
      id = "#" + inst.id.replace( /\\\\/g, "\\" );
    inst.dpDiv.find( "[data-handler]" ).map( function() {
      var handler = {
        prev: function() {
          $.datepicker._adjustDate( id, -stepMonths, "M" );
        },
        next: function() {
          $.datepicker._adjustDate( id, +stepMonths, "M" );
        },
        hide: function() {
          $.datepicker._hideDatepicker();
        },
        today: function() {
          $.datepicker._gotoToday( id );
        },
        selectDay: function() {
          $.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
          return false;
        },
        selectMonth: function() {
          $.datepicker._selectMonthYear( id, this, "M" );
          return false;
        },
        selectYear: function() {
          $.datepicker._selectMonthYear( id, this, "Y" );
          return false;
        }
      };
      $( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
    } );
  },

  /* Generate the HTML for the current state of the date picker. */
  _generateHTML: function( inst ) {
    var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
      controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
      monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
      selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
      cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
      printDate, dRow, tbody, daySettings, otherMonth, unselectable,
      tempDate = new Date(),
      today = this._daylightSavingAdjust(
        new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
      isRTL = this._get( inst, "isRTL" ),
      showButtonPanel = this._get( inst, "showButtonPanel" ),
      hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
      navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
      numMonths = this._getNumberOfMonths( inst ),
      showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
      stepMonths = this._get( inst, "stepMonths" ),
      isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
      currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
        new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
      minDate = this._getMinMaxDate( inst, "min" ),
      maxDate = this._getMinMaxDate( inst, "max" ),
      drawMonth = inst.drawMonth - showCurrentAtPos,
      drawYear = inst.drawYear;

    if ( drawMonth < 0 ) {
      drawMonth += 12;
      drawYear--;
    }
    if ( maxDate ) {
      maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
        maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
      maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
      while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
        drawMonth--;
        if ( drawMonth < 0 ) {
          drawMonth = 11;
          drawYear--;
        }
      }
    }
    inst.drawMonth = drawMonth;
    inst.drawYear = drawYear;

    prevText = this._get( inst, "prevText" );
    prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
      this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
      this._getFormatConfig( inst ) ) );

    prev = ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ?
      "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
      " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" :
      ( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" ) );

    nextText = this._get( inst, "nextText" );
    nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
      this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
      this._getFormatConfig( inst ) ) );

    next = ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ?
      "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
      " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" :
      ( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" ) );

    currentText = this._get( inst, "currentText" );
    gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
    currentText = ( !navigationAsDateFormat ? currentText :
      this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

    controls = ( !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
      this._get( inst, "closeText" ) + "</button>" : "" );

    buttonPanel = ( showButtonPanel ) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + ( isRTL ? controls : "" ) +
      ( this._isInRange( inst, gotoDate ) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
      ">" + currentText + "</button>" : "" ) + ( isRTL ? "" : controls ) + "</div>" : "";

    firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
    firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

    showWeek = this._get( inst, "showWeek" );
    dayNames = this._get( inst, "dayNames" );
    dayNamesMin = this._get( inst, "dayNamesMin" );
    monthNames = this._get( inst, "monthNames" );
    monthNamesShort = this._get( inst, "monthNamesShort" );
    beforeShowDay = this._get( inst, "beforeShowDay" );
    showOtherMonths = this._get( inst, "showOtherMonths" );
    selectOtherMonths = this._get( inst, "selectOtherMonths" );
    defaultDate = this._getDefaultDate( inst );
    html = "";

    for ( row = 0; row < numMonths[ 0 ]; row++ ) {
      group = "";
      this.maxRows = 4;
      for ( col = 0; col < numMonths[ 1 ]; col++ ) {
        selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
        cornerClass = " ui-corner-all";
        calender = "";
        if ( isMultiMonth ) {
          calender += "<div class='ui-datepicker-group";
          if ( numMonths[ 1 ] > 1 ) {
            switch ( col ) {
              case 0: calender += " ui-datepicker-group-first";
                cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
              case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
                cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
              default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
            }
          }
          calender += "'>";
        }
        calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
          ( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
          ( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
          this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
          row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
          "</div><table class='ui-datepicker-calendar'><thead>" +
          "<tr>";
        thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
        for ( dow = 0; dow < 7; dow++ ) { // days of the week
          day = ( dow + firstDay ) % 7;
          thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
            "<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
        }
        calender += thead + "</tr></thead><tbody>";
        daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
        if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
          inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
        }
        leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
        curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
        numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
        this.maxRows = numRows;
        printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
        for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
          calender += "<tr>";
          tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
            this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
          for ( dow = 0; dow < 7; dow++ ) { // create date picker days
            daySettings = ( beforeShowDay ?
              beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
            otherMonth = ( printDate.getMonth() !== drawMonth );
            unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
              ( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
            tbody += "<td class='" +
              ( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
              ( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
              ( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
              ( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

              // or defaultDate is current printedDate and defaultDate is selectedDate
              " " + this._dayOverClass : "" ) + // highlight selected day
              ( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
              ( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
              ( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
              ( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
              ( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
              ( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
              ( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
              ( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
              ( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
              ( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
              ( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
              "' href='#'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
            printDate.setDate( printDate.getDate() + 1 );
            printDate = this._daylightSavingAdjust( printDate );
          }
          calender += tbody + "</tr>";
        }
        drawMonth++;
        if ( drawMonth > 11 ) {
          drawMonth = 0;
          drawYear++;
        }
        calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
              ( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
        group += calender;
      }
      html += group;
    }
    html += buttonPanel;
    inst._keyEvent = false;
    return html;
  },

  /* Generate the month and year header. */
  _generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
      secondary, monthNames, monthNamesShort ) {

    var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
      changeMonth = this._get( inst, "changeMonth" ),
      changeYear = this._get( inst, "changeYear" ),
      showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
      html = "<div class='ui-datepicker-title'>",
      monthHtml = "";

    // Month selection
    if ( secondary || !changeMonth ) {
      monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
    } else {
      inMinYear = ( minDate && minDate.getFullYear() === drawYear );
      inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
      monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
      for ( month = 0; month < 12; month++ ) {
        if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
          monthHtml += "<option value='" + month + "'" +
            ( month === drawMonth ? " selected='selected'" : "" ) +
            ">" + monthNamesShort[ month ] + "</option>";
        }
      }
      monthHtml += "</select>";
    }

    if ( !showMonthAfterYear ) {
      html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
    }

    // Year selection
    if ( !inst.yearshtml ) {
      inst.yearshtml = "";
      if ( secondary || !changeYear ) {
        html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
      } else {

        // determine range of years to display
        years = this._get( inst, "yearRange" ).split( ":" );
        thisYear = new Date().getFullYear();
        determineYear = function( value ) {
          var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
            ( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
            parseInt( value, 10 ) ) );
          return ( isNaN( year ) ? thisYear : year );
        };
        year = determineYear( years[ 0 ] );
        endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
        year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
        endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
        inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
        for ( ; year <= endYear; year++ ) {
          inst.yearshtml += "<option value='" + year + "'" +
            ( year === drawYear ? " selected='selected'" : "" ) +
            ">" + year + "</option>";
        }
        inst.yearshtml += "</select>";

        html += inst.yearshtml;
        inst.yearshtml = null;
      }
    }

    html += this._get( inst, "yearSuffix" );
    if ( showMonthAfterYear ) {
      html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
    }
    html += "</div>"; // Close datepicker_header
    return html;
  },

  /* Adjust one of the date sub-fields. */
  _adjustInstDate: function( inst, offset, period ) {
    var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
      month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
      day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
      date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

    inst.selectedDay = date.getDate();
    inst.drawMonth = inst.selectedMonth = date.getMonth();
    inst.drawYear = inst.selectedYear = date.getFullYear();
    if ( period === "M" || period === "Y" ) {
      this._notifyChange( inst );
    }
  },

  /* Ensure a date is within any min/max bounds. */
  _restrictMinMax: function( inst, date ) {
    var minDate = this._getMinMaxDate( inst, "min" ),
      maxDate = this._getMinMaxDate( inst, "max" ),
      newDate = ( minDate && date < minDate ? minDate : date );
    return ( maxDate && newDate > maxDate ? maxDate : newDate );
  },

  /* Notify change of month/year. */
  _notifyChange: function( inst ) {
    var onChange = this._get( inst, "onChangeMonthYear" );
    if ( onChange ) {
      onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
        [ inst.selectedYear, inst.selectedMonth + 1, inst ] );
    }
  },

  /* Determine the number of months to show. */
  _getNumberOfMonths: function( inst ) {
    var numMonths = this._get( inst, "numberOfMonths" );
    return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
  },

  /* Determine the current maximum date - ensure no time components are set. */
  _getMinMaxDate: function( inst, minMax ) {
    return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
  },

  /* Find the number of days in a given month. */
  _getDaysInMonth: function( year, month ) {
    return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
  },

  /* Find the day of the week of the first of a month. */
  _getFirstDayOfMonth: function( year, month ) {
    return new Date( year, month, 1 ).getDay();
  },

  /* Determines if we should allow a "next/prev" month display change. */
  _canAdjustMonth: function( inst, offset, curYear, curMonth ) {
    var numMonths = this._getNumberOfMonths( inst ),
      date = this._daylightSavingAdjust( new Date( curYear,
      curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

    if ( offset < 0 ) {
      date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
    }
    return this._isInRange( inst, date );
  },

  /* Is the given date in the accepted range? */
  _isInRange: function( inst, date ) {
    var yearSplit, currentYear,
      minDate = this._getMinMaxDate( inst, "min" ),
      maxDate = this._getMinMaxDate( inst, "max" ),
      minYear = null,
      maxYear = null,
      years = this._get( inst, "yearRange" );
      if ( years ) {
        yearSplit = years.split( ":" );
        currentYear = new Date().getFullYear();
        minYear = parseInt( yearSplit[ 0 ], 10 );
        maxYear = parseInt( yearSplit[ 1 ], 10 );
        if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
          minYear += currentYear;
        }
        if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
          maxYear += currentYear;
        }
      }

    return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
      ( !maxDate || date.getTime() <= maxDate.getTime() ) &&
      ( !minYear || date.getFullYear() >= minYear ) &&
      ( !maxYear || date.getFullYear() <= maxYear ) );
  },

  /* Provide the configuration settings for formatting/parsing. */
  _getFormatConfig: function( inst ) {
    var shortYearCutoff = this._get( inst, "shortYearCutoff" );
    shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
      new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
    return { shortYearCutoff: shortYearCutoff,
      dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
      monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
  },

  /* Format the given date for display. */
  _formatDate: function( inst, day, month, year ) {
    if ( !day ) {
      inst.currentDay = inst.selectedDay;
      inst.currentMonth = inst.selectedMonth;
      inst.currentYear = inst.selectedYear;
    }
    var date = ( day ? ( typeof day === "object" ? day :
      this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
      this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
    return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
  }
} );

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover( dpDiv ) {
  var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
  return dpDiv.on( "mouseout", selector, function() {
      $( this ).removeClass( "ui-state-hover" );
      if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
        $( this ).removeClass( "ui-datepicker-prev-hover" );
      }
      if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
        $( this ).removeClass( "ui-datepicker-next-hover" );
      }
    } )
    .on( "mouseover", selector, datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
  if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
    $( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
    $( this ).addClass( "ui-state-hover" );
    if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
      $( this ).addClass( "ui-datepicker-prev-hover" );
    }
    if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
      $( this ).addClass( "ui-datepicker-next-hover" );
    }
  }
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove( target, props ) {
  $.extend( target, props );
  for ( var name in props ) {
    if ( props[ name ] == null ) {
      target[ name ] = props[ name ];
    }
  }
  return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
          Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function( options ) {

  /* Verify an empty collection wasn't passed - Fixes #6976 */
  if ( !this.length ) {
    return this;
  }

  /* Initialise the date picker. */
  if ( !$.datepicker.initialized ) {
    $( document ).on( "mousedown", $.datepicker._checkExternalClick );
    $.datepicker.initialized = true;
  }

  /* Append datepicker main container to body if not exist. */
  if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
    $( "body" ).append( $.datepicker.dpDiv );
  }

  var otherArgs = Array.prototype.slice.call( arguments, 1 );
  if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
    return $.datepicker[ "_" + options + "Datepicker" ].
      apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
  }
  if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
    return $.datepicker[ "_" + options + "Datepicker" ].
      apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
  }
  return this.each( function() {
    typeof options === "string" ?
      $.datepicker[ "_" + options + "Datepicker" ].
        apply( $.datepicker, [ this ].concat( otherArgs ) ) :
      $.datepicker._attachDatepicker( this, options );
  } );
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.12.1";

var widgetsDatepicker = $.datepicker;




// This file is deprecated
var ie = $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/



var mouseHandled = false;
$( document ).on( "mouseup", function() {
  mouseHandled = false;
} );

var widgetsMouse = $.widget( "ui.mouse", {
  version: "1.12.1",
  options: {
    cancel: "input, textarea, button, select, option",
    distance: 1,
    delay: 0
  },
  _mouseInit: function() {
    var that = this;

    this.element
      .on( "mousedown." + this.widgetName, function( event ) {
        return that._mouseDown( event );
      } )
      .on( "click." + this.widgetName, function( event ) {
        if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
          $.removeData( event.target, that.widgetName + ".preventClickEvent" );
          event.stopImmediatePropagation();
          return false;
        }
      } );

    this.started = false;
  },

  // TODO: make sure destroying one instance of mouse doesn't mess with
  // other instances of mouse
  _mouseDestroy: function() {
    this.element.off( "." + this.widgetName );
    if ( this._mouseMoveDelegate ) {
      this.document
        .off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
        .off( "mouseup." + this.widgetName, this._mouseUpDelegate );
    }
  },

  _mouseDown: function( event ) {

    // don't let more than one widget handle mouseStart
    if ( mouseHandled ) {
      return;
    }

    this._mouseMoved = false;

    // We may have missed mouseup (out of window)
    ( this._mouseStarted && this._mouseUp( event ) );

    this._mouseDownEvent = event;

    var that = this,
      btnIsLeft = ( event.which === 1 ),

      // event.target.nodeName works around a bug in IE 8 with
      // disabled inputs (#7620)
      elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
        $( event.target ).closest( this.options.cancel ).length : false );
    if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
      return true;
    }

    this.mouseDelayMet = !this.options.delay;
    if ( !this.mouseDelayMet ) {
      this._mouseDelayTimer = setTimeout( function() {
        that.mouseDelayMet = true;
      }, this.options.delay );
    }

    if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
      this._mouseStarted = ( this._mouseStart( event ) !== false );
      if ( !this._mouseStarted ) {
        event.preventDefault();
        return true;
      }
    }

    // Click event may never have fired (Gecko & Opera)
    if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
      $.removeData( event.target, this.widgetName + ".preventClickEvent" );
    }

    // These delegates are required to keep context
    this._mouseMoveDelegate = function( event ) {
      return that._mouseMove( event );
    };
    this._mouseUpDelegate = function( event ) {
      return that._mouseUp( event );
    };

    this.document
      .on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
      .on( "mouseup." + this.widgetName, this._mouseUpDelegate );

    event.preventDefault();

    mouseHandled = true;
    return true;
  },

  _mouseMove: function( event ) {

    // Only check for mouseups outside the document if you've moved inside the document
    // at least once. This prevents the firing of mouseup in the case of IE<9, which will
    // fire a mousemove event if content is placed under the cursor. See #7778
    // Support: IE <9
    if ( this._mouseMoved ) {

      // IE mouseup check - mouseup happened when mouse was out of window
      if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
          !event.button ) {
        return this._mouseUp( event );

      // Iframe mouseup check - mouseup occurred in another document
      } else if ( !event.which ) {

        // Support: Safari <=8 - 9
        // Safari sets which to 0 if you press any of the following keys
        // during a drag (#14461)
        if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
            event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
          this.ignoreMissingWhich = true;
        } else if ( !this.ignoreMissingWhich ) {
          return this._mouseUp( event );
        }
      }
    }

    if ( event.which || event.button ) {
      this._mouseMoved = true;
    }

    if ( this._mouseStarted ) {
      this._mouseDrag( event );
      return event.preventDefault();
    }

    if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
      this._mouseStarted =
        ( this._mouseStart( this._mouseDownEvent, event ) !== false );
      ( this._mouseStarted ? this._mouseDrag( event ) : this._mouseUp( event ) );
    }

    return !this._mouseStarted;
  },

  _mouseUp: function( event ) {
    this.document
      .off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
      .off( "mouseup." + this.widgetName, this._mouseUpDelegate );

    if ( this._mouseStarted ) {
      this._mouseStarted = false;

      if ( event.target === this._mouseDownEvent.target ) {
        $.data( event.target, this.widgetName + ".preventClickEvent", true );
      }

      this._mouseStop( event );
    }

    if ( this._mouseDelayTimer ) {
      clearTimeout( this._mouseDelayTimer );
      delete this._mouseDelayTimer;
    }

    this.ignoreMissingWhich = false;
    mouseHandled = false;
    event.preventDefault();
  },

  _mouseDistanceMet: function( event ) {
    return ( Math.max(
        Math.abs( this._mouseDownEvent.pageX - event.pageX ),
        Math.abs( this._mouseDownEvent.pageY - event.pageY )
      ) >= this.options.distance
    );
  },

  _mouseDelayMet: function( /* event */ ) {
    return this.mouseDelayMet;
  },

  // These are placeholder methods, to be overriden by extending plugin
  _mouseStart: function( /* event */ ) {},
  _mouseDrag: function( /* event */ ) {},
  _mouseStop: function( /* event */ ) {},
  _mouseCapture: function( /* event */ ) { return true; }
} );




// $.ui.plugin is deprecated. Use $.widget() extensions instead.
var plugin = $.ui.plugin = {
  add: function( module, option, set ) {
    var i,
      proto = $.ui[ module ].prototype;
    for ( i in set ) {
      proto.plugins[ i ] = proto.plugins[ i ] || [];
      proto.plugins[ i ].push( [ option, set[ i ] ] );
    }
  },
  call: function( instance, name, args, allowDisconnected ) {
    var i,
      set = instance.plugins[ name ];

    if ( !set ) {
      return;
    }

    if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
        instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
      return;
    }

    for ( i = 0; i < set.length; i++ ) {
      if ( instance.options[ set[ i ][ 0 ] ] ) {
        set[ i ][ 1 ].apply( instance.element, args );
      }
    }
  }
};



var safeBlur = $.ui.safeBlur = function( element ) {

  // Support: IE9 - 10 only
  // If the <body> is blurred, IE will switch windows, see #9420
  if ( element && element.nodeName.toLowerCase() !== "body" ) {
    $( element ).trigger( "blur" );
  }
};


/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css



$.widget( "ui.draggable", $.ui.mouse, {
  version: "1.12.1",
  widgetEventPrefix: "drag",
  options: {
    addClasses: true,
    appendTo: "parent",
    axis: false,
    connectToSortable: false,
    containment: false,
    cursor: "auto",
    cursorAt: false,
    grid: false,
    handle: false,
    helper: "original",
    iframeFix: false,
    opacity: false,
    refreshPositions: false,
    revert: false,
    revertDuration: 500,
    scope: "default",
    scroll: true,
    scrollSensitivity: 20,
    scrollSpeed: 20,
    snap: false,
    snapMode: "both",
    snapTolerance: 20,
    stack: false,
    zIndex: false,

    // Callbacks
    drag: null,
    start: null,
    stop: null
  },
  _create: function() {

    if ( this.options.helper === "original" ) {
      this._setPositionRelative();
    }
    if ( this.options.addClasses ) {
      this._addClass( "ui-draggable" );
    }
    this._setHandleClassName();

    this._mouseInit();
  },

  _setOption: function( key, value ) {
    this._super( key, value );
    if ( key === "handle" ) {
      this._removeHandleClassName();
      this._setHandleClassName();
    }
  },

  _destroy: function() {
    if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
      this.destroyOnClear = true;
      return;
    }
    this._removeHandleClassName();
    this._mouseDestroy();
  },

  _mouseCapture: function( event ) {
    var o = this.options;

    // Among others, prevent a drag on a resizable-handle
    if ( this.helper || o.disabled ||
        $( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
      return false;
    }

    //Quit if we're not on a valid handle
    this.handle = this._getHandle( event );
    if ( !this.handle ) {
      return false;
    }

    this._blurActiveElement( event );

    this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

    return true;

  },

  _blockFrames: function( selector ) {
    this.iframeBlocks = this.document.find( selector ).map( function() {
      var iframe = $( this );

      return $( "<div>" )
        .css( "position", "absolute" )
        .appendTo( iframe.parent() )
        .outerWidth( iframe.outerWidth() )
        .outerHeight( iframe.outerHeight() )
        .offset( iframe.offset() )[ 0 ];
    } );
  },

  _unblockFrames: function() {
    if ( this.iframeBlocks ) {
      this.iframeBlocks.remove();
      delete this.iframeBlocks;
    }
  },

  _blurActiveElement: function( event ) {
    var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
      target = $( event.target );

    // Don't blur if the event occurred on an element that is within
    // the currently focused element
    // See #10527, #12472
    if ( target.closest( activeElement ).length ) {
      return;
    }

    // Blur any element that currently has focus, see #4261
    $.ui.safeBlur( activeElement );
  },

  _mouseStart: function( event ) {

    var o = this.options;

    //Create and append the visible helper
    this.helper = this._createHelper( event );

    this._addClass( this.helper, "ui-draggable-dragging" );

    //Cache the helper size
    this._cacheHelperProportions();

    //If ddmanager is used for droppables, set the global draggable
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.current = this;
    }

    /*
     * - Position generation -
     * This block generates everything position related - it's the core of draggables.
     */

    //Cache the margins of the original element
    this._cacheMargins();

    //Store the helper's css position
    this.cssPosition = this.helper.css( "position" );
    this.scrollParent = this.helper.scrollParent( true );
    this.offsetParent = this.helper.offsetParent();
    this.hasFixedAncestor = this.helper.parents().filter( function() {
        return $( this ).css( "position" ) === "fixed";
      } ).length > 0;

    //The element's absolute position on the page minus margins
    this.positionAbs = this.element.offset();
    this._refreshOffsets( event );

    //Generate the original position
    this.originalPosition = this.position = this._generatePosition( event, false );
    this.originalPageX = event.pageX;
    this.originalPageY = event.pageY;

    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
    ( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

    //Set a containment if given in the options
    this._setContainment();

    //Trigger event + callbacks
    if ( this._trigger( "start", event ) === false ) {
      this._clear();
      return false;
    }

    //Recache the helper size
    this._cacheHelperProportions();

    //Prepare the droppable offsets
    if ( $.ui.ddmanager && !o.dropBehaviour ) {
      $.ui.ddmanager.prepareOffsets( this, event );
    }

    // Execute the drag once - this causes the helper not to be visible before getting its
    // correct position
    this._mouseDrag( event, true );

    // If the ddmanager is used for droppables, inform the manager that dragging has started
    // (see #5003)
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.dragStart( this, event );
    }

    return true;
  },

  _refreshOffsets: function( event ) {
    this.offset = {
      top: this.positionAbs.top - this.margins.top,
      left: this.positionAbs.left - this.margins.left,
      scroll: false,
      parent: this._getParentOffset(),
      relative: this._getRelativeOffset()
    };

    this.offset.click = {
      left: event.pageX - this.offset.left,
      top: event.pageY - this.offset.top
    };
  },

  _mouseDrag: function( event, noPropagation ) {

    // reset any necessary cached properties (see #5009)
    if ( this.hasFixedAncestor ) {
      this.offset.parent = this._getParentOffset();
    }

    //Compute the helpers position
    this.position = this._generatePosition( event, true );
    this.positionAbs = this._convertPositionTo( "absolute" );

    //Call plugins and callbacks and use the resulting position if something is returned
    if ( !noPropagation ) {
      var ui = this._uiHash();
      if ( this._trigger( "drag", event, ui ) === false ) {
        this._mouseUp( new $.Event( "mouseup", event ) );
        return false;
      }
      this.position = ui.position;
    }

    this.helper[ 0 ].style.left = this.position.left + "px";
    this.helper[ 0 ].style.top = this.position.top + "px";

    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.drag( this, event );
    }

    return false;
  },

  _mouseStop: function( event ) {

    //If we are using droppables, inform the manager about the drop
    var that = this,
      dropped = false;
    if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
      dropped = $.ui.ddmanager.drop( this, event );
    }

    //if a drop comes from outside (a sortable)
    if ( this.dropped ) {
      dropped = this.dropped;
      this.dropped = false;
    }

    if ( ( this.options.revert === "invalid" && !dropped ) ||
        ( this.options.revert === "valid" && dropped ) ||
        this.options.revert === true || ( $.isFunction( this.options.revert ) &&
        this.options.revert.call( this.element, dropped ) )
    ) {
      $( this.helper ).animate(
        this.originalPosition,
        parseInt( this.options.revertDuration, 10 ),
        function() {
          if ( that._trigger( "stop", event ) !== false ) {
            that._clear();
          }
        }
      );
    } else {
      if ( this._trigger( "stop", event ) !== false ) {
        this._clear();
      }
    }

    return false;
  },

  _mouseUp: function( event ) {
    this._unblockFrames();

    // If the ddmanager is used for droppables, inform the manager that dragging has stopped
    // (see #5003)
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.dragStop( this, event );
    }

    // Only need to focus if the event occurred on the draggable itself, see #10527
    if ( this.handleElement.is( event.target ) ) {

      // The interaction is over; whether or not the click resulted in a drag,
      // focus the element
      this.element.trigger( "focus" );
    }

    return $.ui.mouse.prototype._mouseUp.call( this, event );
  },

  cancel: function() {

    if ( this.helper.is( ".ui-draggable-dragging" ) ) {
      this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
    } else {
      this._clear();
    }

    return this;

  },

  _getHandle: function( event ) {
    return this.options.handle ?
      !!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
      true;
  },

  _setHandleClassName: function() {
    this.handleElement = this.options.handle ?
      this.element.find( this.options.handle ) : this.element;
    this._addClass( this.handleElement, "ui-draggable-handle" );
  },

  _removeHandleClassName: function() {
    this._removeClass( this.handleElement, "ui-draggable-handle" );
  },

  _createHelper: function( event ) {

    var o = this.options,
      helperIsFunction = $.isFunction( o.helper ),
      helper = helperIsFunction ?
        $( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
        ( o.helper === "clone" ?
          this.element.clone().removeAttr( "id" ) :
          this.element );

    if ( !helper.parents( "body" ).length ) {
      helper.appendTo( ( o.appendTo === "parent" ?
        this.element[ 0 ].parentNode :
        o.appendTo ) );
    }

    // Http://bugs.jqueryui.com/ticket/9446
    // a helper function can return the original element
    // which wouldn't have been set to relative in _create
    if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
      this._setPositionRelative();
    }

    if ( helper[ 0 ] !== this.element[ 0 ] &&
        !( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
      helper.css( "position", "absolute" );
    }

    return helper;

  },

  _setPositionRelative: function() {
    if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
      this.element[ 0 ].style.position = "relative";
    }
  },

  _adjustOffsetFromHelper: function( obj ) {
    if ( typeof obj === "string" ) {
      obj = obj.split( " " );
    }
    if ( $.isArray( obj ) ) {
      obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
    }
    if ( "left" in obj ) {
      this.offset.click.left = obj.left + this.margins.left;
    }
    if ( "right" in obj ) {
      this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
    }
    if ( "top" in obj ) {
      this.offset.click.top = obj.top + this.margins.top;
    }
    if ( "bottom" in obj ) {
      this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
    }
  },

  _isRootNode: function( element ) {
    return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
  },

  _getParentOffset: function() {

    //Get the offsetParent and cache its position
    var po = this.offsetParent.offset(),
      document = this.document[ 0 ];

    // This is a special case where we need to modify a offset calculated on start, since the
    // following happened:
    // 1. The position of the helper is absolute, so it's position is calculated based on the
    // next positioned parent
    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
    // the document, which means that the scroll is included in the initial calculation of the
    // offset of the parent, and never recalculated upon drag
    if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
        $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
      po.left += this.scrollParent.scrollLeft();
      po.top += this.scrollParent.scrollTop();
    }

    if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
      po = { top: 0, left: 0 };
    }

    return {
      top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
      left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
    };

  },

  _getRelativeOffset: function() {
    if ( this.cssPosition !== "relative" ) {
      return { top: 0, left: 0 };
    }

    var p = this.element.position(),
      scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

    return {
      top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
        ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
      left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
        ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
    };

  },

  _cacheMargins: function() {
    this.margins = {
      left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
      top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
      right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
      bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
    };
  },

  _cacheHelperProportions: function() {
    this.helperProportions = {
      width: this.helper.outerWidth(),
      height: this.helper.outerHeight()
    };
  },

  _setContainment: function() {

    var isUserScrollable, c, ce,
      o = this.options,
      document = this.document[ 0 ];

    this.relativeContainer = null;

    if ( !o.containment ) {
      this.containment = null;
      return;
    }

    if ( o.containment === "window" ) {
      this.containment = [
        $( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
        $( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
        $( window ).scrollLeft() + $( window ).width() -
          this.helperProportions.width - this.margins.left,
        $( window ).scrollTop() +
          ( $( window ).height() || document.body.parentNode.scrollHeight ) -
          this.helperProportions.height - this.margins.top
      ];
      return;
    }

    if ( o.containment === "document" ) {
      this.containment = [
        0,
        0,
        $( document ).width() - this.helperProportions.width - this.margins.left,
        ( $( document ).height() || document.body.parentNode.scrollHeight ) -
          this.helperProportions.height - this.margins.top
      ];
      return;
    }

    if ( o.containment.constructor === Array ) {
      this.containment = o.containment;
      return;
    }

    if ( o.containment === "parent" ) {
      o.containment = this.helper[ 0 ].parentNode;
    }

    c = $( o.containment );
    ce = c[ 0 ];

    if ( !ce ) {
      return;
    }

    isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

    this.containment = [
      ( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
        ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
      ( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
        ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
      ( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
        ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
        ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
        this.helperProportions.width -
        this.margins.left -
        this.margins.right,
      ( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
        ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
        ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
        this.helperProportions.height -
        this.margins.top -
        this.margins.bottom
    ];
    this.relativeContainer = c;
  },

  _convertPositionTo: function( d, pos ) {

    if ( !pos ) {
      pos = this.position;
    }

    var mod = d === "absolute" ? 1 : -1,
      scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

    return {
      top: (

        // The absolute mouse position
        pos.top +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top * mod -
        ( ( this.cssPosition === "fixed" ?
          -this.offset.scroll.top :
          ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
      ),
      left: (

        // The absolute mouse position
        pos.left +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left * mod -
        ( ( this.cssPosition === "fixed" ?
          -this.offset.scroll.left :
          ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
      )
    };

  },

  _generatePosition: function( event, constrainPosition ) {

    var containment, co, top, left,
      o = this.options,
      scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
      pageX = event.pageX,
      pageY = event.pageY;

    // Cache the scroll
    if ( !scrollIsRootNode || !this.offset.scroll ) {
      this.offset.scroll = {
        top: this.scrollParent.scrollTop(),
        left: this.scrollParent.scrollLeft()
      };
    }

    /*
     * - Position constraining -
     * Constrain the position to a mix of grid, containment.
     */

    // If we are not dragging yet, we won't check for options
    if ( constrainPosition ) {
      if ( this.containment ) {
        if ( this.relativeContainer ) {
          co = this.relativeContainer.offset();
          containment = [
            this.containment[ 0 ] + co.left,
            this.containment[ 1 ] + co.top,
            this.containment[ 2 ] + co.left,
            this.containment[ 3 ] + co.top
          ];
        } else {
          containment = this.containment;
        }

        if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
          pageX = containment[ 0 ] + this.offset.click.left;
        }
        if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
          pageY = containment[ 1 ] + this.offset.click.top;
        }
        if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
          pageX = containment[ 2 ] + this.offset.click.left;
        }
        if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
          pageY = containment[ 3 ] + this.offset.click.top;
        }
      }

      if ( o.grid ) {

        //Check for grid elements set to 0 to prevent divide by 0 error causing invalid
        // argument errors in IE (see ticket #6950)
        top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
          this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
        pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
          top - this.offset.click.top > containment[ 3 ] ) ?
            top :
            ( ( top - this.offset.click.top >= containment[ 1 ] ) ?
              top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

        left = o.grid[ 0 ] ? this.originalPageX +
          Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
          this.originalPageX;
        pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
          left - this.offset.click.left > containment[ 2 ] ) ?
            left :
            ( ( left - this.offset.click.left >= containment[ 0 ] ) ?
              left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
      }

      if ( o.axis === "y" ) {
        pageX = this.originalPageX;
      }

      if ( o.axis === "x" ) {
        pageY = this.originalPageY;
      }
    }

    return {
      top: (

        // The absolute mouse position
        pageY -

        // Click offset (relative to the element)
        this.offset.click.top -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top +
        ( this.cssPosition === "fixed" ?
          -this.offset.scroll.top :
          ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
      ),
      left: (

        // The absolute mouse position
        pageX -

        // Click offset (relative to the element)
        this.offset.click.left -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left +
        ( this.cssPosition === "fixed" ?
          -this.offset.scroll.left :
          ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
      )
    };

  },

  _clear: function() {
    this._removeClass( this.helper, "ui-draggable-dragging" );
    if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
      this.helper.remove();
    }
    this.helper = null;
    this.cancelHelperRemoval = false;
    if ( this.destroyOnClear ) {
      this.destroy();
    }
  },

  // From now on bulk stuff - mainly helpers

  _trigger: function( type, event, ui ) {
    ui = ui || this._uiHash();
    $.ui.plugin.call( this, type, [ event, ui, this ], true );

    // Absolute position and offset (see #6884 ) have to be recalculated after plugins
    if ( /^(drag|start|stop)/.test( type ) ) {
      this.positionAbs = this._convertPositionTo( "absolute" );
      ui.offset = this.positionAbs;
    }
    return $.Widget.prototype._trigger.call( this, type, event, ui );
  },

  plugins: {},

  _uiHash: function() {
    return {
      helper: this.helper,
      position: this.position,
      originalPosition: this.originalPosition,
      offset: this.positionAbs
    };
  }

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
  start: function( event, ui, draggable ) {
    var uiSortable = $.extend( {}, ui, {
      item: draggable.element
    } );

    draggable.sortables = [];
    $( draggable.options.connectToSortable ).each( function() {
      var sortable = $( this ).sortable( "instance" );

      if ( sortable && !sortable.options.disabled ) {
        draggable.sortables.push( sortable );

        // RefreshPositions is called at drag start to refresh the containerCache
        // which is used in drag. This ensures it's initialized and synchronized
        // with any changes that might have happened on the page since initialization.
        sortable.refreshPositions();
        sortable._trigger( "activate", event, uiSortable );
      }
    } );
  },
  stop: function( event, ui, draggable ) {
    var uiSortable = $.extend( {}, ui, {
      item: draggable.element
    } );

    draggable.cancelHelperRemoval = false;

    $.each( draggable.sortables, function() {
      var sortable = this;

      if ( sortable.isOver ) {
        sortable.isOver = 0;

        // Allow this sortable to handle removing the helper
        draggable.cancelHelperRemoval = true;
        sortable.cancelHelperRemoval = false;

        // Use _storedCSS To restore properties in the sortable,
        // as this also handles revert (#9675) since the draggable
        // may have modified them in unexpected ways (#8809)
        sortable._storedCSS = {
          position: sortable.placeholder.css( "position" ),
          top: sortable.placeholder.css( "top" ),
          left: sortable.placeholder.css( "left" )
        };

        sortable._mouseStop( event );

        // Once drag has ended, the sortable should return to using
        // its original helper, not the shared helper from draggable
        sortable.options.helper = sortable.options._helper;
      } else {

        // Prevent this Sortable from removing the helper.
        // However, don't set the draggable to remove the helper
        // either as another connected Sortable may yet handle the removal.
        sortable.cancelHelperRemoval = true;

        sortable._trigger( "deactivate", event, uiSortable );
      }
    } );
  },
  drag: function( event, ui, draggable ) {
    $.each( draggable.sortables, function() {
      var innermostIntersecting = false,
        sortable = this;

      // Copy over variables that sortable's _intersectsWith uses
      sortable.positionAbs = draggable.positionAbs;
      sortable.helperProportions = draggable.helperProportions;
      sortable.offset.click = draggable.offset.click;

      if ( sortable._intersectsWith( sortable.containerCache ) ) {
        innermostIntersecting = true;

        $.each( draggable.sortables, function() {

          // Copy over variables that sortable's _intersectsWith uses
          this.positionAbs = draggable.positionAbs;
          this.helperProportions = draggable.helperProportions;
          this.offset.click = draggable.offset.click;

          if ( this !== sortable &&
              this._intersectsWith( this.containerCache ) &&
              $.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
            innermostIntersecting = false;
          }

          return innermostIntersecting;
        } );
      }

      if ( innermostIntersecting ) {

        // If it intersects, we use a little isOver variable and set it once,
        // so that the move-in stuff gets fired only once.
        if ( !sortable.isOver ) {
          sortable.isOver = 1;

          // Store draggable's parent in case we need to reappend to it later.
          draggable._parent = ui.helper.parent();

          sortable.currentItem = ui.helper
            .appendTo( sortable.element )
            .data( "ui-sortable-item", true );

          // Store helper option to later restore it
          sortable.options._helper = sortable.options.helper;

          sortable.options.helper = function() {
            return ui.helper[ 0 ];
          };

          // Fire the start events of the sortable with our passed browser event,
          // and our own helper (so it doesn't create a new one)
          event.target = sortable.currentItem[ 0 ];
          sortable._mouseCapture( event, true );
          sortable._mouseStart( event, true, true );

          // Because the browser event is way off the new appended portlet,
          // modify necessary variables to reflect the changes
          sortable.offset.click.top = draggable.offset.click.top;
          sortable.offset.click.left = draggable.offset.click.left;
          sortable.offset.parent.left -= draggable.offset.parent.left -
            sortable.offset.parent.left;
          sortable.offset.parent.top -= draggable.offset.parent.top -
            sortable.offset.parent.top;

          draggable._trigger( "toSortable", event );

          // Inform draggable that the helper is in a valid drop zone,
          // used solely in the revert option to handle "valid/invalid".
          draggable.dropped = sortable.element;

          // Need to refreshPositions of all sortables in the case that
          // adding to one sortable changes the location of the other sortables (#9675)
          $.each( draggable.sortables, function() {
            this.refreshPositions();
          } );

          // Hack so receive/update callbacks work (mostly)
          draggable.currentItem = draggable.element;
          sortable.fromOutside = draggable;
        }

        if ( sortable.currentItem ) {
          sortable._mouseDrag( event );

          // Copy the sortable's position because the draggable's can potentially reflect
          // a relative position, while sortable is always absolute, which the dragged
          // element has now become. (#8809)
          ui.position = sortable.position;
        }
      } else {

        // If it doesn't intersect with the sortable, and it intersected before,
        // we fake the drag stop of the sortable, but make sure it doesn't remove
        // the helper by using cancelHelperRemoval.
        if ( sortable.isOver ) {

          sortable.isOver = 0;
          sortable.cancelHelperRemoval = true;

          // Calling sortable's mouseStop would trigger a revert,
          // so revert must be temporarily false until after mouseStop is called.
          sortable.options._revert = sortable.options.revert;
          sortable.options.revert = false;

          sortable._trigger( "out", event, sortable._uiHash( sortable ) );
          sortable._mouseStop( event, true );

          // Restore sortable behaviors that were modfied
          // when the draggable entered the sortable area (#9481)
          sortable.options.revert = sortable.options._revert;
          sortable.options.helper = sortable.options._helper;

          if ( sortable.placeholder ) {
            sortable.placeholder.remove();
          }

          // Restore and recalculate the draggable's offset considering the sortable
          // may have modified them in unexpected ways. (#8809, #10669)
          ui.helper.appendTo( draggable._parent );
          draggable._refreshOffsets( event );
          ui.position = draggable._generatePosition( event, true );

          draggable._trigger( "fromSortable", event );

          // Inform draggable that the helper is no longer in a valid drop zone
          draggable.dropped = false;

          // Need to refreshPositions of all sortables just in case removing
          // from one sortable changes the location of other sortables (#9675)
          $.each( draggable.sortables, function() {
            this.refreshPositions();
          } );
        }
      }
    } );
  }
} );

$.ui.plugin.add( "draggable", "cursor", {
  start: function( event, ui, instance ) {
    var t = $( "body" ),
      o = instance.options;

    if ( t.css( "cursor" ) ) {
      o._cursor = t.css( "cursor" );
    }
    t.css( "cursor", o.cursor );
  },
  stop: function( event, ui, instance ) {
    var o = instance.options;
    if ( o._cursor ) {
      $( "body" ).css( "cursor", o._cursor );
    }
  }
} );

$.ui.plugin.add( "draggable", "opacity", {
  start: function( event, ui, instance ) {
    var t = $( ui.helper ),
      o = instance.options;
    if ( t.css( "opacity" ) ) {
      o._opacity = t.css( "opacity" );
    }
    t.css( "opacity", o.opacity );
  },
  stop: function( event, ui, instance ) {
    var o = instance.options;
    if ( o._opacity ) {
      $( ui.helper ).css( "opacity", o._opacity );
    }
  }
} );

$.ui.plugin.add( "draggable", "scroll", {
  start: function( event, ui, i ) {
    if ( !i.scrollParentNotHidden ) {
      i.scrollParentNotHidden = i.helper.scrollParent( false );
    }

    if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
        i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
      i.overflowOffset = i.scrollParentNotHidden.offset();
    }
  },
  drag: function( event, ui, i  ) {

    var o = i.options,
      scrolled = false,
      scrollParent = i.scrollParentNotHidden[ 0 ],
      document = i.document[ 0 ];

    if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
      if ( !o.axis || o.axis !== "x" ) {
        if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
            o.scrollSensitivity ) {
          scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
        } else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
          scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
        }
      }

      if ( !o.axis || o.axis !== "y" ) {
        if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
            o.scrollSensitivity ) {
          scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
        } else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
          scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
        }
      }

    } else {

      if ( !o.axis || o.axis !== "x" ) {
        if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
          scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
        } else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
            o.scrollSensitivity ) {
          scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
        }
      }

      if ( !o.axis || o.axis !== "y" ) {
        if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
          scrolled = $( document ).scrollLeft(
            $( document ).scrollLeft() - o.scrollSpeed
          );
        } else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
            o.scrollSensitivity ) {
          scrolled = $( document ).scrollLeft(
            $( document ).scrollLeft() + o.scrollSpeed
          );
        }
      }

    }

    if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
      $.ui.ddmanager.prepareOffsets( i, event );
    }

  }
} );

$.ui.plugin.add( "draggable", "snap", {
  start: function( event, ui, i ) {

    var o = i.options;

    i.snapElements = [];

    $( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
      .each( function() {
        var $t = $( this ),
          $o = $t.offset();
        if ( this !== i.element[ 0 ] ) {
          i.snapElements.push( {
            item: this,
            width: $t.outerWidth(), height: $t.outerHeight(),
            top: $o.top, left: $o.left
          } );
        }
      } );

  },
  drag: function( event, ui, inst ) {

    var ts, bs, ls, rs, l, r, t, b, i, first,
      o = inst.options,
      d = o.snapTolerance,
      x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
      y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

    for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

      l = inst.snapElements[ i ].left - inst.margins.left;
      r = l + inst.snapElements[ i ].width;
      t = inst.snapElements[ i ].top - inst.margins.top;
      b = t + inst.snapElements[ i ].height;

      if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
          !$.contains( inst.snapElements[ i ].item.ownerDocument,
          inst.snapElements[ i ].item ) ) {
        if ( inst.snapElements[ i ].snapping ) {
          ( inst.options.snap.release &&
            inst.options.snap.release.call(
              inst.element,
              event,
              $.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
            ) );
        }
        inst.snapElements[ i ].snapping = false;
        continue;
      }

      if ( o.snapMode !== "inner" ) {
        ts = Math.abs( t - y2 ) <= d;
        bs = Math.abs( b - y1 ) <= d;
        ls = Math.abs( l - x2 ) <= d;
        rs = Math.abs( r - x1 ) <= d;
        if ( ts ) {
          ui.position.top = inst._convertPositionTo( "relative", {
            top: t - inst.helperProportions.height,
            left: 0
          } ).top;
        }
        if ( bs ) {
          ui.position.top = inst._convertPositionTo( "relative", {
            top: b,
            left: 0
          } ).top;
        }
        if ( ls ) {
          ui.position.left = inst._convertPositionTo( "relative", {
            top: 0,
            left: l - inst.helperProportions.width
          } ).left;
        }
        if ( rs ) {
          ui.position.left = inst._convertPositionTo( "relative", {
            top: 0,
            left: r
          } ).left;
        }
      }

      first = ( ts || bs || ls || rs );

      if ( o.snapMode !== "outer" ) {
        ts = Math.abs( t - y1 ) <= d;
        bs = Math.abs( b - y2 ) <= d;
        ls = Math.abs( l - x1 ) <= d;
        rs = Math.abs( r - x2 ) <= d;
        if ( ts ) {
          ui.position.top = inst._convertPositionTo( "relative", {
            top: t,
            left: 0
          } ).top;
        }
        if ( bs ) {
          ui.position.top = inst._convertPositionTo( "relative", {
            top: b - inst.helperProportions.height,
            left: 0
          } ).top;
        }
        if ( ls ) {
          ui.position.left = inst._convertPositionTo( "relative", {
            top: 0,
            left: l
          } ).left;
        }
        if ( rs ) {
          ui.position.left = inst._convertPositionTo( "relative", {
            top: 0,
            left: r - inst.helperProportions.width
          } ).left;
        }
      }

      if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
        ( inst.options.snap.snap &&
          inst.options.snap.snap.call(
            inst.element,
            event,
            $.extend( inst._uiHash(), {
              snapItem: inst.snapElements[ i ].item
            } ) ) );
      }
      inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

    }

  }
} );

$.ui.plugin.add( "draggable", "stack", {
  start: function( event, ui, instance ) {
    var min,
      o = instance.options,
      group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
        return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
          ( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
      } );

    if ( !group.length ) { return; }

    min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
    $( group ).each( function( i ) {
      $( this ).css( "zIndex", min + i );
    } );
    this.css( "zIndex", ( min + group.length ) );
  }
} );

$.ui.plugin.add( "draggable", "zIndex", {
  start: function( event, ui, instance ) {
    var t = $( ui.helper ),
      o = instance.options;

    if ( t.css( "zIndex" ) ) {
      o._zIndex = t.css( "zIndex" );
    }
    t.css( "zIndex", o.zIndex );
  },
  stop: function( event, ui, instance ) {
    var o = instance.options;

    if ( o._zIndex ) {
      $( ui.helper ).css( "zIndex", o._zIndex );
    }
  }
} );

var widgetsDraggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.resizable", $.ui.mouse, {
  version: "1.12.1",
  widgetEventPrefix: "resize",
  options: {
    alsoResize: false,
    animate: false,
    animateDuration: "slow",
    animateEasing: "swing",
    aspectRatio: false,
    autoHide: false,
    classes: {
      "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
    },
    containment: false,
    ghost: false,
    grid: false,
    handles: "e,s,se",
    helper: false,
    maxHeight: null,
    maxWidth: null,
    minHeight: 10,
    minWidth: 10,

    // See #7960
    zIndex: 90,

    // Callbacks
    resize: null,
    start: null,
    stop: null
  },

  _num: function( value ) {
    return parseFloat( value ) || 0;
  },

  _isNumber: function( value ) {
    return !isNaN( parseFloat( value ) );
  },

  _hasScroll: function( el, a ) {

    if ( $( el ).css( "overflow" ) === "hidden" ) {
      return false;
    }

    var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
      has = false;

    if ( el[ scroll ] > 0 ) {
      return true;
    }

    // TODO: determine which cases actually cause this to happen
    // if the element doesn't have the scroll set, see if it's possible to
    // set the scroll
    el[ scroll ] = 1;
    has = ( el[ scroll ] > 0 );
    el[ scroll ] = 0;
    return has;
  },

  _create: function() {

    var margins,
      o = this.options,
      that = this;
    this._addClass( "ui-resizable" );

    $.extend( this, {
      _aspectRatio: !!( o.aspectRatio ),
      aspectRatio: o.aspectRatio,
      originalElement: this.element,
      _proportionallyResizeElements: [],
      _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
    } );

    // Wrap the element if it cannot hold child nodes
    if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

      this.element.wrap(
        $( "<div class='ui-wrapper' style='overflow: hidden;'></div>" ).css( {
          position: this.element.css( "position" ),
          width: this.element.outerWidth(),
          height: this.element.outerHeight(),
          top: this.element.css( "top" ),
          left: this.element.css( "left" )
        } )
      );

      this.element = this.element.parent().data(
        "ui-resizable", this.element.resizable( "instance" )
      );

      this.elementIsWrapper = true;

      margins = {
        marginTop: this.originalElement.css( "marginTop" ),
        marginRight: this.originalElement.css( "marginRight" ),
        marginBottom: this.originalElement.css( "marginBottom" ),
        marginLeft: this.originalElement.css( "marginLeft" )
      };

      this.element.css( margins );
      this.originalElement.css( "margin", 0 );

      // support: Safari
      // Prevent Safari textarea resize
      this.originalResizeStyle = this.originalElement.css( "resize" );
      this.originalElement.css( "resize", "none" );

      this._proportionallyResizeElements.push( this.originalElement.css( {
        position: "static",
        zoom: 1,
        display: "block"
      } ) );

      // Support: IE9
      // avoid IE jump (hard set the margin)
      this.originalElement.css( margins );

      this._proportionallyResize();
    }

    this._setupHandles();

    if ( o.autoHide ) {
      $( this.element )
        .on( "mouseenter", function() {
          if ( o.disabled ) {
            return;
          }
          that._removeClass( "ui-resizable-autohide" );
          that._handles.show();
        } )
        .on( "mouseleave", function() {
          if ( o.disabled ) {
            return;
          }
          if ( !that.resizing ) {
            that._addClass( "ui-resizable-autohide" );
            that._handles.hide();
          }
        } );
    }

    this._mouseInit();
  },

  _destroy: function() {

    this._mouseDestroy();

    var wrapper,
      _destroy = function( exp ) {
        $( exp )
          .removeData( "resizable" )
          .removeData( "ui-resizable" )
          .off( ".resizable" )
          .find( ".ui-resizable-handle" )
            .remove();
      };

    // TODO: Unwrap at same DOM position
    if ( this.elementIsWrapper ) {
      _destroy( this.element );
      wrapper = this.element;
      this.originalElement.css( {
        position: wrapper.css( "position" ),
        width: wrapper.outerWidth(),
        height: wrapper.outerHeight(),
        top: wrapper.css( "top" ),
        left: wrapper.css( "left" )
      } ).insertAfter( wrapper );
      wrapper.remove();
    }

    this.originalElement.css( "resize", this.originalResizeStyle );
    _destroy( this.originalElement );

    return this;
  },

  _setOption: function( key, value ) {
    this._super( key, value );

    switch ( key ) {
    case "handles":
      this._removeHandles();
      this._setupHandles();
      break;
    default:
      break;
    }
  },

  _setupHandles: function() {
    var o = this.options, handle, i, n, hname, axis, that = this;
    this.handles = o.handles ||
      ( !$( ".ui-resizable-handle", this.element ).length ?
        "e,s,se" : {
          n: ".ui-resizable-n",
          e: ".ui-resizable-e",
          s: ".ui-resizable-s",
          w: ".ui-resizable-w",
          se: ".ui-resizable-se",
          sw: ".ui-resizable-sw",
          ne: ".ui-resizable-ne",
          nw: ".ui-resizable-nw"
        } );

    this._handles = $();
    if ( this.handles.constructor === String ) {

      if ( this.handles === "all" ) {
        this.handles = "n,e,s,w,se,sw,ne,nw";
      }

      n = this.handles.split( "," );
      this.handles = {};

      for ( i = 0; i < n.length; i++ ) {

        handle = $.trim( n[ i ] );
        hname = "ui-resizable-" + handle;
        axis = $( "<div>" );
        this._addClass( axis, "ui-resizable-handle " + hname );

        axis.css( { zIndex: o.zIndex } );

        this.handles[ handle ] = ".ui-resizable-" + handle;
        this.element.append( axis );
      }

    }

    this._renderAxis = function( target ) {

      var i, axis, padPos, padWrapper;

      target = target || this.element;

      for ( i in this.handles ) {

        if ( this.handles[ i ].constructor === String ) {
          this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
        } else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
          this.handles[ i ] = $( this.handles[ i ] );
          this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
        }

        if ( this.elementIsWrapper &&
            this.originalElement[ 0 ]
              .nodeName
              .match( /^(textarea|input|select|button)$/i ) ) {
          axis = $( this.handles[ i ], this.element );

          padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
            axis.outerHeight() :
            axis.outerWidth();

          padPos = [ "padding",
            /ne|nw|n/.test( i ) ? "Top" :
            /se|sw|s/.test( i ) ? "Bottom" :
            /^e$/.test( i ) ? "Right" : "Left" ].join( "" );

          target.css( padPos, padWrapper );

          this._proportionallyResize();
        }

        this._handles = this._handles.add( this.handles[ i ] );
      }
    };

    // TODO: make renderAxis a prototype function
    this._renderAxis( this.element );

    this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
    this._handles.disableSelection();

    this._handles.on( "mouseover", function() {
      if ( !that.resizing ) {
        if ( this.className ) {
          axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
        }
        that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
      }
    } );

    if ( o.autoHide ) {
      this._handles.hide();
      this._addClass( "ui-resizable-autohide" );
    }
  },

  _removeHandles: function() {
    this._handles.remove();
  },

  _mouseCapture: function( event ) {
    var i, handle,
      capture = false;

    for ( i in this.handles ) {
      handle = $( this.handles[ i ] )[ 0 ];
      if ( handle === event.target || $.contains( handle, event.target ) ) {
        capture = true;
      }
    }

    return !this.options.disabled && capture;
  },

  _mouseStart: function( event ) {

    var curleft, curtop, cursor,
      o = this.options,
      el = this.element;

    this.resizing = true;

    this._renderProxy();

    curleft = this._num( this.helper.css( "left" ) );
    curtop = this._num( this.helper.css( "top" ) );

    if ( o.containment ) {
      curleft += $( o.containment ).scrollLeft() || 0;
      curtop += $( o.containment ).scrollTop() || 0;
    }

    this.offset = this.helper.offset();
    this.position = { left: curleft, top: curtop };

    this.size = this._helper ? {
        width: this.helper.width(),
        height: this.helper.height()
      } : {
        width: el.width(),
        height: el.height()
      };

    this.originalSize = this._helper ? {
        width: el.outerWidth(),
        height: el.outerHeight()
      } : {
        width: el.width(),
        height: el.height()
      };

    this.sizeDiff = {
      width: el.outerWidth() - el.width(),
      height: el.outerHeight() - el.height()
    };

    this.originalPosition = { left: curleft, top: curtop };
    this.originalMousePosition = { left: event.pageX, top: event.pageY };

    this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
      o.aspectRatio :
      ( ( this.originalSize.width / this.originalSize.height ) || 1 );

    cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
    $( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

    this._addClass( "ui-resizable-resizing" );
    this._propagate( "start", event );
    return true;
  },

  _mouseDrag: function( event ) {

    var data, props,
      smp = this.originalMousePosition,
      a = this.axis,
      dx = ( event.pageX - smp.left ) || 0,
      dy = ( event.pageY - smp.top ) || 0,
      trigger = this._change[ a ];

    this._updatePrevProperties();

    if ( !trigger ) {
      return false;
    }

    data = trigger.apply( this, [ event, dx, dy ] );

    this._updateVirtualBoundaries( event.shiftKey );
    if ( this._aspectRatio || event.shiftKey ) {
      data = this._updateRatio( data, event );
    }

    data = this._respectSize( data, event );

    this._updateCache( data );

    this._propagate( "resize", event );

    props = this._applyChanges();

    if ( !this._helper && this._proportionallyResizeElements.length ) {
      this._proportionallyResize();
    }

    if ( !$.isEmptyObject( props ) ) {
      this._updatePrevProperties();
      this._trigger( "resize", event, this.ui() );
      this._applyChanges();
    }

    return false;
  },

  _mouseStop: function( event ) {

    this.resizing = false;
    var pr, ista, soffseth, soffsetw, s, left, top,
      o = this.options, that = this;

    if ( this._helper ) {

      pr = this._proportionallyResizeElements;
      ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
      soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
      soffsetw = ista ? 0 : that.sizeDiff.width;

      s = {
        width: ( that.helper.width()  - soffsetw ),
        height: ( that.helper.height() - soffseth )
      };
      left = ( parseFloat( that.element.css( "left" ) ) +
        ( that.position.left - that.originalPosition.left ) ) || null;
      top = ( parseFloat( that.element.css( "top" ) ) +
        ( that.position.top - that.originalPosition.top ) ) || null;

      if ( !o.animate ) {
        this.element.css( $.extend( s, { top: top, left: left } ) );
      }

      that.helper.height( that.size.height );
      that.helper.width( that.size.width );

      if ( this._helper && !o.animate ) {
        this._proportionallyResize();
      }
    }

    $( "body" ).css( "cursor", "auto" );

    this._removeClass( "ui-resizable-resizing" );

    this._propagate( "stop", event );

    if ( this._helper ) {
      this.helper.remove();
    }

    return false;

  },

  _updatePrevProperties: function() {
    this.prevPosition = {
      top: this.position.top,
      left: this.position.left
    };
    this.prevSize = {
      width: this.size.width,
      height: this.size.height
    };
  },

  _applyChanges: function() {
    var props = {};

    if ( this.position.top !== this.prevPosition.top ) {
      props.top = this.position.top + "px";
    }
    if ( this.position.left !== this.prevPosition.left ) {
      props.left = this.position.left + "px";
    }
    if ( this.size.width !== this.prevSize.width ) {
      props.width = this.size.width + "px";
    }
    if ( this.size.height !== this.prevSize.height ) {
      props.height = this.size.height + "px";
    }

    this.helper.css( props );

    return props;
  },

  _updateVirtualBoundaries: function( forceAspectRatio ) {
    var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
      o = this.options;

    b = {
      minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
      maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
      minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
      maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
    };

    if ( this._aspectRatio || forceAspectRatio ) {
      pMinWidth = b.minHeight * this.aspectRatio;
      pMinHeight = b.minWidth / this.aspectRatio;
      pMaxWidth = b.maxHeight * this.aspectRatio;
      pMaxHeight = b.maxWidth / this.aspectRatio;

      if ( pMinWidth > b.minWidth ) {
        b.minWidth = pMinWidth;
      }
      if ( pMinHeight > b.minHeight ) {
        b.minHeight = pMinHeight;
      }
      if ( pMaxWidth < b.maxWidth ) {
        b.maxWidth = pMaxWidth;
      }
      if ( pMaxHeight < b.maxHeight ) {
        b.maxHeight = pMaxHeight;
      }
    }
    this._vBoundaries = b;
  },

  _updateCache: function( data ) {
    this.offset = this.helper.offset();
    if ( this._isNumber( data.left ) ) {
      this.position.left = data.left;
    }
    if ( this._isNumber( data.top ) ) {
      this.position.top = data.top;
    }
    if ( this._isNumber( data.height ) ) {
      this.size.height = data.height;
    }
    if ( this._isNumber( data.width ) ) {
      this.size.width = data.width;
    }
  },

  _updateRatio: function( data ) {

    var cpos = this.position,
      csize = this.size,
      a = this.axis;

    if ( this._isNumber( data.height ) ) {
      data.width = ( data.height * this.aspectRatio );
    } else if ( this._isNumber( data.width ) ) {
      data.height = ( data.width / this.aspectRatio );
    }

    if ( a === "sw" ) {
      data.left = cpos.left + ( csize.width - data.width );
      data.top = null;
    }
    if ( a === "nw" ) {
      data.top = cpos.top + ( csize.height - data.height );
      data.left = cpos.left + ( csize.width - data.width );
    }

    return data;
  },

  _respectSize: function( data ) {

    var o = this._vBoundaries,
      a = this.axis,
      ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
      ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
      isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
      isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
      dw = this.originalPosition.left + this.originalSize.width,
      dh = this.originalPosition.top + this.originalSize.height,
      cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
    if ( isminw ) {
      data.width = o.minWidth;
    }
    if ( isminh ) {
      data.height = o.minHeight;
    }
    if ( ismaxw ) {
      data.width = o.maxWidth;
    }
    if ( ismaxh ) {
      data.height = o.maxHeight;
    }

    if ( isminw && cw ) {
      data.left = dw - o.minWidth;
    }
    if ( ismaxw && cw ) {
      data.left = dw - o.maxWidth;
    }
    if ( isminh && ch ) {
      data.top = dh - o.minHeight;
    }
    if ( ismaxh && ch ) {
      data.top = dh - o.maxHeight;
    }

    // Fixing jump error on top/left - bug #2330
    if ( !data.width && !data.height && !data.left && data.top ) {
      data.top = null;
    } else if ( !data.width && !data.height && !data.top && data.left ) {
      data.left = null;
    }

    return data;
  },

  _getPaddingPlusBorderDimensions: function( element ) {
    var i = 0,
      widths = [],
      borders = [
        element.css( "borderTopWidth" ),
        element.css( "borderRightWidth" ),
        element.css( "borderBottomWidth" ),
        element.css( "borderLeftWidth" )
      ],
      paddings = [
        element.css( "paddingTop" ),
        element.css( "paddingRight" ),
        element.css( "paddingBottom" ),
        element.css( "paddingLeft" )
      ];

    for ( ; i < 4; i++ ) {
      widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
      widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
    }

    return {
      height: widths[ 0 ] + widths[ 2 ],
      width: widths[ 1 ] + widths[ 3 ]
    };
  },

  _proportionallyResize: function() {

    if ( !this._proportionallyResizeElements.length ) {
      return;
    }

    var prel,
      i = 0,
      element = this.helper || this.element;

    for ( ; i < this._proportionallyResizeElements.length; i++ ) {

      prel = this._proportionallyResizeElements[ i ];

      // TODO: Seems like a bug to cache this.outerDimensions
      // considering that we are in a loop.
      if ( !this.outerDimensions ) {
        this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
      }

      prel.css( {
        height: ( element.height() - this.outerDimensions.height ) || 0,
        width: ( element.width() - this.outerDimensions.width ) || 0
      } );

    }

  },

  _renderProxy: function() {

    var el = this.element, o = this.options;
    this.elementOffset = el.offset();

    if ( this._helper ) {

      this.helper = this.helper || $( "<div style='overflow:hidden;'></div>" );

      this._addClass( this.helper, this._helper );
      this.helper.css( {
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
        position: "absolute",
        left: this.elementOffset.left + "px",
        top: this.elementOffset.top + "px",
        zIndex: ++o.zIndex //TODO: Don't modify option
      } );

      this.helper
        .appendTo( "body" )
        .disableSelection();

    } else {
      this.helper = this.element;
    }

  },

  _change: {
    e: function( event, dx ) {
      return { width: this.originalSize.width + dx };
    },
    w: function( event, dx ) {
      var cs = this.originalSize, sp = this.originalPosition;
      return { left: sp.left + dx, width: cs.width - dx };
    },
    n: function( event, dx, dy ) {
      var cs = this.originalSize, sp = this.originalPosition;
      return { top: sp.top + dy, height: cs.height - dy };
    },
    s: function( event, dx, dy ) {
      return { height: this.originalSize.height + dy };
    },
    se: function( event, dx, dy ) {
      return $.extend( this._change.s.apply( this, arguments ),
        this._change.e.apply( this, [ event, dx, dy ] ) );
    },
    sw: function( event, dx, dy ) {
      return $.extend( this._change.s.apply( this, arguments ),
        this._change.w.apply( this, [ event, dx, dy ] ) );
    },
    ne: function( event, dx, dy ) {
      return $.extend( this._change.n.apply( this, arguments ),
        this._change.e.apply( this, [ event, dx, dy ] ) );
    },
    nw: function( event, dx, dy ) {
      return $.extend( this._change.n.apply( this, arguments ),
        this._change.w.apply( this, [ event, dx, dy ] ) );
    }
  },

  _propagate: function( n, event ) {
    $.ui.plugin.call( this, n, [ event, this.ui() ] );
    ( n !== "resize" && this._trigger( n, event, this.ui() ) );
  },

  plugins: {},

  ui: function() {
    return {
      originalElement: this.originalElement,
      element: this.element,
      helper: this.helper,
      position: this.position,
      size: this.size,
      originalSize: this.originalSize,
      originalPosition: this.originalPosition
    };
  }

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

  stop: function( event ) {
    var that = $( this ).resizable( "instance" ),
      o = that.options,
      pr = that._proportionallyResizeElements,
      ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
      soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
      soffsetw = ista ? 0 : that.sizeDiff.width,
      style = {
        width: ( that.size.width - soffsetw ),
        height: ( that.size.height - soffseth )
      },
      left = ( parseFloat( that.element.css( "left" ) ) +
        ( that.position.left - that.originalPosition.left ) ) || null,
      top = ( parseFloat( that.element.css( "top" ) ) +
        ( that.position.top - that.originalPosition.top ) ) || null;

    that.element.animate(
      $.extend( style, top && left ? { top: top, left: left } : {} ), {
        duration: o.animateDuration,
        easing: o.animateEasing,
        step: function() {

          var data = {
            width: parseFloat( that.element.css( "width" ) ),
            height: parseFloat( that.element.css( "height" ) ),
            top: parseFloat( that.element.css( "top" ) ),
            left: parseFloat( that.element.css( "left" ) )
          };

          if ( pr && pr.length ) {
            $( pr[ 0 ] ).css( { width: data.width, height: data.height } );
          }

          // Propagating resize, and updating values for each animation step
          that._updateCache( data );
          that._propagate( "resize", event );

        }
      }
    );
  }

} );

$.ui.plugin.add( "resizable", "containment", {

  start: function() {
    var element, p, co, ch, cw, width, height,
      that = $( this ).resizable( "instance" ),
      o = that.options,
      el = that.element,
      oc = o.containment,
      ce = ( oc instanceof $ ) ?
        oc.get( 0 ) :
        ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

    if ( !ce ) {
      return;
    }

    that.containerElement = $( ce );

    if ( /document/.test( oc ) || oc === document ) {
      that.containerOffset = {
        left: 0,
        top: 0
      };
      that.containerPosition = {
        left: 0,
        top: 0
      };

      that.parentData = {
        element: $( document ),
        left: 0,
        top: 0,
        width: $( document ).width(),
        height: $( document ).height() || document.body.parentNode.scrollHeight
      };
    } else {
      element = $( ce );
      p = [];
      $( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
        p[ i ] = that._num( element.css( "padding" + name ) );
      } );

      that.containerOffset = element.offset();
      that.containerPosition = element.position();
      that.containerSize = {
        height: ( element.innerHeight() - p[ 3 ] ),
        width: ( element.innerWidth() - p[ 1 ] )
      };

      co = that.containerOffset;
      ch = that.containerSize.height;
      cw = that.containerSize.width;
      width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
      height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

      that.parentData = {
        element: ce,
        left: co.left,
        top: co.top,
        width: width,
        height: height
      };
    }
  },

  resize: function( event ) {
    var woset, hoset, isParent, isOffsetRelative,
      that = $( this ).resizable( "instance" ),
      o = that.options,
      co = that.containerOffset,
      cp = that.position,
      pRatio = that._aspectRatio || event.shiftKey,
      cop = {
        top: 0,
        left: 0
      },
      ce = that.containerElement,
      continueResize = true;

    if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
      cop = co;
    }

    if ( cp.left < ( that._helper ? co.left : 0 ) ) {
      that.size.width = that.size.width +
        ( that._helper ?
          ( that.position.left - co.left ) :
          ( that.position.left - cop.left ) );

      if ( pRatio ) {
        that.size.height = that.size.width / that.aspectRatio;
        continueResize = false;
      }
      that.position.left = o.helper ? co.left : 0;
    }

    if ( cp.top < ( that._helper ? co.top : 0 ) ) {
      that.size.height = that.size.height +
        ( that._helper ?
          ( that.position.top - co.top ) :
          that.position.top );

      if ( pRatio ) {
        that.size.width = that.size.height * that.aspectRatio;
        continueResize = false;
      }
      that.position.top = that._helper ? co.top : 0;
    }

    isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
    isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

    if ( isParent && isOffsetRelative ) {
      that.offset.left = that.parentData.left + that.position.left;
      that.offset.top = that.parentData.top + that.position.top;
    } else {
      that.offset.left = that.element.offset().left;
      that.offset.top = that.element.offset().top;
    }

    woset = Math.abs( that.sizeDiff.width +
      ( that._helper ?
        that.offset.left - cop.left :
        ( that.offset.left - co.left ) ) );

    hoset = Math.abs( that.sizeDiff.height +
      ( that._helper ?
        that.offset.top - cop.top :
        ( that.offset.top - co.top ) ) );

    if ( woset + that.size.width >= that.parentData.width ) {
      that.size.width = that.parentData.width - woset;
      if ( pRatio ) {
        that.size.height = that.size.width / that.aspectRatio;
        continueResize = false;
      }
    }

    if ( hoset + that.size.height >= that.parentData.height ) {
      that.size.height = that.parentData.height - hoset;
      if ( pRatio ) {
        that.size.width = that.size.height * that.aspectRatio;
        continueResize = false;
      }
    }

    if ( !continueResize ) {
      that.position.left = that.prevPosition.left;
      that.position.top = that.prevPosition.top;
      that.size.width = that.prevSize.width;
      that.size.height = that.prevSize.height;
    }
  },

  stop: function() {
    var that = $( this ).resizable( "instance" ),
      o = that.options,
      co = that.containerOffset,
      cop = that.containerPosition,
      ce = that.containerElement,
      helper = $( that.helper ),
      ho = helper.offset(),
      w = helper.outerWidth() - that.sizeDiff.width,
      h = helper.outerHeight() - that.sizeDiff.height;

    if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
      $( this ).css( {
        left: ho.left - cop.left - co.left,
        width: w,
        height: h
      } );
    }

    if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
      $( this ).css( {
        left: ho.left - cop.left - co.left,
        width: w,
        height: h
      } );
    }
  }
} );

$.ui.plugin.add( "resizable", "alsoResize", {

  start: function() {
    var that = $( this ).resizable( "instance" ),
      o = that.options;

    $( o.alsoResize ).each( function() {
      var el = $( this );
      el.data( "ui-resizable-alsoresize", {
        width: parseFloat( el.width() ), height: parseFloat( el.height() ),
        left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
      } );
    } );
  },

  resize: function( event, ui ) {
    var that = $( this ).resizable( "instance" ),
      o = that.options,
      os = that.originalSize,
      op = that.originalPosition,
      delta = {
        height: ( that.size.height - os.height ) || 0,
        width: ( that.size.width - os.width ) || 0,
        top: ( that.position.top - op.top ) || 0,
        left: ( that.position.left - op.left ) || 0
      };

      $( o.alsoResize ).each( function() {
        var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
          css = el.parents( ui.originalElement[ 0 ] ).length ?
              [ "width", "height" ] :
              [ "width", "height", "top", "left" ];

        $.each( css, function( i, prop ) {
          var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
          if ( sum && sum >= 0 ) {
            style[ prop ] = sum || null;
          }
        } );

        el.css( style );
      } );
  },

  stop: function() {
    $( this ).removeData( "ui-resizable-alsoresize" );
  }
} );

$.ui.plugin.add( "resizable", "ghost", {

  start: function() {

    var that = $( this ).resizable( "instance" ), cs = that.size;

    that.ghost = that.originalElement.clone();
    that.ghost.css( {
      opacity: 0.25,
      display: "block",
      position: "relative",
      height: cs.height,
      width: cs.width,
      margin: 0,
      left: 0,
      top: 0
    } );

    that._addClass( that.ghost, "ui-resizable-ghost" );

    // DEPRECATED
    // TODO: remove after 1.12
    if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

      // Ghost option
      that.ghost.addClass( this.options.ghost );
    }

    that.ghost.appendTo( that.helper );

  },

  resize: function() {
    var that = $( this ).resizable( "instance" );
    if ( that.ghost ) {
      that.ghost.css( {
        position: "relative",
        height: that.size.height,
        width: that.size.width
      } );
    }
  },

  stop: function() {
    var that = $( this ).resizable( "instance" );
    if ( that.ghost && that.helper ) {
      that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
    }
  }

} );

$.ui.plugin.add( "resizable", "grid", {

  resize: function() {
    var outerDimensions,
      that = $( this ).resizable( "instance" ),
      o = that.options,
      cs = that.size,
      os = that.originalSize,
      op = that.originalPosition,
      a = that.axis,
      grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
      gridX = ( grid[ 0 ] || 1 ),
      gridY = ( grid[ 1 ] || 1 ),
      ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
      oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
      newWidth = os.width + ox,
      newHeight = os.height + oy,
      isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
      isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
      isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
      isMinHeight = o.minHeight && ( o.minHeight > newHeight );

    o.grid = grid;

    if ( isMinWidth ) {
      newWidth += gridX;
    }
    if ( isMinHeight ) {
      newHeight += gridY;
    }
    if ( isMaxWidth ) {
      newWidth -= gridX;
    }
    if ( isMaxHeight ) {
      newHeight -= gridY;
    }

    if ( /^(se|s|e)$/.test( a ) ) {
      that.size.width = newWidth;
      that.size.height = newHeight;
    } else if ( /^(ne)$/.test( a ) ) {
      that.size.width = newWidth;
      that.size.height = newHeight;
      that.position.top = op.top - oy;
    } else if ( /^(sw)$/.test( a ) ) {
      that.size.width = newWidth;
      that.size.height = newHeight;
      that.position.left = op.left - ox;
    } else {
      if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
        outerDimensions = that._getPaddingPlusBorderDimensions( this );
      }

      if ( newHeight - gridY > 0 ) {
        that.size.height = newHeight;
        that.position.top = op.top - oy;
      } else {
        newHeight = gridY - outerDimensions.height;
        that.size.height = newHeight;
        that.position.top = op.top + os.height - newHeight;
      }
      if ( newWidth - gridX > 0 ) {
        that.size.width = newWidth;
        that.position.left = op.left - ox;
      } else {
        newWidth = gridX - outerDimensions.width;
        that.size.width = newWidth;
        that.position.left = op.left + os.width - newWidth;
      }
    }
  }

} );

var widgetsResizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.dialog", {
  version: "1.12.1",
  options: {
    appendTo: "body",
    autoOpen: true,
    buttons: [],
    classes: {
      "ui-dialog": "ui-corner-all",
      "ui-dialog-titlebar": "ui-corner-all"
    },
    closeOnEscape: true,
    closeText: "Close",
    draggable: true,
    hide: null,
    height: "auto",
    maxHeight: null,
    maxWidth: null,
    minHeight: 150,
    minWidth: 150,
    modal: false,
    position: {
      my: "center",
      at: "center",
      of: window,
      collision: "fit",

      // Ensure the titlebar is always visible
      using: function( pos ) {
        var topOffset = $( this ).css( pos ).offset().top;
        if ( topOffset < 0 ) {
          $( this ).css( "top", pos.top - topOffset );
        }
      }
    },
    resizable: true,
    show: null,
    title: null,
    width: 300,

    // Callbacks
    beforeClose: null,
    close: null,
    drag: null,
    dragStart: null,
    dragStop: null,
    focus: null,
    open: null,
    resize: null,
    resizeStart: null,
    resizeStop: null
  },

  sizeRelatedOptions: {
    buttons: true,
    height: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    width: true
  },

  resizableRelatedOptions: {
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true
  },

  _create: function() {
    this.originalCss = {
      display: this.element[ 0 ].style.display,
      width: this.element[ 0 ].style.width,
      minHeight: this.element[ 0 ].style.minHeight,
      maxHeight: this.element[ 0 ].style.maxHeight,
      height: this.element[ 0 ].style.height
    };
    this.originalPosition = {
      parent: this.element.parent(),
      index: this.element.parent().children().index( this.element )
    };
    this.originalTitle = this.element.attr( "title" );
    if ( this.options.title == null && this.originalTitle != null ) {
      this.options.title = this.originalTitle;
    }

    // Dialogs can't be disabled
    if ( this.options.disabled ) {
      this.options.disabled = false;
    }

    this._createWrapper();

    this.element
      .show()
      .removeAttr( "title" )
      .appendTo( this.uiDialog );

    this._addClass( "ui-dialog-content", "ui-widget-content" );

    this._createTitlebar();
    this._createButtonPane();

    if ( this.options.draggable && $.fn.draggable ) {
      this._makeDraggable();
    }
    if ( this.options.resizable && $.fn.resizable ) {
      this._makeResizable();
    }

    this._isOpen = false;

    this._trackFocus();
  },

  _init: function() {
    if ( this.options.autoOpen ) {
      this.open();
    }
  },

  _appendTo: function() {
    var element = this.options.appendTo;
    if ( element && ( element.jquery || element.nodeType ) ) {
      return $( element );
    }
    return this.document.find( element || "body" ).eq( 0 );
  },

  _destroy: function() {
    var next,
      originalPosition = this.originalPosition;

    this._untrackInstance();
    this._destroyOverlay();

    this.element
      .removeUniqueId()
      .css( this.originalCss )

      // Without detaching first, the following becomes really slow
      .detach();

    this.uiDialog.remove();

    if ( this.originalTitle ) {
      this.element.attr( "title", this.originalTitle );
    }

    next = originalPosition.parent.children().eq( originalPosition.index );

    // Don't try to place the dialog next to itself (#8613)
    if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
      next.before( this.element );
    } else {
      originalPosition.parent.append( this.element );
    }
  },

  widget: function() {
    return this.uiDialog;
  },

  disable: $.noop,
  enable: $.noop,

  close: function( event ) {
    var that = this;

    if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
      return;
    }

    this._isOpen = false;
    this._focusedElement = null;
    this._destroyOverlay();
    this._untrackInstance();

    if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

      // Hiding a focused element doesn't trigger blur in WebKit
      // so in case we have nothing to focus on, explicitly blur the active element
      // https://bugs.webkit.org/show_bug.cgi?id=47182
      $.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
    }

    this._hide( this.uiDialog, this.options.hide, function() {
      that._trigger( "close", event );
    } );
  },

  isOpen: function() {
    return this._isOpen;
  },

  moveToTop: function() {
    this._moveToTop();
  },

  _moveToTop: function( event, silent ) {
    var moved = false,
      zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
        return +$( this ).css( "z-index" );
      } ).get(),
      zIndexMax = Math.max.apply( null, zIndices );

    if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
      this.uiDialog.css( "z-index", zIndexMax + 1 );
      moved = true;
    }

    if ( moved && !silent ) {
      this._trigger( "focus", event );
    }
    return moved;
  },

  open: function() {
    var that = this;
    if ( this._isOpen ) {
      if ( this._moveToTop() ) {
        this._focusTabbable();
      }
      return;
    }

    this._isOpen = true;
    this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

    this._size();
    this._position();
    this._createOverlay();
    this._moveToTop( null, true );

    // Ensure the overlay is moved to the top with the dialog, but only when
    // opening. The overlay shouldn't move after the dialog is open so that
    // modeless dialogs opened after the modal dialog stack properly.
    if ( this.overlay ) {
      this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
    }

    this._show( this.uiDialog, this.options.show, function() {
      that._focusTabbable();
      that._trigger( "focus" );
    } );

    // Track the dialog immediately upon openening in case a focus event
    // somehow occurs outside of the dialog before an element inside the
    // dialog is focused (#10152)
    this._makeFocusTarget();

    this._trigger( "open" );
  },

  _focusTabbable: function() {

    // Set focus to the first match:
    // 1. An element that was focused previously
    // 2. First element inside the dialog matching [autofocus]
    // 3. Tabbable element inside the content element
    // 4. Tabbable element inside the buttonpane
    // 5. The close button
    // 6. The dialog itself
    var hasFocus = this._focusedElement;
    if ( !hasFocus ) {
      hasFocus = this.element.find( "[autofocus]" );
    }
    if ( !hasFocus.length ) {
      hasFocus = this.element.find( ":tabbable" );
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
    }
    if ( !hasFocus.length ) {
      hasFocus = this.uiDialog;
    }
    hasFocus.eq( 0 ).trigger( "focus" );
  },

  _keepFocus: function( event ) {
    function checkFocus() {
      var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
        isActive = this.uiDialog[ 0 ] === activeElement ||
          $.contains( this.uiDialog[ 0 ], activeElement );
      if ( !isActive ) {
        this._focusTabbable();
      }
    }
    event.preventDefault();
    checkFocus.call( this );

    // support: IE
    // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
    // so we check again later
    this._delay( checkFocus );
  },

  _createWrapper: function() {
    this.uiDialog = $( "<div>" )
      .hide()
      .attr( {

        // Setting tabIndex makes the div focusable
        tabIndex: -1,
        role: "dialog"
      } )
      .appendTo( this._appendTo() );

    this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
    this._on( this.uiDialog, {
      keydown: function( event ) {
        if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
            event.keyCode === $.ui.keyCode.ESCAPE ) {
          event.preventDefault();
          this.close( event );
          return;
        }

        // Prevent tabbing out of dialogs
        if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
          return;
        }
        var tabbables = this.uiDialog.find( ":tabbable" ),
          first = tabbables.filter( ":first" ),
          last = tabbables.filter( ":last" );

        if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
            !event.shiftKey ) {
          this._delay( function() {
            first.trigger( "focus" );
          } );
          event.preventDefault();
        } else if ( ( event.target === first[ 0 ] ||
            event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
          this._delay( function() {
            last.trigger( "focus" );
          } );
          event.preventDefault();
        }
      },
      mousedown: function( event ) {
        if ( this._moveToTop( event ) ) {
          this._focusTabbable();
        }
      }
    } );

    // We assume that any existing aria-describedby attribute means
    // that the dialog content is marked up properly
    // otherwise we brute force the content as the description
    if ( !this.element.find( "[aria-describedby]" ).length ) {
      this.uiDialog.attr( {
        "aria-describedby": this.element.uniqueId().attr( "id" )
      } );
    }
  },

  _createTitlebar: function() {
    var uiDialogTitle;

    this.uiDialogTitlebar = $( "<div>" );
    this._addClass( this.uiDialogTitlebar,
      "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
    this._on( this.uiDialogTitlebar, {
      mousedown: function( event ) {

        // Don't prevent click on close button (#8838)
        // Focusing a dialog that is partially scrolled out of view
        // causes the browser to scroll it into view, preventing the click event
        if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

          // Dialog isn't getting focus when dragging (#8063)
          this.uiDialog.trigger( "focus" );
        }
      }
    } );

    // Support: IE
    // Use type="button" to prevent enter keypresses in textboxes from closing the
    // dialog in IE (#9312)
    this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
      .button( {
        label: $( "<a>" ).text( this.options.closeText ).html(),
        icon: "ui-icon-closethick",
        showLabel: false
      } )
      .appendTo( this.uiDialogTitlebar );

    this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
    this._on( this.uiDialogTitlebarClose, {
      click: function( event ) {
        event.preventDefault();
        this.close( event );
      }
    } );

    uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
    this._addClass( uiDialogTitle, "ui-dialog-title" );
    this._title( uiDialogTitle );

    this.uiDialogTitlebar.prependTo( this.uiDialog );

    this.uiDialog.attr( {
      "aria-labelledby": uiDialogTitle.attr( "id" )
    } );
  },

  _title: function( title ) {
    if ( this.options.title ) {
      title.text( this.options.title );
    } else {
      title.html( "&#160;" );
    }
  },

  _createButtonPane: function() {
    this.uiDialogButtonPane = $( "<div>" );
    this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
      "ui-widget-content ui-helper-clearfix" );

    this.uiButtonSet = $( "<div>" )
      .appendTo( this.uiDialogButtonPane );
    this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

    this._createButtons();
  },

  _createButtons: function() {
    var that = this,
      buttons = this.options.buttons;

    // If we already have a button pane, remove it
    this.uiDialogButtonPane.remove();
    this.uiButtonSet.empty();

    if ( $.isEmptyObject( buttons ) || ( $.isArray( buttons ) && !buttons.length ) ) {
      this._removeClass( this.uiDialog, "ui-dialog-buttons" );
      return;
    }

    $.each( buttons, function( name, props ) {
      var click, buttonOptions;
      props = $.isFunction( props ) ?
        { click: props, text: name } :
        props;

      // Default to a non-submitting button
      props = $.extend( { type: "button" }, props );

      // Change the context for the click callback to be the main element
      click = props.click;
      buttonOptions = {
        icon: props.icon,
        iconPosition: props.iconPosition,
        showLabel: props.showLabel,

        // Deprecated options
        icons: props.icons,
        text: props.text
      };

      delete props.click;
      delete props.icon;
      delete props.iconPosition;
      delete props.showLabel;

      // Deprecated options
      delete props.icons;
      if ( typeof props.text === "boolean" ) {
        delete props.text;
      }

      $( "<button></button>", props )
        .button( buttonOptions )
        .appendTo( that.uiButtonSet )
        .on( "click", function() {
          click.apply( that.element[ 0 ], arguments );
        } );
    } );
    this._addClass( this.uiDialog, "ui-dialog-buttons" );
    this.uiDialogButtonPane.appendTo( this.uiDialog );
  },

  _makeDraggable: function() {
    var that = this,
      options = this.options;

    function filteredUi( ui ) {
      return {
        position: ui.position,
        offset: ui.offset
      };
    }

    this.uiDialog.draggable( {
      cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
      handle: ".ui-dialog-titlebar",
      containment: "document",
      start: function( event, ui ) {
        that._addClass( $( this ), "ui-dialog-dragging" );
        that._blockFrames();
        that._trigger( "dragStart", event, filteredUi( ui ) );
      },
      drag: function( event, ui ) {
        that._trigger( "drag", event, filteredUi( ui ) );
      },
      stop: function( event, ui ) {
        var left = ui.offset.left - that.document.scrollLeft(),
          top = ui.offset.top - that.document.scrollTop();

        options.position = {
          my: "left top",
          at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
            "top" + ( top >= 0 ? "+" : "" ) + top,
          of: that.window
        };
        that._removeClass( $( this ), "ui-dialog-dragging" );
        that._unblockFrames();
        that._trigger( "dragStop", event, filteredUi( ui ) );
      }
    } );
  },

  _makeResizable: function() {
    var that = this,
      options = this.options,
      handles = options.resizable,

      // .ui-resizable has position: relative defined in the stylesheet
      // but dialogs have to use absolute or fixed positioning
      position = this.uiDialog.css( "position" ),
      resizeHandles = typeof handles === "string" ?
        handles :
        "n,e,s,w,se,sw,ne,nw";

    function filteredUi( ui ) {
      return {
        originalPosition: ui.originalPosition,
        originalSize: ui.originalSize,
        position: ui.position,
        size: ui.size
      };
    }

    this.uiDialog.resizable( {
      cancel: ".ui-dialog-content",
      containment: "document",
      alsoResize: this.element,
      maxWidth: options.maxWidth,
      maxHeight: options.maxHeight,
      minWidth: options.minWidth,
      minHeight: this._minHeight(),
      handles: resizeHandles,
      start: function( event, ui ) {
        that._addClass( $( this ), "ui-dialog-resizing" );
        that._blockFrames();
        that._trigger( "resizeStart", event, filteredUi( ui ) );
      },
      resize: function( event, ui ) {
        that._trigger( "resize", event, filteredUi( ui ) );
      },
      stop: function( event, ui ) {
        var offset = that.uiDialog.offset(),
          left = offset.left - that.document.scrollLeft(),
          top = offset.top - that.document.scrollTop();

        options.height = that.uiDialog.height();
        options.width = that.uiDialog.width();
        options.position = {
          my: "left top",
          at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
            "top" + ( top >= 0 ? "+" : "" ) + top,
          of: that.window
        };
        that._removeClass( $( this ), "ui-dialog-resizing" );
        that._unblockFrames();
        that._trigger( "resizeStop", event, filteredUi( ui ) );
      }
    } )
      .css( "position", position );
  },

  _trackFocus: function() {
    this._on( this.widget(), {
      focusin: function( event ) {
        this._makeFocusTarget();
        this._focusedElement = $( event.target );
      }
    } );
  },

  _makeFocusTarget: function() {
    this._untrackInstance();
    this._trackingInstances().unshift( this );
  },

  _untrackInstance: function() {
    var instances = this._trackingInstances(),
      exists = $.inArray( this, instances );
    if ( exists !== -1 ) {
      instances.splice( exists, 1 );
    }
  },

  _trackingInstances: function() {
    var instances = this.document.data( "ui-dialog-instances" );
    if ( !instances ) {
      instances = [];
      this.document.data( "ui-dialog-instances", instances );
    }
    return instances;
  },

  _minHeight: function() {
    var options = this.options;

    return options.height === "auto" ?
      options.minHeight :
      Math.min( options.minHeight, options.height );
  },

  _position: function() {

    // Need to show the dialog to get the actual offset in the position plugin
    var isVisible = this.uiDialog.is( ":visible" );
    if ( !isVisible ) {
      this.uiDialog.show();
    }
    this.uiDialog.position( this.options.position );
    if ( !isVisible ) {
      this.uiDialog.hide();
    }
  },

  _setOptions: function( options ) {
    var that = this,
      resize = false,
      resizableOptions = {};

    $.each( options, function( key, value ) {
      that._setOption( key, value );

      if ( key in that.sizeRelatedOptions ) {
        resize = true;
      }
      if ( key in that.resizableRelatedOptions ) {
        resizableOptions[ key ] = value;
      }
    } );

    if ( resize ) {
      this._size();
      this._position();
    }
    if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
      this.uiDialog.resizable( "option", resizableOptions );
    }
  },

  _setOption: function( key, value ) {
    var isDraggable, isResizable,
      uiDialog = this.uiDialog;

    if ( key === "disabled" ) {
      return;
    }

    this._super( key, value );

    if ( key === "appendTo" ) {
      this.uiDialog.appendTo( this._appendTo() );
    }

    if ( key === "buttons" ) {
      this._createButtons();
    }

    if ( key === "closeText" ) {
      this.uiDialogTitlebarClose.button( {

        // Ensure that we always pass a string
        label: $( "<a>" ).text( "" + this.options.closeText ).html()
      } );
    }

    if ( key === "draggable" ) {
      isDraggable = uiDialog.is( ":data(ui-draggable)" );
      if ( isDraggable && !value ) {
        uiDialog.draggable( "destroy" );
      }

      if ( !isDraggable && value ) {
        this._makeDraggable();
      }
    }

    if ( key === "position" ) {
      this._position();
    }

    if ( key === "resizable" ) {

      // currently resizable, becoming non-resizable
      isResizable = uiDialog.is( ":data(ui-resizable)" );
      if ( isResizable && !value ) {
        uiDialog.resizable( "destroy" );
      }

      // Currently resizable, changing handles
      if ( isResizable && typeof value === "string" ) {
        uiDialog.resizable( "option", "handles", value );
      }

      // Currently non-resizable, becoming resizable
      if ( !isResizable && value !== false ) {
        this._makeResizable();
      }
    }

    if ( key === "title" ) {
      this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
    }
  },

  _size: function() {

    // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
    // divs will both have width and height set, so we need to reset them
    var nonContentHeight, minContentHeight, maxContentHeight,
      options = this.options;

    // Reset content sizing
    this.element.show().css( {
      width: "auto",
      minHeight: 0,
      maxHeight: "none",
      height: 0
    } );

    if ( options.minWidth > options.width ) {
      options.width = options.minWidth;
    }

    // Reset wrapper sizing
    // determine the height of all the non-content elements
    nonContentHeight = this.uiDialog.css( {
      height: "auto",
      width: options.width
    } )
      .outerHeight();
    minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
    maxContentHeight = typeof options.maxHeight === "number" ?
      Math.max( 0, options.maxHeight - nonContentHeight ) :
      "none";

    if ( options.height === "auto" ) {
      this.element.css( {
        minHeight: minContentHeight,
        maxHeight: maxContentHeight,
        height: "auto"
      } );
    } else {
      this.element.height( Math.max( 0, options.height - nonContentHeight ) );
    }

    if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
      this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
    }
  },

  _blockFrames: function() {
    this.iframeBlocks = this.document.find( "iframe" ).map( function() {
      var iframe = $( this );

      return $( "<div>" )
        .css( {
          position: "absolute",
          width: iframe.outerWidth(),
          height: iframe.outerHeight()
        } )
        .appendTo( iframe.parent() )
        .offset( iframe.offset() )[ 0 ];
    } );
  },

  _unblockFrames: function() {
    if ( this.iframeBlocks ) {
      this.iframeBlocks.remove();
      delete this.iframeBlocks;
    }
  },

  _allowInteraction: function( event ) {
    if ( $( event.target ).closest( ".ui-dialog" ).length ) {
      return true;
    }

    // TODO: Remove hack when datepicker implements
    // the .ui-front logic (#8989)
    return !!$( event.target ).closest( ".ui-datepicker" ).length;
  },

  _createOverlay: function() {
    if ( !this.options.modal ) {
      return;
    }

    // We use a delay in case the overlay is created from an
    // event that we're going to be cancelling (#2804)
    var isOpening = true;
    this._delay( function() {
      isOpening = false;
    } );

    if ( !this.document.data( "ui-dialog-overlays" ) ) {

      // Prevent use of anchors and inputs
      // Using _on() for an event handler shared across many instances is
      // safe because the dialogs stack and must be closed in reverse order
      this._on( this.document, {
        focusin: function( event ) {
          if ( isOpening ) {
            return;
          }

          if ( !this._allowInteraction( event ) ) {
            event.preventDefault();
            this._trackingInstances()[ 0 ]._focusTabbable();
          }
        }
      } );
    }

    this.overlay = $( "<div>" )
      .appendTo( this._appendTo() );

    this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
    this._on( this.overlay, {
      mousedown: "_keepFocus"
    } );
    this.document.data( "ui-dialog-overlays",
      ( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
  },

  _destroyOverlay: function() {
    if ( !this.options.modal ) {
      return;
    }

    if ( this.overlay ) {
      var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

      if ( !overlays ) {
        this._off( this.document, "focusin" );
        this.document.removeData( "ui-dialog-overlays" );
      } else {
        this.document.data( "ui-dialog-overlays", overlays );
      }

      this.overlay.remove();
      this.overlay = null;
    }
  }
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

  // Backcompat for dialogClass option
  $.widget( "ui.dialog", $.ui.dialog, {
    options: {
      dialogClass: ""
    },
    _createWrapper: function() {
      this._super();
      this.uiDialog.addClass( this.options.dialogClass );
    },
    _setOption: function( key, value ) {
      if ( key === "dialogClass" ) {
        this.uiDialog
          .removeClass( this.options.dialogClass )
          .addClass( value );
      }
      this._superApply( arguments );
    }
  } );
}

var widgetsDialog = $.ui.dialog;


/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Droppable
//>>group: Interactions
//>>description: Enables drop targets for draggable elements.
//>>docs: http://api.jqueryui.com/droppable/
//>>demos: http://jqueryui.com/droppable/



$.widget( "ui.droppable", {
  version: "1.12.1",
  widgetEventPrefix: "drop",
  options: {
    accept: "*",
    addClasses: true,
    greedy: false,
    scope: "default",
    tolerance: "intersect",

    // Callbacks
    activate: null,
    deactivate: null,
    drop: null,
    out: null,
    over: null
  },
  _create: function() {

    var proportions,
      o = this.options,
      accept = o.accept;

    this.isover = false;
    this.isout = true;

    this.accept = $.isFunction( accept ) ? accept : function( d ) {
      return d.is( accept );
    };

    this.proportions = function( /* valueToWrite */ ) {
      if ( arguments.length ) {

        // Store the droppable's proportions
        proportions = arguments[ 0 ];
      } else {

        // Retrieve or derive the droppable's proportions
        return proportions ?
          proportions :
          proportions = {
            width: this.element[ 0 ].offsetWidth,
            height: this.element[ 0 ].offsetHeight
          };
      }
    };

    this._addToManager( o.scope );

    o.addClasses && this._addClass( "ui-droppable" );

  },

  _addToManager: function( scope ) {

    // Add the reference and positions to the manager
    $.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
    $.ui.ddmanager.droppables[ scope ].push( this );
  },

  _splice: function( drop ) {
    var i = 0;
    for ( ; i < drop.length; i++ ) {
      if ( drop[ i ] === this ) {
        drop.splice( i, 1 );
      }
    }
  },

  _destroy: function() {
    var drop = $.ui.ddmanager.droppables[ this.options.scope ];

    this._splice( drop );
  },

  _setOption: function( key, value ) {

    if ( key === "accept" ) {
      this.accept = $.isFunction( value ) ? value : function( d ) {
        return d.is( value );
      };
    } else if ( key === "scope" ) {
      var drop = $.ui.ddmanager.droppables[ this.options.scope ];

      this._splice( drop );
      this._addToManager( value );
    }

    this._super( key, value );
  },

  _activate: function( event ) {
    var draggable = $.ui.ddmanager.current;

    this._addActiveClass();
    if ( draggable ) {
      this._trigger( "activate", event, this.ui( draggable ) );
    }
  },

  _deactivate: function( event ) {
    var draggable = $.ui.ddmanager.current;

    this._removeActiveClass();
    if ( draggable ) {
      this._trigger( "deactivate", event, this.ui( draggable ) );
    }
  },

  _over: function( event ) {

    var draggable = $.ui.ddmanager.current;

    // Bail if draggable and droppable are same element
    if ( !draggable || ( draggable.currentItem ||
        draggable.element )[ 0 ] === this.element[ 0 ] ) {
      return;
    }

    if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
        draggable.element ) ) ) {
      this._addHoverClass();
      this._trigger( "over", event, this.ui( draggable ) );
    }

  },

  _out: function( event ) {

    var draggable = $.ui.ddmanager.current;

    // Bail if draggable and droppable are same element
    if ( !draggable || ( draggable.currentItem ||
        draggable.element )[ 0 ] === this.element[ 0 ] ) {
      return;
    }

    if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
        draggable.element ) ) ) {
      this._removeHoverClass();
      this._trigger( "out", event, this.ui( draggable ) );
    }

  },

  _drop: function( event, custom ) {

    var draggable = custom || $.ui.ddmanager.current,
      childrenIntersection = false;

    // Bail if draggable and droppable are same element
    if ( !draggable || ( draggable.currentItem ||
        draggable.element )[ 0 ] === this.element[ 0 ] ) {
      return false;
    }

    this.element
      .find( ":data(ui-droppable)" )
      .not( ".ui-draggable-dragging" )
      .each( function() {
        var inst = $( this ).droppable( "instance" );
        if (
          inst.options.greedy &&
          !inst.options.disabled &&
          inst.options.scope === draggable.options.scope &&
          inst.accept.call(
            inst.element[ 0 ], ( draggable.currentItem || draggable.element )
          ) &&
          intersect(
            draggable,
            $.extend( inst, { offset: inst.element.offset() } ),
            inst.options.tolerance, event
          )
        ) {
          childrenIntersection = true;
          return false; }
      } );
    if ( childrenIntersection ) {
      return false;
    }

    if ( this.accept.call( this.element[ 0 ],
        ( draggable.currentItem || draggable.element ) ) ) {
      this._removeActiveClass();
      this._removeHoverClass();

      this._trigger( "drop", event, this.ui( draggable ) );
      return this.element;
    }

    return false;

  },

  ui: function( c ) {
    return {
      draggable: ( c.currentItem || c.element ),
      helper: c.helper,
      position: c.position,
      offset: c.positionAbs
    };
  },

  // Extension points just to make backcompat sane and avoid duplicating logic
  // TODO: Remove in 1.13 along with call to it below
  _addHoverClass: function() {
    this._addClass( "ui-droppable-hover" );
  },

  _removeHoverClass: function() {
    this._removeClass( "ui-droppable-hover" );
  },

  _addActiveClass: function() {
    this._addClass( "ui-droppable-active" );
  },

  _removeActiveClass: function() {
    this._removeClass( "ui-droppable-active" );
  }
} );

var intersect = $.ui.intersect = ( function() {
  function isOverAxis( x, reference, size ) {
    return ( x >= reference ) && ( x < ( reference + size ) );
  }

  return function( draggable, droppable, toleranceMode, event ) {

    if ( !droppable.offset ) {
      return false;
    }

    var x1 = ( draggable.positionAbs ||
        draggable.position.absolute ).left + draggable.margins.left,
      y1 = ( draggable.positionAbs ||
        draggable.position.absolute ).top + draggable.margins.top,
      x2 = x1 + draggable.helperProportions.width,
      y2 = y1 + draggable.helperProportions.height,
      l = droppable.offset.left,
      t = droppable.offset.top,
      r = l + droppable.proportions().width,
      b = t + droppable.proportions().height;

    switch ( toleranceMode ) {
    case "fit":
      return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
    case "intersect":
      return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
        x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
        t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
        y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
    case "pointer":
      return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
        isOverAxis( event.pageX, l, droppable.proportions().width );
    case "touch":
      return (
        ( y1 >= t && y1 <= b ) || // Top edge touching
        ( y2 >= t && y2 <= b ) || // Bottom edge touching
        ( y1 < t && y2 > b ) // Surrounded vertically
      ) && (
        ( x1 >= l && x1 <= r ) || // Left edge touching
        ( x2 >= l && x2 <= r ) || // Right edge touching
        ( x1 < l && x2 > r ) // Surrounded horizontally
      );
    default:
      return false;
    }
  };
} )();

/*
  This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
  current: null,
  droppables: { "default": [] },
  prepareOffsets: function( t, event ) {

    var i, j,
      m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
      type = event ? event.type : null, // workaround for #2317
      list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

    droppablesLoop: for ( i = 0; i < m.length; i++ ) {

      // No disabled and non-accepted
      if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
          ( t.currentItem || t.element ) ) ) ) {
        continue;
      }

      // Filter out elements in the current dragged item
      for ( j = 0; j < list.length; j++ ) {
        if ( list[ j ] === m[ i ].element[ 0 ] ) {
          m[ i ].proportions().height = 0;
          continue droppablesLoop;
        }
      }

      m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
      if ( !m[ i ].visible ) {
        continue;
      }

      // Activate the droppable if used directly from draggables
      if ( type === "mousedown" ) {
        m[ i ]._activate.call( m[ i ], event );
      }

      m[ i ].offset = m[ i ].element.offset();
      m[ i ].proportions( {
        width: m[ i ].element[ 0 ].offsetWidth,
        height: m[ i ].element[ 0 ].offsetHeight
      } );

    }

  },
  drop: function( draggable, event ) {

    var dropped = false;

    // Create a copy of the droppables in case the list changes during the drop (#9116)
    $.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

      if ( !this.options ) {
        return;
      }
      if ( !this.options.disabled && this.visible &&
          intersect( draggable, this, this.options.tolerance, event ) ) {
        dropped = this._drop.call( this, event ) || dropped;
      }

      if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
          ( draggable.currentItem || draggable.element ) ) ) {
        this.isout = true;
        this.isover = false;
        this._deactivate.call( this, event );
      }

    } );
    return dropped;

  },
  dragStart: function( draggable, event ) {

    // Listen for scrolling so that if the dragging causes scrolling the position of the
    // droppables can be recalculated (see #5003)
    draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
      if ( !draggable.options.refreshPositions ) {
        $.ui.ddmanager.prepareOffsets( draggable, event );
      }
    } );
  },
  drag: function( draggable, event ) {

    // If you have a highly dynamic page, you might try this option. It renders positions
    // every time you move the mouse.
    if ( draggable.options.refreshPositions ) {
      $.ui.ddmanager.prepareOffsets( draggable, event );
    }

    // Run through all droppables and check their positions based on specific tolerance options
    $.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

      if ( this.options.disabled || this.greedyChild || !this.visible ) {
        return;
      }

      var parentInstance, scope, parent,
        intersects = intersect( draggable, this, this.options.tolerance, event ),
        c = !intersects && this.isover ?
          "isout" :
          ( intersects && !this.isover ? "isover" : null );
      if ( !c ) {
        return;
      }

      if ( this.options.greedy ) {

        // find droppable parents with same scope
        scope = this.options.scope;
        parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
          return $( this ).droppable( "instance" ).options.scope === scope;
        } );

        if ( parent.length ) {
          parentInstance = $( parent[ 0 ] ).droppable( "instance" );
          parentInstance.greedyChild = ( c === "isover" );
        }
      }

      // We just moved into a greedy child
      if ( parentInstance && c === "isover" ) {
        parentInstance.isover = false;
        parentInstance.isout = true;
        parentInstance._out.call( parentInstance, event );
      }

      this[ c ] = true;
      this[ c === "isout" ? "isover" : "isout" ] = false;
      this[ c === "isover" ? "_over" : "_out" ].call( this, event );

      // We just moved out of a greedy child
      if ( parentInstance && c === "isout" ) {
        parentInstance.isout = false;
        parentInstance.isover = true;
        parentInstance._over.call( parentInstance, event );
      }
    } );

  },
  dragStop: function( draggable, event ) {
    draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

    // Call prepareOffsets one final time since IE does not fire return scroll events when
    // overflow was caused by drag (see #5003)
    if ( !draggable.options.refreshPositions ) {
      $.ui.ddmanager.prepareOffsets( draggable, event );
    }
  }
};

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

  // Backcompat for activeClass and hoverClass options
  $.widget( "ui.droppable", $.ui.droppable, {
    options: {
      hoverClass: false,
      activeClass: false
    },
    _addActiveClass: function() {
      this._super();
      if ( this.options.activeClass ) {
        this.element.addClass( this.options.activeClass );
      }
    },
    _removeActiveClass: function() {
      this._super();
      if ( this.options.activeClass ) {
        this.element.removeClass( this.options.activeClass );
      }
    },
    _addHoverClass: function() {
      this._super();
      if ( this.options.hoverClass ) {
        this.element.addClass( this.options.hoverClass );
      }
    },
    _removeHoverClass: function() {
      this._super();
      if ( this.options.hoverClass ) {
        this.element.removeClass( this.options.hoverClass );
      }
    }
  } );
}

var widgetsDroppable = $.ui.droppable;


/*!
 * jQuery UI Progressbar 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Progressbar
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/progressbar/
//>>demos: http://jqueryui.com/progressbar/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/progressbar.css
//>>css.theme: ../../themes/base/theme.css



var widgetsProgressbar = $.widget( "ui.progressbar", {
  version: "1.12.1",
  options: {
    classes: {
      "ui-progressbar": "ui-corner-all",
      "ui-progressbar-value": "ui-corner-left",
      "ui-progressbar-complete": "ui-corner-right"
    },
    max: 100,
    value: 0,

    change: null,
    complete: null
  },

  min: 0,

  _create: function() {

    // Constrain initial value
    this.oldValue = this.options.value = this._constrainedValue();

    this.element.attr( {

      // Only set static values; aria-valuenow and aria-valuemax are
      // set inside _refreshValue()
      role: "progressbar",
      "aria-valuemin": this.min
    } );
    this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

    this.valueDiv = $( "<div>" ).appendTo( this.element );
    this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
    this._refreshValue();
  },

  _destroy: function() {
    this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

    this.valueDiv.remove();
  },

  value: function( newValue ) {
    if ( newValue === undefined ) {
      return this.options.value;
    }

    this.options.value = this._constrainedValue( newValue );
    this._refreshValue();
  },

  _constrainedValue: function( newValue ) {
    if ( newValue === undefined ) {
      newValue = this.options.value;
    }

    this.indeterminate = newValue === false;

    // Sanitize value
    if ( typeof newValue !== "number" ) {
      newValue = 0;
    }

    return this.indeterminate ? false :
      Math.min( this.options.max, Math.max( this.min, newValue ) );
  },

  _setOptions: function( options ) {

    // Ensure "value" option is set after other values (like max)
    var value = options.value;
    delete options.value;

    this._super( options );

    this.options.value = this._constrainedValue( value );
    this._refreshValue();
  },

  _setOption: function( key, value ) {
    if ( key === "max" ) {

      // Don't allow a max less than min
      value = Math.max( this.min, value );
    }
    this._super( key, value );
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this.element.attr( "aria-disabled", value );
    this._toggleClass( null, "ui-state-disabled", !!value );
  },

  _percentage: function() {
    return this.indeterminate ?
      100 :
      100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
  },

  _refreshValue: function() {
    var value = this.options.value,
      percentage = this._percentage();

    this.valueDiv
      .toggle( this.indeterminate || value > this.min )
      .width( percentage.toFixed( 0 ) + "%" );

    this
      ._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
        value === this.options.max )
      ._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

    if ( this.indeterminate ) {
      this.element.removeAttr( "aria-valuenow" );
      if ( !this.overlayDiv ) {
        this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
        this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
      }
    } else {
      this.element.attr( {
        "aria-valuemax": this.options.max,
        "aria-valuenow": value
      } );
      if ( this.overlayDiv ) {
        this.overlayDiv.remove();
        this.overlayDiv = null;
      }
    }

    if ( this.oldValue !== value ) {
      this.oldValue = value;
      this._trigger( "change" );
    }
    if ( value === this.options.max ) {
      this._trigger( "complete" );
    }
  }
} );


/*!
 * jQuery UI Selectable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectable
//>>group: Interactions
//>>description: Allows groups of elements to be selected with the mouse.
//>>docs: http://api.jqueryui.com/selectable/
//>>demos: http://jqueryui.com/selectable/
//>>css.structure: ../../themes/base/selectable.css



var widgetsSelectable = $.widget( "ui.selectable", $.ui.mouse, {
  version: "1.12.1",
  options: {
    appendTo: "body",
    autoRefresh: true,
    distance: 0,
    filter: "*",
    tolerance: "touch",

    // Callbacks
    selected: null,
    selecting: null,
    start: null,
    stop: null,
    unselected: null,
    unselecting: null
  },
  _create: function() {
    var that = this;

    this._addClass( "ui-selectable" );

    this.dragged = false;

    // Cache selectee children based on filter
    this.refresh = function() {
      that.elementPos = $( that.element[ 0 ] ).offset();
      that.selectees = $( that.options.filter, that.element[ 0 ] );
      that._addClass( that.selectees, "ui-selectee" );
      that.selectees.each( function() {
        var $this = $( this ),
          selecteeOffset = $this.offset(),
          pos = {
            left: selecteeOffset.left - that.elementPos.left,
            top: selecteeOffset.top - that.elementPos.top
          };
        $.data( this, "selectable-item", {
          element: this,
          $element: $this,
          left: pos.left,
          top: pos.top,
          right: pos.left + $this.outerWidth(),
          bottom: pos.top + $this.outerHeight(),
          startselected: false,
          selected: $this.hasClass( "ui-selected" ),
          selecting: $this.hasClass( "ui-selecting" ),
          unselecting: $this.hasClass( "ui-unselecting" )
        } );
      } );
    };
    this.refresh();

    this._mouseInit();

    this.helper = $( "<div>" );
    this._addClass( this.helper, "ui-selectable-helper" );
  },

  _destroy: function() {
    this.selectees.removeData( "selectable-item" );
    this._mouseDestroy();
  },

  _mouseStart: function( event ) {
    var that = this,
      options = this.options;

    this.opos = [ event.pageX, event.pageY ];
    this.elementPos = $( this.element[ 0 ] ).offset();

    if ( this.options.disabled ) {
      return;
    }

    this.selectees = $( options.filter, this.element[ 0 ] );

    this._trigger( "start", event );

    $( options.appendTo ).append( this.helper );

    // position helper (lasso)
    this.helper.css( {
      "left": event.pageX,
      "top": event.pageY,
      "width": 0,
      "height": 0
    } );

    if ( options.autoRefresh ) {
      this.refresh();
    }

    this.selectees.filter( ".ui-selected" ).each( function() {
      var selectee = $.data( this, "selectable-item" );
      selectee.startselected = true;
      if ( !event.metaKey && !event.ctrlKey ) {
        that._removeClass( selectee.$element, "ui-selected" );
        selectee.selected = false;
        that._addClass( selectee.$element, "ui-unselecting" );
        selectee.unselecting = true;

        // selectable UNSELECTING callback
        that._trigger( "unselecting", event, {
          unselecting: selectee.element
        } );
      }
    } );

    $( event.target ).parents().addBack().each( function() {
      var doSelect,
        selectee = $.data( this, "selectable-item" );
      if ( selectee ) {
        doSelect = ( !event.metaKey && !event.ctrlKey ) ||
          !selectee.$element.hasClass( "ui-selected" );
        that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
          ._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
        selectee.unselecting = !doSelect;
        selectee.selecting = doSelect;
        selectee.selected = doSelect;

        // selectable (UN)SELECTING callback
        if ( doSelect ) {
          that._trigger( "selecting", event, {
            selecting: selectee.element
          } );
        } else {
          that._trigger( "unselecting", event, {
            unselecting: selectee.element
          } );
        }
        return false;
      }
    } );

  },

  _mouseDrag: function( event ) {

    this.dragged = true;

    if ( this.options.disabled ) {
      return;
    }

    var tmp,
      that = this,
      options = this.options,
      x1 = this.opos[ 0 ],
      y1 = this.opos[ 1 ],
      x2 = event.pageX,
      y2 = event.pageY;

    if ( x1 > x2 ) { tmp = x2; x2 = x1; x1 = tmp; }
    if ( y1 > y2 ) { tmp = y2; y2 = y1; y1 = tmp; }
    this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

    this.selectees.each( function() {
      var selectee = $.data( this, "selectable-item" ),
        hit = false,
        offset = {};

      //prevent helper from being selected if appendTo: selectable
      if ( !selectee || selectee.element === that.element[ 0 ] ) {
        return;
      }

      offset.left   = selectee.left   + that.elementPos.left;
      offset.right  = selectee.right  + that.elementPos.left;
      offset.top    = selectee.top    + that.elementPos.top;
      offset.bottom = selectee.bottom + that.elementPos.top;

      if ( options.tolerance === "touch" ) {
        hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                    offset.bottom < y1 ) );
      } else if ( options.tolerance === "fit" ) {
        hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                    offset.bottom < y2 );
      }

      if ( hit ) {

        // SELECT
        if ( selectee.selected ) {
          that._removeClass( selectee.$element, "ui-selected" );
          selectee.selected = false;
        }
        if ( selectee.unselecting ) {
          that._removeClass( selectee.$element, "ui-unselecting" );
          selectee.unselecting = false;
        }
        if ( !selectee.selecting ) {
          that._addClass( selectee.$element, "ui-selecting" );
          selectee.selecting = true;

          // selectable SELECTING callback
          that._trigger( "selecting", event, {
            selecting: selectee.element
          } );
        }
      } else {

        // UNSELECT
        if ( selectee.selecting ) {
          if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
            that._removeClass( selectee.$element, "ui-selecting" );
            selectee.selecting = false;
            that._addClass( selectee.$element, "ui-selected" );
            selectee.selected = true;
          } else {
            that._removeClass( selectee.$element, "ui-selecting" );
            selectee.selecting = false;
            if ( selectee.startselected ) {
              that._addClass( selectee.$element, "ui-unselecting" );
              selectee.unselecting = true;
            }

            // selectable UNSELECTING callback
            that._trigger( "unselecting", event, {
              unselecting: selectee.element
            } );
          }
        }
        if ( selectee.selected ) {
          if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
            that._removeClass( selectee.$element, "ui-selected" );
            selectee.selected = false;

            that._addClass( selectee.$element, "ui-unselecting" );
            selectee.unselecting = true;

            // selectable UNSELECTING callback
            that._trigger( "unselecting", event, {
              unselecting: selectee.element
            } );
          }
        }
      }
    } );

    return false;
  },

  _mouseStop: function( event ) {
    var that = this;

    this.dragged = false;

    $( ".ui-unselecting", this.element[ 0 ] ).each( function() {
      var selectee = $.data( this, "selectable-item" );
      that._removeClass( selectee.$element, "ui-unselecting" );
      selectee.unselecting = false;
      selectee.startselected = false;
      that._trigger( "unselected", event, {
        unselected: selectee.element
      } );
    } );
    $( ".ui-selecting", this.element[ 0 ] ).each( function() {
      var selectee = $.data( this, "selectable-item" );
      that._removeClass( selectee.$element, "ui-selecting" )
        ._addClass( selectee.$element, "ui-selected" );
      selectee.selecting = false;
      selectee.selected = true;
      selectee.startselected = true;
      that._trigger( "selected", event, {
        selected: selectee.element
      } );
    } );
    this._trigger( "stop", event );

    this.helper.remove();

    return false;
  }

} );


/*!
 * jQuery UI Selectmenu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectmenu
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/selectmenu/
//>>demos: http://jqueryui.com/selectmenu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSelectmenu = $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
  version: "1.12.1",
  defaultElement: "<select>",
  options: {
    appendTo: null,
    classes: {
      "ui-selectmenu-button-open": "ui-corner-top",
      "ui-selectmenu-button-closed": "ui-corner-all"
    },
    disabled: null,
    icons: {
      button: "ui-icon-triangle-1-s"
    },
    position: {
      my: "left top",
      at: "left bottom",
      collision: "none"
    },
    width: false,

    // Callbacks
    change: null,
    close: null,
    focus: null,
    open: null,
    select: null
  },

  _create: function() {
    var selectmenuId = this.element.uniqueId().attr( "id" );
    this.ids = {
      element: selectmenuId,
      button: selectmenuId + "-button",
      menu: selectmenuId + "-menu"
    };

    this._drawButton();
    this._drawMenu();
    this._bindFormResetHandler();

    this._rendered = false;
    this.menuItems = $();
  },

  _drawButton: function() {
    var icon,
      that = this,
      item = this._parseOption(
        this.element.find( "option:selected" ),
        this.element[ 0 ].selectedIndex
      );

    // Associate existing label with the new button
    this.labels = this.element.labels().attr( "for", this.ids.button );
    this._on( this.labels, {
      click: function( event ) {
        this.button.focus();
        event.preventDefault();
      }
    } );

    // Hide original select element
    this.element.hide();

    // Create button
    this.button = $( "<span>", {
      tabindex: this.options.disabled ? -1 : 0,
      id: this.ids.button,
      role: "combobox",
      "aria-expanded": "false",
      "aria-autocomplete": "list",
      "aria-owns": this.ids.menu,
      "aria-haspopup": "true",
      title: this.element.attr( "title" )
    } )
      .insertAfter( this.element );

    this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
      "ui-button ui-widget" );

    icon = $( "<span>" ).appendTo( this.button );
    this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
    this.buttonItem = this._renderButtonItem( item )
      .appendTo( this.button );

    if ( this.options.width !== false ) {
      this._resizeButton();
    }

    this._on( this.button, this._buttonEvents );
    this.button.one( "focusin", function() {

      // Delay rendering the menu items until the button receives focus.
      // The menu may have already been rendered via a programmatic open.
      if ( !that._rendered ) {
        that._refreshMenu();
      }
    } );
  },

  _drawMenu: function() {
    var that = this;

    // Create menu
    this.menu = $( "<ul>", {
      "aria-hidden": "true",
      "aria-labelledby": this.ids.button,
      id: this.ids.menu
    } );

    // Wrap menu
    this.menuWrap = $( "<div>" ).append( this.menu );
    this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
    this.menuWrap.appendTo( this._appendTo() );

    // Initialize menu widget
    this.menuInstance = this.menu
      .menu( {
        classes: {
          "ui-menu": "ui-corner-bottom"
        },
        role: "listbox",
        select: function( event, ui ) {
          event.preventDefault();

          // Support: IE8
          // If the item was selected via a click, the text selection
          // will be destroyed in IE
          that._setSelection();

          that._select( ui.item.data( "ui-selectmenu-item" ), event );
        },
        focus: function( event, ui ) {
          var item = ui.item.data( "ui-selectmenu-item" );

          // Prevent inital focus from firing and check if its a newly focused item
          if ( that.focusIndex != null && item.index !== that.focusIndex ) {
            that._trigger( "focus", event, { item: item } );
            if ( !that.isOpen ) {
              that._select( item, event );
            }
          }
          that.focusIndex = item.index;

          that.button.attr( "aria-activedescendant",
            that.menuItems.eq( item.index ).attr( "id" ) );
        }
      } )
      .menu( "instance" );

    // Don't close the menu on mouseleave
    this.menuInstance._off( this.menu, "mouseleave" );

    // Cancel the menu's collapseAll on document click
    this.menuInstance._closeOnDocumentClick = function() {
      return false;
    };

    // Selects often contain empty items, but never contain dividers
    this.menuInstance._isDivider = function() {
      return false;
    };
  },

  refresh: function() {
    this._refreshMenu();
    this.buttonItem.replaceWith(
      this.buttonItem = this._renderButtonItem(

        // Fall back to an empty object in case there are no options
        this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
      )
    );
    if ( this.options.width === null ) {
      this._resizeButton();
    }
  },

  _refreshMenu: function() {
    var item,
      options = this.element.find( "option" );

    this.menu.empty();

    this._parseOptions( options );
    this._renderMenu( this.menu, this.items );

    this.menuInstance.refresh();
    this.menuItems = this.menu.find( "li" )
      .not( ".ui-selectmenu-optgroup" )
        .find( ".ui-menu-item-wrapper" );

    this._rendered = true;

    if ( !options.length ) {
      return;
    }

    item = this._getSelectedItem();

    // Update the menu to have the correct item focused
    this.menuInstance.focus( null, item );
    this._setAria( item.data( "ui-selectmenu-item" ) );

    // Set disabled state
    this._setOption( "disabled", this.element.prop( "disabled" ) );
  },

  open: function( event ) {
    if ( this.options.disabled ) {
      return;
    }

    // If this is the first time the menu is being opened, render the items
    if ( !this._rendered ) {
      this._refreshMenu();
    } else {

      // Menu clears focus on close, reset focus to selected item
      this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
      this.menuInstance.focus( null, this._getSelectedItem() );
    }

    // If there are no options, don't open the menu
    if ( !this.menuItems.length ) {
      return;
    }

    this.isOpen = true;
    this._toggleAttr();
    this._resizeMenu();
    this._position();

    this._on( this.document, this._documentClick );

    this._trigger( "open", event );
  },

  _position: function() {
    this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
  },

  close: function( event ) {
    if ( !this.isOpen ) {
      return;
    }

    this.isOpen = false;
    this._toggleAttr();

    this.range = null;
    this._off( this.document );

    this._trigger( "close", event );
  },

  widget: function() {
    return this.button;
  },

  menuWidget: function() {
    return this.menu;
  },

  _renderButtonItem: function( item ) {
    var buttonItem = $( "<span>" );

    this._setText( buttonItem, item.label );
    this._addClass( buttonItem, "ui-selectmenu-text" );

    return buttonItem;
  },

  _renderMenu: function( ul, items ) {
    var that = this,
      currentOptgroup = "";

    $.each( items, function( index, item ) {
      var li;

      if ( item.optgroup !== currentOptgroup ) {
        li = $( "<li>", {
          text: item.optgroup
        } );
        that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
          ( item.element.parent( "optgroup" ).prop( "disabled" ) ?
            " ui-state-disabled" :
            "" ) );

        li.appendTo( ul );

        currentOptgroup = item.optgroup;
      }

      that._renderItemData( ul, item );
    } );
  },

  _renderItemData: function( ul, item ) {
    return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
  },

  _renderItem: function( ul, item ) {
    var li = $( "<li>" ),
      wrapper = $( "<div>", {
        title: item.element.attr( "title" )
      } );

    if ( item.disabled ) {
      this._addClass( li, null, "ui-state-disabled" );
    }
    this._setText( wrapper, item.label );

    return li.append( wrapper ).appendTo( ul );
  },

  _setText: function( element, value ) {
    if ( value ) {
      element.text( value );
    } else {
      element.html( "&#160;" );
    }
  },

  _move: function( direction, event ) {
    var item, next,
      filter = ".ui-menu-item";

    if ( this.isOpen ) {
      item = this.menuItems.eq( this.focusIndex ).parent( "li" );
    } else {
      item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
      filter += ":not(.ui-state-disabled)";
    }

    if ( direction === "first" || direction === "last" ) {
      next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
    } else {
      next = item[ direction + "All" ]( filter ).eq( 0 );
    }

    if ( next.length ) {
      this.menuInstance.focus( event, next );
    }
  },

  _getSelectedItem: function() {
    return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
  },

  _toggle: function( event ) {
    this[ this.isOpen ? "close" : "open" ]( event );
  },

  _setSelection: function() {
    var selection;

    if ( !this.range ) {
      return;
    }

    if ( window.getSelection ) {
      selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange( this.range );

    // Support: IE8
    } else {
      this.range.select();
    }

    // Support: IE
    // Setting the text selection kills the button focus in IE, but
    // restoring the focus doesn't kill the selection.
    this.button.focus();
  },

  _documentClick: {
    mousedown: function( event ) {
      if ( !this.isOpen ) {
        return;
      }

      if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
          $.ui.escapeSelector( this.ids.button ) ).length ) {
        this.close( event );
      }
    }
  },

  _buttonEvents: {

    // Prevent text selection from being reset when interacting with the selectmenu (#10144)
    mousedown: function() {
      var selection;

      if ( window.getSelection ) {
        selection = window.getSelection();
        if ( selection.rangeCount ) {
          this.range = selection.getRangeAt( 0 );
        }

      // Support: IE8
      } else {
        this.range = document.selection.createRange();
      }
    },

    click: function( event ) {
      this._setSelection();
      this._toggle( event );
    },

    keydown: function( event ) {
      var preventDefault = true;
      switch ( event.keyCode ) {
      case $.ui.keyCode.TAB:
      case $.ui.keyCode.ESCAPE:
        this.close( event );
        preventDefault = false;
        break;
      case $.ui.keyCode.ENTER:
        if ( this.isOpen ) {
          this._selectFocusedItem( event );
        }
        break;
      case $.ui.keyCode.UP:
        if ( event.altKey ) {
          this._toggle( event );
        } else {
          this._move( "prev", event );
        }
        break;
      case $.ui.keyCode.DOWN:
        if ( event.altKey ) {
          this._toggle( event );
        } else {
          this._move( "next", event );
        }
        break;
      case $.ui.keyCode.SPACE:
        if ( this.isOpen ) {
          this._selectFocusedItem( event );
        } else {
          this._toggle( event );
        }
        break;
      case $.ui.keyCode.LEFT:
        this._move( "prev", event );
        break;
      case $.ui.keyCode.RIGHT:
        this._move( "next", event );
        break;
      case $.ui.keyCode.HOME:
      case $.ui.keyCode.PAGE_UP:
        this._move( "first", event );
        break;
      case $.ui.keyCode.END:
      case $.ui.keyCode.PAGE_DOWN:
        this._move( "last", event );
        break;
      default:
        this.menu.trigger( event );
        preventDefault = false;
      }

      if ( preventDefault ) {
        event.preventDefault();
      }
    }
  },

  _selectFocusedItem: function( event ) {
    var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
    if ( !item.hasClass( "ui-state-disabled" ) ) {
      this._select( item.data( "ui-selectmenu-item" ), event );
    }
  },

  _select: function( item, event ) {
    var oldIndex = this.element[ 0 ].selectedIndex;

    // Change native select element
    this.element[ 0 ].selectedIndex = item.index;
    this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
    this._setAria( item );
    this._trigger( "select", event, { item: item } );

    if ( item.index !== oldIndex ) {
      this._trigger( "change", event, { item: item } );
    }

    this.close( event );
  },

  _setAria: function( item ) {
    var id = this.menuItems.eq( item.index ).attr( "id" );

    this.button.attr( {
      "aria-labelledby": id,
      "aria-activedescendant": id
    } );
    this.menu.attr( "aria-activedescendant", id );
  },

  _setOption: function( key, value ) {
    if ( key === "icons" ) {
      var icon = this.button.find( "span.ui-icon" );
      this._removeClass( icon, null, this.options.icons.button )
        ._addClass( icon, null, value.button );
    }

    this._super( key, value );

    if ( key === "appendTo" ) {
      this.menuWrap.appendTo( this._appendTo() );
    }

    if ( key === "width" ) {
      this._resizeButton();
    }
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this.menuInstance.option( "disabled", value );
    this.button.attr( "aria-disabled", value );
    this._toggleClass( this.button, null, "ui-state-disabled", value );

    this.element.prop( "disabled", value );
    if ( value ) {
      this.button.attr( "tabindex", -1 );
      this.close();
    } else {
      this.button.attr( "tabindex", 0 );
    }
  },

  _appendTo: function() {
    var element = this.options.appendTo;

    if ( element ) {
      element = element.jquery || element.nodeType ?
        $( element ) :
        this.document.find( element ).eq( 0 );
    }

    if ( !element || !element[ 0 ] ) {
      element = this.element.closest( ".ui-front, dialog" );
    }

    if ( !element.length ) {
      element = this.document[ 0 ].body;
    }

    return element;
  },

  _toggleAttr: function() {
    this.button.attr( "aria-expanded", this.isOpen );

    // We can't use two _toggleClass() calls here, because we need to make sure
    // we always remove classes first and add them second, otherwise if both classes have the
    // same theme class, it will be removed after we add it.
    this._removeClass( this.button, "ui-selectmenu-button-" +
      ( this.isOpen ? "closed" : "open" ) )
      ._addClass( this.button, "ui-selectmenu-button-" +
        ( this.isOpen ? "open" : "closed" ) )
      ._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

    this.menu.attr( "aria-hidden", !this.isOpen );
  },

  _resizeButton: function() {
    var width = this.options.width;

    // For `width: false`, just remove inline style and stop
    if ( width === false ) {
      this.button.css( "width", "" );
      return;
    }

    // For `width: null`, match the width of the original element
    if ( width === null ) {
      width = this.element.show().outerWidth();
      this.element.hide();
    }

    this.button.outerWidth( width );
  },

  _resizeMenu: function() {
    this.menu.outerWidth( Math.max(
      this.button.outerWidth(),

      // Support: IE10
      // IE10 wraps long text (possibly a rounding bug)
      // so we add 1px to avoid the wrapping
      this.menu.width( "" ).outerWidth() + 1
    ) );
  },

  _getCreateOptions: function() {
    var options = this._super();

    options.disabled = this.element.prop( "disabled" );

    return options;
  },

  _parseOptions: function( options ) {
    var that = this,
      data = [];
    options.each( function( index, item ) {
      data.push( that._parseOption( $( item ), index ) );
    } );
    this.items = data;
  },

  _parseOption: function( option, index ) {
    var optgroup = option.parent( "optgroup" );

    return {
      element: option,
      index: index,
      value: option.val(),
      label: option.text(),
      optgroup: optgroup.attr( "label" ) || "",
      disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
    };
  },

  _destroy: function() {
    this._unbindFormResetHandler();
    this.menuWrap.remove();
    this.button.remove();
    this.element.show();
    this.element.removeUniqueId();
    this.labels.attr( "for", this.ids.element );
  }
} ] );


/*!
 * jQuery UI Slider 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slider
//>>group: Widgets
//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
//>>docs: http://api.jqueryui.com/slider/
//>>demos: http://jqueryui.com/slider/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/slider.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSlider = $.widget( "ui.slider", $.ui.mouse, {
  version: "1.12.1",
  widgetEventPrefix: "slide",

  options: {
    animate: false,
    classes: {
      "ui-slider": "ui-corner-all",
      "ui-slider-handle": "ui-corner-all",

      // Note: ui-widget-header isn't the most fittingly semantic framework class for this
      // element, but worked best visually with a variety of themes
      "ui-slider-range": "ui-corner-all ui-widget-header"
    },
    distance: 0,
    max: 100,
    min: 0,
    orientation: "horizontal",
    range: false,
    step: 1,
    value: 0,
    values: null,

    // Callbacks
    change: null,
    slide: null,
    start: null,
    stop: null
  },

  // Number of pages in a slider
  // (how many times can you page up/down to go through the whole range)
  numPages: 5,

  _create: function() {
    this._keySliding = false;
    this._mouseSliding = false;
    this._animateOff = true;
    this._handleIndex = null;
    this._detectOrientation();
    this._mouseInit();
    this._calculateNewMax();

    this._addClass( "ui-slider ui-slider-" + this.orientation,
      "ui-widget ui-widget-content" );

    this._refresh();

    this._animateOff = false;
  },

  _refresh: function() {
    this._createRange();
    this._createHandles();
    this._setupEvents();
    this._refreshValue();
  },

  _createHandles: function() {
    var i, handleCount,
      options = this.options,
      existingHandles = this.element.find( ".ui-slider-handle" ),
      handle = "<span tabindex='0'></span>",
      handles = [];

    handleCount = ( options.values && options.values.length ) || 1;

    if ( existingHandles.length > handleCount ) {
      existingHandles.slice( handleCount ).remove();
      existingHandles = existingHandles.slice( 0, handleCount );
    }

    for ( i = existingHandles.length; i < handleCount; i++ ) {
      handles.push( handle );
    }

    this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

    this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

    this.handle = this.handles.eq( 0 );

    this.handles.each( function( i ) {
      $( this )
        .data( "ui-slider-handle-index", i )
        .attr( "tabIndex", 0 );
    } );
  },

  _createRange: function() {
    var options = this.options;

    if ( options.range ) {
      if ( options.range === true ) {
        if ( !options.values ) {
          options.values = [ this._valueMin(), this._valueMin() ];
        } else if ( options.values.length && options.values.length !== 2 ) {
          options.values = [ options.values[ 0 ], options.values[ 0 ] ];
        } else if ( $.isArray( options.values ) ) {
          options.values = options.values.slice( 0 );
        }
      }

      if ( !this.range || !this.range.length ) {
        this.range = $( "<div>" )
          .appendTo( this.element );

        this._addClass( this.range, "ui-slider-range" );
      } else {
        this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

        // Handle range switching from true to min/max
        this.range.css( {
          "left": "",
          "bottom": ""
        } );
      }
      if ( options.range === "min" || options.range === "max" ) {
        this._addClass( this.range, "ui-slider-range-" + options.range );
      }
    } else {
      if ( this.range ) {
        this.range.remove();
      }
      this.range = null;
    }
  },

  _setupEvents: function() {
    this._off( this.handles );
    this._on( this.handles, this._handleEvents );
    this._hoverable( this.handles );
    this._focusable( this.handles );
  },

  _destroy: function() {
    this.handles.remove();
    if ( this.range ) {
      this.range.remove();
    }

    this._mouseDestroy();
  },

  _mouseCapture: function( event ) {
    var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
      that = this,
      o = this.options;

    if ( o.disabled ) {
      return false;
    }

    this.elementSize = {
      width: this.element.outerWidth(),
      height: this.element.outerHeight()
    };
    this.elementOffset = this.element.offset();

    position = { x: event.pageX, y: event.pageY };
    normValue = this._normValueFromMouse( position );
    distance = this._valueMax() - this._valueMin() + 1;
    this.handles.each( function( i ) {
      var thisDistance = Math.abs( normValue - that.values( i ) );
      if ( ( distance > thisDistance ) ||
        ( distance === thisDistance &&
          ( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
        distance = thisDistance;
        closestHandle = $( this );
        index = i;
      }
    } );

    allowed = this._start( event, index );
    if ( allowed === false ) {
      return false;
    }
    this._mouseSliding = true;

    this._handleIndex = index;

    this._addClass( closestHandle, null, "ui-state-active" );
    closestHandle.trigger( "focus" );

    offset = closestHandle.offset();
    mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
    this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
      left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
      top: event.pageY - offset.top -
        ( closestHandle.height() / 2 ) -
        ( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
        ( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
        ( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
    };

    if ( !this.handles.hasClass( "ui-state-hover" ) ) {
      this._slide( event, index, normValue );
    }
    this._animateOff = true;
    return true;
  },

  _mouseStart: function() {
    return true;
  },

  _mouseDrag: function( event ) {
    var position = { x: event.pageX, y: event.pageY },
      normValue = this._normValueFromMouse( position );

    this._slide( event, this._handleIndex, normValue );

    return false;
  },

  _mouseStop: function( event ) {
    this._removeClass( this.handles, null, "ui-state-active" );
    this._mouseSliding = false;

    this._stop( event, this._handleIndex );
    this._change( event, this._handleIndex );

    this._handleIndex = null;
    this._clickOffset = null;
    this._animateOff = false;

    return false;
  },

  _detectOrientation: function() {
    this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
  },

  _normValueFromMouse: function( position ) {
    var pixelTotal,
      pixelMouse,
      percentMouse,
      valueTotal,
      valueMouse;

    if ( this.orientation === "horizontal" ) {
      pixelTotal = this.elementSize.width;
      pixelMouse = position.x - this.elementOffset.left -
        ( this._clickOffset ? this._clickOffset.left : 0 );
    } else {
      pixelTotal = this.elementSize.height;
      pixelMouse = position.y - this.elementOffset.top -
        ( this._clickOffset ? this._clickOffset.top : 0 );
    }

    percentMouse = ( pixelMouse / pixelTotal );
    if ( percentMouse > 1 ) {
      percentMouse = 1;
    }
    if ( percentMouse < 0 ) {
      percentMouse = 0;
    }
    if ( this.orientation === "vertical" ) {
      percentMouse = 1 - percentMouse;
    }

    valueTotal = this._valueMax() - this._valueMin();
    valueMouse = this._valueMin() + percentMouse * valueTotal;

    return this._trimAlignValue( valueMouse );
  },

  _uiHash: function( index, value, values ) {
    var uiHash = {
      handle: this.handles[ index ],
      handleIndex: index,
      value: value !== undefined ? value : this.value()
    };

    if ( this._hasMultipleValues() ) {
      uiHash.value = value !== undefined ? value : this.values( index );
      uiHash.values = values || this.values();
    }

    return uiHash;
  },

  _hasMultipleValues: function() {
    return this.options.values && this.options.values.length;
  },

  _start: function( event, index ) {
    return this._trigger( "start", event, this._uiHash( index ) );
  },

  _slide: function( event, index, newVal ) {
    var allowed, otherVal,
      currentValue = this.value(),
      newValues = this.values();

    if ( this._hasMultipleValues() ) {
      otherVal = this.values( index ? 0 : 1 );
      currentValue = this.values( index );

      if ( this.options.values.length === 2 && this.options.range === true ) {
        newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
      }

      newValues[ index ] = newVal;
    }

    if ( newVal === currentValue ) {
      return;
    }

    allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

    // A slide can be canceled by returning false from the slide callback
    if ( allowed === false ) {
      return;
    }

    if ( this._hasMultipleValues() ) {
      this.values( index, newVal );
    } else {
      this.value( newVal );
    }
  },

  _stop: function( event, index ) {
    this._trigger( "stop", event, this._uiHash( index ) );
  },

  _change: function( event, index ) {
    if ( !this._keySliding && !this._mouseSliding ) {

      //store the last changed value index for reference when handles overlap
      this._lastChangedValue = index;
      this._trigger( "change", event, this._uiHash( index ) );
    }
  },

  value: function( newValue ) {
    if ( arguments.length ) {
      this.options.value = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, 0 );
      return;
    }

    return this._value();
  },

  values: function( index, newValue ) {
    var vals,
      newValues,
      i;

    if ( arguments.length > 1 ) {
      this.options.values[ index ] = this._trimAlignValue( newValue );
      this._refreshValue();
      this._change( null, index );
      return;
    }

    if ( arguments.length ) {
      if ( $.isArray( arguments[ 0 ] ) ) {
        vals = this.options.values;
        newValues = arguments[ 0 ];
        for ( i = 0; i < vals.length; i += 1 ) {
          vals[ i ] = this._trimAlignValue( newValues[ i ] );
          this._change( null, i );
        }
        this._refreshValue();
      } else {
        if ( this._hasMultipleValues() ) {
          return this._values( index );
        } else {
          return this.value();
        }
      }
    } else {
      return this._values();
    }
  },

  _setOption: function( key, value ) {
    var i,
      valsLength = 0;

    if ( key === "range" && this.options.range === true ) {
      if ( value === "min" ) {
        this.options.value = this._values( 0 );
        this.options.values = null;
      } else if ( value === "max" ) {
        this.options.value = this._values( this.options.values.length - 1 );
        this.options.values = null;
      }
    }

    if ( $.isArray( this.options.values ) ) {
      valsLength = this.options.values.length;
    }

    this._super( key, value );

    switch ( key ) {
      case "orientation":
        this._detectOrientation();
        this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
          ._addClass( "ui-slider-" + this.orientation );
        this._refreshValue();
        if ( this.options.range ) {
          this._refreshRange( value );
        }

        // Reset positioning from previous orientation
        this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
        break;
      case "value":
        this._animateOff = true;
        this._refreshValue();
        this._change( null, 0 );
        this._animateOff = false;
        break;
      case "values":
        this._animateOff = true;
        this._refreshValue();

        // Start from the last handle to prevent unreachable handles (#9046)
        for ( i = valsLength - 1; i >= 0; i-- ) {
          this._change( null, i );
        }
        this._animateOff = false;
        break;
      case "step":
      case "min":
      case "max":
        this._animateOff = true;
        this._calculateNewMax();
        this._refreshValue();
        this._animateOff = false;
        break;
      case "range":
        this._animateOff = true;
        this._refresh();
        this._animateOff = false;
        break;
    }
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this._toggleClass( null, "ui-state-disabled", !!value );
  },

  //internal value getter
  // _value() returns value trimmed by min and max, aligned by step
  _value: function() {
    var val = this.options.value;
    val = this._trimAlignValue( val );

    return val;
  },

  //internal values getter
  // _values() returns array of values trimmed by min and max, aligned by step
  // _values( index ) returns single value trimmed by min and max, aligned by step
  _values: function( index ) {
    var val,
      vals,
      i;

    if ( arguments.length ) {
      val = this.options.values[ index ];
      val = this._trimAlignValue( val );

      return val;
    } else if ( this._hasMultipleValues() ) {

      // .slice() creates a copy of the array
      // this copy gets trimmed by min and max and then returned
      vals = this.options.values.slice();
      for ( i = 0; i < vals.length; i += 1 ) {
        vals[ i ] = this._trimAlignValue( vals[ i ] );
      }

      return vals;
    } else {
      return [];
    }
  },

  // Returns the step-aligned value that val is closest to, between (inclusive) min and max
  _trimAlignValue: function( val ) {
    if ( val <= this._valueMin() ) {
      return this._valueMin();
    }
    if ( val >= this._valueMax() ) {
      return this._valueMax();
    }
    var step = ( this.options.step > 0 ) ? this.options.step : 1,
      valModStep = ( val - this._valueMin() ) % step,
      alignValue = val - valModStep;

    if ( Math.abs( valModStep ) * 2 >= step ) {
      alignValue += ( valModStep > 0 ) ? step : ( -step );
    }

    // Since JavaScript has problems with large floats, round
    // the final value to 5 digits after the decimal point (see #4124)
    return parseFloat( alignValue.toFixed( 5 ) );
  },

  _calculateNewMax: function() {
    var max = this.options.max,
      min = this._valueMin(),
      step = this.options.step,
      aboveMin = Math.round( ( max - min ) / step ) * step;
    max = aboveMin + min;
    if ( max > this.options.max ) {

      //If max is not divisible by step, rounding off may increase its value
      max -= step;
    }
    this.max = parseFloat( max.toFixed( this._precision() ) );
  },

  _precision: function() {
    var precision = this._precisionOf( this.options.step );
    if ( this.options.min !== null ) {
      precision = Math.max( precision, this._precisionOf( this.options.min ) );
    }
    return precision;
  },

  _precisionOf: function( num ) {
    var str = num.toString(),
      decimal = str.indexOf( "." );
    return decimal === -1 ? 0 : str.length - decimal - 1;
  },

  _valueMin: function() {
    return this.options.min;
  },

  _valueMax: function() {
    return this.max;
  },

  _refreshRange: function( orientation ) {
    if ( orientation === "vertical" ) {
      this.range.css( { "width": "", "left": "" } );
    }
    if ( orientation === "horizontal" ) {
      this.range.css( { "height": "", "bottom": "" } );
    }
  },

  _refreshValue: function() {
    var lastValPercent, valPercent, value, valueMin, valueMax,
      oRange = this.options.range,
      o = this.options,
      that = this,
      animate = ( !this._animateOff ) ? o.animate : false,
      _set = {};

    if ( this._hasMultipleValues() ) {
      this.handles.each( function( i ) {
        valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
          that._valueMin() ) * 100;
        _set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
        $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
        if ( that.options.range === true ) {
          if ( that.orientation === "horizontal" ) {
            if ( i === 0 ) {
              that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
                left: valPercent + "%"
              }, o.animate );
            }
            if ( i === 1 ) {
              that.range[ animate ? "animate" : "css" ]( {
                width: ( valPercent - lastValPercent ) + "%"
              }, {
                queue: false,
                duration: o.animate
              } );
            }
          } else {
            if ( i === 0 ) {
              that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
                bottom: ( valPercent ) + "%"
              }, o.animate );
            }
            if ( i === 1 ) {
              that.range[ animate ? "animate" : "css" ]( {
                height: ( valPercent - lastValPercent ) + "%"
              }, {
                queue: false,
                duration: o.animate
              } );
            }
          }
        }
        lastValPercent = valPercent;
      } );
    } else {
      value = this.value();
      valueMin = this._valueMin();
      valueMax = this._valueMax();
      valPercent = ( valueMax !== valueMin ) ?
          ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
          0;
      _set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
      this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

      if ( oRange === "min" && this.orientation === "horizontal" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
          width: valPercent + "%"
        }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "horizontal" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
          width: ( 100 - valPercent ) + "%"
        }, o.animate );
      }
      if ( oRange === "min" && this.orientation === "vertical" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
          height: valPercent + "%"
        }, o.animate );
      }
      if ( oRange === "max" && this.orientation === "vertical" ) {
        this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
          height: ( 100 - valPercent ) + "%"
        }, o.animate );
      }
    }
  },

  _handleEvents: {
    keydown: function( event ) {
      var allowed, curVal, newVal, step,
        index = $( event.target ).data( "ui-slider-handle-index" );

      switch ( event.keyCode ) {
        case $.ui.keyCode.HOME:
        case $.ui.keyCode.END:
        case $.ui.keyCode.PAGE_UP:
        case $.ui.keyCode.PAGE_DOWN:
        case $.ui.keyCode.UP:
        case $.ui.keyCode.RIGHT:
        case $.ui.keyCode.DOWN:
        case $.ui.keyCode.LEFT:
          event.preventDefault();
          if ( !this._keySliding ) {
            this._keySliding = true;
            this._addClass( $( event.target ), null, "ui-state-active" );
            allowed = this._start( event, index );
            if ( allowed === false ) {
              return;
            }
          }
          break;
      }

      step = this.options.step;
      if ( this._hasMultipleValues() ) {
        curVal = newVal = this.values( index );
      } else {
        curVal = newVal = this.value();
      }

      switch ( event.keyCode ) {
        case $.ui.keyCode.HOME:
          newVal = this._valueMin();
          break;
        case $.ui.keyCode.END:
          newVal = this._valueMax();
          break;
        case $.ui.keyCode.PAGE_UP:
          newVal = this._trimAlignValue(
            curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
          );
          break;
        case $.ui.keyCode.PAGE_DOWN:
          newVal = this._trimAlignValue(
            curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
          break;
        case $.ui.keyCode.UP:
        case $.ui.keyCode.RIGHT:
          if ( curVal === this._valueMax() ) {
            return;
          }
          newVal = this._trimAlignValue( curVal + step );
          break;
        case $.ui.keyCode.DOWN:
        case $.ui.keyCode.LEFT:
          if ( curVal === this._valueMin() ) {
            return;
          }
          newVal = this._trimAlignValue( curVal - step );
          break;
      }

      this._slide( event, index, newVal );
    },
    keyup: function( event ) {
      var index = $( event.target ).data( "ui-slider-handle-index" );

      if ( this._keySliding ) {
        this._keySliding = false;
        this._stop( event, index );
        this._change( event, index );
        this._removeClass( $( event.target ), null, "ui-state-active" );
      }
    }
  }
} );


/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css



var widgetsSortable = $.widget( "ui.sortable", $.ui.mouse, {
  version: "1.12.1",
  widgetEventPrefix: "sort",
  ready: false,
  options: {
    appendTo: "parent",
    axis: false,
    connectWith: false,
    containment: false,
    cursor: "auto",
    cursorAt: false,
    dropOnEmpty: true,
    forcePlaceholderSize: false,
    forceHelperSize: false,
    grid: false,
    handle: false,
    helper: "original",
    items: "> *",
    opacity: false,
    placeholder: false,
    revert: false,
    scroll: true,
    scrollSensitivity: 20,
    scrollSpeed: 20,
    scope: "default",
    tolerance: "intersect",
    zIndex: 1000,

    // Callbacks
    activate: null,
    beforeStop: null,
    change: null,
    deactivate: null,
    out: null,
    over: null,
    receive: null,
    remove: null,
    sort: null,
    start: null,
    stop: null,
    update: null
  },

  _isOverAxis: function( x, reference, size ) {
    return ( x >= reference ) && ( x < ( reference + size ) );
  },

  _isFloating: function( item ) {
    return ( /left|right/ ).test( item.css( "float" ) ) ||
      ( /inline|table-cell/ ).test( item.css( "display" ) );
  },

  _create: function() {
    this.containerCache = {};
    this._addClass( "ui-sortable" );

    //Get the items
    this.refresh();

    //Let's determine the parent's offset
    this.offset = this.element.offset();

    //Initialize mouse events for interaction
    this._mouseInit();

    this._setHandleClassName();

    //We're ready to go
    this.ready = true;

  },

  _setOption: function( key, value ) {
    this._super( key, value );

    if ( key === "handle" ) {
      this._setHandleClassName();
    }
  },

  _setHandleClassName: function() {
    var that = this;
    this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
    $.each( this.items, function() {
      that._addClass(
        this.instance.options.handle ?
          this.item.find( this.instance.options.handle ) :
          this.item,
        "ui-sortable-handle"
      );
    } );
  },

  _destroy: function() {
    this._mouseDestroy();

    for ( var i = this.items.length - 1; i >= 0; i-- ) {
      this.items[ i ].item.removeData( this.widgetName + "-item" );
    }

    return this;
  },

  _mouseCapture: function( event, overrideHandle ) {
    var currentItem = null,
      validHandle = false,
      that = this;

    if ( this.reverting ) {
      return false;
    }

    if ( this.options.disabled || this.options.type === "static" ) {
      return false;
    }

    //We have to refresh the items data once first
    this._refreshItems( event );

    //Find out if the clicked node (or one of its parents) is a actual item in this.items
    $( event.target ).parents().each( function() {
      if ( $.data( this, that.widgetName + "-item" ) === that ) {
        currentItem = $( this );
        return false;
      }
    } );
    if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
      currentItem = $( event.target );
    }

    if ( !currentItem ) {
      return false;
    }
    if ( this.options.handle && !overrideHandle ) {
      $( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
        if ( this === event.target ) {
          validHandle = true;
        }
      } );
      if ( !validHandle ) {
        return false;
      }
    }

    this.currentItem = currentItem;
    this._removeCurrentsFromItems();
    return true;

  },

  _mouseStart: function( event, overrideHandle, noActivation ) {

    var i, body,
      o = this.options;

    this.currentContainer = this;

    //We only need to call refreshPositions, because the refreshItems call has been moved to
    // mouseCapture
    this.refreshPositions();

    //Create and append the visible helper
    this.helper = this._createHelper( event );

    //Cache the helper size
    this._cacheHelperProportions();

    /*
     * - Position generation -
     * This block generates everything position related - it's the core of draggables.
     */

    //Cache the margins of the original element
    this._cacheMargins();

    //Get the next scrolling parent
    this.scrollParent = this.helper.scrollParent();

    //The element's absolute position on the page minus margins
    this.offset = this.currentItem.offset();
    this.offset = {
      top: this.offset.top - this.margins.top,
      left: this.offset.left - this.margins.left
    };

    $.extend( this.offset, {
      click: { //Where the click happened, relative to the element
        left: event.pageX - this.offset.left,
        top: event.pageY - this.offset.top
      },
      parent: this._getParentOffset(),

      // This is a relative to absolute position minus the actual position calculation -
      // only used for relative positioned helper
      relative: this._getRelativeOffset()
    } );

    // Only after we got the offset, we can change the helper's position to absolute
    // TODO: Still need to figure out a way to make relative sorting possible
    this.helper.css( "position", "absolute" );
    this.cssPosition = this.helper.css( "position" );

    //Generate the original position
    this.originalPosition = this._generatePosition( event );
    this.originalPageX = event.pageX;
    this.originalPageY = event.pageY;

    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
    ( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

    //Cache the former DOM position
    this.domPosition = {
      prev: this.currentItem.prev()[ 0 ],
      parent: this.currentItem.parent()[ 0 ]
    };

    // If the helper is not the original, hide the original so it's not playing any role during
    // the drag, won't cause anything bad this way
    if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
      this.currentItem.hide();
    }

    //Create the placeholder
    this._createPlaceholder();

    //Set a containment if given in the options
    if ( o.containment ) {
      this._setContainment();
    }

    if ( o.cursor && o.cursor !== "auto" ) { // cursor option
      body = this.document.find( "body" );

      // Support: IE
      this.storedCursor = body.css( "cursor" );
      body.css( "cursor", o.cursor );

      this.storedStylesheet =
        $( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
    }

    if ( o.opacity ) { // opacity option
      if ( this.helper.css( "opacity" ) ) {
        this._storedOpacity = this.helper.css( "opacity" );
      }
      this.helper.css( "opacity", o.opacity );
    }

    if ( o.zIndex ) { // zIndex option
      if ( this.helper.css( "zIndex" ) ) {
        this._storedZIndex = this.helper.css( "zIndex" );
      }
      this.helper.css( "zIndex", o.zIndex );
    }

    //Prepare scrolling
    if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
        this.scrollParent[ 0 ].tagName !== "HTML" ) {
      this.overflowOffset = this.scrollParent.offset();
    }

    //Call callbacks
    this._trigger( "start", event, this._uiHash() );

    //Recache the helper size
    if ( !this._preserveHelperProportions ) {
      this._cacheHelperProportions();
    }

    //Post "activate" events to possible containers
    if ( !noActivation ) {
      for ( i = this.containers.length - 1; i >= 0; i-- ) {
        this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
      }
    }

    //Prepare possible droppables
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.current = this;
    }

    if ( $.ui.ddmanager && !o.dropBehaviour ) {
      $.ui.ddmanager.prepareOffsets( this, event );
    }

    this.dragging = true;

    this._addClass( this.helper, "ui-sortable-helper" );

    // Execute the drag once - this causes the helper not to be visiblebefore getting its
    // correct position
    this._mouseDrag( event );
    return true;

  },

  _mouseDrag: function( event ) {
    var i, item, itemElement, intersection,
      o = this.options,
      scrolled = false;

    //Compute the helpers position
    this.position = this._generatePosition( event );
    this.positionAbs = this._convertPositionTo( "absolute" );

    if ( !this.lastPositionAbs ) {
      this.lastPositionAbs = this.positionAbs;
    }

    //Do scrolling
    if ( this.options.scroll ) {
      if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
          this.scrollParent[ 0 ].tagName !== "HTML" ) {

        if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
            event.pageY < o.scrollSensitivity ) {
          this.scrollParent[ 0 ].scrollTop =
            scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
        } else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
          this.scrollParent[ 0 ].scrollTop =
            scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
        }

        if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
            event.pageX < o.scrollSensitivity ) {
          this.scrollParent[ 0 ].scrollLeft = scrolled =
            this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
        } else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
          this.scrollParent[ 0 ].scrollLeft = scrolled =
            this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
        }

      } else {

        if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
          scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
        } else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
            o.scrollSensitivity ) {
          scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
        }

        if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
          scrolled = this.document.scrollLeft(
            this.document.scrollLeft() - o.scrollSpeed
          );
        } else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
            o.scrollSensitivity ) {
          scrolled = this.document.scrollLeft(
            this.document.scrollLeft() + o.scrollSpeed
          );
        }

      }

      if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
        $.ui.ddmanager.prepareOffsets( this, event );
      }
    }

    //Regenerate the absolute position used for position checks
    this.positionAbs = this._convertPositionTo( "absolute" );

    //Set the helper position
    if ( !this.options.axis || this.options.axis !== "y" ) {
      this.helper[ 0 ].style.left = this.position.left + "px";
    }
    if ( !this.options.axis || this.options.axis !== "x" ) {
      this.helper[ 0 ].style.top = this.position.top + "px";
    }

    //Rearrange
    for ( i = this.items.length - 1; i >= 0; i-- ) {

      //Cache variables and intersection, continue if no intersection
      item = this.items[ i ];
      itemElement = item.item[ 0 ];
      intersection = this._intersectsWithPointer( item );
      if ( !intersection ) {
        continue;
      }

      // Only put the placeholder inside the current Container, skip all
      // items from other containers. This works because when moving
      // an item from one container to another the
      // currentContainer is switched before the placeholder is moved.
      //
      // Without this, moving items in "sub-sortables" can cause
      // the placeholder to jitter between the outer and inner container.
      if ( item.instance !== this.currentContainer ) {
        continue;
      }

      // Cannot intersect with itself
      // no useless actions that have been done before
      // no action if the item moved is the parent of the item checked
      if ( itemElement !== this.currentItem[ 0 ] &&
        this.placeholder[ intersection === 1 ? "next" : "prev" ]()[ 0 ] !== itemElement &&
        !$.contains( this.placeholder[ 0 ], itemElement ) &&
        ( this.options.type === "semi-dynamic" ?
          !$.contains( this.element[ 0 ], itemElement ) :
          true
        )
      ) {

        this.direction = intersection === 1 ? "down" : "up";

        if ( this.options.tolerance === "pointer" || this._intersectsWithSides( item ) ) {
          this._rearrange( event, item );
        } else {
          break;
        }

        this._trigger( "change", event, this._uiHash() );
        break;
      }
    }

    //Post events to containers
    this._contactContainers( event );

    //Interconnect with droppables
    if ( $.ui.ddmanager ) {
      $.ui.ddmanager.drag( this, event );
    }

    //Call callbacks
    this._trigger( "sort", event, this._uiHash() );

    this.lastPositionAbs = this.positionAbs;
    return false;

  },

  _mouseStop: function( event, noPropagation ) {

    if ( !event ) {
      return;
    }

    //If we are using droppables, inform the manager about the drop
    if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
      $.ui.ddmanager.drop( this, event );
    }

    if ( this.options.revert ) {
      var that = this,
        cur = this.placeholder.offset(),
        axis = this.options.axis,
        animation = {};

      if ( !axis || axis === "x" ) {
        animation.left = cur.left - this.offset.parent.left - this.margins.left +
          ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
            0 :
            this.offsetParent[ 0 ].scrollLeft
          );
      }
      if ( !axis || axis === "y" ) {
        animation.top = cur.top - this.offset.parent.top - this.margins.top +
          ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
            0 :
            this.offsetParent[ 0 ].scrollTop
          );
      }
      this.reverting = true;
      $( this.helper ).animate(
        animation,
        parseInt( this.options.revert, 10 ) || 500,
        function() {
          that._clear( event );
        }
      );
    } else {
      this._clear( event, noPropagation );
    }

    return false;

  },

  cancel: function() {

    if ( this.dragging ) {

      this._mouseUp( new $.Event( "mouseup", { target: null } ) );

      if ( this.options.helper === "original" ) {
        this.currentItem.css( this._storedCSS );
        this._removeClass( this.currentItem, "ui-sortable-helper" );
      } else {
        this.currentItem.show();
      }

      //Post deactivating events to containers
      for ( var i = this.containers.length - 1; i >= 0; i-- ) {
        this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
        if ( this.containers[ i ].containerCache.over ) {
          this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
          this.containers[ i ].containerCache.over = 0;
        }
      }

    }

    if ( this.placeholder ) {

      //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
      // it unbinds ALL events from the original node!
      if ( this.placeholder[ 0 ].parentNode ) {
        this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
      }
      if ( this.options.helper !== "original" && this.helper &&
          this.helper[ 0 ].parentNode ) {
        this.helper.remove();
      }

      $.extend( this, {
        helper: null,
        dragging: false,
        reverting: false,
        _noFinalSort: null
      } );

      if ( this.domPosition.prev ) {
        $( this.domPosition.prev ).after( this.currentItem );
      } else {
        $( this.domPosition.parent ).prepend( this.currentItem );
      }
    }

    return this;

  },

  serialize: function( o ) {

    var items = this._getItemsAsjQuery( o && o.connected ),
      str = [];
    o = o || {};

    $( items ).each( function() {
      var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
        .match( o.expression || ( /(.+)[\-=_](.+)/ ) );
      if ( res ) {
        str.push(
          ( o.key || res[ 1 ] + "[]" ) +
          "=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
      }
    } );

    if ( !str.length && o.key ) {
      str.push( o.key + "=" );
    }

    return str.join( "&" );

  },

  toArray: function( o ) {

    var items = this._getItemsAsjQuery( o && o.connected ),
      ret = [];

    o = o || {};

    items.each( function() {
      ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
    } );
    return ret;

  },

  /* Be careful with the following core functions */
  _intersectsWith: function( item ) {

    var x1 = this.positionAbs.left,
      x2 = x1 + this.helperProportions.width,
      y1 = this.positionAbs.top,
      y2 = y1 + this.helperProportions.height,
      l = item.left,
      r = l + item.width,
      t = item.top,
      b = t + item.height,
      dyClick = this.offset.click.top,
      dxClick = this.offset.click.left,
      isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
        ( y1 + dyClick ) < b ),
      isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
        ( x1 + dxClick ) < r ),
      isOverElement = isOverElementHeight && isOverElementWidth;

    if ( this.options.tolerance === "pointer" ||
      this.options.forcePointerForContainers ||
      ( this.options.tolerance !== "pointer" &&
        this.helperProportions[ this.floating ? "width" : "height" ] >
        item[ this.floating ? "width" : "height" ] )
    ) {
      return isOverElement;
    } else {

      return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
        x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
        t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
        y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

    }
  },

  _intersectsWithPointer: function( item ) {
    var verticalDirection, horizontalDirection,
      isOverElementHeight = ( this.options.axis === "x" ) ||
        this._isOverAxis(
          this.positionAbs.top + this.offset.click.top, item.top, item.height ),
      isOverElementWidth = ( this.options.axis === "y" ) ||
        this._isOverAxis(
          this.positionAbs.left + this.offset.click.left, item.left, item.width ),
      isOverElement = isOverElementHeight && isOverElementWidth;

    if ( !isOverElement ) {
      return false;
    }

    verticalDirection = this._getDragVerticalDirection();
    horizontalDirection = this._getDragHorizontalDirection();

    return this.floating ?
      ( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 )
      : ( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

  },

  _intersectsWithSides: function( item ) {

    var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
        this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
      isOverRightHalf = this._isOverAxis( this.positionAbs.left +
        this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
      verticalDirection = this._getDragVerticalDirection(),
      horizontalDirection = this._getDragHorizontalDirection();

    if ( this.floating && horizontalDirection ) {
      return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
        ( horizontalDirection === "left" && !isOverRightHalf ) );
    } else {
      return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
        ( verticalDirection === "up" && !isOverBottomHalf ) );
    }

  },

  _getDragVerticalDirection: function() {
    var delta = this.positionAbs.top - this.lastPositionAbs.top;
    return delta !== 0 && ( delta > 0 ? "down" : "up" );
  },

  _getDragHorizontalDirection: function() {
    var delta = this.positionAbs.left - this.lastPositionAbs.left;
    return delta !== 0 && ( delta > 0 ? "right" : "left" );
  },

  refresh: function( event ) {
    this._refreshItems( event );
    this._setHandleClassName();
    this.refreshPositions();
    return this;
  },

  _connectWith: function() {
    var options = this.options;
    return options.connectWith.constructor === String ?
      [ options.connectWith ] :
      options.connectWith;
  },

  _getItemsAsjQuery: function( connected ) {

    var i, j, cur, inst,
      items = [],
      queries = [],
      connectWith = this._connectWith();

    if ( connectWith && connected ) {
      for ( i = connectWith.length - 1; i >= 0; i-- ) {
        cur = $( connectWith[ i ], this.document[ 0 ] );
        for ( j = cur.length - 1; j >= 0; j-- ) {
          inst = $.data( cur[ j ], this.widgetFullName );
          if ( inst && inst !== this && !inst.options.disabled ) {
            queries.push( [ $.isFunction( inst.options.items ) ?
              inst.options.items.call( inst.element ) :
              $( inst.options.items, inst.element )
                .not( ".ui-sortable-helper" )
                .not( ".ui-sortable-placeholder" ), inst ] );
          }
        }
      }
    }

    queries.push( [ $.isFunction( this.options.items ) ?
      this.options.items
        .call( this.element, null, { options: this.options, item: this.currentItem } ) :
      $( this.options.items, this.element )
        .not( ".ui-sortable-helper" )
        .not( ".ui-sortable-placeholder" ), this ] );

    function addItems() {
      items.push( this );
    }
    for ( i = queries.length - 1; i >= 0; i-- ) {
      queries[ i ][ 0 ].each( addItems );
    }

    return $( items );

  },

  _removeCurrentsFromItems: function() {

    var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

    this.items = $.grep( this.items, function( item ) {
      for ( var j = 0; j < list.length; j++ ) {
        if ( list[ j ] === item.item[ 0 ] ) {
          return false;
        }
      }
      return true;
    } );

  },

  _refreshItems: function( event ) {

    this.items = [];
    this.containers = [ this ];

    var i, j, cur, inst, targetData, _queries, item, queriesLength,
      items = this.items,
      queries = [ [ $.isFunction( this.options.items ) ?
        this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
        $( this.options.items, this.element ), this ] ],
      connectWith = this._connectWith();

    //Shouldn't be run the first time through due to massive slow-down
    if ( connectWith && this.ready ) {
      for ( i = connectWith.length - 1; i >= 0; i-- ) {
        cur = $( connectWith[ i ], this.document[ 0 ] );
        for ( j = cur.length - 1; j >= 0; j-- ) {
          inst = $.data( cur[ j ], this.widgetFullName );
          if ( inst && inst !== this && !inst.options.disabled ) {
            queries.push( [ $.isFunction( inst.options.items ) ?
              inst.options.items
                .call( inst.element[ 0 ], event, { item: this.currentItem } ) :
              $( inst.options.items, inst.element ), inst ] );
            this.containers.push( inst );
          }
        }
      }
    }

    for ( i = queries.length - 1; i >= 0; i-- ) {
      targetData = queries[ i ][ 1 ];
      _queries = queries[ i ][ 0 ];

      for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
        item = $( _queries[ j ] );

        // Data for target checking (mouse manager)
        item.data( this.widgetName + "-item", targetData );

        items.push( {
          item: item,
          instance: targetData,
          width: 0, height: 0,
          left: 0, top: 0
        } );
      }
    }

  },

  refreshPositions: function( fast ) {

    // Determine whether items are being displayed horizontally
    this.floating = this.items.length ?
      this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
      false;

    //This has to be redone because due to the item being moved out/into the offsetParent,
    // the offsetParent's position will change
    if ( this.offsetParent && this.helper ) {
      this.offset.parent = this._getParentOffset();
    }

    var i, item, t, p;

    for ( i = this.items.length - 1; i >= 0; i-- ) {
      item = this.items[ i ];

      //We ignore calculating positions of all connected containers when we're not over them
      if ( item.instance !== this.currentContainer && this.currentContainer &&
          item.item[ 0 ] !== this.currentItem[ 0 ] ) {
        continue;
      }

      t = this.options.toleranceElement ?
        $( this.options.toleranceElement, item.item ) :
        item.item;

      if ( !fast ) {
        item.width = t.outerWidth();
        item.height = t.outerHeight();
      }

      p = t.offset();
      item.left = p.left;
      item.top = p.top;
    }

    if ( this.options.custom && this.options.custom.refreshContainers ) {
      this.options.custom.refreshContainers.call( this );
    } else {
      for ( i = this.containers.length - 1; i >= 0; i-- ) {
        p = this.containers[ i ].element.offset();
        this.containers[ i ].containerCache.left = p.left;
        this.containers[ i ].containerCache.top = p.top;
        this.containers[ i ].containerCache.width =
          this.containers[ i ].element.outerWidth();
        this.containers[ i ].containerCache.height =
          this.containers[ i ].element.outerHeight();
      }
    }

    return this;
  },

  _createPlaceholder: function( that ) {
    that = that || this;
    var className,
      o = that.options;

    if ( !o.placeholder || o.placeholder.constructor === String ) {
      className = o.placeholder;
      o.placeholder = {
        element: function() {

          var nodeName = that.currentItem[ 0 ].nodeName.toLowerCase(),
            element = $( "<" + nodeName + ">", that.document[ 0 ] );

            that._addClass( element, "ui-sortable-placeholder",
                className || that.currentItem[ 0 ].className )
              ._removeClass( element, "ui-sortable-helper" );

          if ( nodeName === "tbody" ) {
            that._createTrPlaceholder(
              that.currentItem.find( "tr" ).eq( 0 ),
              $( "<tr>", that.document[ 0 ] ).appendTo( element )
            );
          } else if ( nodeName === "tr" ) {
            that._createTrPlaceholder( that.currentItem, element );
          } else if ( nodeName === "img" ) {
            element.attr( "src", that.currentItem.attr( "src" ) );
          }

          if ( !className ) {
            element.css( "visibility", "hidden" );
          }

          return element;
        },
        update: function( container, p ) {

          // 1. If a className is set as 'placeholder option, we don't force sizes -
          // the class is responsible for that
          // 2. The option 'forcePlaceholderSize can be enabled to force it even if a
          // class name is specified
          if ( className && !o.forcePlaceholderSize ) {
            return;
          }

          //If the element doesn't have a actual height by itself (without styles coming
          // from a stylesheet), it receives the inline height from the dragged item
          if ( !p.height() ) {
            p.height(
              that.currentItem.innerHeight() -
              parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
              parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
          }
          if ( !p.width() ) {
            p.width(
              that.currentItem.innerWidth() -
              parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
              parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
          }
        }
      };
    }

    //Create the placeholder
    that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

    //Append it after the actual current item
    that.currentItem.after( that.placeholder );

    //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
    o.placeholder.update( that, that.placeholder );

  },

  _createTrPlaceholder: function( sourceTr, targetTr ) {
    var that = this;

    sourceTr.children().each( function() {
      $( "<td>&#160;</td>", that.document[ 0 ] )
        .attr( "colspan", $( this ).attr( "colspan" ) || 1 )
        .appendTo( targetTr );
    } );
  },

  _contactContainers: function( event ) {
    var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
      floating, axis,
      innermostContainer = null,
      innermostIndex = null;

    // Get innermost container that intersects with item
    for ( i = this.containers.length - 1; i >= 0; i-- ) {

      // Never consider a container that's located within the item itself
      if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
        continue;
      }

      if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

        // If we've already found a container and it's more "inner" than this, then continue
        if ( innermostContainer &&
            $.contains(
              this.containers[ i ].element[ 0 ],
              innermostContainer.element[ 0 ] ) ) {
          continue;
        }

        innermostContainer = this.containers[ i ];
        innermostIndex = i;

      } else {

        // container doesn't intersect. trigger "out" event if necessary
        if ( this.containers[ i ].containerCache.over ) {
          this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
          this.containers[ i ].containerCache.over = 0;
        }
      }

    }

    // If no intersecting containers found, return
    if ( !innermostContainer ) {
      return;
    }

    // Move the item into the container if it's not there already
    if ( this.containers.length === 1 ) {
      if ( !this.containers[ innermostIndex ].containerCache.over ) {
        this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
        this.containers[ innermostIndex ].containerCache.over = 1;
      }
    } else {

      // When entering a new container, we will find the item with the least distance and
      // append our item near it
      dist = 10000;
      itemWithLeastDistance = null;
      floating = innermostContainer.floating || this._isFloating( this.currentItem );
      posProperty = floating ? "left" : "top";
      sizeProperty = floating ? "width" : "height";
      axis = floating ? "pageX" : "pageY";

      for ( j = this.items.length - 1; j >= 0; j-- ) {
        if ( !$.contains(
            this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
        ) {
          continue;
        }
        if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
          continue;
        }

        cur = this.items[ j ].item.offset()[ posProperty ];
        nearBottom = false;
        if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
          nearBottom = true;
        }

        if ( Math.abs( event[ axis ] - cur ) < dist ) {
          dist = Math.abs( event[ axis ] - cur );
          itemWithLeastDistance = this.items[ j ];
          this.direction = nearBottom ? "up" : "down";
        }
      }

      //Check if dropOnEmpty is enabled
      if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
        return;
      }

      if ( this.currentContainer === this.containers[ innermostIndex ] ) {
        if ( !this.currentContainer.containerCache.over ) {
          this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
          this.currentContainer.containerCache.over = 1;
        }
        return;
      }

      itemWithLeastDistance ?
        this._rearrange( event, itemWithLeastDistance, null, true ) :
        this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
      this._trigger( "change", event, this._uiHash() );
      this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
      this.currentContainer = this.containers[ innermostIndex ];

      //Update the placeholder
      this.options.placeholder.update( this.currentContainer, this.placeholder );

      this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
      this.containers[ innermostIndex ].containerCache.over = 1;
    }

  },

  _createHelper: function( event ) {

    var o = this.options,
      helper = $.isFunction( o.helper ) ?
        $( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
        ( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

    //Add the helper to the DOM if that didn't happen already
    if ( !helper.parents( "body" ).length ) {
      $( o.appendTo !== "parent" ?
        o.appendTo :
        this.currentItem[ 0 ].parentNode )[ 0 ].appendChild( helper[ 0 ] );
    }

    if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
      this._storedCSS = {
        width: this.currentItem[ 0 ].style.width,
        height: this.currentItem[ 0 ].style.height,
        position: this.currentItem.css( "position" ),
        top: this.currentItem.css( "top" ),
        left: this.currentItem.css( "left" )
      };
    }

    if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
      helper.width( this.currentItem.width() );
    }
    if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
      helper.height( this.currentItem.height() );
    }

    return helper;

  },

  _adjustOffsetFromHelper: function( obj ) {
    if ( typeof obj === "string" ) {
      obj = obj.split( " " );
    }
    if ( $.isArray( obj ) ) {
      obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
    }
    if ( "left" in obj ) {
      this.offset.click.left = obj.left + this.margins.left;
    }
    if ( "right" in obj ) {
      this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
    }
    if ( "top" in obj ) {
      this.offset.click.top = obj.top + this.margins.top;
    }
    if ( "bottom" in obj ) {
      this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
    }
  },

  _getParentOffset: function() {

    //Get the offsetParent and cache its position
    this.offsetParent = this.helper.offsetParent();
    var po = this.offsetParent.offset();

    // This is a special case where we need to modify a offset calculated on start, since the
    // following happened:
    // 1. The position of the helper is absolute, so it's position is calculated based on the
    // next positioned parent
    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
    // the document, which means that the scroll is included in the initial calculation of the
    // offset of the parent, and never recalculated upon drag
    if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
        $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
      po.left += this.scrollParent.scrollLeft();
      po.top += this.scrollParent.scrollTop();
    }

    // This needs to be actually done for all browsers, since pageX/pageY includes this
    // information with an ugly IE fix
    if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
        ( this.offsetParent[ 0 ].tagName &&
        this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
      po = { top: 0, left: 0 };
    }

    return {
      top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
      left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
    };

  },

  _getRelativeOffset: function() {

    if ( this.cssPosition === "relative" ) {
      var p = this.currentItem.position();
      return {
        top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
          this.scrollParent.scrollTop(),
        left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
          this.scrollParent.scrollLeft()
      };
    } else {
      return { top: 0, left: 0 };
    }

  },

  _cacheMargins: function() {
    this.margins = {
      left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
      top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
    };
  },

  _cacheHelperProportions: function() {
    this.helperProportions = {
      width: this.helper.outerWidth(),
      height: this.helper.outerHeight()
    };
  },

  _setContainment: function() {

    var ce, co, over,
      o = this.options;
    if ( o.containment === "parent" ) {
      o.containment = this.helper[ 0 ].parentNode;
    }
    if ( o.containment === "document" || o.containment === "window" ) {
      this.containment = [
        0 - this.offset.relative.left - this.offset.parent.left,
        0 - this.offset.relative.top - this.offset.parent.top,
        o.containment === "document" ?
          this.document.width() :
          this.window.width() - this.helperProportions.width - this.margins.left,
        ( o.containment === "document" ?
          ( this.document.height() || document.body.parentNode.scrollHeight ) :
          this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
        ) - this.helperProportions.height - this.margins.top
      ];
    }

    if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
      ce = $( o.containment )[ 0 ];
      co = $( o.containment ).offset();
      over = ( $( ce ).css( "overflow" ) !== "hidden" );

      this.containment = [
        co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
          ( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
        co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
          ( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
        co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
          ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
          ( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
          this.helperProportions.width - this.margins.left,
        co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
          ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
          ( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
          this.helperProportions.height - this.margins.top
      ];
    }

  },

  _convertPositionTo: function( d, pos ) {

    if ( !pos ) {
      pos = this.position;
    }
    var mod = d === "absolute" ? 1 : -1,
      scroll = this.cssPosition === "absolute" &&
        !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
        $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
          this.offsetParent :
          this.scrollParent,
      scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

    return {
      top: (

        // The absolute mouse position
        pos.top +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top * mod -
        ( ( this.cssPosition === "fixed" ?
          -this.scrollParent.scrollTop() :
          ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
      ),
      left: (

        // The absolute mouse position
        pos.left +

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left * mod +

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left * mod -
        ( ( this.cssPosition === "fixed" ?
          -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
          scroll.scrollLeft() ) * mod )
      )
    };

  },

  _generatePosition: function( event ) {

    var top, left,
      o = this.options,
      pageX = event.pageX,
      pageY = event.pageY,
      scroll = this.cssPosition === "absolute" &&
        !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
        $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
          this.offsetParent :
          this.scrollParent,
        scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

    // This is another very weird special case that only happens for relative elements:
    // 1. If the css position is relative
    // 2. and the scroll parent is the document or similar to the offset parent
    // we have to refresh the relative offset during the scroll so there are no jumps
    if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
        this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
      this.offset.relative = this._getRelativeOffset();
    }

    /*
     * - Position constraining -
     * Constrain the position to a mix of grid, containment.
     */

    if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

      if ( this.containment ) {
        if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
          pageX = this.containment[ 0 ] + this.offset.click.left;
        }
        if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
          pageY = this.containment[ 1 ] + this.offset.click.top;
        }
        if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
          pageX = this.containment[ 2 ] + this.offset.click.left;
        }
        if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
          pageY = this.containment[ 3 ] + this.offset.click.top;
        }
      }

      if ( o.grid ) {
        top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
          o.grid[ 1 ] ) * o.grid[ 1 ];
        pageY = this.containment ?
          ( ( top - this.offset.click.top >= this.containment[ 1 ] &&
            top - this.offset.click.top <= this.containment[ 3 ] ) ?
              top :
              ( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
                top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
                top;

        left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
          o.grid[ 0 ] ) * o.grid[ 0 ];
        pageX = this.containment ?
          ( ( left - this.offset.click.left >= this.containment[ 0 ] &&
            left - this.offset.click.left <= this.containment[ 2 ] ) ?
              left :
              ( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
                left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
                left;
      }

    }

    return {
      top: (

        // The absolute mouse position
        pageY -

        // Click offset (relative to the element)
        this.offset.click.top -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.top -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.top +
        ( ( this.cssPosition === "fixed" ?
          -this.scrollParent.scrollTop() :
          ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
      ),
      left: (

        // The absolute mouse position
        pageX -

        // Click offset (relative to the element)
        this.offset.click.left -

        // Only for relative positioned nodes: Relative offset from element to offset parent
        this.offset.relative.left -

        // The offsetParent's offset without borders (offset + border)
        this.offset.parent.left +
        ( ( this.cssPosition === "fixed" ?
          -this.scrollParent.scrollLeft() :
          scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
      )
    };

  },

  _rearrange: function( event, i, a, hardRefresh ) {

    a ? a[ 0 ].appendChild( this.placeholder[ 0 ] ) :
      i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
        ( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );

    //Various things done here to improve the performance:
    // 1. we create a setTimeout, that calls refreshPositions
    // 2. on the instance, we have a counter variable, that get's higher after every append
    // 3. on the local scope, we copy the counter variable, and check in the timeout,
    // if it's still the same
    // 4. this lets only the last addition to the timeout stack through
    this.counter = this.counter ? ++this.counter : 1;
    var counter = this.counter;

    this._delay( function() {
      if ( counter === this.counter ) {

        //Precompute after each DOM insertion, NOT on mousemove
        this.refreshPositions( !hardRefresh );
      }
    } );

  },

  _clear: function( event, noPropagation ) {

    this.reverting = false;

    // We delay all events that have to be triggered to after the point where the placeholder
    // has been removed and everything else normalized again
    var i,
      delayedTriggers = [];

    // We first have to update the dom position of the actual currentItem
    // Note: don't do it if the current item is already removed (by a user), or it gets
    // reappended (see #4088)
    if ( !this._noFinalSort && this.currentItem.parent().length ) {
      this.placeholder.before( this.currentItem );
    }
    this._noFinalSort = null;

    if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
      for ( i in this._storedCSS ) {
        if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
          this._storedCSS[ i ] = "";
        }
      }
      this.currentItem.css( this._storedCSS );
      this._removeClass( this.currentItem, "ui-sortable-helper" );
    } else {
      this.currentItem.show();
    }

    if ( this.fromOutside && !noPropagation ) {
      delayedTriggers.push( function( event ) {
        this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
      } );
    }
    if ( ( this.fromOutside ||
        this.domPosition.prev !==
        this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
        this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

      // Trigger update callback if the DOM position has changed
      delayedTriggers.push( function( event ) {
        this._trigger( "update", event, this._uiHash() );
      } );
    }

    // Check if the items Container has Changed and trigger appropriate
    // events.
    if ( this !== this.currentContainer ) {
      if ( !noPropagation ) {
        delayedTriggers.push( function( event ) {
          this._trigger( "remove", event, this._uiHash() );
        } );
        delayedTriggers.push( ( function( c ) {
          return function( event ) {
            c._trigger( "receive", event, this._uiHash( this ) );
          };
        } ).call( this, this.currentContainer ) );
        delayedTriggers.push( ( function( c ) {
          return function( event ) {
            c._trigger( "update", event, this._uiHash( this ) );
          };
        } ).call( this, this.currentContainer ) );
      }
    }

    //Post events to containers
    function delayEvent( type, instance, container ) {
      return function( event ) {
        container._trigger( type, event, instance._uiHash( instance ) );
      };
    }
    for ( i = this.containers.length - 1; i >= 0; i-- ) {
      if ( !noPropagation ) {
        delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
      }
      if ( this.containers[ i ].containerCache.over ) {
        delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
        this.containers[ i ].containerCache.over = 0;
      }
    }

    //Do what was originally in plugins
    if ( this.storedCursor ) {
      this.document.find( "body" ).css( "cursor", this.storedCursor );
      this.storedStylesheet.remove();
    }
    if ( this._storedOpacity ) {
      this.helper.css( "opacity", this._storedOpacity );
    }
    if ( this._storedZIndex ) {
      this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
    }

    this.dragging = false;

    if ( !noPropagation ) {
      this._trigger( "beforeStop", event, this._uiHash() );
    }

    //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
    // it unbinds ALL events from the original node!
    this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

    if ( !this.cancelHelperRemoval ) {
      if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
        this.helper.remove();
      }
      this.helper = null;
    }

    if ( !noPropagation ) {
      for ( i = 0; i < delayedTriggers.length; i++ ) {

        // Trigger all delayed events
        delayedTriggers[ i ].call( this, event );
      }
      this._trigger( "stop", event, this._uiHash() );
    }

    this.fromOutside = false;
    return !this.cancelHelperRemoval;

  },

  _trigger: function() {
    if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
      this.cancel();
    }
  },

  _uiHash: function( _inst ) {
    var inst = _inst || this;
    return {
      helper: inst.helper,
      placeholder: inst.placeholder || $( [] ),
      position: inst.position,
      originalPosition: inst.originalPosition,
      offset: inst.positionAbs,
      item: inst.currentItem,
      sender: _inst ? _inst.element : null
    };
  }

} );


/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css



function spinnerModifer( fn ) {
  return function() {
    var previous = this.element.val();
    fn.apply( this, arguments );
    this._refresh();
    if ( previous !== this.element.val() ) {
      this._trigger( "change" );
    }
  };
}

$.widget( "ui.spinner", {
  version: "1.12.1",
  defaultElement: "<input>",
  widgetEventPrefix: "spin",
  options: {
    classes: {
      "ui-spinner": "ui-corner-all",
      "ui-spinner-down": "ui-corner-br",
      "ui-spinner-up": "ui-corner-tr"
    },
    culture: null,
    icons: {
      down: "ui-icon-triangle-1-s",
      up: "ui-icon-triangle-1-n"
    },
    incremental: true,
    max: null,
    min: null,
    numberFormat: null,
    page: 10,
    step: 1,

    change: null,
    spin: null,
    start: null,
    stop: null
  },

  _create: function() {

    // handle string values that need to be parsed
    this._setOption( "max", this.options.max );
    this._setOption( "min", this.options.min );
    this._setOption( "step", this.options.step );

    // Only format if there is a value, prevents the field from being marked
    // as invalid in Firefox, see #9573.
    if ( this.value() !== "" ) {

      // Format the value, but don't constrain.
      this._value( this.element.val(), true );
    }

    this._draw();
    this._on( this._events );
    this._refresh();

    // Turning off autocomplete prevents the browser from remembering the
    // value when navigating through history, so we re-enable autocomplete
    // if the page is unloaded before the widget is destroyed. #7790
    this._on( this.window, {
      beforeunload: function() {
        this.element.removeAttr( "autocomplete" );
      }
    } );
  },

  _getCreateOptions: function() {
    var options = this._super();
    var element = this.element;

    $.each( [ "min", "max", "step" ], function( i, option ) {
      var value = element.attr( option );
      if ( value != null && value.length ) {
        options[ option ] = value;
      }
    } );

    return options;
  },

  _events: {
    keydown: function( event ) {
      if ( this._start( event ) && this._keydown( event ) ) {
        event.preventDefault();
      }
    },
    keyup: "_stop",
    focus: function() {
      this.previous = this.element.val();
    },
    blur: function( event ) {
      if ( this.cancelBlur ) {
        delete this.cancelBlur;
        return;
      }

      this._stop();
      this._refresh();
      if ( this.previous !== this.element.val() ) {
        this._trigger( "change", event );
      }
    },
    mousewheel: function( event, delta ) {
      if ( !delta ) {
        return;
      }
      if ( !this.spinning && !this._start( event ) ) {
        return false;
      }

      this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
      clearTimeout( this.mousewheelTimer );
      this.mousewheelTimer = this._delay( function() {
        if ( this.spinning ) {
          this._stop( event );
        }
      }, 100 );
      event.preventDefault();
    },
    "mousedown .ui-spinner-button": function( event ) {
      var previous;

      // We never want the buttons to have focus; whenever the user is
      // interacting with the spinner, the focus should be on the input.
      // If the input is focused then this.previous is properly set from
      // when the input first received focus. If the input is not focused
      // then we need to set this.previous based on the value before spinning.
      previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
        this.previous : this.element.val();
      function checkFocus() {
        var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
        if ( !isActive ) {
          this.element.trigger( "focus" );
          this.previous = previous;

          // support: IE
          // IE sets focus asynchronously, so we need to check if focus
          // moved off of the input because the user clicked on the button.
          this._delay( function() {
            this.previous = previous;
          } );
        }
      }

      // Ensure focus is on (or stays on) the text field
      event.preventDefault();
      checkFocus.call( this );

      // Support: IE
      // IE doesn't prevent moving focus even with event.preventDefault()
      // so we set a flag to know when we should ignore the blur event
      // and check (again) if focus moved off of the input.
      this.cancelBlur = true;
      this._delay( function() {
        delete this.cancelBlur;
        checkFocus.call( this );
      } );

      if ( this._start( event ) === false ) {
        return;
      }

      this._repeat( null, $( event.currentTarget )
        .hasClass( "ui-spinner-up" ) ? 1 : -1, event );
    },
    "mouseup .ui-spinner-button": "_stop",
    "mouseenter .ui-spinner-button": function( event ) {

      // button will add ui-state-active if mouse was down while mouseleave and kept down
      if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
        return;
      }

      if ( this._start( event ) === false ) {
        return false;
      }
      this._repeat( null, $( event.currentTarget )
        .hasClass( "ui-spinner-up" ) ? 1 : -1, event );
    },

    // TODO: do we really want to consider this a stop?
    // shouldn't we just stop the repeater and wait until mouseup before
    // we trigger the stop event?
    "mouseleave .ui-spinner-button": "_stop"
  },

  // Support mobile enhanced option and make backcompat more sane
  _enhance: function() {
    this.uiSpinner = this.element
      .attr( "autocomplete", "off" )
      .wrap( "<span>" )
      .parent()

        // Add buttons
        .append(
          "<a></a><a></a>"
        );
  },

  _draw: function() {
    this._enhance();

    this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
    this._addClass( "ui-spinner-input" );

    this.element.attr( "role", "spinbutton" );

    // Button bindings
    this.buttons = this.uiSpinner.children( "a" )
      .attr( "tabIndex", -1 )
      .attr( "aria-hidden", true )
      .button( {
        classes: {
          "ui-button": ""
        }
      } );

    // TODO: Right now button does not support classes this is already updated in button PR
    this._removeClass( this.buttons, "ui-corner-all" );

    this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
    this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
    this.buttons.first().button( {
      "icon": this.options.icons.up,
      "showLabel": false
    } );
    this.buttons.last().button( {
      "icon": this.options.icons.down,
      "showLabel": false
    } );

    // IE 6 doesn't understand height: 50% for the buttons
    // unless the wrapper has an explicit height
    if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
        this.uiSpinner.height() > 0 ) {
      this.uiSpinner.height( this.uiSpinner.height() );
    }
  },

  _keydown: function( event ) {
    var options = this.options,
      keyCode = $.ui.keyCode;

    switch ( event.keyCode ) {
    case keyCode.UP:
      this._repeat( null, 1, event );
      return true;
    case keyCode.DOWN:
      this._repeat( null, -1, event );
      return true;
    case keyCode.PAGE_UP:
      this._repeat( null, options.page, event );
      return true;
    case keyCode.PAGE_DOWN:
      this._repeat( null, -options.page, event );
      return true;
    }

    return false;
  },

  _start: function( event ) {
    if ( !this.spinning && this._trigger( "start", event ) === false ) {
      return false;
    }

    if ( !this.counter ) {
      this.counter = 1;
    }
    this.spinning = true;
    return true;
  },

  _repeat: function( i, steps, event ) {
    i = i || 500;

    clearTimeout( this.timer );
    this.timer = this._delay( function() {
      this._repeat( 40, steps, event );
    }, i );

    this._spin( steps * this.options.step, event );
  },

  _spin: function( step, event ) {
    var value = this.value() || 0;

    if ( !this.counter ) {
      this.counter = 1;
    }

    value = this._adjustValue( value + step * this._increment( this.counter ) );

    if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
      this._value( value );
      this.counter++;
    }
  },

  _increment: function( i ) {
    var incremental = this.options.incremental;

    if ( incremental ) {
      return $.isFunction( incremental ) ?
        incremental( i ) :
        Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
    }

    return 1;
  },

  _precision: function() {
    var precision = this._precisionOf( this.options.step );
    if ( this.options.min !== null ) {
      precision = Math.max( precision, this._precisionOf( this.options.min ) );
    }
    return precision;
  },

  _precisionOf: function( num ) {
    var str = num.toString(),
      decimal = str.indexOf( "." );
    return decimal === -1 ? 0 : str.length - decimal - 1;
  },

  _adjustValue: function( value ) {
    var base, aboveMin,
      options = this.options;

    // Make sure we're at a valid step
    // - find out where we are relative to the base (min or 0)
    base = options.min !== null ? options.min : 0;
    aboveMin = value - base;

    // - round to the nearest step
    aboveMin = Math.round( aboveMin / options.step ) * options.step;

    // - rounding is based on 0, so adjust back to our base
    value = base + aboveMin;

    // Fix precision from bad JS floating point math
    value = parseFloat( value.toFixed( this._precision() ) );

    // Clamp the value
    if ( options.max !== null && value > options.max ) {
      return options.max;
    }
    if ( options.min !== null && value < options.min ) {
      return options.min;
    }

    return value;
  },

  _stop: function( event ) {
    if ( !this.spinning ) {
      return;
    }

    clearTimeout( this.timer );
    clearTimeout( this.mousewheelTimer );
    this.counter = 0;
    this.spinning = false;
    this._trigger( "stop", event );
  },

  _setOption: function( key, value ) {
    var prevValue, first, last;

    if ( key === "culture" || key === "numberFormat" ) {
      prevValue = this._parse( this.element.val() );
      this.options[ key ] = value;
      this.element.val( this._format( prevValue ) );
      return;
    }

    if ( key === "max" || key === "min" || key === "step" ) {
      if ( typeof value === "string" ) {
        value = this._parse( value );
      }
    }
    if ( key === "icons" ) {
      first = this.buttons.first().find( ".ui-icon" );
      this._removeClass( first, null, this.options.icons.up );
      this._addClass( first, null, value.up );
      last = this.buttons.last().find( ".ui-icon" );
      this._removeClass( last, null, this.options.icons.down );
      this._addClass( last, null, value.down );
    }

    this._super( key, value );
  },

  _setOptionDisabled: function( value ) {
    this._super( value );

    this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
    this.element.prop( "disabled", !!value );
    this.buttons.button( value ? "disable" : "enable" );
  },

  _setOptions: spinnerModifer( function( options ) {
    this._super( options );
  } ),

  _parse: function( val ) {
    if ( typeof val === "string" && val !== "" ) {
      val = window.Globalize && this.options.numberFormat ?
        Globalize.parseFloat( val, 10, this.options.culture ) : +val;
    }
    return val === "" || isNaN( val ) ? null : val;
  },

  _format: function( value ) {
    if ( value === "" ) {
      return "";
    }
    return window.Globalize && this.options.numberFormat ?
      Globalize.format( value, this.options.numberFormat, this.options.culture ) :
      value;
  },

  _refresh: function() {
    this.element.attr( {
      "aria-valuemin": this.options.min,
      "aria-valuemax": this.options.max,

      // TODO: what should we do with values that can't be parsed?
      "aria-valuenow": this._parse( this.element.val() )
    } );
  },

  isValid: function() {
    var value = this.value();

    // Null is invalid
    if ( value === null ) {
      return false;
    }

    // If value gets adjusted, it's invalid
    return value === this._adjustValue( value );
  },

  // Update the value without triggering change
  _value: function( value, allowAny ) {
    var parsed;
    if ( value !== "" ) {
      parsed = this._parse( value );
      if ( parsed !== null ) {
        if ( !allowAny ) {
          parsed = this._adjustValue( parsed );
        }
        value = this._format( parsed );
      }
    }
    this.element.val( value );
    this._refresh();
  },

  _destroy: function() {
    this.element
      .prop( "disabled", false )
      .removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

    this.uiSpinner.replaceWith( this.element );
  },

  stepUp: spinnerModifer( function( steps ) {
    this._stepUp( steps );
  } ),
  _stepUp: function( steps ) {
    if ( this._start() ) {
      this._spin( ( steps || 1 ) * this.options.step );
      this._stop();
    }
  },

  stepDown: spinnerModifer( function( steps ) {
    this._stepDown( steps );
  } ),
  _stepDown: function( steps ) {
    if ( this._start() ) {
      this._spin( ( steps || 1 ) * -this.options.step );
      this._stop();
    }
  },

  pageUp: spinnerModifer( function( pages ) {
    this._stepUp( ( pages || 1 ) * this.options.page );
  } ),

  pageDown: spinnerModifer( function( pages ) {
    this._stepDown( ( pages || 1 ) * this.options.page );
  } ),

  value: function( newVal ) {
    if ( !arguments.length ) {
      return this._parse( this.element.val() );
    }
    spinnerModifer( this._value ).call( this, newVal );
  },

  widget: function() {
    return this.uiSpinner;
  }
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

  // Backcompat for spinner html extension points
  $.widget( "ui.spinner", $.ui.spinner, {
    _enhance: function() {
      this.uiSpinner = this.element
        .attr( "autocomplete", "off" )
        .wrap( this._uiSpinnerHtml() )
        .parent()

          // Add buttons
          .append( this._buttonHtml() );
    },
    _uiSpinnerHtml: function() {
      return "<span>";
    },

    _buttonHtml: function() {
      return "<a></a><a></a>";
    }
  } );
}

var widgetsSpinner = $.ui.spinner;


/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tabs", {
  version: "1.12.1",
  delay: 300,
  options: {
    active: null,
    classes: {
      "ui-tabs": "ui-corner-all",
      "ui-tabs-nav": "ui-corner-all",
      "ui-tabs-panel": "ui-corner-bottom",
      "ui-tabs-tab": "ui-corner-top"
    },
    collapsible: false,
    event: "click",
    heightStyle: "content",
    hide: null,
    show: null,

    // Callbacks
    activate: null,
    beforeActivate: null,
    beforeLoad: null,
    load: null
  },

  _isLocal: ( function() {
    var rhash = /#.*$/;

    return function( anchor ) {
      var anchorUrl, locationUrl;

      anchorUrl = anchor.href.replace( rhash, "" );
      locationUrl = location.href.replace( rhash, "" );

      // Decoding may throw an error if the URL isn't UTF-8 (#9518)
      try {
        anchorUrl = decodeURIComponent( anchorUrl );
      } catch ( error ) {}
      try {
        locationUrl = decodeURIComponent( locationUrl );
      } catch ( error ) {}

      return anchor.hash.length > 1 && anchorUrl === locationUrl;
    };
  } )(),

  _create: function() {
    var that = this,
      options = this.options;

    this.running = false;

    this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
    this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

    this._processTabs();
    options.active = this._initialActive();

    // Take disabling tabs via class attribute from HTML
    // into account and update option properly.
    if ( $.isArray( options.disabled ) ) {
      options.disabled = $.unique( options.disabled.concat(
        $.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
          return that.tabs.index( li );
        } )
      ) ).sort();
    }

    // Check for length avoids error when initializing empty list
    if ( this.options.active !== false && this.anchors.length ) {
      this.active = this._findActive( options.active );
    } else {
      this.active = $();
    }

    this._refresh();

    if ( this.active.length ) {
      this.load( options.active );
    }
  },

  _initialActive: function() {
    var active = this.options.active,
      collapsible = this.options.collapsible,
      locationHash = location.hash.substring( 1 );

    if ( active === null ) {

      // check the fragment identifier in the URL
      if ( locationHash ) {
        this.tabs.each( function( i, tab ) {
          if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
            active = i;
            return false;
          }
        } );
      }

      // Check for a tab marked active via a class
      if ( active === null ) {
        active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
      }

      // No active tab, set to false
      if ( active === null || active === -1 ) {
        active = this.tabs.length ? 0 : false;
      }
    }

    // Handle numbers: negative, out of range
    if ( active !== false ) {
      active = this.tabs.index( this.tabs.eq( active ) );
      if ( active === -1 ) {
        active = collapsible ? false : 0;
      }
    }

    // Don't allow collapsible: false and active: false
    if ( !collapsible && active === false && this.anchors.length ) {
      active = 0;
    }

    return active;
  },

  _getCreateEventData: function() {
    return {
      tab: this.active,
      panel: !this.active.length ? $() : this._getPanelForTab( this.active )
    };
  },

  _tabKeydown: function( event ) {
    var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
      selectedIndex = this.tabs.index( focusedTab ),
      goingForward = true;

    if ( this._handlePageNav( event ) ) {
      return;
    }

    switch ( event.keyCode ) {
    case $.ui.keyCode.RIGHT:
    case $.ui.keyCode.DOWN:
      selectedIndex++;
      break;
    case $.ui.keyCode.UP:
    case $.ui.keyCode.LEFT:
      goingForward = false;
      selectedIndex--;
      break;
    case $.ui.keyCode.END:
      selectedIndex = this.anchors.length - 1;
      break;
    case $.ui.keyCode.HOME:
      selectedIndex = 0;
      break;
    case $.ui.keyCode.SPACE:

      // Activate only, no collapsing
      event.preventDefault();
      clearTimeout( this.activating );
      this._activate( selectedIndex );
      return;
    case $.ui.keyCode.ENTER:

      // Toggle (cancel delayed activation, allow collapsing)
      event.preventDefault();
      clearTimeout( this.activating );

      // Determine if we should collapse or activate
      this._activate( selectedIndex === this.options.active ? false : selectedIndex );
      return;
    default:
      return;
    }

    // Focus the appropriate tab, based on which key was pressed
    event.preventDefault();
    clearTimeout( this.activating );
    selectedIndex = this._focusNextTab( selectedIndex, goingForward );

    // Navigating with control/command key will prevent automatic activation
    if ( !event.ctrlKey && !event.metaKey ) {

      // Update aria-selected immediately so that AT think the tab is already selected.
      // Otherwise AT may confuse the user by stating that they need to activate the tab,
      // but the tab will already be activated by the time the announcement finishes.
      focusedTab.attr( "aria-selected", "false" );
      this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

      this.activating = this._delay( function() {
        this.option( "active", selectedIndex );
      }, this.delay );
    }
  },

  _panelKeydown: function( event ) {
    if ( this._handlePageNav( event ) ) {
      return;
    }

    // Ctrl+up moves focus to the current tab
    if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
      event.preventDefault();
      this.active.trigger( "focus" );
    }
  },

  // Alt+page up/down moves focus to the previous/next tab (and activates)
  _handlePageNav: function( event ) {
    if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
      this._activate( this._focusNextTab( this.options.active - 1, false ) );
      return true;
    }
    if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
      this._activate( this._focusNextTab( this.options.active + 1, true ) );
      return true;
    }
  },

  _findNextTab: function( index, goingForward ) {
    var lastTabIndex = this.tabs.length - 1;

    function constrain() {
      if ( index > lastTabIndex ) {
        index = 0;
      }
      if ( index < 0 ) {
        index = lastTabIndex;
      }
      return index;
    }

    while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
      index = goingForward ? index + 1 : index - 1;
    }

    return index;
  },

  _focusNextTab: function( index, goingForward ) {
    index = this._findNextTab( index, goingForward );
    this.tabs.eq( index ).trigger( "focus" );
    return index;
  },

  _setOption: function( key, value ) {
    if ( key === "active" ) {

      // _activate() will handle invalid values and update this.options
      this._activate( value );
      return;
    }

    this._super( key, value );

    if ( key === "collapsible" ) {
      this._toggleClass( "ui-tabs-collapsible", null, value );

      // Setting collapsible: false while collapsed; open first panel
      if ( !value && this.options.active === false ) {
        this._activate( 0 );
      }
    }

    if ( key === "event" ) {
      this._setupEvents( value );
    }

    if ( key === "heightStyle" ) {
      this._setupHeightStyle( value );
    }
  },

  _sanitizeSelector: function( hash ) {
    return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
  },

  refresh: function() {
    var options = this.options,
      lis = this.tablist.children( ":has(a[href])" );

    // Get disabled tabs from class attribute from HTML
    // this will get converted to a boolean if needed in _refresh()
    options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
      return lis.index( tab );
    } );

    this._processTabs();

    // Was collapsed or no tabs
    if ( options.active === false || !this.anchors.length ) {
      options.active = false;
      this.active = $();

    // was active, but active tab is gone
    } else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

      // all remaining tabs are disabled
      if ( this.tabs.length === options.disabled.length ) {
        options.active = false;
        this.active = $();

      // activate previous tab
      } else {
        this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
      }

    // was active, active tab still exists
    } else {

      // make sure active index is correct
      options.active = this.tabs.index( this.active );
    }

    this._refresh();
  },

  _refresh: function() {
    this._setOptionDisabled( this.options.disabled );
    this._setupEvents( this.options.event );
    this._setupHeightStyle( this.options.heightStyle );

    this.tabs.not( this.active ).attr( {
      "aria-selected": "false",
      "aria-expanded": "false",
      tabIndex: -1
    } );
    this.panels.not( this._getPanelForTab( this.active ) )
      .hide()
      .attr( {
        "aria-hidden": "true"
      } );

    // Make sure one tab is in the tab order
    if ( !this.active.length ) {
      this.tabs.eq( 0 ).attr( "tabIndex", 0 );
    } else {
      this.active
        .attr( {
          "aria-selected": "true",
          "aria-expanded": "true",
          tabIndex: 0
        } );
      this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
      this._getPanelForTab( this.active )
        .show()
        .attr( {
          "aria-hidden": "false"
        } );
    }
  },

  _processTabs: function() {
    var that = this,
      prevTabs = this.tabs,
      prevAnchors = this.anchors,
      prevPanels = this.panels;

    this.tablist = this._getList().attr( "role", "tablist" );
    this._addClass( this.tablist, "ui-tabs-nav",
      "ui-helper-reset ui-helper-clearfix ui-widget-header" );

    // Prevent users from focusing disabled tabs via click
    this.tablist
      .on( "mousedown" + this.eventNamespace, "> li", function( event ) {
        if ( $( this ).is( ".ui-state-disabled" ) ) {
          event.preventDefault();
        }
      } )

      // Support: IE <9
      // Preventing the default action in mousedown doesn't prevent IE
      // from focusing the element, so if the anchor gets focused, blur.
      // We don't have to worry about focusing the previously focused
      // element since clicking on a non-focusable element should focus
      // the body anyway.
      .on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
        if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
          this.blur();
        }
      } );

    this.tabs = this.tablist.find( "> li:has(a[href])" )
      .attr( {
        role: "tab",
        tabIndex: -1
      } );
    this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

    this.anchors = this.tabs.map( function() {
      return $( "a", this )[ 0 ];
    } )
      .attr( {
        role: "presentation",
        tabIndex: -1
      } );
    this._addClass( this.anchors, "ui-tabs-anchor" );

    this.panels = $();

    this.anchors.each( function( i, anchor ) {
      var selector, panel, panelId,
        anchorId = $( anchor ).uniqueId().attr( "id" ),
        tab = $( anchor ).closest( "li" ),
        originalAriaControls = tab.attr( "aria-controls" );

      // Inline tab
      if ( that._isLocal( anchor ) ) {
        selector = anchor.hash;
        panelId = selector.substring( 1 );
        panel = that.element.find( that._sanitizeSelector( selector ) );

      // remote tab
      } else {

        // If the tab doesn't already have aria-controls,
        // generate an id by using a throw-away element
        panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
        selector = "#" + panelId;
        panel = that.element.find( selector );
        if ( !panel.length ) {
          panel = that._createPanel( panelId );
          panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
        }
        panel.attr( "aria-live", "polite" );
      }

      if ( panel.length ) {
        that.panels = that.panels.add( panel );
      }
      if ( originalAriaControls ) {
        tab.data( "ui-tabs-aria-controls", originalAriaControls );
      }
      tab.attr( {
        "aria-controls": panelId,
        "aria-labelledby": anchorId
      } );
      panel.attr( "aria-labelledby", anchorId );
    } );

    this.panels.attr( "role", "tabpanel" );
    this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

    // Avoid memory leaks (#10056)
    if ( prevTabs ) {
      this._off( prevTabs.not( this.tabs ) );
      this._off( prevAnchors.not( this.anchors ) );
      this._off( prevPanels.not( this.panels ) );
    }
  },

  // Allow overriding how to find the list for rare usage scenarios (#7715)
  _getList: function() {
    return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
  },

  _createPanel: function( id ) {
    return $( "<div>" )
      .attr( "id", id )
      .data( "ui-tabs-destroy", true );
  },

  _setOptionDisabled: function( disabled ) {
    var currentItem, li, i;

    if ( $.isArray( disabled ) ) {
      if ( !disabled.length ) {
        disabled = false;
      } else if ( disabled.length === this.anchors.length ) {
        disabled = true;
      }
    }

    // Disable tabs
    for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
      currentItem = $( li );
      if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
        currentItem.attr( "aria-disabled", "true" );
        this._addClass( currentItem, null, "ui-state-disabled" );
      } else {
        currentItem.removeAttr( "aria-disabled" );
        this._removeClass( currentItem, null, "ui-state-disabled" );
      }
    }

    this.options.disabled = disabled;

    this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
      disabled === true );
  },

  _setupEvents: function( event ) {
    var events = {};
    if ( event ) {
      $.each( event.split( " " ), function( index, eventName ) {
        events[ eventName ] = "_eventHandler";
      } );
    }

    this._off( this.anchors.add( this.tabs ).add( this.panels ) );

    // Always prevent the default action, even when disabled
    this._on( true, this.anchors, {
      click: function( event ) {
        event.preventDefault();
      }
    } );
    this._on( this.anchors, events );
    this._on( this.tabs, { keydown: "_tabKeydown" } );
    this._on( this.panels, { keydown: "_panelKeydown" } );

    this._focusable( this.tabs );
    this._hoverable( this.tabs );
  },

  _setupHeightStyle: function( heightStyle ) {
    var maxHeight,
      parent = this.element.parent();

    if ( heightStyle === "fill" ) {
      maxHeight = parent.height();
      maxHeight -= this.element.outerHeight() - this.element.height();

      this.element.siblings( ":visible" ).each( function() {
        var elem = $( this ),
          position = elem.css( "position" );

        if ( position === "absolute" || position === "fixed" ) {
          return;
        }
        maxHeight -= elem.outerHeight( true );
      } );

      this.element.children().not( this.panels ).each( function() {
        maxHeight -= $( this ).outerHeight( true );
      } );

      this.panels.each( function() {
        $( this ).height( Math.max( 0, maxHeight -
          $( this ).innerHeight() + $( this ).height() ) );
      } )
        .css( "overflow", "auto" );
    } else if ( heightStyle === "auto" ) {
      maxHeight = 0;
      this.panels.each( function() {
        maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
      } ).height( maxHeight );
    }
  },

  _eventHandler: function( event ) {
    var options = this.options,
      active = this.active,
      anchor = $( event.currentTarget ),
      tab = anchor.closest( "li" ),
      clickedIsActive = tab[ 0 ] === active[ 0 ],
      collapsing = clickedIsActive && options.collapsible,
      toShow = collapsing ? $() : this._getPanelForTab( tab ),
      toHide = !active.length ? $() : this._getPanelForTab( active ),
      eventData = {
        oldTab: active,
        oldPanel: toHide,
        newTab: collapsing ? $() : tab,
        newPanel: toShow
      };

    event.preventDefault();

    if ( tab.hasClass( "ui-state-disabled" ) ||

        // tab is already loading
        tab.hasClass( "ui-tabs-loading" ) ||

        // can't switch durning an animation
        this.running ||

        // click on active header, but not collapsible
        ( clickedIsActive && !options.collapsible ) ||

        // allow canceling activation
        ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
      return;
    }

    options.active = collapsing ? false : this.tabs.index( tab );

    this.active = clickedIsActive ? $() : tab;
    if ( this.xhr ) {
      this.xhr.abort();
    }

    if ( !toHide.length && !toShow.length ) {
      $.error( "jQuery UI Tabs: Mismatching fragment identifier." );
    }

    if ( toShow.length ) {
      this.load( this.tabs.index( tab ), event );
    }
    this._toggle( event, eventData );
  },

  // Handles show/hide for selecting tabs
  _toggle: function( event, eventData ) {
    var that = this,
      toShow = eventData.newPanel,
      toHide = eventData.oldPanel;

    this.running = true;

    function complete() {
      that.running = false;
      that._trigger( "activate", event, eventData );
    }

    function show() {
      that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

      if ( toShow.length && that.options.show ) {
        that._show( toShow, that.options.show, complete );
      } else {
        toShow.show();
        complete();
      }
    }

    // Start out by hiding, then showing, then completing
    if ( toHide.length && this.options.hide ) {
      this._hide( toHide, this.options.hide, function() {
        that._removeClass( eventData.oldTab.closest( "li" ),
          "ui-tabs-active", "ui-state-active" );
        show();
      } );
    } else {
      this._removeClass( eventData.oldTab.closest( "li" ),
        "ui-tabs-active", "ui-state-active" );
      toHide.hide();
      show();
    }

    toHide.attr( "aria-hidden", "true" );
    eventData.oldTab.attr( {
      "aria-selected": "false",
      "aria-expanded": "false"
    } );

    // If we're switching tabs, remove the old tab from the tab order.
    // If we're opening from collapsed state, remove the previous tab from the tab order.
    // If we're collapsing, then keep the collapsing tab in the tab order.
    if ( toShow.length && toHide.length ) {
      eventData.oldTab.attr( "tabIndex", -1 );
    } else if ( toShow.length ) {
      this.tabs.filter( function() {
        return $( this ).attr( "tabIndex" ) === 0;
      } )
        .attr( "tabIndex", -1 );
    }

    toShow.attr( "aria-hidden", "false" );
    eventData.newTab.attr( {
      "aria-selected": "true",
      "aria-expanded": "true",
      tabIndex: 0
    } );
  },

  _activate: function( index ) {
    var anchor,
      active = this._findActive( index );

    // Trying to activate the already active panel
    if ( active[ 0 ] === this.active[ 0 ] ) {
      return;
    }

    // Trying to collapse, simulate a click on the current active header
    if ( !active.length ) {
      active = this.active;
    }

    anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
    this._eventHandler( {
      target: anchor,
      currentTarget: anchor,
      preventDefault: $.noop
    } );
  },

  _findActive: function( index ) {
    return index === false ? $() : this.tabs.eq( index );
  },

  _getIndex: function( index ) {

    // meta-function to give users option to provide a href string instead of a numerical index.
    if ( typeof index === "string" ) {
      index = this.anchors.index( this.anchors.filter( "[href$='" +
        $.ui.escapeSelector( index ) + "']" ) );
    }

    return index;
  },

  _destroy: function() {
    if ( this.xhr ) {
      this.xhr.abort();
    }

    this.tablist
      .removeAttr( "role" )
      .off( this.eventNamespace );

    this.anchors
      .removeAttr( "role tabIndex" )
      .removeUniqueId();

    this.tabs.add( this.panels ).each( function() {
      if ( $.data( this, "ui-tabs-destroy" ) ) {
        $( this ).remove();
      } else {
        $( this ).removeAttr( "role tabIndex " +
          "aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
      }
    } );

    this.tabs.each( function() {
      var li = $( this ),
        prev = li.data( "ui-tabs-aria-controls" );
      if ( prev ) {
        li
          .attr( "aria-controls", prev )
          .removeData( "ui-tabs-aria-controls" );
      } else {
        li.removeAttr( "aria-controls" );
      }
    } );

    this.panels.show();

    if ( this.options.heightStyle !== "content" ) {
      this.panels.css( "height", "" );
    }
  },

  enable: function( index ) {
    var disabled = this.options.disabled;
    if ( disabled === false ) {
      return;
    }

    if ( index === undefined ) {
      disabled = false;
    } else {
      index = this._getIndex( index );
      if ( $.isArray( disabled ) ) {
        disabled = $.map( disabled, function( num ) {
          return num !== index ? num : null;
        } );
      } else {
        disabled = $.map( this.tabs, function( li, num ) {
          return num !== index ? num : null;
        } );
      }
    }
    this._setOptionDisabled( disabled );
  },

  disable: function( index ) {
    var disabled = this.options.disabled;
    if ( disabled === true ) {
      return;
    }

    if ( index === undefined ) {
      disabled = true;
    } else {
      index = this._getIndex( index );
      if ( $.inArray( index, disabled ) !== -1 ) {
        return;
      }
      if ( $.isArray( disabled ) ) {
        disabled = $.merge( [ index ], disabled ).sort();
      } else {
        disabled = [ index ];
      }
    }
    this._setOptionDisabled( disabled );
  },

  load: function( index, event ) {
    index = this._getIndex( index );
    var that = this,
      tab = this.tabs.eq( index ),
      anchor = tab.find( ".ui-tabs-anchor" ),
      panel = this._getPanelForTab( tab ),
      eventData = {
        tab: tab,
        panel: panel
      },
      complete = function( jqXHR, status ) {
        if ( status === "abort" ) {
          that.panels.stop( false, true );
        }

        that._removeClass( tab, "ui-tabs-loading" );
        panel.removeAttr( "aria-busy" );

        if ( jqXHR === that.xhr ) {
          delete that.xhr;
        }
      };

    // Not remote
    if ( this._isLocal( anchor[ 0 ] ) ) {
      return;
    }

    this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

    // Support: jQuery <1.8
    // jQuery <1.8 returns false if the request is canceled in beforeSend,
    // but as of 1.8, $.ajax() always returns a jqXHR object.
    if ( this.xhr && this.xhr.statusText !== "canceled" ) {
      this._addClass( tab, "ui-tabs-loading" );
      panel.attr( "aria-busy", "true" );

      this.xhr
        .done( function( response, status, jqXHR ) {

          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout( function() {
            panel.html( response );
            that._trigger( "load", event, eventData );

            complete( jqXHR, status );
          }, 1 );
        } )
        .fail( function( jqXHR, status ) {

          // support: jQuery <1.8
          // http://bugs.jquery.com/ticket/11778
          setTimeout( function() {
            complete( jqXHR, status );
          }, 1 );
        } );
    }
  },

  _ajaxSettings: function( anchor, event, eventData ) {
    var that = this;
    return {

      // Support: IE <11 only
      // Strip any hash that exists to prevent errors with the Ajax request
      url: anchor.attr( "href" ).replace( /#.*$/, "" ),
      beforeSend: function( jqXHR, settings ) {
        return that._trigger( "beforeLoad", event,
          $.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
      }
    };
  },

  _getPanelForTab: function( tab ) {
    var id = $( tab ).attr( "aria-controls" );
    return this.element.find( this._sanitizeSelector( "#" + id ) );
  }
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

  // Backcompat for ui-tab class (now ui-tabs-tab)
  $.widget( "ui.tabs", $.ui.tabs, {
    _processTabs: function() {
      this._superApply( arguments );
      this._addClass( this.tabs, "ui-tab" );
    }
  } );
}

var widgetsTabs = $.ui.tabs;


/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tooltip
//>>group: Widgets
//>>description: Shows additional information for any element on hover or focus.
//>>docs: http://api.jqueryui.com/tooltip/
//>>demos: http://jqueryui.com/tooltip/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tooltip.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tooltip", {
  version: "1.12.1",
  options: {
    classes: {
      "ui-tooltip": "ui-corner-all ui-widget-shadow"
    },
    content: function() {

      // support: IE<9, Opera in jQuery <1.7
      // .text() can't accept undefined, so coerce to a string
      var title = $( this ).attr( "title" ) || "";

      // Escape title, since we're going from an attribute to raw HTML
      return $( "<a>" ).text( title ).html();
    },
    hide: true,

    // Disabled elements have inconsistent behavior across browsers (#8661)
    items: "[title]:not([disabled])",
    position: {
      my: "left top+15",
      at: "left bottom",
      collision: "flipfit flip"
    },
    show: true,
    track: false,

    // Callbacks
    close: null,
    open: null
  },

  _addDescribedBy: function( elem, id ) {
    var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
    describedby.push( id );
    elem
      .data( "ui-tooltip-id", id )
      .attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
  },

  _removeDescribedBy: function( elem ) {
    var id = elem.data( "ui-tooltip-id" ),
      describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
      index = $.inArray( id, describedby );

    if ( index !== -1 ) {
      describedby.splice( index, 1 );
    }

    elem.removeData( "ui-tooltip-id" );
    describedby = $.trim( describedby.join( " " ) );
    if ( describedby ) {
      elem.attr( "aria-describedby", describedby );
    } else {
      elem.removeAttr( "aria-describedby" );
    }
  },

  _create: function() {
    this._on( {
      mouseover: "open",
      focusin: "open"
    } );

    // IDs of generated tooltips, needed for destroy
    this.tooltips = {};

    // IDs of parent tooltips where we removed the title attribute
    this.parents = {};

    // Append the aria-live region so tooltips announce correctly
    this.liveRegion = $( "<div>" )
      .attr( {
        role: "log",
        "aria-live": "assertive",
        "aria-relevant": "additions"
      } )
      .appendTo( this.document[ 0 ].body );
    this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

    this.disabledTitles = $( [] );
  },

  _setOption: function( key, value ) {
    var that = this;

    this._super( key, value );

    if ( key === "content" ) {
      $.each( this.tooltips, function( id, tooltipData ) {
        that._updateContent( tooltipData.element );
      } );
    }
  },

  _setOptionDisabled: function( value ) {
    this[ value ? "_disable" : "_enable" ]();
  },

  _disable: function() {
    var that = this;

    // Close open tooltips
    $.each( this.tooltips, function( id, tooltipData ) {
      var event = $.Event( "blur" );
      event.target = event.currentTarget = tooltipData.element[ 0 ];
      that.close( event, true );
    } );

    // Remove title attributes to prevent native tooltips
    this.disabledTitles = this.disabledTitles.add(
      this.element.find( this.options.items ).addBack()
        .filter( function() {
          var element = $( this );
          if ( element.is( "[title]" ) ) {
            return element
              .data( "ui-tooltip-title", element.attr( "title" ) )
              .removeAttr( "title" );
          }
        } )
    );
  },

  _enable: function() {

    // restore title attributes
    this.disabledTitles.each( function() {
      var element = $( this );
      if ( element.data( "ui-tooltip-title" ) ) {
        element.attr( "title", element.data( "ui-tooltip-title" ) );
      }
    } );
    this.disabledTitles = $( [] );
  },

  open: function( event ) {
    var that = this,
      target = $( event ? event.target : this.element )

        // we need closest here due to mouseover bubbling,
        // but always pointing at the same event target
        .closest( this.options.items );

    // No element to show a tooltip for or the tooltip is already open
    if ( !target.length || target.data( "ui-tooltip-id" ) ) {
      return;
    }

    if ( target.attr( "title" ) ) {
      target.data( "ui-tooltip-title", target.attr( "title" ) );
    }

    target.data( "ui-tooltip-open", true );

    // Kill parent tooltips, custom or native, for hover
    if ( event && event.type === "mouseover" ) {
      target.parents().each( function() {
        var parent = $( this ),
          blurEvent;
        if ( parent.data( "ui-tooltip-open" ) ) {
          blurEvent = $.Event( "blur" );
          blurEvent.target = blurEvent.currentTarget = this;
          that.close( blurEvent, true );
        }
        if ( parent.attr( "title" ) ) {
          parent.uniqueId();
          that.parents[ this.id ] = {
            element: this,
            title: parent.attr( "title" )
          };
          parent.attr( "title", "" );
        }
      } );
    }

    this._registerCloseHandlers( event, target );
    this._updateContent( target, event );
  },

  _updateContent: function( target, event ) {
    var content,
      contentOption = this.options.content,
      that = this,
      eventType = event ? event.type : null;

    if ( typeof contentOption === "string" || contentOption.nodeType ||
        contentOption.jquery ) {
      return this._open( event, target, contentOption );
    }

    content = contentOption.call( target[ 0 ], function( response ) {

      // IE may instantly serve a cached response for ajax requests
      // delay this call to _open so the other call to _open runs first
      that._delay( function() {

        // Ignore async response if tooltip was closed already
        if ( !target.data( "ui-tooltip-open" ) ) {
          return;
        }

        // JQuery creates a special event for focusin when it doesn't
        // exist natively. To improve performance, the native event
        // object is reused and the type is changed. Therefore, we can't
        // rely on the type being correct after the event finished
        // bubbling, so we set it back to the previous value. (#8740)
        if ( event ) {
          event.type = eventType;
        }
        this._open( event, target, response );
      } );
    } );
    if ( content ) {
      this._open( event, target, content );
    }
  },

  _open: function( event, target, content ) {
    var tooltipData, tooltip, delayedShow, a11yContent,
      positionOption = $.extend( {}, this.options.position );

    if ( !content ) {
      return;
    }

    // Content can be updated multiple times. If the tooltip already
    // exists, then just update the content and bail.
    tooltipData = this._find( target );
    if ( tooltipData ) {
      tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
      return;
    }

    // If we have a title, clear it to prevent the native tooltip
    // we have to check first to avoid defining a title if none exists
    // (we don't want to cause an element to start matching [title])
    //
    // We use removeAttr only for key events, to allow IE to export the correct
    // accessible attributes. For mouse events, set to empty string to avoid
    // native tooltip showing up (happens only when removing inside mouseover).
    if ( target.is( "[title]" ) ) {
      if ( event && event.type === "mouseover" ) {
        target.attr( "title", "" );
      } else {
        target.removeAttr( "title" );
      }
    }

    tooltipData = this._tooltip( target );
    tooltip = tooltipData.tooltip;
    this._addDescribedBy( target, tooltip.attr( "id" ) );
    tooltip.find( ".ui-tooltip-content" ).html( content );

    // Support: Voiceover on OS X, JAWS on IE <= 9
    // JAWS announces deletions even when aria-relevant="additions"
    // Voiceover will sometimes re-read the entire log region's contents from the beginning
    this.liveRegion.children().hide();
    a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
    a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
    a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
    a11yContent.appendTo( this.liveRegion );

    function position( event ) {
      positionOption.of = event;
      if ( tooltip.is( ":hidden" ) ) {
        return;
      }
      tooltip.position( positionOption );
    }
    if ( this.options.track && event && /^mouse/.test( event.type ) ) {
      this._on( this.document, {
        mousemove: position
      } );

      // trigger once to override element-relative positioning
      position( event );
    } else {
      tooltip.position( $.extend( {
        of: target
      }, this.options.position ) );
    }

    tooltip.hide();

    this._show( tooltip, this.options.show );

    // Handle tracking tooltips that are shown with a delay (#8644). As soon
    // as the tooltip is visible, position the tooltip using the most recent
    // event.
    // Adds the check to add the timers only when both delay and track options are set (#14682)
    if ( this.options.track && this.options.show && this.options.show.delay ) {
      delayedShow = this.delayedShow = setInterval( function() {
        if ( tooltip.is( ":visible" ) ) {
          position( positionOption.of );
          clearInterval( delayedShow );
        }
      }, $.fx.interval );
    }

    this._trigger( "open", event, { tooltip: tooltip } );
  },

  _registerCloseHandlers: function( event, target ) {
    var events = {
      keyup: function( event ) {
        if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
          var fakeEvent = $.Event( event );
          fakeEvent.currentTarget = target[ 0 ];
          this.close( fakeEvent, true );
        }
      }
    };

    // Only bind remove handler for delegated targets. Non-delegated
    // tooltips will handle this in destroy.
    if ( target[ 0 ] !== this.element[ 0 ] ) {
      events.remove = function() {
        this._removeTooltip( this._find( target ).tooltip );
      };
    }

    if ( !event || event.type === "mouseover" ) {
      events.mouseleave = "close";
    }
    if ( !event || event.type === "focusin" ) {
      events.focusout = "close";
    }
    this._on( true, target, events );
  },

  close: function( event ) {
    var tooltip,
      that = this,
      target = $( event ? event.currentTarget : this.element ),
      tooltipData = this._find( target );

    // The tooltip may already be closed
    if ( !tooltipData ) {

      // We set ui-tooltip-open immediately upon open (in open()), but only set the
      // additional data once there's actually content to show (in _open()). So even if the
      // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
      // the period between open() and _open().
      target.removeData( "ui-tooltip-open" );
      return;
    }

    tooltip = tooltipData.tooltip;

    // Disabling closes the tooltip, so we need to track when we're closing
    // to avoid an infinite loop in case the tooltip becomes disabled on close
    if ( tooltipData.closing ) {
      return;
    }

    // Clear the interval for delayed tracking tooltips
    clearInterval( this.delayedShow );

    // Only set title if we had one before (see comment in _open())
    // If the title attribute has changed since open(), don't restore
    if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
      target.attr( "title", target.data( "ui-tooltip-title" ) );
    }

    this._removeDescribedBy( target );

    tooltipData.hiding = true;
    tooltip.stop( true );
    this._hide( tooltip, this.options.hide, function() {
      that._removeTooltip( $( this ) );
    } );

    target.removeData( "ui-tooltip-open" );
    this._off( target, "mouseleave focusout keyup" );

    // Remove 'remove' binding only on delegated targets
    if ( target[ 0 ] !== this.element[ 0 ] ) {
      this._off( target, "remove" );
    }
    this._off( this.document, "mousemove" );

    if ( event && event.type === "mouseleave" ) {
      $.each( this.parents, function( id, parent ) {
        $( parent.element ).attr( "title", parent.title );
        delete that.parents[ id ];
      } );
    }

    tooltipData.closing = true;
    this._trigger( "close", event, { tooltip: tooltip } );
    if ( !tooltipData.hiding ) {
      tooltipData.closing = false;
    }
  },

  _tooltip: function( element ) {
    var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
      content = $( "<div>" ).appendTo( tooltip ),
      id = tooltip.uniqueId().attr( "id" );

    this._addClass( content, "ui-tooltip-content" );
    this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

    tooltip.appendTo( this._appendTo( element ) );

    return this.tooltips[ id ] = {
      element: element,
      tooltip: tooltip
    };
  },

  _find: function( target ) {
    var id = target.data( "ui-tooltip-id" );
    return id ? this.tooltips[ id ] : null;
  },

  _removeTooltip: function( tooltip ) {
    tooltip.remove();
    delete this.tooltips[ tooltip.attr( "id" ) ];
  },

  _appendTo: function( target ) {
    var element = target.closest( ".ui-front, dialog" );

    if ( !element.length ) {
      element = this.document[ 0 ].body;
    }

    return element;
  },

  _destroy: function() {
    var that = this;

    // Close open tooltips
    $.each( this.tooltips, function( id, tooltipData ) {

      // Delegate to close method to handle common cleanup
      var event = $.Event( "blur" ),
        element = tooltipData.element;
      event.target = event.currentTarget = element[ 0 ];
      that.close( event, true );

      // Remove immediately; destroying an open tooltip doesn't use the
      // hide animation
      $( "#" + id ).remove();

      // Restore the title
      if ( element.data( "ui-tooltip-title" ) ) {

        // If the title attribute has changed since open(), don't restore
        if ( !element.attr( "title" ) ) {
          element.attr( "title", element.data( "ui-tooltip-title" ) );
        }
        element.removeData( "ui-tooltip-title" );
      }
    } );
    this.liveRegion.remove();
  }
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

  // Backcompat for tooltipClass option
  $.widget( "ui.tooltip", $.ui.tooltip, {
    options: {
      tooltipClass: null
    },
    _tooltip: function() {
      var tooltipData = this._superApply( arguments );
      if ( this.options.tooltipClass ) {
        tooltipData.tooltip.addClass( this.options.tooltipClass );
      }
      return tooltipData;
    }
  } );
}

var widgetsTooltip = $.ui.tooltip;




}));

//--------------------------------------------------------------------------------------------



/* ---------------------- 
  mix it up
---------------------- */
/**!
 * MixItUp v2.1.11
 *
 * @copyright Copyright 2015 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://mixitup.kunkalabs.com
 *
 * @license   Commercial use requires a commercial license.
 *            https://mixitup.kunkalabs.com/licenses/
 *
 *            Non-commercial use permitted under terms of CC-BY-NC license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */
/**!
 * MixItUp v2.1.11
 *
 * @copyright Copyright 2015 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://mixitup.kunkalabs.com
 *
 * @license   Commercial use requires a commercial license.
 *            https://mixitup.kunkalabs.com/licenses/
 *
 *            Non-commercial use permitted under terms of CC-BY-NC license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */

(function($, undf) {
  'use strict';

  /**
   * MixItUp Constructor Function
   * @constructor
   * @extends jQuery
   */

  $.MixItUp = function() {
    var self = this;

    self._execAction('_constructor', 0);

    $.extend(self, {

      /* Public Properties
      ---------------------------------------------------------------------- */

      selectors: {
        target: '.mix',
        filter: '.filter',
        sort: '.sort'
      },

      animation: {
        enable: true,
        effects: 'fade scale',
        duration: 600,
        easing: 'ease',
        perspectiveDistance: '3000',
        perspectiveOrigin: '50% 50%',
        queue: true,
        queueLimit: 1,
        animateChangeLayout: false,
        animateResizeContainer: true,
        animateResizeTargets: false,
        staggerSequence: false,
        reverseOut: false
      },

      callbacks: {
        onMixLoad: false,
        onMixStart: false,
        onMixBusy: false,
        onMixEnd: false,
        onMixFail: false,
        _user: false
      },

      controls: {
        enable: true,
        live: false,
        toggleFilterButtons: false,
        toggleLogic: 'or',
        activeClass: 'active'
      },

      layout: {
        display: 'inline-block',
        containerClass: '',
        containerClassFail: 'fail'
      },

      load: {
        filter: 'all',
        sort: false
      },

      /* Private Properties
      ---------------------------------------------------------------------- */

      _$body: null,
      _$container: null,
      _$targets: null,
      _$parent: null,
      _$sortButtons: null,
      _$filterButtons: null,

      _suckMode: false,
      _mixing: false,
      _sorting: false,
      _clicking: false,
      _loading: true,
      _changingLayout: false,
      _changingClass: false,
      _changingDisplay: false,

      _origOrder: [],
      _startOrder: [],
      _newOrder: [],
      _activeFilter: null,
      _toggleArray: [],
      _toggleString: '',
      _activeSort: 'default:asc',
      _newSort: null,
      _startHeight: null,
      _newHeight: null,
      _incPadding: true,
      _newDisplay: null,
      _newClass: null,
      _targetsBound: 0,
      _targetsDone: 0,
      _queue: [],

      _$show: $(),
      _$hide: $()
    });

    self._execAction('_constructor', 1);
  };

  /**
   * MixItUp Prototype
   * @override
   */

  $.MixItUp.prototype = {
    constructor: $.MixItUp,

    /* Static Properties
    ---------------------------------------------------------------------- */

    _instances: {},
    _handled: {
      _filter: {},
      _sort: {}
    },
    _bound: {
      _filter: {},
      _sort: {}
    },
    _actions: {},
    _filters: {},

    /* Static Methods
    ---------------------------------------------------------------------- */

    /**
     * Extend
     * @since 2.1.0
     * @param {object} new properties/methods
     * @extends {object} prototype
     */

    extend: function(extension) {
      for (var key in extension) {
        $.MixItUp.prototype[key] = extension[key];
      }
    },

    /**
     * Add Action
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._actions
     */

    addAction: function(hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_actions', hook, name, func, priority);
    },

    /**
     * Add Filter
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */

    addFilter: function(hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_filters', hook, name, func, priority);
    },

    /**
     * Add Hook
     * @since 2.1.0
     * @param {string} type of hook
     * @param {string} hook name
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */

    _addHook: function(type, hook, name, func, priority) {
      var collection = $.MixItUp.prototype[type],
        obj = {};

      priority = (priority === 1 || priority === 'post') ? 'post' : 'pre';

      obj[hook] = {};
      obj[hook][priority] = {};
      obj[hook][priority][name] = func;

      $.extend(true, collection, obj);
    },


    /* Private Methods
    ---------------------------------------------------------------------- */

    /**
     * Initialise
     * @since 2.0.0
     * @param {object} domNode
     * @param {object} config
     */

    _init: function(domNode, config) {
      var self = this;

      self._execAction('_init', 0, arguments);

      config && $.extend(true, self, config);

      self._$body = $('body');
      self._domNode = domNode;
      self._$container = $(domNode);
      self._$container.addClass(self.layout.containerClass);
      self._id = domNode.id;

      self._platformDetect();

      self._brake = self._getPrefixedCSS('transition', 'none');

      self._refresh(true);

      self._$parent = self._$targets.parent().length ? self._$targets.parent() : self._$container;

      if (self.load.sort) {
        self._newSort = self._parseSort(self.load.sort);
        self._newSortString = self.load.sort;
        self._activeSort = self.load.sort;
        self._sort();
        self._printSort();
      }

      self._activeFilter = self.load.filter === 'all' ?
        self.selectors.target :
        self.load.filter === 'none' ?
        '' :
        self.load.filter;

      self.controls.enable && self._bindHandlers();

      if (self.controls.toggleFilterButtons) {
        self._buildToggleArray();

        for (var i = 0; i < self._toggleArray.length; i++) {
          self._updateControls({
            filter: self._toggleArray[i],
            sort: self._activeSort
          }, true);
        };
      } else if (self.controls.enable) {
        self._updateControls({
          filter: self._activeFilter,
          sort: self._activeSort
        });
      }

      self._filter();

      self._init = true;

      self._$container.data('mixItUp', self);

      self._execAction('_init', 1, arguments);

      self._buildState();

      self._$targets.css(self._brake);

      self._goMix(self.animation.enable);
    },

    /**
     * Platform Detect
     * @since 2.0.0
     */

    _platformDetect: function() {
      var self = this,
        vendorsTrans = ['Webkit', 'Moz', 'O', 'ms'],
        vendorsRAF = ['webkit', 'moz'],
        chrome = window.navigator.appVersion.match(/Chrome\/(\d+)\./) || false,
        ff = typeof InstallTrigger !== 'undefined',
        prefix = function(el) {
          for (var i = 0; i < vendorsTrans.length; i++) {
            if (vendorsTrans[i] + 'Transition' in el.style) {
              return {
                prefix: '-' + vendorsTrans[i].toLowerCase() + '-',
                vendor: vendorsTrans[i]
              };
            };
          };
          return 'transition' in el.style ? '' : false;
        },
        transPrefix = prefix(self._domNode);

      self._execAction('_platformDetect', 0);

      self._chrome = chrome ? parseInt(chrome[1], 10) : false;
      self._ff = ff ? parseInt(window.navigator.userAgent.match(/rv:([^)]+)\)/)[1]) : false;
      self._prefix = transPrefix.prefix;
      self._vendor = transPrefix.vendor;
      self._suckMode = window.atob && self._prefix ? false : true;

      self._suckMode && (self.animation.enable = false);
      (self._ff && self._ff <= 4) && (self.animation.enable = false);

      /* Polyfills
      ---------------------------------------------------------------------- */

      /**
       * window.requestAnimationFrame
       */

      for (var x = 0; x < vendorsRAF.length && !window.requestAnimationFrame; x++) {
        window.requestAnimationFrame = window[vendorsRAF[x] + 'RequestAnimationFrame'];
      }

      /**
       * Object.getPrototypeOf
       */

      if (typeof Object.getPrototypeOf !== 'function') {
        if (typeof 'test'.__proto__ === 'object') {
          Object.getPrototypeOf = function(object) {
            return object.__proto__;
          };
        } else {
          Object.getPrototypeOf = function(object) {
            return object.constructor.prototype;
          };
        }
      }

      /**
       * Element.nextElementSibling
       */

      if (self._domNode.nextElementSibling === undf) {
        Object.defineProperty(Element.prototype, 'nextElementSibling', {
          get: function() {
            var el = this.nextSibling;

            while (el) {
              if (el.nodeType === 1) {
                return el;
              }
              el = el.nextSibling;
            }
            return null;
          }
        });
      }

      self._execAction('_platformDetect', 1);
    },

    /**
     * Refresh
     * @since 2.0.0
     * @param {boolean} init
     * @param {boolean} force
     */

    _refresh: function(init, force) {
      var self = this;

      self._execAction('_refresh', 0, arguments);

      self._$targets = self._$container.find(self.selectors.target);

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        if (target.dataset === undf || force) {

          target.dataset = {};

          for (var j = 0; j < target.attributes.length; j++) {

            var attr = target.attributes[j],
              name = attr.name,
              val = attr.value;

            if (name.indexOf('data-') > -1) {
              var dataName = self._helpers._camelCase(name.substring(5, name.length));
              target.dataset[dataName] = val;
            }
          }
        }

        if (target.mixParent === undf) {
          target.mixParent = self._id;
        }
      }

      if (
        (self._$targets.length && init) ||
        (!self._origOrder.length && self._$targets.length)
      ) {
        self._origOrder = [];

        for (var i = 0; i < self._$targets.length; i++) {
          var target = self._$targets[i];

          self._origOrder.push(target);
        }
      }

      self._execAction('_refresh', 1, arguments);
    },

    /**
     * Bind Handlers
     * @since 2.0.0
     */

    _bindHandlers: function() {
      var self = this,
        filters = $.MixItUp.prototype._bound._filter,
        sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('_bindHandlers', 0);

      if (self.controls.live) {
        self._$body
          .on('click.mixItUp.' + self._id, self.selectors.sort, function() {
            self._processClick($(this), 'sort');
          })
          .on('click.mixItUp.' + self._id, self.selectors.filter, function() {
            self._processClick($(this), 'filter');
          });
      } else {
        self._$sortButtons = $(self.selectors.sort);
        self._$filterButtons = $(self.selectors.filter);

        self._$sortButtons.on('click.mixItUp.' + self._id, function() {
          self._processClick($(this), 'sort');
        });

        self._$filterButtons.on('click.mixItUp.' + self._id, function() {
          self._processClick($(this), 'filter');
        });
      }

      filters[self.selectors.filter] = (filters[self.selectors.filter] === undf) ? 1 : filters[self.selectors.filter] + 1;
      sorts[self.selectors.sort] = (sorts[self.selectors.sort] === undf) ? 1 : sorts[self.selectors.sort] + 1;

      self._execAction('_bindHandlers', 1);
    },

    /**
     * Process Click
     * @since 2.0.0
     * @param {object} $button
     * @param {string} type
     */

    _processClick: function($button, type) {
      var self = this,
        trackClick = function($button, type, off) {
          var proto = $.MixItUp.prototype;

          proto._handled['_' + type][self.selectors[type]] = (proto._handled['_' + type][self.selectors[type]] === undf) ?
            1 :
            proto._handled['_' + type][self.selectors[type]] + 1;

          if (proto._handled['_' + type][self.selectors[type]] === proto._bound['_' + type][self.selectors[type]]) {
            $button[(off ? 'remove' : 'add') + 'Class'](self.controls.activeClass);
            delete proto._handled['_' + type][self.selectors[type]];
          }
        };

      self._execAction('_processClick', 0, arguments);

      if (!self._mixing || (self.animation.queue && self._queue.length < self.animation.queueLimit)) {
        self._clicking = true;

        if (type === 'sort') {
          var sort = $button.attr('data-sort');

          if (!$button.hasClass(self.controls.activeClass) || sort.indexOf('random') > -1) {
            $(self.selectors.sort).removeClass(self.controls.activeClass);
            trackClick($button, type);
            self.sort(sort);
          }
        }

        if (type === 'filter') {
          var filter = $button.attr('data-filter'),
            ndx,
            seperator = self.controls.toggleLogic === 'or' ? ',' : '';

          if (!self.controls.toggleFilterButtons) {
            if (!$button.hasClass(self.controls.activeClass)) {
              $(self.selectors.filter).removeClass(self.controls.activeClass);
              trackClick($button, type);
              self.filter(filter);
            }
          } else {
            self._buildToggleArray();

            if (!$button.hasClass(self.controls.activeClass)) {
              trackClick($button, type);

              self._toggleArray.push(filter);
            } else {
              trackClick($button, type, true);
              ndx = self._toggleArray.indexOf(filter);
              self._toggleArray.splice(ndx, 1);
            }

            self._toggleArray = $.grep(self._toggleArray, function(n) {
              return (n);
            });

            self._toggleString = self._toggleArray.join(seperator);

            self.filter(self._toggleString);
          }
        }

        self._execAction('_processClick', 1, arguments);
      } else {
        if (typeof self.callbacks.onMixBusy === 'function') {
          self.callbacks.onMixBusy.call(self._domNode, self._state, self);
        }
        self._execAction('_processClickBusy', 1, arguments);
      }
    },

    /**
     * Build Toggle Array
     * @since 2.0.0
     */

    _buildToggleArray: function() {
      var self = this,
        activeFilter = self._activeFilter.replace(/\s/g, '');

      self._execAction('_buildToggleArray', 0, arguments);

      if (self.controls.toggleLogic === 'or') {
        self._toggleArray = activeFilter.split(',');
      } else {
        self._toggleArray = activeFilter.split('.');

        !self._toggleArray[0] && self._toggleArray.shift();

        for (var i = 0, filter; filter = self._toggleArray[i]; i++) {
          self._toggleArray[i] = '.' + filter;
        }
      }

      self._execAction('_buildToggleArray', 1, arguments);
    },

    /**
     * Update Controls
     * @since 2.0.0
     * @param {object} command
     * @param {boolean} multi
     */

    _updateControls: function(command, multi) {
      var self = this,
        output = {
          filter: command.filter,
          sort: command.sort
        },
        update = function($el, filter) {
          try {
            (multi && type === 'filter' && !(output.filter === 'none' || output.filter === '')) ?
            $el.filter(filter).addClass(self.controls.activeClass):
              $el.removeClass(self.controls.activeClass).filter(filter).addClass(self.controls.activeClass);
          } catch (e) {}
        },
        type = 'filter',
        $el = null;

      self._execAction('_updateControls', 0, arguments);

      (command.filter === undf) && (output.filter = self._activeFilter);
      (command.sort === undf) && (output.sort = self._activeSort);
      (output.filter === self.selectors.target) && (output.filter = 'all');

      for (var i = 0; i < 2; i++) {
        $el = self.controls.live ? $(self.selectors[type]) : self['_$' + type + 'Buttons'];
        $el && update($el, '[data-' + type + '="' + output[type] + '"]');
        type = 'sort';
      }

      self._execAction('_updateControls', 1, arguments);
    },

    /**
     * Filter (private)
     * @since 2.0.0
     */

    _filter: function() {
      var self = this;

      self._execAction('_filter', 0);

      for (var i = 0; i < self._$targets.length; i++) {
        var $target = $(self._$targets[i]);

        if ($target.is(self._activeFilter)) {
          self._$show = self._$show.add($target);
        } else {
          self._$hide = self._$hide.add($target);
        }
      }

      self._execAction('_filter', 1);
    },

    /**
     * Sort (private)
     * @since 2.0.0
     */

    _sort: function() {
      var self = this,
        arrayShuffle = function(oldArray) {
          var newArray = oldArray.slice(),
            len = newArray.length,
            i = len;

          while (i--) {
            var p = parseInt(Math.random() * len);
            var t = newArray[i];
            newArray[i] = newArray[p];
            newArray[p] = t;
          };
          return newArray;
        };

      self._execAction('_sort', 0);

      self._startOrder = [];

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        self._startOrder.push(target);
      }

      switch (self._newSort[0].sortBy) {
        case 'default':
          self._newOrder = self._origOrder;
          break;
        case 'random':
          self._newOrder = arrayShuffle(self._startOrder);
          break;
        case 'custom':
          self._newOrder = self._newSort[0].order;
          break;
        default:
          self._newOrder = self._startOrder.concat().sort(function(a, b) {
            return self._compare(a, b);
          });
      }

      self._execAction('_sort', 1);
    },

    /**
     * Compare Algorithm
     * @since 2.0.0
     * @param {string|number} a
     * @param {string|number} b
     * @param {number} depth (recursion)
     * @return {number}
     */

    _compare: function(a, b, depth) {
      depth = depth ? depth : 0;

      var self = this,
        order = self._newSort[depth].order,
        getData = function(el) {
          return el.dataset[self._newSort[depth].sortBy] || 0;
        },
        attrA = isNaN(getData(a) * 1) ? getData(a).toLowerCase() : getData(a) * 1,
        attrB = isNaN(getData(b) * 1) ? getData(b).toLowerCase() : getData(b) * 1;

      if (attrA < attrB)
        return order === 'asc' ? -1 : 1;
      if (attrA > attrB)
        return order === 'asc' ? 1 : -1;
      if (attrA === attrB && self._newSort.length > depth + 1)
        return self._compare(a, b, depth + 1);

      return 0;
    },

    /**
     * Print Sort
     * @since 2.0.0
     * @param {boolean} reset
     */

    _printSort: function(reset) {
      var self = this,
        order = reset ? self._startOrder : self._newOrder,
        targets = self._$parent[0].querySelectorAll(self.selectors.target),
        nextSibling = targets.length ? targets[targets.length - 1].nextElementSibling : null,
        frag = document.createDocumentFragment();

      self._execAction('_printSort', 0, arguments);

      for (var i = 0; i < targets.length; i++) {
        var target = targets[i],
          whiteSpace = target.nextSibling;

        if (target.style.position === 'absolute') continue;

        if (whiteSpace && whiteSpace.nodeName === '#text') {
          self._$parent[0].removeChild(whiteSpace);
        }

        self._$parent[0].removeChild(target);
      }

      for (var i = 0; i < order.length; i++) {
        var el = order[i];

        if (self._newSort[0].sortBy === 'default' && self._newSort[0].order === 'desc' && !reset) {
          var firstChild = frag.firstChild;
          frag.insertBefore(el, firstChild);
          frag.insertBefore(document.createTextNode(' '), el);
        } else {
          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }
      }

      nextSibling ?
        self._$parent[0].insertBefore(frag, nextSibling) :
        self._$parent[0].appendChild(frag);

      self._execAction('_printSort', 1, arguments);
    },

    /**
     * Parse Sort
     * @since 2.0.0
     * @param {string} sortString
     * @return {array} newSort
     */

    _parseSort: function(sortString) {
      var self = this,
        rules = typeof sortString === 'string' ? sortString.split(' ') : [sortString],
        newSort = [];

      for (var i = 0; i < rules.length; i++) {
        var rule = typeof sortString === 'string' ? rules[i].split(':') : ['custom', rules[i]],
          ruleObj = {
            sortBy: self._helpers._camelCase(rule[0]),
            order: rule[1] || 'asc'
          };

        newSort.push(ruleObj);

        if (ruleObj.sortBy === 'default' || ruleObj.sortBy === 'random') break;
      }

      return self._execFilter('_parseSort', newSort, arguments);
    },

    /**
     * Parse Effects
     * @since 2.0.0
     * @return {object} effects
     */

    _parseEffects: function() {
      var self = this,
        effects = {
          opacity: '',
          transformIn: '',
          transformOut: '',
          filter: ''
        },
        parse = function(effect, extract, reverse) {
          if (self.animation.effects.indexOf(effect) > -1) {
            if (extract) {
              var propIndex = self.animation.effects.indexOf(effect + '(');
              if (propIndex > -1) {
                var str = self.animation.effects.substring(propIndex),
                  match = /\(([^)]+)\)/.exec(str),
                  val = match[1];

                return {
                  val: val
                };
              }
            }
            return true;
          } else {
            return false;
          }
        },
        negate = function(value, invert) {
          if (invert) {
            return value.charAt(0) === '-' ? value.substr(1, value.length) : '-' + value;
          } else {
            return value;
          }
        },
        buildTransform = function(key, invert) {
          var transforms = [
            ['scale', '.01'],
            ['translateX', '20px'],
            ['translateY', '20px'],
            ['translateZ', '20px'],
            ['rotateX', '90deg'],
            ['rotateY', '90deg'],
            ['rotateZ', '180deg'],
          ];

          for (var i = 0; i < transforms.length; i++) {
            var prop = transforms[i][0],
              def = transforms[i][1],
              inverted = invert && prop !== 'scale';

            effects[key] += parse(prop) ? prop + '(' + negate(parse(prop, true).val || def, inverted) + ') ' : '';
          }
        };

      effects.opacity = parse('fade') ? parse('fade', true).val || '0' : '1';

      buildTransform('transformIn');

      self.animation.reverseOut ? buildTransform('transformOut', true) : (effects.transformOut = effects.transformIn);

      effects.transition = {};

      effects.transition = self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ', opacity ' + self.animation.duration + 'ms linear');

      self.animation.stagger = parse('stagger') ? true : false;
      self.animation.staggerDuration = parseInt(parse('stagger') ? (parse('stagger', true).val ? parse('stagger', true).val : 100) : 100);

      return self._execFilter('_parseEffects', effects);
    },

    /**
     * Build State
     * @since 2.0.0
     * @param {boolean} future
     * @return {object} futureState
     */

    _buildState: function(future) {
      var self = this,
        state = {};

      self._execAction('_buildState', 0);

      state = {
        activeFilter: self._activeFilter === '' ? 'none' : self._activeFilter,
        activeSort: future && self._newSortString ? self._newSortString : self._activeSort,
        fail: !self._$show.length && self._activeFilter !== '',
        $targets: self._$targets,
        $show: self._$show,
        $hide: self._$hide,
        totalTargets: self._$targets.length,
        totalShow: self._$show.length,
        totalHide: self._$hide.length,
        display: future && self._newDisplay ? self._newDisplay : self.layout.display
      };

      if (future) {
        return self._execFilter('_buildState', state);
      } else {
        self._state = state;

        self._execAction('_buildState', 1);
      }
    },

    /**
     * Go Mix
     * @since 2.0.0
     * @param {boolean} animate
     */

    _goMix: function(animate) {
      var self = this,
        phase1 = function() {
          if (self._chrome && (self._chrome === 31)) {
            chromeFix(self._$parent[0]);
          }

          self._setInter();

          phase2();
        },
        phase2 = function() {
          var scrollTop = window.pageYOffset,
            scrollLeft = window.pageXOffset,
            docHeight = document.documentElement.scrollHeight;

          self._getInterMixData();

          self._setFinal();

          self._getFinalMixData();

          (window.pageYOffset !== scrollTop) && window.scrollTo(scrollLeft, scrollTop);

          self._prepTargets();

          if (window.requestAnimationFrame) {
            requestAnimationFrame(phase3);
          } else {
            setTimeout(function() {
              phase3();
            }, 20);
          }
        },
        phase3 = function() {
          self._animateTargets();

          if (self._targetsBound === 0) {
            self._cleanUp();
          }
        },
        chromeFix = function(grid) {
          var parent = grid.parentElement,
            placeholder = document.createElement('div'),
            frag = document.createDocumentFragment();

          parent.insertBefore(placeholder, grid);
          frag.appendChild(grid);
          parent.replaceChild(grid, placeholder);
        },
        futureState = self._buildState(true);

      self._execAction('_goMix', 0, arguments);

      !self.animation.duration && (animate = false);

      self._mixing = true;

      self._$container.removeClass(self.layout.containerClassFail);

      if (typeof self.callbacks.onMixStart === 'function') {
        self.callbacks.onMixStart.call(self._domNode, self._state, futureState, self);
      }

      self._$container.trigger('mixStart', [self._state, futureState, self]);

      self._getOrigMixData();

      if (animate && !self._suckMode) {

        window.requestAnimationFrame ?
          requestAnimationFrame(phase1) :
          phase1();

      } else {
        self._cleanUp();
      }

      self._execAction('_goMix', 1, arguments);
    },

    /**
     * Get Target Data
     * @since 2.0.0
     */

    _getTargetData: function(el, stage) {
      var self = this,
        elStyle;

      el.dataset[stage + 'PosX'] = el.offsetLeft;
      el.dataset[stage + 'PosY'] = el.offsetTop;

      if (self.animation.animateResizeTargets) {
        elStyle = !self._suckMode ?
          window.getComputedStyle(el) : {
            marginBottom: '',
            marginRight: ''
          };

        el.dataset[stage + 'MarginBottom'] = parseInt(elStyle.marginBottom);
        el.dataset[stage + 'MarginRight'] = parseInt(elStyle.marginRight);
        el.dataset[stage + 'Width'] = el.offsetWidth;
        el.dataset[stage + 'Height'] = el.offsetHeight;
      }
    },

    /**
     * Get Original Mix Data
     * @since 2.0.0
     */

    _getOrigMixData: function() {
      var self = this,
        parentStyle = !self._suckMode ? window.getComputedStyle(self._$parent[0]) : {
          boxSizing: ''
        },
        parentBS = parentStyle.boxSizing || parentStyle[self._vendor + 'BoxSizing'];

      self._incPadding = (parentBS === 'border-box');

      self._execAction('_getOrigMixData', 0);

      !self._suckMode && (self.effects = self._parseEffects());

      self._$toHide = self._$hide.filter(':visible');
      self._$toShow = self._$show.filter(':hidden');
      self._$pre = self._$targets.filter(':visible');

      self._startHeight = self._incPadding ?
        self._$parent.outerHeight() :
        self._$parent.height();

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'orig');
      }

      self._execAction('_getOrigMixData', 1);
    },

    /**
     * Set Intermediate Positions
     * @since 2.0.0
     */

    _setInter: function() {
      var self = this;

      self._execAction('_setInter', 0);

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$toShow.css('display', self._newDisplay);

        if (self._changingClass) {
          self._$container
            .removeClass(self.layout.containerClass)
            .addClass(self._newClass);
        }
      } else {
        self._$toShow.css('display', self.layout.display);
      }

      self._execAction('_setInter', 1);
    },

    /**
     * Get Intermediate Mix Data
     * @since 2.0.0
     */

    _getInterMixData: function() {
      var self = this;

      self._execAction('_getInterMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'inter');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'inter');
      }

      self._execAction('_getInterMixData', 1);
    },

    /**
     * Set Final Positions
     * @since 2.0.0
     */

    _setFinal: function() {
      var self = this;

      self._execAction('_setFinal', 0);

      self._sorting && self._printSort();

      self._$toHide.removeStyle('display');

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$pre.css('display', self._newDisplay);
      }

      self._execAction('_setFinal', 1);
    },

    /**
     * Get Final Mix Data
     * @since 2.0.0
     */

    _getFinalMixData: function() {
      var self = this;

      self._execAction('_getFinalMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'final');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'final');
      }

      self._newHeight = self._incPadding ?
        self._$parent.outerHeight() :
        self._$parent.height();

      self._sorting && self._printSort(true);

      self._$toShow.removeStyle('display');

      self._$pre.css('display', self.layout.display);

      if (self._changingClass && self.animation.animateChangeLayout) {
        self._$container
          .removeClass(self._newClass)
          .addClass(self.layout.containerClass);
      }

      self._execAction('_getFinalMixData', 1);
    },

    /**
     * Prepare Targets
     * @since 2.0.0
     */

    _prepTargets: function() {
      var self = this,
        transformCSS = {
          _in: self._getPrefixedCSS('transform', self.effects.transformIn),
          _out: self._getPrefixedCSS('transform', self.effects.transformOut)
        };

      self._execAction('_prepTargets', 0);

      if (self.animation.animateResizeContainer) {
        self._$parent.css('height', self._startHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
          $el = $(el);

        el.style.opacity = self.effects.opacity;
        el.style.display = (self._changingLayout && self.animation.animateChangeLayout) ?
          self._newDisplay :
          self.layout.display;

        $el.css(transformCSS._in);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.finalWidth + 'px';
          el.style.height = el.dataset.finalHeight + 'px';
          el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + (el.dataset.finalMarginRight * 1) + 'px';
          el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + (el.dataset.finalMarginBottom * 1) + 'px';
        }
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
          $el = $(el),
          translate = {
            x: el.dataset.origPosX - el.dataset.interPosX,
            y: el.dataset.origPosY - el.dataset.interPosY
          },
          transformCSS = self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)');

        $el.css(transformCSS);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.origWidth + 'px';
          el.style.height = el.dataset.origHeight + 'px';

          if (el.dataset.origWidth - el.dataset.finalWidth) {
            el.style.marginRight = -(el.dataset.origWidth - el.dataset.interWidth) + (el.dataset.origMarginRight * 1) + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight) {
            el.style.marginBottom = -(el.dataset.origHeight - el.dataset.interHeight) + (el.dataset.origMarginBottom * 1) + 'px';
          }
        }
      }

      self._execAction('_prepTargets', 1);
    },

    /**
     * Animate Targets
     * @since 2.0.0
     */

    _animateTargets: function() {
      var self = this;

      self._execAction('_animateTargets', 0);

      self._targetsDone = 0;
      self._targetsBound = 0;

      self._$parent
        .css(self._getPrefixedCSS('perspective', self.animation.perspectiveDistance + 'px'))
        .css(self._getPrefixedCSS('perspective-origin', self.animation.perspectiveOrigin));

      if (self.animation.animateResizeContainer) {
        self._$parent
          .css(self._getPrefixedCSS('transition', 'height ' + self.animation.duration + 'ms ease'))
          .css('height', self._newHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
          $el = $(el),
          translate = {
            x: el.dataset.finalPosX - el.dataset.interPosX,
            y: el.dataset.finalPosY - el.dataset.interPosY
          },
          delay = self._getDelay(i),
          toShowCSS = {};

        el.style.opacity = '';

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';

          if (self._ff && self._ff <= 20) {
            toShowCSS[a + 'transition-property'] = 'all';
            toShowCSS[a + 'transition-timing-function'] = self.animation.easing + 'ms';
            toShowCSS[a + 'transition-duration'] = self.animation.duration + 'ms';
          }

          toShowCSS[a + 'transition-delay'] = delay + 'ms';
          toShowCSS[a + 'transform'] = 'translate(' + translate.x + 'px,' + translate.y + 'px)';
        }

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        }

        (self._ff && self._ff <= 20) ?
        $el.css(toShowCSS):
          $el.css(self.effects.transition).css(toShowCSS);
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
          $el = $(el),
          translate = {
            x: el.dataset.finalPosX - el.dataset.interPosX,
            y: el.dataset.finalPosY - el.dataset.interPosY
          },
          delay = self._getDelay(i);

        if (!(
            el.dataset.finalPosX === el.dataset.origPosX &&
            el.dataset.finalPosY === el.dataset.origPosY
          )) {
          self._bindTargetDone($el);
        }

        $el.css(self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ' ' + delay + 'ms'));
        $el.css(self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)'));

        if (self.animation.animateResizeTargets) {
          if (el.dataset.origWidth - el.dataset.finalWidth && el.dataset.finalWidth * 1) {
            el.style.width = el.dataset.finalWidth + 'px';
            el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + (el.dataset.finalMarginRight * 1) + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight && el.dataset.finalHeight * 1) {
            el.style.height = el.dataset.finalHeight + 'px';
            el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + (el.dataset.finalMarginBottom * 1) + 'px';
          }
        }
      }

      if (self._changingClass) {
        self._$container
          .removeClass(self.layout.containerClass)
          .addClass(self._newClass);
      }

      for (var i = 0; i < self._$toHide.length; i++) {
        var el = self._$toHide[i],
          $el = $(el),
          delay = self._getDelay(i),
          toHideCSS = {};

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';

          toHideCSS[a + 'transition-delay'] = delay + 'ms';
          toHideCSS[a + 'transform'] = self.effects.transformOut;
          toHideCSS.opacity = self.effects.opacity;
        }

        $el.css(self.effects.transition).css(toHideCSS);

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        };
      }

      self._execAction('_animateTargets', 1);

    },

    /**
     * Bind Targets TransitionEnd
     * @since 2.0.0
     * @param {object} $el
     */

    _bindTargetDone: function($el) {
      var self = this,
        el = $el[0];

      self._execAction('_bindTargetDone', 0, arguments);

      if (!el.dataset.bound) {

        el.dataset.bound = true;
        self._targetsBound++;

        $el.on('webkitTransitionEnd.mixItUp transitionend.mixItUp', function(e) {
          if (
            (e.originalEvent.propertyName.indexOf('transform') > -1 ||
              e.originalEvent.propertyName.indexOf('opacity') > -1) &&
            $(e.originalEvent.target).is(self.selectors.target)
          ) {
            $el.off('.mixItUp');
            el.dataset.bound = '';
            self._targetDone();
          }
        });
      }

      self._execAction('_bindTargetDone', 1, arguments);
    },

    /**
     * Target Done
     * @since 2.0.0
     */

    _targetDone: function() {
      var self = this;

      self._execAction('_targetDone', 0);

      self._targetsDone++;

      (self._targetsDone === self._targetsBound) && self._cleanUp();

      self._execAction('_targetDone', 1);
    },

    /**
     * Clean Up
     * @since 2.0.0
     */

    _cleanUp: function() {
      var self = this,
        targetStyles = self.animation.animateResizeTargets ?
        'transform opacity width height margin-bottom margin-right' :
        'transform opacity',
        unBrake = function() {
          self._$targets.removeStyle('transition', self._prefix);
        };

      self._execAction('_cleanUp', 0);

      !self._changingLayout ?
        self._$show.css('display', self.layout.display) :
        self._$show.css('display', self._newDisplay);

      self._$targets.css(self._brake);

      self._$targets
        .removeStyle(targetStyles, self._prefix)
        .removeAttr('data-inter-pos-x data-inter-pos-y data-final-pos-x data-final-pos-y data-orig-pos-x data-orig-pos-y data-orig-height data-orig-width data-final-height data-final-width data-inter-width data-inter-height data-orig-margin-right data-orig-margin-bottom data-inter-margin-right data-inter-margin-bottom data-final-margin-right data-final-margin-bottom');

      self._$hide.removeStyle('display');

      self._$parent.removeStyle('height transition perspective-distance perspective perspective-origin-x perspective-origin-y perspective-origin perspectiveOrigin', self._prefix);

      if (self._sorting) {
        self._printSort();
        self._activeSort = self._newSortString;
        self._sorting = false;
      }

      if (self._changingLayout) {
        if (self._changingDisplay) {
          self.layout.display = self._newDisplay;
          self._changingDisplay = false;
        }

        if (self._changingClass) {
          self._$parent.removeClass(self.layout.containerClass).addClass(self._newClass);
          self.layout.containerClass = self._newClass;
          self._changingClass = false;
        }

        self._changingLayout = false;
      }

      self._refresh();

      self._buildState();

      if (self._state.fail) {
        self._$container.addClass(self.layout.containerClassFail);
      }

      self._$show = $();
      self._$hide = $();

      if (window.requestAnimationFrame) {
        requestAnimationFrame(unBrake);
      }

      self._mixing = false;

      if (typeof self.callbacks._user === 'function') {
        self.callbacks._user.call(self._domNode, self._state, self);
      }

      if (typeof self.callbacks.onMixEnd === 'function') {
        self.callbacks.onMixEnd.call(self._domNode, self._state, self);
      }

      self._$container.trigger('mixEnd', [self._state, self]);

      if (self._state.fail) {
        (typeof self.callbacks.onMixFail === 'function') && self.callbacks.onMixFail.call(self._domNode, self._state, self);
        self._$container.trigger('mixFail', [self._state, self]);
      }

      if (self._loading) {
        (typeof self.callbacks.onMixLoad === 'function') && self.callbacks.onMixLoad.call(self._domNode, self._state, self);
        self._$container.trigger('mixLoad', [self._state, self]);
      }

      if (self._queue.length) {
        self._execAction('_queue', 0);

        self.multiMix(self._queue[0][0], self._queue[0][1], self._queue[0][2]);
        self._queue.splice(0, 1);
      }

      self._execAction('_cleanUp', 1);

      self._loading = false;
    },

    /**
     * Get Prefixed CSS
     * @since 2.0.0
     * @param {string} property
     * @param {string} value
     * @param {boolean} prefixValue
     * @return {object} styles
     */

    _getPrefixedCSS: function(property, value, prefixValue) {
      var self = this,
        styles = {},
        prefix = '',
        i = -1;

      for (i = 0; i < 2; i++) {
        prefix = i === 0 ? self._prefix : '';
        prefixValue ? styles[prefix + property] = prefix + value : styles[prefix + property] = value;
      }

      return self._execFilter('_getPrefixedCSS', styles, arguments);
    },

    /**
     * Get Delay
     * @since 2.0.0
     * @param {number} i
     * @return {number} delay
     */

    _getDelay: function(i) {
      var self = this,
        n = typeof self.animation.staggerSequence === 'function' ? self.animation.staggerSequence.call(self._domNode, i, self._state) : i,
        delay = self.animation.stagger ? n * self.animation.staggerDuration : 0;

      return self._execFilter('_getDelay', delay, arguments);
    },

    /**
     * Parse MultiMix Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */

    _parseMultiMixArgs: function(args) {
      var self = this,
        output = {
          command: null,
          animate: self.animation.enable,
          callback: null
        };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (arg !== null) {
          if (typeof arg === 'object' || typeof arg === 'string') {
            output.command = arg;
          } else if (typeof arg === 'boolean') {
            output.animate = arg;
          } else if (typeof arg === 'function') {
            output.callback = arg;
          }
        }
      }

      return self._execFilter('_parseMultiMixArgs', output, arguments);
    },

    /**
     * Parse Insert Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */

    _parseInsertArgs: function(args) {
      var self = this,
        output = {
          index: 0,
          $object: $(),
          multiMix: {
            filter: self._state.activeFilter
          },
          callback: null
        };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (typeof arg === 'number') {
          output.index = arg;
        } else if (typeof arg === 'object' && arg instanceof $) {
          output.$object = arg;
        } else if (typeof arg === 'object' && self._helpers._isElement(arg)) {
          output.$object = $(arg);
        } else if (typeof arg === 'object' && arg !== null) {
          output.multiMix = arg;
        } else if (typeof arg === 'boolean' && !arg) {
          output.multiMix = false;
        } else if (typeof arg === 'function') {
          output.callback = arg;
        }
      }

      return self._execFilter('_parseInsertArgs', output, arguments);
    },

    /**
     * Execute Action
     * @since 2.0.0
     * @param {string} methodName
     * @param {boolean} isPost
     * @param {array} args
     */

    _execAction: function(methodName, isPost, args) {
      var self = this,
        context = isPost ? 'post' : 'pre';

      if (!self._actions.isEmptyObject && self._actions.hasOwnProperty(methodName)) {
        for (var key in self._actions[methodName][context]) {
          self._actions[methodName][context][key].call(self, args);
        }
      }
    },

    /**
     * Execute Filter
     * @since 2.0.0
     * @param {string} methodName
     * @param {mixed} value
     * @return {mixed} value
     */

    _execFilter: function(methodName, value, args) {
      var self = this;

      if (!self._filters.isEmptyObject && self._filters.hasOwnProperty(methodName)) {
        for (var key in self._filters[methodName]) {
          return self._filters[methodName][key].call(self, args);
        }
      } else {
        return value;
      }
    },

    /* Helpers
    ---------------------------------------------------------------------- */

    _helpers: {

      /**
       * CamelCase
       * @since 2.0.0
       * @param {string}
       * @return {string}
       */

      _camelCase: function(string) {
        return string.replace(/-([a-z])/g, function(g) {
          return g[1].toUpperCase();
        });
      },

      /**
       * Is Element
       * @since 2.1.3
       * @param {object} element to test
       * @return {boolean}
       */

      _isElement: function(el) {
        if (window.HTMLElement) {
          return el instanceof HTMLElement;
        } else {
          return (
            el !== null &&
            el.nodeType === 1 &&
            el.nodeName === 'string'
          );
        }
      }
    },

    /* Public Methods
    ---------------------------------------------------------------------- */

    /**
     * Is Mixing
     * @since 2.0.0
     * @return {boolean}
     */

    isMixing: function() {
      var self = this;

      return self._execFilter('isMixing', self._mixing);
    },

    /**
     * Filter (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    filter: function() {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self._clicking && (self._toggleString = '');

      self.multiMix({
        filter: args.command
      }, args.animate, args.callback);
    },

    /**
     * Sort (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    sort: function() {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self.multiMix({
        sort: args.command
      }, args.animate, args.callback);
    },

    /**
     * Change Layout (public)
     * @since 2.0.0
     * @param {array} arguments
     */

    changeLayout: function() {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self.multiMix({
        changeLayout: args.command
      }, args.animate, args.callback);
    },

    /**
     * MultiMix
     * @since 2.0.0
     * @param {array} arguments
     */

    multiMix: function() {
      var self = this,
        args = self._parseMultiMixArgs(arguments);

      self._execAction('multiMix', 0, arguments);

      if (!self._mixing) {
        if (self.controls.enable && !self._clicking) {
          self.controls.toggleFilterButtons && self._buildToggleArray();
          self._updateControls(args.command, self.controls.toggleFilterButtons);
        }

        (self._queue.length < 2) && (self._clicking = false);

        delete self.callbacks._user;
        if (args.callback) self.callbacks._user = args.callback;

        var sort = args.command.sort,
          filter = args.command.filter,
          changeLayout = args.command.changeLayout;

        self._refresh();

        if (sort) {
          self._newSort = self._parseSort(sort);
          self._newSortString = sort;

          self._sorting = true;
          self._sort();
        }

        if (filter !== undf) {
          filter = (filter === 'all') ? self.selectors.target : filter;

          self._activeFilter = filter;
        }

        self._filter();

        if (changeLayout) {
          self._newDisplay = (typeof changeLayout === 'string') ? changeLayout : changeLayout.display || self.layout.display;
          self._newClass = changeLayout.containerClass || '';

          if (
            self._newDisplay !== self.layout.display ||
            self._newClass !== self.layout.containerClass
          ) {
            self._changingLayout = true;

            self._changingClass = (self._newClass !== self.layout.containerClass);
            self._changingDisplay = (self._newDisplay !== self.layout.display);
          }
        }

        self._$targets.css(self._brake);

        self._goMix(args.animate ^ self.animation.enable ? args.animate : self.animation.enable);

        self._execAction('multiMix', 1, arguments);

      } else {
        if (self.animation.queue && self._queue.length < self.animation.queueLimit) {
          self._queue.push(arguments);

          (self.controls.enable && !self._clicking) && self._updateControls(args.command);

          self._execAction('multiMixQueue', 1, arguments);

        } else {
          if (typeof self.callbacks.onMixBusy === 'function') {
            self.callbacks.onMixBusy.call(self._domNode, self._state, self);
          }
          self._$container.trigger('mixBusy', [self._state, self]);

          self._execAction('multiMixBusy', 1, arguments);
        }
      }
    },

    /**
     * Insert
     * @since 2.0.0
     * @param {array} arguments
     */

    insert: function() {
      var self = this,
        args = self._parseInsertArgs(arguments),
        callback = (typeof args.callback === 'function') ? args.callback : null,
        frag = document.createDocumentFragment(),
        target = (function() {
          self._refresh();

          if (self._$targets.length) {
            return (args.index < self._$targets.length || !self._$targets.length) ?
              self._$targets[args.index] :
              self._$targets[self._$targets.length - 1].nextElementSibling;
          } else {
            return self._$parent[0].children[0];
          }
        })();

      self._execAction('insert', 0, arguments);

      if (args.$object) {
        for (var i = 0; i < args.$object.length; i++) {
          var el = args.$object[i];

          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }

        self._$parent[0].insertBefore(frag, target);
      }

      self._execAction('insert', 1, arguments);

      if (typeof args.multiMix === 'object') {
        self.multiMix(args.multiMix, callback);
      }
    },

    /**
     * Prepend
     * @since 2.0.0
     * @param {array} arguments
     */

    prepend: function() {
      var self = this,
        args = self._parseInsertArgs(arguments);

      self.insert(0, args.$object, args.multiMix, args.callback);
    },

    /**
     * Append
     * @since 2.0.0
     * @param {array} arguments
     */

    append: function() {
      var self = this,
        args = self._parseInsertArgs(arguments);

      self.insert(self._state.totalTargets, args.$object, args.multiMix, args.callback);
    },

    /**
     * Get Option
     * @since 2.0.0
     * @param {string} string
     * @return {mixed} value
     */

    getOption: function(string) {
      var self = this,
        getProperty = function(obj, prop) {
          var parts = prop.split('.'),
            last = parts.pop(),
            l = parts.length,
            i = 1,
            current = parts[0] || prop;

          while ((obj = obj[current]) && i < l) {
            current = parts[i];
            i++;
          }

          if (obj !== undf) {
            return obj[last] !== undf ? obj[last] : obj;
          }
        };

      return string ? self._execFilter('getOption', getProperty(self, string), arguments) : self;
    },

    /**
     * Set Options
     * @since 2.0.0
     * @param {object} config
     */

    setOptions: function(config) {
      var self = this;

      self._execAction('setOptions', 0, arguments);

      typeof config === 'object' && $.extend(true, self, config);

      self._execAction('setOptions', 1, arguments);
    },

    /**
     * Get State
     * @since 2.0.0
     * @return {object} state
     */

    getState: function() {
      var self = this;

      return self._execFilter('getState', self._state, self);
    },

    /**
     * Force Refresh
     * @since 2.1.2
     */

    forceRefresh: function() {
      var self = this;

      self._refresh(false, true);
    },

    /**
     * Destroy
     * @since 2.0.0
     * @param {boolean} hideAll
     */

    destroy: function(hideAll) {
      var self = this,
        filters = $.MixItUp.prototype._bound._filter,
        sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('destroy', 0, arguments);

      self._$body
        .add($(self.selectors.sort))
        .add($(self.selectors.filter))
        .off('.mixItUp');

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        hideAll && (target.style.display = '');

        delete target.mixParent;
      }

      self._execAction('destroy', 1, arguments);

      if (filters[self.selectors.filter] && filters[self.selectors.filter] > 1) {
        filters[self.selectors.filter]--;
      } else if (filters[self.selectors.filter] === 1) {
        delete filters[self.selectors.filter];
      }

      if (sorts[self.selectors.sort] && sorts[self.selectors.sort] > 1) {
        sorts[self.selectors.sort]--;
      } else if (sorts[self.selectors.sort] === 1) {
        delete sorts[self.selectors.sort];
      }

      delete $.MixItUp.prototype._instances[self._id];
    }

  };

  /* jQuery Methods
  ---------------------------------------------------------------------- */

  /**
   * jQuery .mixItUp() method
   * @since 2.0.0
   * @extends $.fn
   */

  $.fn.mixItUp = function() {
    var args = arguments,
      dataReturn = [],
      eachReturn,
      _instantiate = function(domNode, settings) {
        var instance = new $.MixItUp(),
          rand = function() {
            return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();
          };

        instance._execAction('_instantiate', 0, arguments);

        domNode.id = !domNode.id ? 'MixItUp' + rand() : domNode.id;

        if (!instance._instances[domNode.id]) {
          instance._instances[domNode.id] = instance;
          instance._init(domNode, settings);
        }

        instance._execAction('_instantiate', 1, arguments);
      };

    eachReturn = this.each(function() {
      if (args && typeof args[0] === 'string') {
        var instance = $.MixItUp.prototype._instances[this.id];
        if (args[0] === 'isLoaded') {
          dataReturn.push(instance ? true : false);
        } else {
          var data = instance[args[0]](args[1], args[2], args[3]);
          if (data !== undf) dataReturn.push(data);
        }
      } else {
        _instantiate(this, args[0]);
      }
    });

    if (dataReturn.length) {
      return dataReturn.length > 1 ? dataReturn : dataReturn[0];
    } else {
      return eachReturn;
    }
  };

  /**
   * jQuery .removeStyle() method
   * @since 2.0.0
   * @extends $.fn
   */

  $.fn.removeStyle = function(style, prefix) {
    prefix = prefix ? prefix : '';

    return this.each(function() {
      var el = this,
        styles = style.split(' ');

      for (var i = 0; i < styles.length; i++) {
        for (var j = 0; j < 4; j++) {
          switch (j) {
            case 0:
              var prop = styles[i];
              break;
            case 1:
              var prop = $.MixItUp.prototype._helpers._camelCase(prop);
              break;
            case 2:
              var prop = prefix + styles[i];
              break;
            case 3:
              var prop = $.MixItUp.prototype._helpers._camelCase(prefix + styles[i]);
          }

          if (
            el.style[prop] !== undf &&
            typeof el.style[prop] !== 'unknown' &&
            el.style[prop].length > 0
          ) {
            el.style[prop] = '';
          }

          if (!prefix && j === 1) break;
        }
      }

      if (el.attributes && el.attributes.style && el.attributes.style !== undf && el.attributes.style.value === '') {
        el.attributes.removeNamedItem('style');
      }
    });
  };

})(jQuery);
//--------------------------------------------------------------------------------------------



/* ---------------------- 
  DataTables
---------------------- */

/*!
 DataTables 1.10.10
 Â©2008-2015 SpryMedia Ltd - datatables.net/license
*/
/*! DataTables 1.10.10
 * Â©2008-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.10
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function(factory) {
    "use strict";

    if (typeof define === 'function' && define.amd) {
      // AMD
      define(['jquery'], function($) {
        return factory($, window, document);
      });
    } else if (typeof exports === 'object') {
      // CommonJS
      module.exports = function(root, $) {
        if (!root) {
          // CommonJS environments without a window global must pass a
          // root. This will give an error otherwise
          root = window;
        }

        if (!$) {
          $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
            require('jquery') :
            require('jquery')(root);
        }

        return factory($, root, root.document);
      };
    } else {
      // Browser
      factory(jQuery, window, document);
    }
  }
  (function($, window, document, undefined) {
    "use strict";

    /**
     * DataTables is a plug-in for the jQuery Javascript library. It is a highly
     * flexible tool, based upon the foundations of progressive enhancement,
     * which will add advanced interaction controls to any HTML table. For a
     * full list of features please refer to
     * [DataTables.net](href="http://datatables.net).
     *
     * Note that the `DataTable` object is not a global variable but is aliased
     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
     * be  accessed.
     *
     *  @class
     *  @param {object} [init={}] Configuration object for DataTables. Options
     *    are defined by {@link DataTable.defaults}
     *  @requires jQuery 1.7+
     *
     *  @example
     *    // Basic initialisation
     *    $(document).ready( function {
     *      $('#example').dataTable();
     *    } );
     *
     *  @example
     *    // Initialisation with configuration options - in this case, disable
     *    // pagination and sorting.
     *    $(document).ready( function {
     *      $('#example').dataTable( {
     *        "paginate": false,
     *        "sort": false
     *      } );
     *    } );
     */
    var DataTable;


    /*
     * It is useful to have variables which are scoped locally so only the
     * DataTables functions can access them and they don't leak into global space.
     * At the same time these functions are often useful over multiple files in the
     * core and API, so we list, or at least document, all variables which are used
     * by DataTables as private variables here. This also ensures that there is no
     * clashing of variable names and that they can easily referenced for reuse.
     */


    // Defined else where
    //  _selector_run
    //  _selector_opts
    //  _selector_first
    //  _selector_row_indexes

    var _ext; // DataTable.ext
    var _Api; // DataTable.Api
    var _api_register; // DataTable.Api.register
    var _api_registerPlural; // DataTable.Api.registerPlural

    var _re_dic = {};
    var _re_new_lines = /[\r\n]/g;
    var _re_html = /<.*?>/g;
    var _re_date_start = /^[\w\+\-]/;
    var _re_date_end = /[\w\+\-]$/;

    // Escape regular expression special characters
    var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');

    // http://en.wikipedia.org/wiki/Foreign_exchange_market
    // - \u20BD - Russian ruble.
    // - \u20a9 - South Korean Won
    // - \u20BA - Turkish Lira
    // - \u20B9 - Indian Rupee
    // - R - Brazil (R$) and South Africa
    // - fr - Swiss Franc
    // - kr - Swedish krona, Norwegian krone and Danish krone
    // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
    //   standards as thousands separators.
    var _re_formatted_numeric = /[',$Â£â‚¬Â¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;


    var _empty = function(d) {
      return !d || d === true || d === '-' ? true : false;
    };


    var _intVal = function(s) {
      var integer = parseInt(s, 10);
      return !isNaN(integer) && isFinite(s) ? integer : null;
    };

    // Convert from a formatted number with characters other than `.` as the
    // decimal place, to a Javascript number
    var _numToDecimal = function(num, decimalPoint) {
      // Cache created regular expressions for speed as this function is called often
      if (!_re_dic[decimalPoint]) {
        _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
      }
      return typeof num === 'string' && decimalPoint !== '.' ?
        num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') :
        num;
    };


    var _isNumber = function(d, decimalPoint, formatted) {
      var strType = typeof d === 'string';

      // If empty return immediately so there must be a number if it is a
      // formatted string (this stops the string "k", or "kr", etc being detected
      // as a formatted number for currency
      if (_empty(d)) {
        return true;
      }

      if (decimalPoint && strType) {
        d = _numToDecimal(d, decimalPoint);
      }

      if (formatted && strType) {
        d = d.replace(_re_formatted_numeric, '');
      }

      return !isNaN(parseFloat(d)) && isFinite(d);
    };


    // A string without HTML in it can be considered to be HTML still
    var _isHtml = function(d) {
      return _empty(d) || typeof d === 'string';
    };


    var _htmlNumeric = function(d, decimalPoint, formatted) {
      if (_empty(d)) {
        return true;
      }

      var html = _isHtml(d);
      return !html ?
        null :
        _isNumber(_stripHtml(d), decimalPoint, formatted) ?
        true :
        null;
    };


    var _pluck = function(a, prop, prop2) {
      var out = [];
      var i = 0,
        ien = a.length;

      // Could have the test in the loop for slightly smaller code, but speed
      // is essential here
      if (prop2 !== undefined) {
        for (; i < ien; i++) {
          if (a[i] && a[i][prop]) {
            out.push(a[i][prop][prop2]);
          }
        }
      } else {
        for (; i < ien; i++) {
          if (a[i]) {
            out.push(a[i][prop]);
          }
        }
      }

      return out;
    };


    // Basically the same as _pluck, but rather than looping over `a` we use `order`
    // as the indexes to pick from `a`
    var _pluck_order = function(a, order, prop, prop2) {
      var out = [];
      var i = 0,
        ien = order.length;

      // Could have the test in the loop for slightly smaller code, but speed
      // is essential here
      if (prop2 !== undefined) {
        for (; i < ien; i++) {
          if (a[order[i]][prop]) {
            out.push(a[order[i]][prop][prop2]);
          }
        }
      } else {
        for (; i < ien; i++) {
          out.push(a[order[i]][prop]);
        }
      }

      return out;
    };


    var _range = function(len, start) {
      var out = [];
      var end;

      if (start === undefined) {
        start = 0;
        end = len;
      } else {
        end = start;
        start = len;
      }

      for (var i = start; i < end; i++) {
        out.push(i);
      }

      return out;
    };


    var _removeEmpty = function(a) {
      var out = [];

      for (var i = 0, ien = a.length; i < ien; i++) {
        if (a[i]) { // careful - will remove all falsy values!
          out.push(a[i]);
        }
      }

      return out;
    };


    var _stripHtml = function(d) {
      return d.replace(_re_html, '');
    };


    /**
     * Find the unique elements in a source array.
     *
     * @param  {array} src Source array
     * @return {array} Array of unique items
     * @ignore
     */
    var _unique = function(src) {
      // A faster unique method is to use object keys to identify used values,
      // but this doesn't work with arrays or objects, which we must also
      // consider. See jsperf.com/compare-array-unique-versions/4 for more
      // information.
      var
        out = [],
        val,
        i, ien = src.length,
        j, k = 0;

      again: for (i = 0; i < ien; i++) {
        val = src[i];

        for (j = 0; j < k; j++) {
          if (out[j] === val) {
            continue again;
          }
        }

        out.push(val);
        k++;
      }

      return out;
    };



    /**
     * Create a mapping object that allows camel case parameters to be looked up
     * for their Hungarian counterparts. The mapping is stored in a private
     * parameter called `_hungarianMap` which can be accessed on the source object.
     *  @param {object} o
     *  @memberof DataTable#oApi
     */
    function _fnHungarianMap(o) {
      var
        hungarian = 'a aa ai ao as b fn i m o s ',
        match,
        newKey,
        map = {};

      $.each(o, function(key, val) {
        match = key.match(/^([^A-Z]+?)([A-Z])/);

        if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
          newKey = key.replace(match[0], match[2].toLowerCase());
          map[newKey] = key;

          if (match[1] === 'o') {
            _fnHungarianMap(o[key]);
          }
        }
      });

      o._hungarianMap = map;
    }


    /**
     * Convert from camel case parameters to Hungarian, based on a Hungarian map
     * created by _fnHungarianMap.
     *  @param {object} src The model object which holds all parameters that can be
     *    mapped.
     *  @param {object} user The object to convert from camel case to Hungarian.
     *  @param {boolean} force When set to `true`, properties which already have a
     *    Hungarian value in the `user` object will be overwritten. Otherwise they
     *    won't be.
     *  @memberof DataTable#oApi
     */
    function _fnCamelToHungarian(src, user, force) {
      if (!src._hungarianMap) {
        _fnHungarianMap(src);
      }

      var hungarianKey;

      $.each(user, function(key, val) {
        hungarianKey = src._hungarianMap[key];

        if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
          // For objects, we need to buzz down into the object to copy parameters
          if (hungarianKey.charAt(0) === 'o') {
            // Copy the camelCase options over to the hungarian
            if (!user[hungarianKey]) {
              user[hungarianKey] = {};
            }
            $.extend(true, user[hungarianKey], user[key]);

            _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
          } else {
            user[hungarianKey] = user[key];
          }
        }
      });
    }


    /**
     * Language compatibility - when certain options are given, and others aren't, we
     * need to duplicate the values over, in order to provide backwards compatibility
     * with older language files.
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnLanguageCompat(lang) {
      var defaults = DataTable.defaults.oLanguage;
      var zeroRecords = lang.sZeroRecords;

      /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
       * sZeroRecords - assuming that is given.
       */
      if (!lang.sEmptyTable && zeroRecords &&
        defaults.sEmptyTable === "No data available in table") {
        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
      }

      /* Likewise with loading records */
      if (!lang.sLoadingRecords && zeroRecords &&
        defaults.sLoadingRecords === "Loading...") {
        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
      }

      // Old parameter name of the thousands separator mapped onto the new
      if (lang.sInfoThousands) {
        lang.sThousands = lang.sInfoThousands;
      }

      var decimal = lang.sDecimal;
      if (decimal) {
        _addNumericSort(decimal);
      }
    }


    /**
     * Map one parameter onto another
     *  @param {object} o Object to map
     *  @param {*} knew The new parameter name
     *  @param {*} old The old parameter name
     */
    var _fnCompatMap = function(o, knew, old) {
      if (o[knew] !== undefined) {
        o[old] = o[knew];
      }
    };


    /**
     * Provide backwards compatibility for the main DT options. Note that the new
     * options are mapped onto the old parameters, so this is an external interface
     * change only.
     *  @param {object} init Object to map
     */
    function _fnCompatOpts(init) {
      _fnCompatMap(init, 'ordering', 'bSort');
      _fnCompatMap(init, 'orderMulti', 'bSortMulti');
      _fnCompatMap(init, 'orderClasses', 'bSortClasses');
      _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
      _fnCompatMap(init, 'order', 'aaSorting');
      _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
      _fnCompatMap(init, 'paging', 'bPaginate');
      _fnCompatMap(init, 'pagingType', 'sPaginationType');
      _fnCompatMap(init, 'pageLength', 'iDisplayLength');
      _fnCompatMap(init, 'searching', 'bFilter');

      // Boolean initialisation of x-scrolling
      if (typeof init.sScrollX === 'boolean') {
        init.sScrollX = init.sScrollX ? '100%' : '';
      }
      if (typeof init.scrollX === 'boolean') {
        init.scrollX = init.scrollX ? '100%' : '';
      }

      // Column search objects are in an array, so it needs to be converted
      // element by element
      var searchCols = init.aoSearchCols;

      if (searchCols) {
        for (var i = 0, ien = searchCols.length; i < ien; i++) {
          if (searchCols[i]) {
            _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
          }
        }
      }
    }


    /**
     * Provide backwards compatibility for column options. Note that the new options
     * are mapped onto the old parameters, so this is an external interface change
     * only.
     *  @param {object} init Object to map
     */
    function _fnCompatCols(init) {
      _fnCompatMap(init, 'orderable', 'bSortable');
      _fnCompatMap(init, 'orderData', 'aDataSort');
      _fnCompatMap(init, 'orderSequence', 'asSorting');
      _fnCompatMap(init, 'orderDataType', 'sortDataType');

      // orderData can be given as an integer
      var dataSort = init.aDataSort;
      if (dataSort && !$.isArray(dataSort)) {
        init.aDataSort = [dataSort];
      }
    }


    /**
     * Browser feature detection for capabilities, quirks
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnBrowserDetect(settings) {
      // We don't need to do this every time DataTables is constructed, the values
      // calculated are specific to the browser and OS configuration which we
      // don't expect to change between initialisations
      if (!DataTable.__browser) {
        var browser = {};
        DataTable.__browser = browser;

        // Scrolling feature / quirks detection
        var n = $('<div/>')
          .css({
            position: 'fixed',
            top: 0,
            left: 0,
            height: 1,
            width: 1,
            overflow: 'hidden'
          })
          .append(
            $('<div/>')
            .css({
              position: 'absolute',
              top: 1,
              left: 1,
              width: 100,
              overflow: 'scroll'
            })
            .append(
              $('<div/>')
              .css({
                width: '100%',
                height: 10
              })
            )
          )
          .appendTo('body');

        var outer = n.children();
        var inner = outer.children();

        // Numbers below, in order, are:
        // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
        //
        // IE6 XP:                           100 100 100  83
        // IE7 Vista:                        100 100 100  83
        // IE 8+ Windows:                     83  83 100  83
        // Evergreen Windows:                 83  83 100  83
        // Evergreen Mac with scrollbars:     85  85 100  85
        // Evergreen Mac without scrollbars: 100 100 100 100

        // Get scrollbar width
        browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

        // IE6/7 will oversize a width 100% element inside a scrolling element, to
        // include the width of the scrollbar, while other browsers ensure the inner
        // element is contained without forcing scrolling
        browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

        // In rtl text layout, some browsers (most, but not all) will place the
        // scrollbar on the left, rather than the right.
        browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

        // IE8- don't provide height and width for getBoundingClientRect
        browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

        n.remove();
      }

      $.extend(settings.oBrowser, DataTable.__browser);
      settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
    }


    /**
     * Array.prototype reduce[Right] method, used for browsers which don't support
     * JS 1.6. Done this way to reduce code size, since we iterate either way
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnReduce(that, fn, init, start, end, inc) {
      var
        i = start,
        value,
        isSet = false;

      if (init !== undefined) {
        value = init;
        isSet = true;
      }

      while (i !== end) {
        if (!that.hasOwnProperty(i)) {
          continue;
        }

        value = isSet ?
          fn(value, that[i], i, that) :
          that[i];

        isSet = true;
        i += inc;
      }

      return value;
    }

    /**
     * Add a column to the list used for the table with default values
     *  @param {object} oSettings dataTables settings object
     *  @param {node} nTh The th element for this column
     *  @memberof DataTable#oApi
     */
    function _fnAddColumn(oSettings, nTh) {
      // Add column to aoColumns array
      var oDefaults = DataTable.defaults.column;
      var iCol = oSettings.aoColumns.length;
      var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
        "nTh": nTh ? nTh : document.createElement('th'),
        "sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
        "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
        "mData": oDefaults.mData ? oDefaults.mData : iCol,
        idx: iCol
      });
      oSettings.aoColumns.push(oCol);

      // Add search object for column specific search. Note that the `searchCols[ iCol ]`
      // passed into extend can be undefined. This allows the user to give a default
      // with only some of the parameters defined, and also not give a default
      var searchCols = oSettings.aoPreSearchCols;
      searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

      // Use the default column options function to initialise classes etc
      _fnColumnOptions(oSettings, iCol, $(nTh).data());
    }


    /**
     * Apply options for a column
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iCol column index to consider
     *  @param {object} oOptions object with sType, bVisible and bSearchable etc
     *  @memberof DataTable#oApi
     */
    function _fnColumnOptions(oSettings, iCol, oOptions) {
      var oCol = oSettings.aoColumns[iCol];
      var oClasses = oSettings.oClasses;
      var th = $(oCol.nTh);

      // Try to get width information from the DOM. We can't get it from CSS
      // as we'd need to parse the CSS stylesheet. `width` option can override
      if (!oCol.sWidthOrig) {
        // Width attribute
        oCol.sWidthOrig = th.attr('width') || null;

        // Style attribute
        var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
        if (t) {
          oCol.sWidthOrig = t[1];
        }
      }

      /* User specified column options */
      if (oOptions !== undefined && oOptions !== null) {
        // Backwards compatibility
        _fnCompatCols(oOptions);

        // Map camel case parameters to their Hungarian counterparts
        _fnCamelToHungarian(DataTable.defaults.column, oOptions);

        /* Backwards compatibility for mDataProp */
        if (oOptions.mDataProp !== undefined && !oOptions.mData) {
          oOptions.mData = oOptions.mDataProp;
        }

        if (oOptions.sType) {
          oCol._sManualType = oOptions.sType;
        }

        // `class` is a reserved word in Javascript, so we need to provide
        // the ability to use a valid name for the camel case input
        if (oOptions.className && !oOptions.sClass) {
          oOptions.sClass = oOptions.className;
        }

        $.extend(oCol, oOptions);
        _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

        /* iDataSort to be applied (backwards compatibility), but aDataSort will take
         * priority if defined
         */
        if (oOptions.iDataSort !== undefined) {
          oCol.aDataSort = [oOptions.iDataSort];
        }
        _fnMap(oCol, oOptions, "aDataSort");
      }

      /* Cache the data get and set functions for speed */
      var mDataSrc = oCol.mData;
      var mData = _fnGetObjectDataFn(mDataSrc);
      var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

      var attrTest = function(src) {
        return typeof src === 'string' && src.indexOf('@') !== -1;
      };
      oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (
        attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
      );

      oCol.fnGetData = function(rowData, type, meta) {
        var innerData = mData(rowData, type, undefined, meta);

        return mRender && type ?
          mRender(innerData, type, rowData, meta) :
          innerData;
      };
      oCol.fnSetData = function(rowData, val, meta) {
        return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
      };

      // Indicate if DataTables should read DOM data as an object or array
      // Used in _fnGetRowElements
      if (typeof mDataSrc !== 'number') {
        oSettings._rowReadObject = true;
      }

      /* Feature sorting overrides column specific when off */
      if (!oSettings.oFeatures.bSort) {
        oCol.bSortable = false;
        th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
      }

      /* Check that the class assignment is correct for sorting */
      var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
      var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
      if (!oCol.bSortable || (!bAsc && !bDesc)) {
        oCol.sSortingClass = oClasses.sSortableNone;
        oCol.sSortingClassJUI = "";
      } else if (bAsc && !bDesc) {
        oCol.sSortingClass = oClasses.sSortableAsc;
        oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
      } else if (!bAsc && bDesc) {
        oCol.sSortingClass = oClasses.sSortableDesc;
        oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
      } else {
        oCol.sSortingClass = oClasses.sSortable;
        oCol.sSortingClassJUI = oClasses.sSortJUI;
      }
    }


    /**
     * Adjust the table column widths for new data. Note: you would probably want to
     * do a redraw after calling this function!
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnAdjustColumnSizing(settings) {
      /* Not interested in doing column width calculation if auto-width is disabled */
      if (settings.oFeatures.bAutoWidth !== false) {
        var columns = settings.aoColumns;

        _fnCalculateColumnWidths(settings);
        for (var i = 0, iLen = columns.length; i < iLen; i++) {
          columns[i].nTh.style.width = columns[i].sWidth;
        }
      }

      var scroll = settings.oScroll;
      if (scroll.sY !== '' || scroll.sX !== '') {
        _fnScrollDraw(settings);
      }

      _fnCallbackFire(settings, null, 'column-sizing', [settings]);
    }


    /**
     * Covert the index of a visible column to the index in the data array (take account
     * of hidden columns)
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iMatch Visible column index to lookup
     *  @returns {int} i the data index
     *  @memberof DataTable#oApi
     */
    function _fnVisibleToColumnIndex(oSettings, iMatch) {
      var aiVis = _fnGetColumns(oSettings, 'bVisible');

      return typeof aiVis[iMatch] === 'number' ?
        aiVis[iMatch] :
        null;
    }


    /**
     * Covert the index of an index in the data array and convert it to the visible
     *   column index (take account of hidden columns)
     *  @param {int} iMatch Column index to lookup
     *  @param {object} oSettings dataTables settings object
     *  @returns {int} i the data index
     *  @memberof DataTable#oApi
     */
    function _fnColumnIndexToVisible(oSettings, iMatch) {
      var aiVis = _fnGetColumns(oSettings, 'bVisible');
      var iPos = $.inArray(iMatch, aiVis);

      return iPos !== -1 ? iPos : null;
    }


    /**
     * Get the number of visible columns
     *  @param {object} oSettings dataTables settings object
     *  @returns {int} i the number of visible columns
     *  @memberof DataTable#oApi
     */
    function _fnVisbleColumns(oSettings) {
      return _fnGetColumns(oSettings, 'bVisible').length;
    }


    /**
     * Get an array of column indexes that match a given property
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sParam Parameter in aoColumns to look for - typically
     *    bVisible or bSearchable
     *  @returns {array} Array of indexes with matched properties
     *  @memberof DataTable#oApi
     */
    function _fnGetColumns(oSettings, sParam) {
      var a = [];

      $.map(oSettings.aoColumns, function(val, i) {
        if (val[sParam]) {
          a.push(i);
        }
      });

      return a;
    }


    /**
     * Calculate the 'type' of a column
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnColumnTypes(settings) {
      var columns = settings.aoColumns;
      var data = settings.aoData;
      var types = DataTable.ext.type.detect;
      var i, ien, j, jen, k, ken;
      var col, cell, detectedType, cache;

      // For each column, spin over the 
      for (i = 0, ien = columns.length; i < ien; i++) {
        col = columns[i];
        cache = [];

        if (!col.sType && col._sManualType) {
          col.sType = col._sManualType;
        } else if (!col.sType) {
          for (j = 0, jen = types.length; j < jen; j++) {
            for (k = 0, ken = data.length; k < ken; k++) {
              // Use a cache array so we only need to get the type data
              // from the formatter once (when using multiple detectors)
              if (cache[k] === undefined) {
                cache[k] = _fnGetCellData(settings, k, i, 'type');
              }

              detectedType = types[j](cache[k], settings);

              // If null, then this type can't apply to this column, so
              // rather than testing all cells, break out. There is an
              // exception for the last type which is `html`. We need to
              // scan all rows since it is possible to mix string and HTML
              // types
              if (!detectedType && j !== types.length - 1) {
                break;
              }

              // Only a single match is needed for html type since it is
              // bottom of the pile and very similar to string
              if (detectedType === 'html') {
                break;
              }
            }

            // Type is valid for all data points in the column - use this
            // type
            if (detectedType) {
              col.sType = detectedType;
              break;
            }
          }

          // Fall back - if no type was detected, always use string
          if (!col.sType) {
            col.sType = 'string';
          }
        }
      }
    }


    /**
     * Take the column definitions and static columns arrays and calculate how
     * they relate to column indexes. The callback function will then apply the
     * definition found for a column to a suitable configuration object.
     *  @param {object} oSettings dataTables settings object
     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
     *  @param {array} aoCols The aoColumns array that defines columns individually
     *  @param {function} fn Callback function - takes two parameters, the calculated
     *    column index and the definition for that column.
     *  @memberof DataTable#oApi
     */
    function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
      var i, iLen, j, jLen, k, kLen, def;
      var columns = oSettings.aoColumns;

      // Column definitions with aTargets
      if (aoColDefs) {
        /* Loop over the definitions array - loop in reverse so first instance has priority */
        for (i = aoColDefs.length - 1; i >= 0; i--) {
          def = aoColDefs[i];

          /* Each definition can target multiple columns, as it is an array */
          var aTargets = def.targets !== undefined ?
            def.targets :
            def.aTargets;

          if (!$.isArray(aTargets)) {
            aTargets = [aTargets];
          }

          for (j = 0, jLen = aTargets.length; j < jLen; j++) {
            if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
              /* Add columns that we don't yet know about */
              while (columns.length <= aTargets[j]) {
                _fnAddColumn(oSettings);
              }

              /* Integer, basic index */
              fn(aTargets[j], def);
            } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
              /* Negative integer, right to left column counting */
              fn(columns.length + aTargets[j], def);
            } else if (typeof aTargets[j] === 'string') {
              /* Class name matching on TH element */
              for (k = 0, kLen = columns.length; k < kLen; k++) {
                if (aTargets[j] == "_all" ||
                  $(columns[k].nTh).hasClass(aTargets[j])) {
                  fn(k, def);
                }
              }
            }
          }
        }
      }

      // Statically defined columns array
      if (aoCols) {
        for (i = 0, iLen = aoCols.length; i < iLen; i++) {
          fn(i, aoCols[i]);
        }
      }
    }

    /**
     * Add a data array to the table, creating DOM node etc. This is the parallel to
     * _fnGatherData, but for adding rows from a Javascript source, rather than a
     * DOM source.
     *  @param {object} oSettings dataTables settings object
     *  @param {array} aData data array to be added
     *  @param {node} [nTr] TR element to add to the table - optional. If not given,
     *    DataTables will create a row automatically
     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
     *    if nTr is.
     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
     *  @memberof DataTable#oApi
     */
    function _fnAddData(oSettings, aDataIn, nTr, anTds) {
      /* Create the object for storing information about this new row */
      var iRow = oSettings.aoData.length;
      var oData = $.extend(true, {}, DataTable.models.oRow, {
        src: nTr ? 'dom' : 'data',
        idx: iRow
      });

      oData._aData = aDataIn;
      oSettings.aoData.push(oData);

      /* Create the cells */
      var nTd, sThisType;
      var columns = oSettings.aoColumns;

      // Invalidate the column types as the new data needs to be revalidated
      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        columns[i].sType = null;
      }

      /* Add to the display array */
      oSettings.aiDisplayMaster.push(iRow);

      var id = oSettings.rowIdFn(aDataIn);
      if (id !== undefined) {
        oSettings.aIds[id] = oData;
      }

      /* Create the DOM information, or register it if already present */
      if (nTr || !oSettings.oFeatures.bDeferRender) {
        _fnCreateTr(oSettings, iRow, nTr, anTds);
      }

      return iRow;
    }


    /**
     * Add one or more TR elements to the table. Generally we'd expect to
     * use this for reading data from a DOM sourced table, but it could be
     * used for an TR element. Note that if a TR is given, it is used (i.e.
     * it is not cloned).
     *  @param {object} settings dataTables settings object
     *  @param {array|node|jQuery} trs The TR element(s) to add to the table
     *  @returns {array} Array of indexes for the added rows
     *  @memberof DataTable#oApi
     */
    function _fnAddTr(settings, trs) {
      var row;

      // Allow an individual node to be passed in
      if (!(trs instanceof $)) {
        trs = $(trs);
      }

      return trs.map(function(i, el) {
        row = _fnGetRowElements(settings, el);
        return _fnAddData(settings, row.data, el, row.cells);
      });
    }


    /**
     * Take a TR element and convert it to an index in aoData
     *  @param {object} oSettings dataTables settings object
     *  @param {node} n the TR element to find
     *  @returns {int} index if the node is found, null if not
     *  @memberof DataTable#oApi
     */
    function _fnNodeToDataIndex(oSettings, n) {
      return (n._DT_RowIndex !== undefined) ? n._DT_RowIndex : null;
    }


    /**
     * Take a TD element and convert it into a column data index (not the visible index)
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iRow The row number the TD/TH can be found in
     *  @param {node} n The TD/TH element to find
     *  @returns {int} index if the node is found, -1 if not
     *  @memberof DataTable#oApi
     */
    function _fnNodeToColumnIndex(oSettings, iRow, n) {
      return $.inArray(n, oSettings.aoData[iRow].anCells);
    }


    /**
     * Get the data for a given cell from the internal cache, taking into account data mapping
     *  @param {object} settings dataTables settings object
     *  @param {int} rowIdx aoData row id
     *  @param {int} colIdx Column index
     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
     *  @returns {*} Cell data
     *  @memberof DataTable#oApi
     */
    function _fnGetCellData(settings, rowIdx, colIdx, type) {
      var draw = settings.iDraw;
      var col = settings.aoColumns[colIdx];
      var rowData = settings.aoData[rowIdx]._aData;
      var defaultContent = col.sDefaultContent;
      var cellData = col.fnGetData(rowData, type, {
        settings: settings,
        row: rowIdx,
        col: colIdx
      });

      if (cellData === undefined) {
        if (settings.iDrawError != draw && defaultContent === null) {
          _fnLog(settings, 0, "Requested unknown parameter " +
            (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") +
            " for row " + rowIdx + ", column " + colIdx, 4);
          settings.iDrawError = draw;
        }
        return defaultContent;
      }

      /* When the data source is null, we can use default column data */
      if ((cellData === rowData || cellData === null) && defaultContent !== null) {
        cellData = defaultContent;
      } else if (typeof cellData === 'function') {
        // If the data source is a function, then we run it and use the return,
        // executing in the scope of the data object (for instances)
        return cellData.call(rowData);
      }

      if (cellData === null && type == 'display') {
        return '';
      }
      return cellData;
    }


    /**
     * Set the value for a specific cell, into the internal data cache
     *  @param {object} settings dataTables settings object
     *  @param {int} rowIdx aoData row id
     *  @param {int} colIdx Column index
     *  @param {*} val Value to set
     *  @memberof DataTable#oApi
     */
    function _fnSetCellData(settings, rowIdx, colIdx, val) {
      var col = settings.aoColumns[colIdx];
      var rowData = settings.aoData[rowIdx]._aData;

      col.fnSetData(rowData, val, {
        settings: settings,
        row: rowIdx,
        col: colIdx
      });
    }


    // Private variable that is used to match action syntax in the data property object
    var __reArray = /\[.*?\]$/;
    var __reFn = /\(\)$/;

    /**
     * Split string on periods, taking into account escaped periods
     * @param  {string} str String to split
     * @return {array} Split string
     */
    function _fnSplitObjNotation(str) {
      return $.map(str.match(/(\\.|[^\.])+/g) || [''], function(s) {
        return s.replace(/\\./g, '.');
      });
    }


    /**
     * Return a function that can be used to get data from a source object, taking
     * into account the ability to use nested objects as a source
     *  @param {string|int|function} mSource The data source for the object
     *  @returns {function} Data get function
     *  @memberof DataTable#oApi
     */
    function _fnGetObjectDataFn(mSource) {
      if ($.isPlainObject(mSource)) {
        /* Build an object of get functions, and wrap them in a single call */
        var o = {};
        $.each(mSource, function(key, val) {
          if (val) {
            o[key] = _fnGetObjectDataFn(val);
          }
        });

        return function(data, type, row, meta) {
          var t = o[type] || o._;
          return t !== undefined ?
            t(data, type, row, meta) :
            data;
        };
      } else if (mSource === null) {
        /* Give an empty string for rendering / sorting etc */
        return function(data) { // type, row and meta also passed, but not used
          return data;
        };
      } else if (typeof mSource === 'function') {
        return function(data, type, row, meta) {
          return mSource(data, type, row, meta);
        };
      } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
          mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
        /* If there is a . in the source string then the data source is in a
         * nested object so we loop over the data for each level to get the next
         * level down. On each loop we test for undefined, and if found immediately
         * return. This allows entire objects to be missing and sDefaultContent to
         * be used if defined, rather than throwing an error
         */
        var fetchData = function(data, type, src) {
          var arrayNotation, funcNotation, out, innerSrc;

          if (src !== "") {
            var a = _fnSplitObjNotation(src);

            for (var i = 0, iLen = a.length; i < iLen; i++) {
              // Check if we are dealing with special notation
              arrayNotation = a[i].match(__reArray);
              funcNotation = a[i].match(__reFn);

              if (arrayNotation) {
                // Array notation
                a[i] = a[i].replace(__reArray, '');

                // Condition allows simply [] to be passed in
                if (a[i] !== "") {
                  data = data[a[i]];
                }
                out = [];

                // Get the remainder of the nested object to get
                a.splice(0, i + 1);
                innerSrc = a.join('.');

                // Traverse each entry in the array getting the properties requested
                if ($.isArray(data)) {
                  for (var j = 0, jLen = data.length; j < jLen; j++) {
                    out.push(fetchData(data[j], type, innerSrc));
                  }
                }

                // If a string is given in between the array notation indicators, that
                // is used to join the strings together, otherwise an array is returned
                var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
                data = (join === "") ? out : out.join(join);

                // The inner call to fetchData has already traversed through the remainder
                // of the source requested, so we exit from the loop
                break;
              } else if (funcNotation) {
                // Function call
                a[i] = a[i].replace(__reFn, '');
                data = data[a[i]]();
                continue;
              }

              if (data === null || data[a[i]] === undefined) {
                return undefined;
              }
              data = data[a[i]];
            }
          }

          return data;
        };

        return function(data, type) { // row and meta also passed, but not used
          return fetchData(data, type, mSource);
        };
      } else {
        /* Array or flat object mapping */
        return function(data, type) { // row and meta also passed, but not used
          return data[mSource];
        };
      }
    }


    /**
     * Return a function that can be used to set data from a source object, taking
     * into account the ability to use nested objects as a source
     *  @param {string|int|function} mSource The data source for the object
     *  @returns {function} Data set function
     *  @memberof DataTable#oApi
     */
    function _fnSetObjectDataFn(mSource) {
      if ($.isPlainObject(mSource)) {
        /* Unlike get, only the underscore (global) option is used for for
         * setting data since we don't know the type here. This is why an object
         * option is not documented for `mData` (which is read/write), but it is
         * for `mRender` which is read only.
         */
        return _fnSetObjectDataFn(mSource._);
      } else if (mSource === null) {
        /* Nothing to do when the data source is null */
        return function() {};
      } else if (typeof mSource === 'function') {
        return function(data, val, meta) {
          mSource(data, 'set', val, meta);
        };
      } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
          mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
        /* Like the get, we need to get data from a nested object */
        var setData = function(data, val, src) {
          var a = _fnSplitObjNotation(src),
            b;
          var aLast = a[a.length - 1];
          var arrayNotation, funcNotation, o, innerSrc;

          for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
            // Check if we are dealing with an array notation request
            arrayNotation = a[i].match(__reArray);
            funcNotation = a[i].match(__reFn);

            if (arrayNotation) {
              a[i] = a[i].replace(__reArray, '');
              data[a[i]] = [];

              // Get the remainder of the nested object to set so we can recurse
              b = a.slice();
              b.splice(0, i + 1);
              innerSrc = b.join('.');

              // Traverse each entry in the array setting the properties requested
              if ($.isArray(val)) {
                for (var j = 0, jLen = val.length; j < jLen; j++) {
                  o = {};
                  setData(o, val[j], innerSrc);
                  data[a[i]].push(o);
                }
              } else {
                // We've been asked to save data to an array, but it
                // isn't array data to be saved. Best that can be done
                // is to just save the value.
                data[a[i]] = val;
              }

              // The inner call to setData has already traversed through the remainder
              // of the source and has set the data, thus we can exit here
              return;
            } else if (funcNotation) {
              // Function call
              a[i] = a[i].replace(__reFn, '');
              data = data[a[i]](val);
            }

            // If the nested object doesn't currently exist - since we are
            // trying to set the value - create it
            if (data[a[i]] === null || data[a[i]] === undefined) {
              data[a[i]] = {};
            }
            data = data[a[i]];
          }

          // Last item in the input - i.e, the actual set
          if (aLast.match(__reFn)) {
            // Function call
            data = data[aLast.replace(__reFn, '')](val);
          } else {
            // If array notation is used, we just want to strip it and use the property name
            // and assign the value. If it isn't used, then we get the result we want anyway
            data[aLast.replace(__reArray, '')] = val;
          }
        };

        return function(data, val) { // meta is also passed in, but not used
          return setData(data, val, mSource);
        };
      } else {
        /* Array or flat object mapping */
        return function(data, val) { // meta is also passed in, but not used
          data[mSource] = val;
        };
      }
    }


    /**
     * Return an array with the full table data
     *  @param {object} oSettings dataTables settings object
     *  @returns array {array} aData Master data array
     *  @memberof DataTable#oApi
     */
    function _fnGetDataMaster(settings) {
      return _pluck(settings.aoData, '_aData');
    }


    /**
     * Nuke the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnClearTable(settings) {
      settings.aoData.length = 0;
      settings.aiDisplayMaster.length = 0;
      settings.aiDisplay.length = 0;
      settings.aIds = {};
    }


    /**
     * Take an array of integers (index array) and remove a target integer (value - not
     * the key!)
     *  @param {array} a Index array to target
     *  @param {int} iTarget value to find
     *  @memberof DataTable#oApi
     */
    function _fnDeleteIndex(a, iTarget, splice) {
      var iTargetIndex = -1;

      for (var i = 0, iLen = a.length; i < iLen; i++) {
        if (a[i] == iTarget) {
          iTargetIndex = i;
        } else if (a[i] > iTarget) {
          a[i]--;
        }
      }

      if (iTargetIndex != -1 && splice === undefined) {
        a.splice(iTargetIndex, 1);
      }
    }


    /**
     * Mark cached data as invalid such that a re-read of the data will occur when
     * the cached data is next requested. Also update from the data source object.
     *
     * @param {object} settings DataTables settings object
     * @param {int}    rowIdx   Row index to invalidate
     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
     *     or 'data'
     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
     *     row will be invalidated
     * @memberof DataTable#oApi
     *
     * @todo For the modularisation of v1.11 this will need to become a callback, so
     *   the sort and filter methods can subscribe to it. That will required
     *   initialisation options for sorting, which is why it is not already baked in
     */
    function _fnInvalidate(settings, rowIdx, src, colIdx) {
      var row = settings.aoData[rowIdx];
      var i, ien;
      var cellWrite = function(cell, col) {
        // This is very frustrating, but in IE if you just write directly
        // to innerHTML, and elements that are overwritten are GC'ed,
        // even if there is a reference to them elsewhere
        while (cell.childNodes.length) {
          cell.removeChild(cell.firstChild);
        }

        cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
      };

      // Are we reading last data from DOM or the data object?
      if (src === 'dom' || ((!src || src === 'auto') && row.src === 'dom')) {
        // Read the data from the DOM
        row._aData = _fnGetRowElements(
            settings, row, colIdx, colIdx === undefined ? undefined : row._aData
          )
          .data;
      } else {
        // Reading from data object, update the DOM
        var cells = row.anCells;

        if (cells) {
          if (colIdx !== undefined) {
            cellWrite(cells[colIdx], colIdx);
          } else {
            for (i = 0, ien = cells.length; i < ien; i++) {
              cellWrite(cells[i], i);
            }
          }
        }
      }

      // For both row and cell invalidation, the cached data for sorting and
      // filtering is nulled out
      row._aSortData = null;
      row._aFilterData = null;

      // Invalidate the type for a specific column (if given) or all columns since
      // the data might have changed
      var cols = settings.aoColumns;
      if (colIdx !== undefined) {
        cols[colIdx].sType = null;
      } else {
        for (i = 0, ien = cols.length; i < ien; i++) {
          cols[i].sType = null;
        }

        // Update DataTables special `DT_*` attributes for the row
        _fnRowAttributes(settings, row);
      }
    }


    /**
     * Build a data source object from an HTML row, reading the contents of the
     * cells that are in the row.
     *
     * @param {object} settings DataTables settings object
     * @param {node|object} TR element from which to read data or existing row
     *   object from which to re-read the data from the cells
     * @param {int} [colIdx] Optional column index
     * @param {array|object} [d] Data source object. If `colIdx` is given then this
     *   parameter should also be given and will be used to write the data into.
     *   Only the column in question will be written
     * @returns {object} Object with two parameters: `data` the data read, in
     *   document order, and `cells` and array of nodes (they can be useful to the
     *   caller, so rather than needing a second traversal to get them, just return
     *   them from here).
     * @memberof DataTable#oApi
     */
    function _fnGetRowElements(settings, row, colIdx, d) {
      var
        tds = [],
        td = row.firstChild,
        name, col, o, i = 0,
        contents,
        columns = settings.aoColumns,
        objectRead = settings._rowReadObject;

      // Allow the data object to be passed in, or construct
      d = d !== undefined ?
        d :
        objectRead ? {} :
        [];

      var attr = function(str, td) {
        if (typeof str === 'string') {
          var idx = str.indexOf('@');

          if (idx !== -1) {
            var attr = str.substring(idx + 1);
            var setter = _fnSetObjectDataFn(str);
            setter(d, td.getAttribute(attr));
          }
        }
      };

      // Read data from a cell and store into the data object
      var cellProcess = function(cell) {
        if (colIdx === undefined || colIdx === i) {
          col = columns[i];
          contents = $.trim(cell.innerHTML);

          if (col && col._bAttrSrc) {
            var setter = _fnSetObjectDataFn(col.mData._);
            setter(d, contents);

            attr(col.mData.sort, cell);
            attr(col.mData.type, cell);
            attr(col.mData.filter, cell);
          } else {
            // Depending on the `data` option for the columns the data can
            // be read to either an object or an array.
            if (objectRead) {
              if (!col._setter) {
                // Cache the setter function
                col._setter = _fnSetObjectDataFn(col.mData);
              }
              col._setter(d, contents);
            } else {
              d[i] = contents;
            }
          }
        }

        i++;
      };

      if (td) {
        // `tr` element was passed in
        while (td) {
          name = td.nodeName.toUpperCase();

          if (name == "TD" || name == "TH") {
            cellProcess(td);
            tds.push(td);
          }

          td = td.nextSibling;
        }
      } else {
        // Existing row object passed in
        tds = row.anCells;

        for (var j = 0, jen = tds.length; j < jen; j++) {
          cellProcess(tds[j]);
        }
      }

      // Read the ID from the DOM if present
      var rowNode = row.firstChild ? row : row.nTr;

      if (rowNode) {
        var id = rowNode.getAttribute('id');

        if (id) {
          _fnSetObjectDataFn(settings.rowId)(d, id);
        }
      }

      return {
        data: d,
        cells: tds
      };
    }
    /**
     * Create a new TR element (and it's TD children) for a row
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iRow Row to consider
     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
     *    DataTables will create a row automatically
     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
     *    if nTr is.
     *  @memberof DataTable#oApi
     */
    function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
      var
        row = oSettings.aoData[iRow],
        rowData = row._aData,
        cells = [],
        nTr, nTd, oCol,
        i, iLen;

      if (row.nTr === null) {
        nTr = nTrIn || document.createElement('tr');

        row.nTr = nTr;
        row.anCells = cells;

        /* Use a private property on the node to allow reserve mapping from the node
         * to the aoData array for fast look up
         */
        nTr._DT_RowIndex = iRow;

        /* Special parameters can be given by the data source to be used on the row */
        _fnRowAttributes(oSettings, row);

        /* Process each column */
        for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
          oCol = oSettings.aoColumns[i];

          nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
          nTd._DT_CellIndex = {
            row: iRow,
            column: i
          };

          cells.push(nTd);

          // Need to create the HTML if new, or if a rendering function is defined
          if (!nTrIn || oCol.mRender || oCol.mData !== i) {
            nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
          }

          /* Add user defined class */
          if (oCol.sClass) {
            nTd.className += ' ' + oCol.sClass;
          }

          // Visibility - add or remove as required
          if (oCol.bVisible && !nTrIn) {
            nTr.appendChild(nTd);
          } else if (!oCol.bVisible && nTrIn) {
            nTd.parentNode.removeChild(nTd);
          }

          if (oCol.fnCreatedCell) {
            oCol.fnCreatedCell.call(oSettings.oInstance,
              nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i
            );
          }
        }

        _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
      }

      // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
      // and deployed
      row.nTr.setAttribute('role', 'row');
    }


    /**
     * Add attributes to a row based on the special `DT_*` parameters in a data
     * source object.
     *  @param {object} settings DataTables settings object
     *  @param {object} DataTables row object for the row to be modified
     *  @memberof DataTable#oApi
     */
    function _fnRowAttributes(settings, row) {
      var tr = row.nTr;
      var data = row._aData;

      if (tr) {
        var id = settings.rowIdFn(data);

        if (id) {
          tr.id = id;
        }

        if (data.DT_RowClass) {
          // Remove any classes added by DT_RowClass before
          var a = data.DT_RowClass.split(' ');
          row.__rowc = row.__rowc ?
            _unique(row.__rowc.concat(a)) :
            a;

          $(tr)
            .removeClass(row.__rowc.join(' '))
            .addClass(data.DT_RowClass);
        }

        if (data.DT_RowAttr) {
          $(tr).attr(data.DT_RowAttr);
        }

        if (data.DT_RowData) {
          $(tr).data(data.DT_RowData);
        }
      }
    }


    /**
     * Create the HTML header for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnBuildHead(oSettings) {
      var i, ien, cell, row, column;
      var thead = oSettings.nTHead;
      var tfoot = oSettings.nTFoot;
      var createHeader = $('th, td', thead).length === 0;
      var classes = oSettings.oClasses;
      var columns = oSettings.aoColumns;

      if (createHeader) {
        row = $('<tr/>').appendTo(thead);
      }

      for (i = 0, ien = columns.length; i < ien; i++) {
        column = columns[i];
        cell = $(column.nTh).addClass(column.sClass);

        if (createHeader) {
          cell.appendTo(row);
        }

        // 1.11 move into sorting
        if (oSettings.oFeatures.bSort) {
          cell.addClass(column.sSortingClass);

          if (column.bSortable !== false) {
            cell
              .attr('tabindex', oSettings.iTabIndex)
              .attr('aria-controls', oSettings.sTableId);

            _fnSortAttachListener(oSettings, column.nTh, i);
          }
        }

        if (column.sTitle != cell[0].innerHTML) {
          cell.html(column.sTitle);
        }

        _fnRenderer(oSettings, 'header')(
          oSettings, cell, column, classes
        );
      }

      if (createHeader) {
        _fnDetectHeader(oSettings.aoHeader, thead);
      }

      /* ARIA role for the rows */
      $(thead).find('>tr').attr('role', 'row');

      /* Deal with the footer - add classes if required */
      $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
      $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

      // Cache the footer cells. Note that we only take the cells from the first
      // row in the footer. If there is more than one row the user wants to
      // interact with, they need to use the table().foot() method. Note also this
      // allows cells to be used for multiple columns using colspan
      if (tfoot !== null) {
        var cells = oSettings.aoFooter[0];

        for (i = 0, ien = cells.length; i < ien; i++) {
          column = columns[i];
          column.nTf = cells[i].cell;

          if (column.sClass) {
            $(column.nTf).addClass(column.sClass);
          }
        }
      }
    }


    /**
     * Draw the header (or footer) element based on the column visibility states. The
     * methodology here is to use the layout array from _fnDetectHeader, modified for
     * the instantaneous column visibility, to construct the new layout. The grid is
     * traversed over cell at a time in a rows x columns grid fashion, although each
     * cell insert can cover multiple elements in the grid - which is tracks using the
     * aApplied array. Cell inserts in the grid will only occur where there isn't
     * already a cell in that position.
     *  @param {object} oSettings dataTables settings object
     *  @param array {objects} aoSource Layout array from _fnDetectHeader
     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
     *  @memberof DataTable#oApi
     */
    function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
      var i, iLen, j, jLen, k, kLen, n, nLocalTr;
      var aoLocal = [];
      var aApplied = [];
      var iColumns = oSettings.aoColumns.length;
      var iRowspan, iColspan;

      if (!aoSource) {
        return;
      }

      if (bIncludeHidden === undefined) {
        bIncludeHidden = false;
      }

      /* Make a copy of the master layout array, but without the visible columns in it */
      for (i = 0, iLen = aoSource.length; i < iLen; i++) {
        aoLocal[i] = aoSource[i].slice();
        aoLocal[i].nTr = aoSource[i].nTr;

        /* Remove any columns which are currently hidden */
        for (j = iColumns - 1; j >= 0; j--) {
          if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
            aoLocal[i].splice(j, 1);
          }
        }

        /* Prep the applied array - it needs an element for each row */
        aApplied.push([]);
      }

      for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
        nLocalTr = aoLocal[i].nTr;

        /* All cells are going to be replaced, so empty out the row */
        if (nLocalTr) {
          while ((n = nLocalTr.firstChild)) {
            nLocalTr.removeChild(n);
          }
        }

        for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
          iRowspan = 1;
          iColspan = 1;

          /* Check to see if there is already a cell (row/colspan) covering our target
           * insert point. If there is, then there is nothing to do.
           */
          if (aApplied[i][j] === undefined) {
            nLocalTr.appendChild(aoLocal[i][j].cell);
            aApplied[i][j] = 1;

            /* Expand the cell to cover as many rows as needed */
            while (aoLocal[i + iRowspan] !== undefined &&
              aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
              aApplied[i + iRowspan][j] = 1;
              iRowspan++;
            }

            /* Expand the cell to cover as many columns as needed */
            while (aoLocal[i][j + iColspan] !== undefined &&
              aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
              /* Must update the applied array over the rows for the columns */
              for (k = 0; k < iRowspan; k++) {
                aApplied[i + k][j + iColspan] = 1;
              }
              iColspan++;
            }

            /* Do the actual expansion in the DOM */
            $(aoLocal[i][j].cell)
              .attr('rowspan', iRowspan)
              .attr('colspan', iColspan);
          }
        }
      }
    }


    /**
     * Insert the required TR nodes into the table for display
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnDraw(oSettings) {
      /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
      var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
      if ($.inArray(false, aPreDraw) !== -1) {
        _fnProcessingDisplay(oSettings, false);
        return;
      }

      var i, iLen, n;
      var anRows = [];
      var iRowCount = 0;
      var asStripeClasses = oSettings.asStripeClasses;
      var iStripes = asStripeClasses.length;
      var iOpenRows = oSettings.aoOpenRows.length;
      var oLang = oSettings.oLanguage;
      var iInitDisplayStart = oSettings.iInitDisplayStart;
      var bServerSide = _fnDataSource(oSettings) == 'ssp';
      var aiDisplay = oSettings.aiDisplay;

      oSettings.bDrawing = true;

      /* Check and see if we have an initial draw position from state saving */
      if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
        oSettings._iDisplayStart = bServerSide ?
          iInitDisplayStart :
          iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
          0 :
          iInitDisplayStart;

        oSettings.iInitDisplayStart = -1;
      }

      var iDisplayStart = oSettings._iDisplayStart;
      var iDisplayEnd = oSettings.fnDisplayEnd();

      /* Server-side processing draw intercept */
      if (oSettings.bDeferLoading) {
        oSettings.bDeferLoading = false;
        oSettings.iDraw++;
        _fnProcessingDisplay(oSettings, false);
      } else if (!bServerSide) {
        oSettings.iDraw++;
      } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
        return;
      }

      if (aiDisplay.length !== 0) {
        var iStart = bServerSide ? 0 : iDisplayStart;
        var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

        for (var j = iStart; j < iEnd; j++) {
          var iDataIndex = aiDisplay[j];
          var aoData = oSettings.aoData[iDataIndex];
          if (aoData.nTr === null) {
            _fnCreateTr(oSettings, iDataIndex);
          }

          var nRow = aoData.nTr;

          /* Remove the old striping classes and then add the new one */
          if (iStripes !== 0) {
            var sStripe = asStripeClasses[iRowCount % iStripes];
            if (aoData._sRowStripe != sStripe) {
              $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
              aoData._sRowStripe = sStripe;
            }
          }

          // Row callback functions - might want to manipulate the row
          // iRowCount and j are not currently documented. Are they at all
          // useful?
          _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j]);

          anRows.push(nRow);
          iRowCount++;
        }
      } else {
        /* Table is empty - create a row with an empty message in it */
        var sZero = oLang.sZeroRecords;
        if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
          sZero = oLang.sLoadingRecords;
        } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
          sZero = oLang.sEmptyTable;
        }

        anRows[0] = $('<tr/>', {
            'class': iStripes ? asStripeClasses[0] : ''
          })
          .append($('<td />', {
            'valign': 'top',
            'colSpan': _fnVisbleColumns(oSettings),
            'class': oSettings.oClasses.sRowEmpty
          }).html(sZero))[0];
      }

      /* Header and footer callbacks */
      _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0],
        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay
      ]);

      _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0],
        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay
      ]);

      var body = $(oSettings.nTBody);

      body.children().detach();
      body.append($(anRows));

      /* Call all required callback functions for the end of a draw */
      _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);

      /* Draw is complete, sorting and filtering must be as well */
      oSettings.bSorted = false;
      oSettings.bFiltered = false;
      oSettings.bDrawing = false;
    }


    /**
     * Redraw the table - taking account of the various features which are enabled
     *  @param {object} oSettings dataTables settings object
     *  @param {boolean} [holdPosition] Keep the current paging position. By default
     *    the paging is reset to the first page
     *  @memberof DataTable#oApi
     */
    function _fnReDraw(settings, holdPosition) {
      var
        features = settings.oFeatures,
        sort = features.bSort,
        filter = features.bFilter;

      if (sort) {
        _fnSort(settings);
      }

      if (filter) {
        _fnFilterComplete(settings, settings.oPreviousSearch);
      } else {
        // No filtering, so we want to just use the display master
        settings.aiDisplay = settings.aiDisplayMaster.slice();
      }

      if (holdPosition !== true) {
        settings._iDisplayStart = 0;
      }

      // Let any modules know about the draw hold position state (used by
      // scrolling internally)
      settings._drawHold = holdPosition;

      _fnDraw(settings);

      settings._drawHold = false;
    }


    /**
     * Add the options to the page HTML for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnAddOptionsHtml(oSettings) {
      var classes = oSettings.oClasses;
      var table = $(oSettings.nTable);
      var holding = $('<div/>').insertBefore(table); // Holding element for speed
      var features = oSettings.oFeatures;

      // All DataTables are wrapped in a div
      var insert = $('<div/>', {
        id: oSettings.sTableId + '_wrapper',
        'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
      });

      oSettings.nHolding = holding[0];
      oSettings.nTableWrapper = insert[0];
      oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

      /* Loop over the user set positioning and place the elements as needed */
      var aDom = oSettings.sDom.split('');
      var featureNode, cOption, nNewNode, cNext, sAttr, j;
      for (var i = 0; i < aDom.length; i++) {
        featureNode = null;
        cOption = aDom[i];

        if (cOption == '<') {
          /* New container div */
          nNewNode = $('<div/>')[0];

          /* Check to see if we should append an id and/or a class name to the container */
          cNext = aDom[i + 1];
          if (cNext == "'" || cNext == '"') {
            sAttr = "";
            j = 2;
            while (aDom[i + j] != cNext) {
              sAttr += aDom[i + j];
              j++;
            }

            /* Replace jQuery UI constants @todo depreciated */
            if (sAttr == "H") {
              sAttr = classes.sJUIHeader;
            } else if (sAttr == "F") {
              sAttr = classes.sJUIFooter;
            }

            /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
             * breaks the string into parts and applies them as needed
             */
            if (sAttr.indexOf('.') != -1) {
              var aSplit = sAttr.split('.');
              nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
              nNewNode.className = aSplit[1];
            } else if (sAttr.charAt(0) == "#") {
              nNewNode.id = sAttr.substr(1, sAttr.length - 1);
            } else {
              nNewNode.className = sAttr;
            }

            i += j; /* Move along the position array */
          }

          insert.append(nNewNode);
          insert = $(nNewNode);
        } else if (cOption == '>') {
          /* End container div */
          insert = insert.parent();
        }
        // @todo Move options into their own plugins?
        else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
          /* Length */
          featureNode = _fnFeatureHtmlLength(oSettings);
        } else if (cOption == 'f' && features.bFilter) {
          /* Filter */
          featureNode = _fnFeatureHtmlFilter(oSettings);
        } else if (cOption == 'r' && features.bProcessing) {
          /* pRocessing */
          featureNode = _fnFeatureHtmlProcessing(oSettings);
        } else if (cOption == 't') {
          /* Table */
          featureNode = _fnFeatureHtmlTable(oSettings);
        } else if (cOption == 'i' && features.bInfo) {
          /* Info */
          featureNode = _fnFeatureHtmlInfo(oSettings);
        } else if (cOption == 'p' && features.bPaginate) {
          /* Pagination */
          featureNode = _fnFeatureHtmlPaginate(oSettings);
        } else if (DataTable.ext.feature.length !== 0) {
          /* Plug-in features */
          var aoFeatures = DataTable.ext.feature;
          for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
            if (cOption == aoFeatures[k].cFeature) {
              featureNode = aoFeatures[k].fnInit(oSettings);
              break;
            }
          }
        }

        /* Add to the 2D features array */
        if (featureNode) {
          var aanFeatures = oSettings.aanFeatures;

          if (!aanFeatures[cOption]) {
            aanFeatures[cOption] = [];
          }

          aanFeatures[cOption].push(featureNode);
          insert.append(featureNode);
        }
      }

      /* Built our DOM structure - replace the holding div with what we want */
      holding.replaceWith(insert);
      oSettings.nHolding = null;
    }


    /**
     * Use the DOM source to create up an array of header cells. The idea here is to
     * create a layout grid (array) of rows x columns, which contains a reference
     * to the cell that that point in the grid (regardless of col/rowspan), such that
     * any column / row could be removed and the new grid constructed
     *  @param array {object} aLayout Array to store the calculated layout in
     *  @param {node} nThead The header/footer element for the table
     *  @memberof DataTable#oApi
     */
    function _fnDetectHeader(aLayout, nThead) {
      var nTrs = $(nThead).children('tr');
      var nTr, nCell;
      var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
      var bUnique;
      var fnShiftCol = function(a, i, j) {
        var k = a[i];
        while (k[j]) {
          j++;
        }
        return j;
      };

      aLayout.splice(0, aLayout.length);

      /* We know how many rows there are in the layout - so prep it */
      for (i = 0, iLen = nTrs.length; i < iLen; i++) {
        aLayout.push([]);
      }

      /* Calculate a layout array */
      for (i = 0, iLen = nTrs.length; i < iLen; i++) {
        nTr = nTrs[i];
        iColumn = 0;

        /* For every cell in the row... */
        nCell = nTr.firstChild;
        while (nCell) {
          if (nCell.nodeName.toUpperCase() == "TD" ||
            nCell.nodeName.toUpperCase() == "TH") {
            /* Get the col and rowspan attributes from the DOM and sanitise them */
            iColspan = nCell.getAttribute('colspan') * 1;
            iRowspan = nCell.getAttribute('rowspan') * 1;
            iColspan = (!iColspan || iColspan === 0 || iColspan === 1) ? 1 : iColspan;
            iRowspan = (!iRowspan || iRowspan === 0 || iRowspan === 1) ? 1 : iRowspan;

            /* There might be colspan cells already in this row, so shift our target
             * accordingly
             */
            iColShifted = fnShiftCol(aLayout, i, iColumn);

            /* Cache calculation for unique columns */
            bUnique = iColspan === 1 ? true : false;

            /* If there is col / rowspan, copy the information into the layout grid */
            for (l = 0; l < iColspan; l++) {
              for (k = 0; k < iRowspan; k++) {
                aLayout[i + k][iColShifted + l] = {
                  "cell": nCell,
                  "unique": bUnique
                };
                aLayout[i + k].nTr = nTr;
              }
            }
          }
          nCell = nCell.nextSibling;
        }
      }
    }


    /**
     * Get an array of unique th elements, one for each column
     *  @param {object} oSettings dataTables settings object
     *  @param {node} nHeader automatically detect the layout from this node - optional
     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
     *  @returns array {node} aReturn list of unique th's
     *  @memberof DataTable#oApi
     */
    function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
      var aReturn = [];
      if (!aLayout) {
        aLayout = oSettings.aoHeader;
        if (nHeader) {
          aLayout = [];
          _fnDetectHeader(aLayout, nHeader);
        }
      }

      for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
        for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
          if (aLayout[i][j].unique &&
            (!aReturn[j] || !oSettings.bSortCellsTop)) {
            aReturn[j] = aLayout[i][j].cell;
          }
        }
      }

      return aReturn;
    }

    /**
     * Create an Ajax call based on the table's settings, taking into account that
     * parameters can have multiple forms, and backwards compatibility.
     *
     * @param {object} oSettings dataTables settings object
     * @param {array} data Data to send to the server, required by
     *     DataTables - may be augmented by developer callbacks
     * @param {function} fn Callback function to run when data is obtained
     */
    function _fnBuildAjax(oSettings, data, fn) {
      // Compatibility with 1.9-, allow fnServerData and event to manipulate
      _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);

      // Convert to object based for 1.10+ if using the old array scheme which can
      // come from server-side processing or serverParams
      if (data && $.isArray(data)) {
        var tmp = {};
        var rbracket = /(.*?)\[\]$/;

        $.each(data, function(key, val) {
          var match = val.name.match(rbracket);

          if (match) {
            // Support for arrays
            var name = match[0];

            if (!tmp[name]) {
              tmp[name] = [];
            }
            tmp[name].push(val.value);
          } else {
            tmp[val.name] = val.value;
          }
        });
        data = tmp;
      }

      var ajaxData;
      var ajax = oSettings.ajax;
      var instance = oSettings.oInstance;
      var callback = function(json) {
        _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);
        fn(json);
      };

      if ($.isPlainObject(ajax) && ajax.data) {
        ajaxData = ajax.data;

        var newData = $.isFunction(ajaxData) ?
          ajaxData(data, oSettings) : // fn can manipulate data or return
          ajaxData; // an object object or array to merge

        // If the function returned something, use that alone
        data = $.isFunction(ajaxData) && newData ?
          newData :
          $.extend(true, data, newData);

        // Remove the data property as we've resolved it already and don't want
        // jQuery to do it again (it is restored at the end of the function)
        delete ajax.data;
      }

      var baseAjax = {
        "data": data,
        "success": function(json) {
          var error = json.error || json.sError;
          if (error) {
            _fnLog(oSettings, 0, error);
          }

          oSettings.json = json;
          callback(json);
        },
        "dataType": "json",
        "cache": false,
        "type": oSettings.sServerMethod,
        "error": function(xhr, error, thrown) {
          var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

          if ($.inArray(true, ret) === -1) {
            if (error == "parsererror") {
              _fnLog(oSettings, 0, 'Invalid JSON response', 1);
            } else if (xhr.readyState === 4) {
              _fnLog(oSettings, 0, 'Ajax error', 7);
            }
          }

          _fnProcessingDisplay(oSettings, false);
        }
      };

      // Store the data submitted for the API
      oSettings.oAjaxData = data;

      // Allow plug-ins and external processes to modify the data
      _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

      if (oSettings.fnServerData) {
        // DataTables 1.9- compatibility
        oSettings.fnServerData.call(instance,
          oSettings.sAjaxSource,
          $.map(data, function(val, key) { // Need to convert back to 1.9 trad format
            return {
              name: key,
              value: val
            };
          }),
          callback,
          oSettings
        );
      } else if (oSettings.sAjaxSource || typeof ajax === 'string') {
        // DataTables 1.9- compatibility
        oSettings.jqXHR = $.ajax($.extend(baseAjax, {
          url: ajax || oSettings.sAjaxSource
        }));
      } else if ($.isFunction(ajax)) {
        // Is a function - let the caller define what needs to be done
        oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
      } else {
        // Object to extend the base settings
        oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

        // Restore for next time around
        ajax.data = ajaxData;
      }
    }


    /**
     * Update the table using an Ajax call
     *  @param {object} settings dataTables settings object
     *  @returns {boolean} Block the table drawing or not
     *  @memberof DataTable#oApi
     */
    function _fnAjaxUpdate(settings) {
      if (settings.bAjaxDataGet) {
        settings.iDraw++;
        _fnProcessingDisplay(settings, true);

        _fnBuildAjax(
          settings,
          _fnAjaxParameters(settings),
          function(json) {
            _fnAjaxUpdateDraw(settings, json);
          }
        );

        return false;
      }
      return true;
    }


    /**
     * Build up the parameters in an object needed for a server-side processing
     * request. Note that this is basically done twice, is different ways - a modern
     * method which is used by default in DataTables 1.10 which uses objects and
     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
     * the sAjaxSource option is used in the initialisation, or the legacyAjax
     * option is set.
     *  @param {object} oSettings dataTables settings object
     *  @returns {bool} block the table drawing or not
     *  @memberof DataTable#oApi
     */
    function _fnAjaxParameters(settings) {
      var
        columns = settings.aoColumns,
        columnCount = columns.length,
        features = settings.oFeatures,
        preSearch = settings.oPreviousSearch,
        preColSearch = settings.aoPreSearchCols,
        i, data = [],
        dataProp, column, columnSearch,
        sort = _fnSortFlatten(settings),
        displayStart = settings._iDisplayStart,
        displayLength = features.bPaginate !== false ?
        settings._iDisplayLength :
        -1;

      var param = function(name, value) {
        data.push({
          'name': name,
          'value': value
        });
      };

      // DataTables 1.9- compatible method
      param('sEcho', settings.iDraw);
      param('iColumns', columnCount);
      param('sColumns', _pluck(columns, 'sName').join(','));
      param('iDisplayStart', displayStart);
      param('iDisplayLength', displayLength);

      // DataTables 1.10+ method
      var d = {
        draw: settings.iDraw,
        columns: [],
        order: [],
        start: displayStart,
        length: displayLength,
        search: {
          value: preSearch.sSearch,
          regex: preSearch.bRegex
        }
      };

      for (i = 0; i < columnCount; i++) {
        column = columns[i];
        columnSearch = preColSearch[i];
        dataProp = typeof column.mData == "function" ? 'function' : column.mData;

        d.columns.push({
          data: dataProp,
          name: column.sName,
          searchable: column.bSearchable,
          orderable: column.bSortable,
          search: {
            value: columnSearch.sSearch,
            regex: columnSearch.bRegex
          }
        });

        param("mDataProp_" + i, dataProp);

        if (features.bFilter) {
          param('sSearch_' + i, columnSearch.sSearch);
          param('bRegex_' + i, columnSearch.bRegex);
          param('bSearchable_' + i, column.bSearchable);
        }

        if (features.bSort) {
          param('bSortable_' + i, column.bSortable);
        }
      }

      if (features.bFilter) {
        param('sSearch', preSearch.sSearch);
        param('bRegex', preSearch.bRegex);
      }

      if (features.bSort) {
        $.each(sort, function(i, val) {
          d.order.push({
            column: val.col,
            dir: val.dir
          });

          param('iSortCol_' + i, val.col);
          param('sSortDir_' + i, val.dir);
        });

        param('iSortingCols', sort.length);
      }

      // If the legacy.ajax parameter is null, then we automatically decide which
      // form to use, based on sAjaxSource
      var legacy = DataTable.ext.legacy.ajax;
      if (legacy === null) {
        return settings.sAjaxSource ? data : d;
      }

      // Otherwise, if legacy has been specified then we use that to decide on the
      // form
      return legacy ? data : d;
    }


    /**
     * Data the data from the server (nuking the old) and redraw the table
     *  @param {object} oSettings dataTables settings object
     *  @param {object} json json data return from the server.
     *  @param {string} json.sEcho Tracking flag for DataTables to match requests
     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
     *  @param {array} json.aaData The data to display on this page
     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
     *  @memberof DataTable#oApi
     */
    function _fnAjaxUpdateDraw(settings, json) {
      // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
      // Support both
      var compat = function(old, modern) {
        return json[old] !== undefined ? json[old] : json[modern];
      };

      var data = _fnAjaxDataSrc(settings, json);
      var draw = compat('sEcho', 'draw');
      var recordsTotal = compat('iTotalRecords', 'recordsTotal');
      var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

      if (draw) {
        // Protect against out of sequence returns
        if (draw * 1 < settings.iDraw) {
          return;
        }
        settings.iDraw = draw * 1;
      }

      _fnClearTable(settings);
      settings._iRecordsTotal = parseInt(recordsTotal, 10);
      settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

      for (var i = 0, ien = data.length; i < ien; i++) {
        _fnAddData(settings, data[i]);
      }
      settings.aiDisplay = settings.aiDisplayMaster.slice();

      settings.bAjaxDataGet = false;
      _fnDraw(settings);

      if (!settings._bInitComplete) {
        _fnInitComplete(settings, json);
      }

      settings.bAjaxDataGet = true;
      _fnProcessingDisplay(settings, false);
    }


    /**
     * Get the data from the JSON data source to use for drawing a table. Using
     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
     * source object, or from a processing function.
     *  @param {object} oSettings dataTables settings object
     *  @param  {object} json Data source object / array from the server
     *  @return {array} Array of data to use
     */
    function _fnAjaxDataSrc(oSettings, json) {
      var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ?
        oSettings.ajax.dataSrc :
        oSettings.sAjaxDataProp; // Compatibility with 1.9-.

      // Compatibility with 1.9-. In order to read from aaData, check if the
      // default has been changed, if not, check for aaData
      if (dataSrc === 'data') {
        return json.aaData || json[dataSrc];
      }

      return dataSrc !== "" ?
        _fnGetObjectDataFn(dataSrc)(json) :
        json;
    }

    /**
     * Generate the node required for filtering text
     *  @returns {node} Filter control element
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlFilter(settings) {
      var classes = settings.oClasses;
      var tableId = settings.sTableId;
      var language = settings.oLanguage;
      var previousSearch = settings.oPreviousSearch;
      var features = settings.aanFeatures;
      var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

      var str = language.sSearch;
      str = str.match(/_INPUT_/) ?
        str.replace('_INPUT_', input) :
        str + input;

      var filter = $('<div/>', {
          'id': !features.f ? tableId + '_filter' : null,
          'class': classes.sFilter
        })
        .append($('<label/>').append(str));

      var searchFn = function() {
        /* Update all other filter input elements for the new display */
        var n = features.f;
        var val = !this.value ? "" : this.value; // mental IE8 fix :-(

        /* Now do the filter */
        if (val != previousSearch.sSearch) {
          _fnFilterComplete(settings, {
            "sSearch": val,
            "bRegex": previousSearch.bRegex,
            "bSmart": previousSearch.bSmart,
            "bCaseInsensitive": previousSearch.bCaseInsensitive
          });

          // Need to redraw, without resorting
          settings._iDisplayStart = 0;
          _fnDraw(settings);
        }
      };

      var searchDelay = settings.searchDelay !== null ?
        settings.searchDelay :
        _fnDataSource(settings) === 'ssp' ?
        400 :
        0;

      var jqFilter = $('input', filter)
        .val(previousSearch.sSearch)
        .attr('placeholder', language.sSearchPlaceholder)
        .bind(
          'keyup.DT search.DT input.DT paste.DT cut.DT',
          searchDelay ?
          _fnThrottle(searchFn, searchDelay) :
          searchFn
        )
        .bind('keypress.DT', function(e) {
          /* Prevent form submission */
          if (e.keyCode == 13) {
            return false;
          }
        })
        .attr('aria-controls', tableId);

      // Update the input elements whenever the table is filtered
      $(settings.nTable).on('search.dt.DT', function(ev, s) {
        if (settings === s) {
          // IE9 throws an 'unknown error' if document.activeElement is used
          // inside an iframe or frame...
          try {
            if (jqFilter[0] !== document.activeElement) {
              jqFilter.val(previousSearch.sSearch);
            }
          } catch (e) {}
        }
      });

      return filter[0];
    }


    /**
     * Filter the table using both the global filter and column based filtering
     *  @param {object} oSettings dataTables settings object
     *  @param {object} oSearch search information
     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
     *  @memberof DataTable#oApi
     */
    function _fnFilterComplete(oSettings, oInput, iForce) {
      var oPrevSearch = oSettings.oPreviousSearch;
      var aoPrevSearch = oSettings.aoPreSearchCols;
      var fnSaveFilter = function(oFilter) {
        /* Save the filtering values */
        oPrevSearch.sSearch = oFilter.sSearch;
        oPrevSearch.bRegex = oFilter.bRegex;
        oPrevSearch.bSmart = oFilter.bSmart;
        oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
      };
      var fnRegex = function(o) {
        // Backwards compatibility with the bEscapeRegex option
        return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
      };

      // Resolve any column types that are unknown due to addition or invalidation
      // @todo As per sort - can this be moved into an event handler?
      _fnColumnTypes(oSettings);

      /* In server-side processing all filtering is done by the server, so no point hanging around here */
      if (_fnDataSource(oSettings) != 'ssp') {
        /* Global filter */
        _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
        fnSaveFilter(oInput);

        /* Now do the individual column filter */
        for (var i = 0; i < aoPrevSearch.length; i++) {
          _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
            aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
        }

        /* Custom filtering */
        _fnFilterCustom(oSettings);
      } else {
        fnSaveFilter(oInput);
      }

      /* Tell the draw function we have been filtering */
      oSettings.bFiltered = true;
      _fnCallbackFire(oSettings, null, 'search', [oSettings]);
    }


    /**
     * Apply custom filtering functions
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnFilterCustom(settings) {
      var filters = DataTable.ext.search;
      var displayRows = settings.aiDisplay;
      var row, rowIdx;

      for (var i = 0, ien = filters.length; i < ien; i++) {
        var rows = [];

        // Loop over each row and see if it should be included
        for (var j = 0, jen = displayRows.length; j < jen; j++) {
          rowIdx = displayRows[j];
          row = settings.aoData[rowIdx];

          if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
            rows.push(rowIdx);
          }
        }

        // So the array reference doesn't break set the results into the
        // existing array
        displayRows.length = 0;
        $.merge(displayRows, rows);
      }
    }


    /**
     * Filter the table on a per-column basis
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sInput string to filter on
     *  @param {int} iColumn column to filter
     *  @param {bool} bRegex treat search string as a regular expression or not
     *  @param {bool} bSmart use smart filtering or not
     *  @param {bool} bCaseInsensitive Do case insenstive matching or not
     *  @memberof DataTable#oApi
     */
    function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
      if (searchStr === '') {
        return;
      }

      var data;
      var display = settings.aiDisplay;
      var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

      for (var i = display.length - 1; i >= 0; i--) {
        data = settings.aoData[display[i]]._aFilterData[colIdx];

        if (!rpSearch.test(data)) {
          display.splice(i, 1);
        }
      }
    }


    /**
     * Filter the data table based on user input and draw the table
     *  @param {object} settings dataTables settings object
     *  @param {string} input string to filter on
     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
     *  @param {bool} regex treat as a regular expression or not
     *  @param {bool} smart perform smart filtering or not
     *  @param {bool} caseInsensitive Do case insenstive matching or not
     *  @memberof DataTable#oApi
     */
    function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
      var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
      var prevSearch = settings.oPreviousSearch.sSearch;
      var displayMaster = settings.aiDisplayMaster;
      var display, invalidated, i;

      // Need to take account of custom filtering functions - always filter
      if (DataTable.ext.search.length !== 0) {
        force = true;
      }

      // Check if any of the rows were invalidated
      invalidated = _fnFilterData(settings);

      // If the input is blank - we just want the full data set
      if (input.length <= 0) {
        settings.aiDisplay = displayMaster.slice();
      } else {
        // New search - start from the master array
        if (invalidated ||
          force ||
          prevSearch.length > input.length ||
          input.indexOf(prevSearch) !== 0 ||
          settings.bSorted // On resort, the display master needs to be
          // re-filtered since indexes will have changed
        ) {
          settings.aiDisplay = displayMaster.slice();
        }

        // Search the display array
        display = settings.aiDisplay;

        for (i = display.length - 1; i >= 0; i--) {
          if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
            display.splice(i, 1);
          }
        }
      }
    }


    /**
     * Build a regular expression object suitable for searching a table
     *  @param {string} sSearch string to search for
     *  @param {bool} bRegex treat as a regular expression or not
     *  @param {bool} bSmart perform smart filtering or not
     *  @param {bool} bCaseInsensitive Do case insensitive matching or not
     *  @returns {RegExp} constructed object
     *  @memberof DataTable#oApi
     */
    function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
      search = regex ?
        search :
        _fnEscapeRegex(search);

      if (smart) {
        /* For smart filtering we want to allow the search to work regardless of
         * word order. We also want double quoted text to be preserved, so word
         * order is important - a la google. So this is what we want to
         * generate:
         * 
         * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
         */
        var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function(word) {
          if (word.charAt(0) === '"') {
            var m = word.match(/^"(.*)"$/);
            word = m ? m[1] : word;
          }

          return word.replace('"', '');
        });

        search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
      }

      return new RegExp(search, caseInsensitive ? 'i' : '');
    }


    /**
     * Escape a string such that it can be used in a regular expression
     *  @param {string} sVal string to escape
     *  @returns {string} escaped string
     *  @memberof DataTable#oApi
     */
    function _fnEscapeRegex(sVal) {
      return sVal.replace(_re_escape_regex, '\\$1');
    }



    var __filter_div = $('<div>')[0];
    var __filter_div_textContent = __filter_div.textContent !== undefined;

    // Update the filtering data for each row if needed (by invalidation or first run)
    function _fnFilterData(settings) {
      var columns = settings.aoColumns;
      var column;
      var i, j, ien, jen, filterData, cellData, row;
      var fomatters = DataTable.ext.type.search;
      var wasInvalidated = false;

      for (i = 0, ien = settings.aoData.length; i < ien; i++) {
        row = settings.aoData[i];

        if (!row._aFilterData) {
          filterData = [];

          for (j = 0, jen = columns.length; j < jen; j++) {
            column = columns[j];

            if (column.bSearchable) {
              cellData = _fnGetCellData(settings, i, j, 'filter');

              if (fomatters[column.sType]) {
                cellData = fomatters[column.sType](cellData);
              }

              // Search in DataTables 1.10 is string based. In 1.11 this
              // should be altered to also allow strict type checking.
              if (cellData === null) {
                cellData = '';
              }

              if (typeof cellData !== 'string' && cellData.toString) {
                cellData = cellData.toString();
              }
            } else {
              cellData = '';
            }

            // If it looks like there is an HTML entity in the string,
            // attempt to decode it so sorting works as expected. Note that
            // we could use a single line of jQuery to do this, but the DOM
            // method used here is much faster http://jsperf.com/html-decode
            if (cellData.indexOf && cellData.indexOf('&') !== -1) {
              __filter_div.innerHTML = cellData;
              cellData = __filter_div_textContent ?
                __filter_div.textContent :
                __filter_div.innerText;
            }

            if (cellData.replace) {
              cellData = cellData.replace(/[\r\n]/g, '');
            }

            filterData.push(cellData);
          }

          row._aFilterData = filterData;
          row._sFilterRow = filterData.join('  ');
          wasInvalidated = true;
        }
      }

      return wasInvalidated;
    }


    /**
     * Convert from the internal Hungarian notation to camelCase for external
     * interaction
     *  @param {object} obj Object to convert
     *  @returns {object} Inverted object
     *  @memberof DataTable#oApi
     */
    function _fnSearchToCamel(obj) {
      return {
        search: obj.sSearch,
        smart: obj.bSmart,
        regex: obj.bRegex,
        caseInsensitive: obj.bCaseInsensitive
      };
    }



    /**
     * Convert from camelCase notation to the internal Hungarian. We could use the
     * Hungarian convert function here, but this is cleaner
     *  @param {object} obj Object to convert
     *  @returns {object} Inverted object
     *  @memberof DataTable#oApi
     */
    function _fnSearchToHung(obj) {
      return {
        sSearch: obj.search,
        bSmart: obj.smart,
        bRegex: obj.regex,
        bCaseInsensitive: obj.caseInsensitive
      };
    }

    /**
     * Generate the node required for the info display
     *  @param {object} oSettings dataTables settings object
     *  @returns {node} Information element
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlInfo(settings) {
      var
        tid = settings.sTableId,
        nodes = settings.aanFeatures.i,
        n = $('<div/>', {
          'class': settings.oClasses.sInfo,
          'id': !nodes ? tid + '_info' : null
        });

      if (!nodes) {
        // Update display on each draw
        settings.aoDrawCallback.push({
          "fn": _fnUpdateInfo,
          "sName": "information"
        });

        n
          .attr('role', 'status')
          .attr('aria-live', 'polite');

        // Table is described by our info div
        $(settings.nTable).attr('aria-describedby', tid + '_info');
      }

      return n[0];
    }


    /**
     * Update the information elements in the display
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnUpdateInfo(settings) {
      /* Show information about the table */
      var nodes = settings.aanFeatures.i;
      if (nodes.length === 0) {
        return;
      }

      var
        lang = settings.oLanguage,
        start = settings._iDisplayStart + 1,
        end = settings.fnDisplayEnd(),
        max = settings.fnRecordsTotal(),
        total = settings.fnRecordsDisplay(),
        out = total ?
        lang.sInfo :
        lang.sInfoEmpty;

      if (total !== max) {
        /* Record set after filtering */
        out += ' ' + lang.sInfoFiltered;
      }

      // Convert the macros
      out += lang.sInfoPostFix;
      out = _fnInfoMacros(settings, out);

      var callback = lang.fnInfoCallback;
      if (callback !== null) {
        out = callback.call(settings.oInstance,
          settings, start, end, max, total, out
        );
      }

      $(nodes).html(out);
    }


    function _fnInfoMacros(settings, str) {
      // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
      // internally
      var
        formatter = settings.fnFormatNumber,
        start = settings._iDisplayStart + 1,
        len = settings._iDisplayLength,
        vis = settings.fnRecordsDisplay(),
        all = len === -1;

      return str.
      replace(/_START_/g, formatter.call(settings, start)).
      replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).
      replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).
      replace(/_TOTAL_/g, formatter.call(settings, vis)).
      replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).
      replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
    }



    /**
     * Draw the table for the first time, adding all required features
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnInitialise(settings) {
      var i, iLen, iAjaxStart = settings.iInitDisplayStart;
      var columns = settings.aoColumns,
        column;
      var features = settings.oFeatures;
      var deferLoading = settings.bDeferLoading; // value modified by the draw

      /* Ensure that the table data is fully initialised */
      if (!settings.bInitialised) {
        setTimeout(function() {
          _fnInitialise(settings);
        }, 200);
        return;
      }

      /* Show the display HTML options */
      _fnAddOptionsHtml(settings);

      /* Build and draw the header / footer for the table */
      _fnBuildHead(settings);
      _fnDrawHead(settings, settings.aoHeader);
      _fnDrawHead(settings, settings.aoFooter);

      /* Okay to show that something is going on now */
      _fnProcessingDisplay(settings, true);

      /* Calculate sizes for columns */
      if (features.bAutoWidth) {
        _fnCalculateColumnWidths(settings);
      }

      for (i = 0, iLen = columns.length; i < iLen; i++) {
        column = columns[i];

        if (column.sWidth) {
          column.nTh.style.width = _fnStringToCss(column.sWidth);
        }
      }

      _fnCallbackFire(settings, null, 'preInit', [settings]);

      // If there is default sorting required - let's do it. The sort function
      // will do the drawing for us. Otherwise we draw the table regardless of the
      // Ajax source - this allows the table to look initialised for Ajax sourcing
      // data (show 'loading' message possibly)
      _fnReDraw(settings);

      // Server-side processing init complete is done by _fnAjaxUpdateDraw
      var dataSrc = _fnDataSource(settings);
      if (dataSrc != 'ssp' || deferLoading) {
        // if there is an ajax source load the data
        if (dataSrc == 'ajax') {
          _fnBuildAjax(settings, [], function(json) {
            var aData = _fnAjaxDataSrc(settings, json);

            // Got the data - add it to the table
            for (i = 0; i < aData.length; i++) {
              _fnAddData(settings, aData[i]);
            }

            // Reset the init display for cookie saving. We've already done
            // a filter, and therefore cleared it before. So we need to make
            // it appear 'fresh'
            settings.iInitDisplayStart = iAjaxStart;

            _fnReDraw(settings);

            _fnProcessingDisplay(settings, false);
            _fnInitComplete(settings, json);
          }, settings);
        } else {
          _fnProcessingDisplay(settings, false);
          _fnInitComplete(settings);
        }
      }
    }


    /**
     * Draw the table for the first time, adding all required features
     *  @param {object} oSettings dataTables settings object
     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
     *    with client-side processing (optional)
     *  @memberof DataTable#oApi
     */
    function _fnInitComplete(settings, json) {
      settings._bInitComplete = true;

      // When data was added after the initialisation (data or Ajax) we need to
      // calculate the column sizing
      if (json || settings.oInit.aaData) {
        _fnAdjustColumnSizing(settings);
      }

      _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);
      _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
    }


    function _fnLengthChange(settings, val) {
      var len = parseInt(val, 10);
      settings._iDisplayLength = len;

      _fnLengthOverflow(settings);

      // Fire length change event
      _fnCallbackFire(settings, null, 'length', [settings, len]);
    }


    /**
     * Generate the node required for user display length changing
     *  @param {object} settings dataTables settings object
     *  @returns {node} Display length feature node
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlLength(settings) {
      var
        classes = settings.oClasses,
        tableId = settings.sTableId,
        menu = settings.aLengthMenu,
        d2 = $.isArray(menu[0]),
        lengths = d2 ? menu[0] : menu,
        language = d2 ? menu[1] : menu;

      var select = $('<select/>', {
        'name': tableId + '_length',
        'aria-controls': tableId,
        'class': classes.sLengthSelect
      });

      for (var i = 0, ien = lengths.length; i < ien; i++) {
        select[0][i] = new Option(language[i], lengths[i]);
      }

      var div = $('<div><label/></div>').addClass(classes.sLength);
      if (!settings.aanFeatures.l) {
        div[0].id = tableId + '_length';
      }

      div.children().append(
        settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)
      );

      // Can't use `select` variable as user might provide their own and the
      // reference is broken by the use of outerHTML
      $('select', div)
        .val(settings._iDisplayLength)
        .bind('change.DT', function(e) {
          _fnLengthChange(settings, $(this).val());
          _fnDraw(settings);
        });

      // Update node value whenever anything changes the table's length
      $(settings.nTable).bind('length.dt.DT', function(e, s, len) {
        if (settings === s) {
          $('select', div).val(len);
        }
      });

      return div[0];
    }



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Note that most of the paging logic is done in
     * DataTable.ext.pager
     */

    /**
     * Generate the node required for default pagination
     *  @param {object} oSettings dataTables settings object
     *  @returns {node} Pagination feature node
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlPaginate(settings) {
      var
        type = settings.sPaginationType,
        plugin = DataTable.ext.pager[type],
        modern = typeof plugin === 'function',
        redraw = function(settings) {
          _fnDraw(settings);
        },
        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
        features = settings.aanFeatures;

      if (!modern) {
        plugin.fnInit(settings, node, redraw);
      }

      /* Add a draw callback for the pagination on first instance, to update the paging display */
      if (!features.p) {
        node.id = settings.sTableId + '_paginate';

        settings.aoDrawCallback.push({
          "fn": function(settings) {
            if (modern) {
              var
                start = settings._iDisplayStart,
                len = settings._iDisplayLength,
                visRecords = settings.fnRecordsDisplay(),
                all = len === -1,
                page = all ? 0 : Math.ceil(start / len),
                pages = all ? 1 : Math.ceil(visRecords / len),
                buttons = plugin(page, pages),
                i, ien;

              for (i = 0, ien = features.p.length; i < ien; i++) {
                _fnRenderer(settings, 'pageButton')(
                  settings, features.p[i], i, buttons, page, pages
                );
              }
            } else {
              plugin.fnUpdate(settings, redraw);
            }
          },
          "sName": "pagination"
        });
      }

      return node;
    }


    /**
     * Alter the display settings to change the page
     *  @param {object} settings DataTables settings object
     *  @param {string|int} action Paging action to take: "first", "previous",
     *    "next" or "last" or page number to jump to (integer)
     *  @param [bool] redraw Automatically draw the update or not
     *  @returns {bool} true page has changed, false - no change
     *  @memberof DataTable#oApi
     */
    function _fnPageChange(settings, action, redraw) {
      var
        start = settings._iDisplayStart,
        len = settings._iDisplayLength,
        records = settings.fnRecordsDisplay();

      if (records === 0 || len === -1) {
        start = 0;
      } else if (typeof action === "number") {
        start = action * len;

        if (start > records) {
          start = 0;
        }
      } else if (action == "first") {
        start = 0;
      } else if (action == "previous") {
        start = len >= 0 ?
          start - len :
          0;

        if (start < 0) {
          start = 0;
        }
      } else if (action == "next") {
        if (start + len < records) {
          start += len;
        }
      } else if (action == "last") {
        start = Math.floor((records - 1) / len) * len;
      } else {
        _fnLog(settings, 0, "Unknown paging action: " + action, 5);
      }

      var changed = settings._iDisplayStart !== start;
      settings._iDisplayStart = start;

      if (changed) {
        _fnCallbackFire(settings, null, 'page', [settings]);

        if (redraw) {
          _fnDraw(settings);
        }
      }

      return changed;
    }



    /**
     * Generate the node required for the processing node
     *  @param {object} settings dataTables settings object
     *  @returns {node} Processing element
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlProcessing(settings) {
      return $('<div/>', {
          'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
          'class': settings.oClasses.sProcessing
        })
        .html(settings.oLanguage.sProcessing)
        .insertBefore(settings.nTable)[0];
    }


    /**
     * Display or hide the processing indicator
     *  @param {object} settings dataTables settings object
     *  @param {bool} show Show the processing indicator (true) or not (false)
     *  @memberof DataTable#oApi
     */
    function _fnProcessingDisplay(settings, show) {
      if (settings.oFeatures.bProcessing) {
        $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
      }

      _fnCallbackFire(settings, null, 'processing', [settings, show]);
    }

    /**
     * Add any control elements for the table - specifically scrolling
     *  @param {object} settings dataTables settings object
     *  @returns {node} Node to add to the DOM
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlTable(settings) {
      var table = $(settings.nTable);

      // Add the ARIA grid role to the table
      table.attr('role', 'grid');

      // Scrolling from here on in
      var scroll = settings.oScroll;

      if (scroll.sX === '' && scroll.sY === '') {
        return settings.nTable;
      }

      var scrollX = scroll.sX;
      var scrollY = scroll.sY;
      var classes = settings.oClasses;
      var caption = table.children('caption');
      var captionSide = caption.length ? caption[0]._captionSide : null;
      var headerClone = $(table[0].cloneNode(false));
      var footerClone = $(table[0].cloneNode(false));
      var footer = table.children('tfoot');
      var _div = '<div/>';
      var size = function(s) {
        return !s ? null : _fnStringToCss(s);
      };

      if (!footer.length) {
        footer = null;
      }

      /*
       * The HTML structure that we want to generate in this function is:
       *  div - scroller
       *    div - scroll head
       *      div - scroll head inner
       *        table - scroll head table
       *          thead - thead
       *    div - scroll body
       *      table - table (master table)
       *        thead - thead clone for sizing
       *        tbody - tbody
       *    div - scroll foot
       *      div - scroll foot inner
       *        table - scroll foot table
       *          tfoot - tfoot
       */
      var scroller = $(_div, {
          'class': classes.sScrollWrapper
        })
        .append(
          $(_div, {
            'class': classes.sScrollHead
          })
          .css({
            overflow: 'hidden',
            position: 'relative',
            border: 0,
            width: scrollX ? size(scrollX) : '100%'
          })
          .append(
            $(_div, {
              'class': classes.sScrollHeadInner
            })
            .css({
              'box-sizing': 'content-box',
              width: scroll.sXInner || '100%'
            })
            .append(
              headerClone
              .removeAttr('id')
              .css('margin-left', 0)
              .append(captionSide === 'top' ? caption : null)
              .append(
                table.children('thead')
              )
            )
          )
        )
        .append(
          $(_div, {
            'class': classes.sScrollBody
          })
          .css({
            position: 'relative',
            overflow: 'auto',
            width: size(scrollX)
          })
          .append(table)
        );

      if (footer) {
        scroller.append(
          $(_div, {
            'class': classes.sScrollFoot
          })
          .css({
            overflow: 'hidden',
            border: 0,
            width: scrollX ? size(scrollX) : '100%'
          })
          .append(
            $(_div, {
              'class': classes.sScrollFootInner
            })
            .append(
              footerClone
              .removeAttr('id')
              .css('margin-left', 0)
              .append(captionSide === 'bottom' ? caption : null)
              .append(
                table.children('tfoot')
              )
            )
          )
        );
      }

      var children = scroller.children();
      var scrollHead = children[0];
      var scrollBody = children[1];
      var scrollFoot = footer ? children[2] : null;

      // When the body is scrolled, then we also want to scroll the headers
      if (scrollX) {
        $(scrollBody).on('scroll.DT', function(e) {
          var scrollLeft = this.scrollLeft;

          scrollHead.scrollLeft = scrollLeft;

          if (footer) {
            scrollFoot.scrollLeft = scrollLeft;
          }
        });
      }

      $(scrollBody).css(
        scrollY && scroll.bCollapse ? 'max-height' : 'height',
        scrollY
      );

      settings.nScrollHead = scrollHead;
      settings.nScrollBody = scrollBody;
      settings.nScrollFoot = scrollFoot;

      // On redraw - align columns
      settings.aoDrawCallback.push({
        "fn": _fnScrollDraw,
        "sName": "scrolling"
      });

      return scroller[0];
    }



    /**
     * Update the header, footer and body tables for resizing - i.e. column
     * alignment.
     *
     * Welcome to the most horrible function DataTables. The process that this
     * function follows is basically:
     *   1. Re-create the table inside the scrolling div
     *   2. Take live measurements from the DOM
     *   3. Apply the measurements to align the columns
     *   4. Clean up
     *
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnScrollDraw(settings) {
      // Given that this is such a monster function, a lot of variables are use
      // to try and keep the minimised size as small as possible
      var
        scroll = settings.oScroll,
        scrollX = scroll.sX,
        scrollXInner = scroll.sXInner,
        scrollY = scroll.sY,
        barWidth = scroll.iBarWidth,
        divHeader = $(settings.nScrollHead),
        divHeaderStyle = divHeader[0].style,
        divHeaderInner = divHeader.children('div'),
        divHeaderInnerStyle = divHeaderInner[0].style,
        divHeaderTable = divHeaderInner.children('table'),
        divBodyEl = settings.nScrollBody,
        divBody = $(divBodyEl),
        divBodyStyle = divBodyEl.style,
        divFooter = $(settings.nScrollFoot),
        divFooterInner = divFooter.children('div'),
        divFooterTable = divFooterInner.children('table'),
        header = $(settings.nTHead),
        table = $(settings.nTable),
        tableEl = table[0],
        tableStyle = tableEl.style,
        footer = settings.nTFoot ? $(settings.nTFoot) : null,
        browser = settings.oBrowser,
        ie67 = browser.bScrollOversize,
        headerTrgEls, footerTrgEls,
        headerSrcEls, footerSrcEls,
        headerCopy, footerCopy,
        headerWidths = [],
        footerWidths = [],
        headerContent = [],
        idx, correction, sanityWidth,
        zeroOut = function(nSizer) {
          var style = nSizer.style;
          style.paddingTop = "0";
          style.paddingBottom = "0";
          style.borderTopWidth = "0";
          style.borderBottomWidth = "0";
          style.height = 0;
        };

      // If the scrollbar visibility has changed from the last draw, we need to
      // adjust the column sizes as the table width will have changed to account
      // for the scrollbar
      var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

      if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
        settings.scrollBarVis = scrollBarVis;
        _fnAdjustColumnSizing(settings);
        return; // adjust column sizing will call this function again
      } else {
        settings.scrollBarVis = scrollBarVis;
      }

      /*
       * 1. Re-create the table inside the scrolling div
       */

      // Remove the old minimised thead and tfoot elements in the inner table
      table.children('thead, tfoot').remove();

      // Clone the current header and footer elements and then place it into the inner table
      headerCopy = header.clone().prependTo(table);
      headerTrgEls = header.find('tr'); // original header is in its own table
      headerSrcEls = headerCopy.find('tr');
      headerCopy.find('th, td').removeAttr('tabindex');

      if (footer) {
        footerCopy = footer.clone().prependTo(table);
        footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
        footerSrcEls = footerCopy.find('tr');
      }


      /*
       * 2. Take live measurements from the DOM - do not alter the DOM itself!
       */

      // Remove old sizing and apply the calculated column widths
      // Get the unique column headers in the newly created (cloned) header. We want to apply the
      // calculated sizes to this header
      if (!scrollX) {
        divBodyStyle.width = '100%';
        divHeader[0].style.width = '100%';
      }

      $.each(_fnGetUniqueThs(settings, headerCopy), function(i, el) {
        idx = _fnVisibleToColumnIndex(settings, i);
        el.style.width = settings.aoColumns[idx].sWidth;
      });

      if (footer) {
        _fnApplyToChildren(function(n) {
          n.style.width = "";
        }, footerSrcEls);
      }

      // Size the table as a whole
      sanityWidth = table.outerWidth();
      if (scrollX === "") {
        // No x scrolling
        tableStyle.width = "100%";

        // IE7 will make the width of the table when 100% include the scrollbar
        // - which is shouldn't. When there is a scrollbar we need to take this
        // into account.
        if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
            divBody.css('overflow-y') == "scroll")) {
          tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
        }

        // Recalculate the sanity width
        sanityWidth = table.outerWidth();
      } else if (scrollXInner !== "") {
        // legacy x scroll inner has been given - use it
        tableStyle.width = _fnStringToCss(scrollXInner);

        // Recalculate the sanity width
        sanityWidth = table.outerWidth();
      }

      // Hidden header should have zero height, so remove padding and borders. Then
      // set the width based on the real headers

      // Apply all styles in one pass
      _fnApplyToChildren(zeroOut, headerSrcEls);

      // Read all widths in next pass
      _fnApplyToChildren(function(nSizer) {
        headerContent.push(nSizer.innerHTML);
        headerWidths.push(_fnStringToCss($(nSizer).css('width')));
      }, headerSrcEls);

      // Apply all widths in final pass
      _fnApplyToChildren(function(nToSize, i) {
        nToSize.style.width = headerWidths[i];
      }, headerTrgEls);

      $(headerSrcEls).height(0);

      /* Same again with the footer if we have one */
      if (footer) {
        _fnApplyToChildren(zeroOut, footerSrcEls);

        _fnApplyToChildren(function(nSizer) {
          footerWidths.push(_fnStringToCss($(nSizer).css('width')));
        }, footerSrcEls);

        _fnApplyToChildren(function(nToSize, i) {
          nToSize.style.width = footerWidths[i];
        }, footerTrgEls);

        $(footerSrcEls).height(0);
      }


      /*
       * 3. Apply the measurements
       */

      // "Hide" the header and footer that we used for the sizing. We need to keep
      // the content of the cell so that the width applied to the header and body
      // both match, but we want to hide it completely. We want to also fix their
      // width to what they currently are
      _fnApplyToChildren(function(nSizer, i) {
        nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
        nSizer.style.width = headerWidths[i];
      }, headerSrcEls);

      if (footer) {
        _fnApplyToChildren(function(nSizer, i) {
          nSizer.innerHTML = "";
          nSizer.style.width = footerWidths[i];
        }, footerSrcEls);
      }

      // Sanity check that the table is of a sensible width. If not then we are going to get
      // misalignment - try to prevent this by not allowing the table to shrink below its min width
      if (table.outerWidth() < sanityWidth) {
        // The min width depends upon if we have a vertical scrollbar visible or not */
        correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
            divBody.css('overflow-y') == "scroll")) ?
          sanityWidth + barWidth :
          sanityWidth;

        // IE6/7 are a law unto themselves...
        if (ie67 && (divBodyEl.scrollHeight >
            divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
          tableStyle.width = _fnStringToCss(correction - barWidth);
        }

        // And give the user a warning that we've stopped the table getting too small
        if (scrollX === "" || scrollXInner !== "") {
          _fnLog(settings, 1, 'Possible column misalignment', 6);
        }
      } else {
        correction = '100%';
      }

      // Apply to the container elements
      divBodyStyle.width = _fnStringToCss(correction);
      divHeaderStyle.width = _fnStringToCss(correction);

      if (footer) {
        settings.nScrollFoot.style.width = _fnStringToCss(correction);
      }


      /*
       * 4. Clean up
       */
      if (!scrollY) {
        /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
         * the scrollbar height from the visible display, rather than adding it on. We need to
         * set the height in order to sort this. Don't want to do it in any other browsers.
         */
        if (ie67) {
          divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
        }
      }

      /* Finally set the width's of the header and footer tables */
      var iOuterWidth = table.outerWidth();
      divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
      divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

      // Figure out if there are scrollbar present - if so then we need a the header and footer to
      // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
      var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
      var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
      divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

      if (footer) {
        divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
        divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
        divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
      }

      /* Adjust the position of the header in case we loose the y-scrollbar */
      divBody.scroll();

      // If sorting or filtering has occurred, jump the scrolling back to the top
      // only if we aren't holding the position
      if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
        divBodyEl.scrollTop = 0;
      }
    }



    /**
     * Apply a given function to the display child nodes of an element array (typically
     * TD children of TR rows
     *  @param {function} fn Method to apply to the objects
     *  @param array {nodes} an1 List of elements to look through for display children
     *  @param array {nodes} an2 Another list (identical structure to the first) - optional
     *  @memberof DataTable#oApi
     */
    function _fnApplyToChildren(fn, an1, an2) {
      var index = 0,
        i = 0,
        iLen = an1.length;
      var nNode1, nNode2;

      while (i < iLen) {
        nNode1 = an1[i].firstChild;
        nNode2 = an2 ? an2[i].firstChild : null;

        while (nNode1) {
          if (nNode1.nodeType === 1) {
            if (an2) {
              fn(nNode1, nNode2, index);
            } else {
              fn(nNode1, index);
            }

            index++;
          }

          nNode1 = nNode1.nextSibling;
          nNode2 = an2 ? nNode2.nextSibling : null;
        }

        i++;
      }
    }



    var __re_html_remove = /<.*?>/g;


    /**
     * Calculate the width of columns for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnCalculateColumnWidths(oSettings) {
      var
        table = oSettings.nTable,
        columns = oSettings.aoColumns,
        scroll = oSettings.oScroll,
        scrollY = scroll.sY,
        scrollX = scroll.sX,
        scrollXInner = scroll.sXInner,
        columnCount = columns.length,
        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
        headerCells = $('th', oSettings.nTHead),
        tableWidthAttr = table.getAttribute('width'), // from DOM element
        tableContainer = table.parentNode,
        userInputs = false,
        i, column, columnIdx, width, outerWidth,
        browser = oSettings.oBrowser,
        ie67 = browser.bScrollOversize;

      var styleWidth = table.style.width;
      if (styleWidth && styleWidth.indexOf('%') !== -1) {
        tableWidthAttr = styleWidth;
      }

      /* Convert any user input sizes into pixel sizes */
      for (i = 0; i < visibleColumns.length; i++) {
        column = columns[visibleColumns[i]];

        if (column.sWidth !== null) {
          column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

          userInputs = true;
        }
      }

      /* If the number of columns in the DOM equals the number that we have to
       * process in DataTables, then we can use the offsets that are created by
       * the web- browser. No custom sizes can be set in order for this to happen,
       * nor scrolling used
       */
      if (ie67 || !userInputs && !scrollX && !scrollY &&
        columnCount == _fnVisbleColumns(oSettings) &&
        columnCount == headerCells.length
      ) {
        for (i = 0; i < columnCount; i++) {
          var colIdx = _fnVisibleToColumnIndex(oSettings, i);

          if (colIdx !== null) {
            columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
          }
        }
      } else {
        // Otherwise construct a single row, worst case, table with the widest
        // node in the data, assign any user defined widths, then insert it into
        // the DOM and allow the browser to do all the hard work of calculating
        // table widths
        var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
          .css('visibility', 'hidden')
          .removeAttr('id');

        // Clean up the table body
        tmpTable.find('tbody tr').remove();
        var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

        // Clone the table header and footer - we can't use the header / footer
        // from the cloned table, since if scrolling is active, the table's
        // real header and footer are contained in different table tags
        tmpTable.find('thead, tfoot').remove();
        tmpTable
          .append($(oSettings.nTHead).clone())
          .append($(oSettings.nTFoot).clone());

        // Remove any assigned widths from the footer (from scrolling)
        tmpTable.find('tfoot th, tfoot td').css('width', '');

        // Apply custom sizing to the cloned header
        headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

        for (i = 0; i < visibleColumns.length; i++) {
          column = columns[visibleColumns[i]];

          headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
            _fnStringToCss(column.sWidthOrig) :
            '';

          // For scrollX we need to force the column width otherwise the
          // browser will collapse it. If this width is smaller than the
          // width the column requires, then it will have no effect
          if (column.sWidthOrig && scrollX) {
            $(headerCells[i]).append($('<div/>').css({
              width: column.sWidthOrig,
              margin: 0,
              padding: 0,
              border: 0,
              height: 1
            }));
          }
        }

        // Find the widest cell for each column and put it into the table
        if (oSettings.aoData.length) {
          for (i = 0; i < visibleColumns.length; i++) {
            columnIdx = visibleColumns[i];
            column = columns[columnIdx];

            $(_fnGetWidestNode(oSettings, columnIdx))
              .clone(false)
              .append(column.sContentPadding)
              .appendTo(tr);
          }
        }

        // Table has been built, attach to the document so we can work with it.
        // A holding element is used, positioned at the top of the container
        // with minimal height, so it has no effect on if the container scrolls
        // or not. Otherwise it might trigger scrolling when it actually isn't
        // needed
        var holder = $('<div/>').css(scrollX || scrollY ? {
            position: 'absolute',
            top: 0,
            left: 0,
            height: 1,
            right: 0,
            overflow: 'hidden'
          } : {})
          .append(tmpTable)
          .appendTo(tableContainer);

        // When scrolling (X or Y) we want to set the width of the table as 
        // appropriate. However, when not scrolling leave the table width as it
        // is. This results in slightly different, but I think correct behaviour
        if (scrollX && scrollXInner) {
          tmpTable.width(scrollXInner);
        } else if (scrollX) {
          tmpTable.css('width', 'auto');
          tmpTable.removeAttr('width');

          // If there is no width attribute or style, then allow the table to
          // collapse
          if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
            tmpTable.width(tableContainer.clientWidth);
          }
        } else if (scrollY) {
          tmpTable.width(tableContainer.clientWidth);
        } else if (tableWidthAttr) {
          tmpTable.width(tableWidthAttr);
        }

        // Get the width of each column in the constructed table - we need to
        // know the inner width (so it can be assigned to the other table's
        // cells) and the outer width so we can calculate the full width of the
        // table. This is safe since DataTables requires a unique cell for each
        // column, but if ever a header can span multiple columns, this will
        // need to be modified.
        var total = 0;
        for (i = 0; i < visibleColumns.length; i++) {
          var cell = $(headerCells[i]);
          var border = cell.outerWidth() - cell.width();

          // Use getBounding... where possible (not IE8-) because it can give
          // sub-pixel accuracy, which we then want to round up!
          var bounding = browser.bBounding ?
            Math.ceil(headerCells[i].getBoundingClientRect().width) :
            cell.outerWidth();

          // Total is tracked to remove any sub-pixel errors as the outerWidth
          // of the table might not equal the total given here (IE!).
          total += bounding;

          // Width for each column to use
          columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
        }

        table.style.width = _fnStringToCss(total);

        // Finished with the table - ditch it
        holder.remove();
      }

      // If there is a width attr, we want to attach an event listener which
      // allows the table sizing to automatically adjust when the window is
      // resized. Use the width attr rather than CSS, since we can't know if the
      // CSS is a relative value or absolute - DOM read is always px.
      if (tableWidthAttr) {
        table.style.width = _fnStringToCss(tableWidthAttr);
      }

      if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
        var bindResize = function() {
          $(window).bind('resize.DT-' + oSettings.sInstance, _fnThrottle(function() {
            _fnAdjustColumnSizing(oSettings);
          }));
        };

        // IE6/7 will crash if we bind a resize event handler on page load.
        // To be removed in 1.11 which drops IE6/7 support
        if (ie67) {
          setTimeout(bindResize, 1000);
        } else {
          bindResize();
        }

        oSettings._reszEvt = true;
      }
    }


    /**
     * Throttle the calls to a function. Arguments and context are maintained for
     * the throttled function
     *  @param {function} fn Function to be called
     *  @param {int} [freq=200] call frequency in mS
     *  @returns {function} wrapped function
     *  @memberof DataTable#oApi
     */
    function _fnThrottle(fn, freq) {
      var
        frequency = freq !== undefined ? freq : 200,
        last,
        timer;

      return function() {
        var
          that = this,
          now = +new Date(),
          args = arguments;

        if (last && now < last + frequency) {
          clearTimeout(timer);

          timer = setTimeout(function() {
            last = undefined;
            fn.apply(that, args);
          }, frequency);
        } else {
          last = now;
          fn.apply(that, args);
        }
      };
    }


    /**
     * Convert a CSS unit width to pixels (e.g. 2em)
     *  @param {string} width width to be converted
     *  @param {node} parent parent to get the with for (required for relative widths) - optional
     *  @returns {int} width in pixels
     *  @memberof DataTable#oApi
     */
    function _fnConvertToWidth(width, parent) {
      if (!width) {
        return 0;
      }

      var n = $('<div/>')
        .css('width', _fnStringToCss(width))
        .appendTo(parent || document.body);

      var val = n[0].offsetWidth;
      n.remove();

      return val;
    }


    /**
     * Get the widest node
     *  @param {object} settings dataTables settings object
     *  @param {int} colIdx column of interest
     *  @returns {node} widest table node
     *  @memberof DataTable#oApi
     */
    function _fnGetWidestNode(settings, colIdx) {
      var idx = _fnGetMaxLenString(settings, colIdx);
      if (idx < 0) {
        return null;
      }

      var data = settings.aoData[idx];
      return !data.nTr ? // Might not have been created when deferred rendering
        $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] :
        data.anCells[colIdx];
    }


    /**
     * Get the maximum strlen for each data column
     *  @param {object} settings dataTables settings object
     *  @param {int} colIdx column of interest
     *  @returns {string} max string length for each column
     *  @memberof DataTable#oApi
     */
    function _fnGetMaxLenString(settings, colIdx) {
      var s, max = -1,
        maxIdx = -1;

      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        s = _fnGetCellData(settings, i, colIdx, 'display') + '';
        s = s.replace(__re_html_remove, '');
        s = s.replace(/&nbsp;/g, ' ');

        if (s.length > max) {
          max = s.length;
          maxIdx = i;
        }
      }

      return maxIdx;
    }


    /**
     * Append a CSS unit (only if required) to a string
     *  @param {string} value to css-ify
     *  @returns {string} value with css unit
     *  @memberof DataTable#oApi
     */
    function _fnStringToCss(s) {
      if (s === null) {
        return '0px';
      }

      if (typeof s == 'number') {
        return s < 0 ?
          '0px' :
          s + 'px';
      }

      // Check it has a unit character already
      return s.match(/\d$/) ?
        s + 'px' :
        s;
    }



    function _fnSortFlatten(settings) {
      var
        i, iLen, k, kLen,
        aSort = [],
        aiOrig = [],
        aoColumns = settings.aoColumns,
        aDataSort, iCol, sType, srcCol,
        fixed = settings.aaSortingFixed,
        fixedObj = $.isPlainObject(fixed),
        nestedSort = [],
        add = function(a) {
          if (a.length && !$.isArray(a[0])) {
            // 1D array
            nestedSort.push(a);
          } else {
            // 2D array
            $.merge(nestedSort, a);
          }
        };

      // Build the sort array, with pre-fix and post-fix options if they have been
      // specified
      if ($.isArray(fixed)) {
        add(fixed);
      }

      if (fixedObj && fixed.pre) {
        add(fixed.pre);
      }

      add(settings.aaSorting);

      if (fixedObj && fixed.post) {
        add(fixed.post);
      }

      for (i = 0; i < nestedSort.length; i++) {
        srcCol = nestedSort[i][0];
        aDataSort = aoColumns[srcCol].aDataSort;

        for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
          iCol = aDataSort[k];
          sType = aoColumns[iCol].sType || 'string';

          if (nestedSort[i]._idx === undefined) {
            nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
          }

          aSort.push({
            src: srcCol,
            col: iCol,
            dir: nestedSort[i][1],
            index: nestedSort[i]._idx,
            type: sType,
            formatter: DataTable.ext.type.order[sType + "-pre"]
          });
        }
      }

      return aSort;
    }

    /**
     * Change the order of the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     *  @todo This really needs split up!
     */
    function _fnSort(oSettings) {
      var
        i, ien, iLen, j, jLen, k, kLen,
        sDataType, nTh,
        aiOrig = [],
        oExtSort = DataTable.ext.type.order,
        aoData = oSettings.aoData,
        aoColumns = oSettings.aoColumns,
        aDataSort, data, iCol, sType, oSort,
        formatters = 0,
        sortCol,
        displayMaster = oSettings.aiDisplayMaster,
        aSort;

      // Resolve any column types that are unknown due to addition or invalidation
      // @todo Can this be moved into a 'data-ready' handler which is called when
      //   data is going to be used in the table?
      _fnColumnTypes(oSettings);

      aSort = _fnSortFlatten(oSettings);

      for (i = 0, ien = aSort.length; i < ien; i++) {
        sortCol = aSort[i];

        // Track if we can use the fast sort algorithm
        if (sortCol.formatter) {
          formatters++;
        }

        // Load the data needed for the sort, for each cell
        _fnSortData(oSettings, sortCol.col);
      }

      /* No sorting required if server-side or no sorting array */
      if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
        // Create a value - key array of the current row positions such that we can use their
        // current position during the sort, if values match, in order to perform stable sorting
        for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
          aiOrig[displayMaster[i]] = i;
        }

        /* Do the sort - here we want multi-column sorting based on a given data source (column)
         * and sorting function (from oSort) in a certain direction. It's reasonably complex to
         * follow on it's own, but this is what we want (example two column sorting):
         *  fnLocalSorting = function(a,b){
         *    var iTest;
         *    iTest = oSort['string-asc']('data11', 'data12');
         *      if (iTest !== 0)
         *        return iTest;
         *    iTest = oSort['numeric-desc']('data21', 'data22');
         *    if (iTest !== 0)
         *      return iTest;
         *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
         *  }
         * Basically we have a test for each sorting column, if the data in that column is equal,
         * test the next column. If all columns match, then we use a numeric sort on the row
         * positions in the original data array to provide a stable sort.
         *
         * Note - I know it seems excessive to have two sorting methods, but the first is around
         * 15% faster, so the second is only maintained for backwards compatibility with sorting
         * methods which do not have a pre-sort formatting function.
         */
        if (formatters === aSort.length) {
          // All sort types have formatting functions
          displayMaster.sort(function(a, b) {
            var
              x, y, k, test, sort,
              len = aSort.length,
              dataA = aoData[a]._aSortData,
              dataB = aoData[b]._aSortData;

            for (k = 0; k < len; k++) {
              sort = aSort[k];

              x = dataA[sort.col];
              y = dataB[sort.col];

              test = x < y ? -1 : x > y ? 1 : 0;
              if (test !== 0) {
                return sort.dir === 'asc' ? test : -test;
              }
            }

            x = aiOrig[a];
            y = aiOrig[b];
            return x < y ? -1 : x > y ? 1 : 0;
          });
        } else {
          // Depreciated - remove in 1.11 (providing a plug-in option)
          // Not all sort types have formatting methods, so we have to call their sorting
          // methods.
          displayMaster.sort(function(a, b) {
            var
              x, y, k, l, test, sort, fn,
              len = aSort.length,
              dataA = aoData[a]._aSortData,
              dataB = aoData[b]._aSortData;

            for (k = 0; k < len; k++) {
              sort = aSort[k];

              x = dataA[sort.col];
              y = dataB[sort.col];

              fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
              test = fn(x, y);
              if (test !== 0) {
                return test;
              }
            }

            x = aiOrig[a];
            y = aiOrig[b];
            return x < y ? -1 : x > y ? 1 : 0;
          });
        }
      }

      /* Tell the draw function that we have sorted the data */
      oSettings.bSorted = true;
    }


    function _fnSortAria(settings) {
      var label;
      var nextSort;
      var columns = settings.aoColumns;
      var aSort = _fnSortFlatten(settings);
      var oAria = settings.oLanguage.oAria;

      // ARIA attributes - need to loop all columns, to update all (removing old
      // attributes as needed)
      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        var col = columns[i];
        var asSorting = col.asSorting;
        var sTitle = col.sTitle.replace(/<.*?>/g, "");
        var th = col.nTh;

        // IE7 is throwing an error when setting these properties with jQuery's
        // attr() and removeAttr() methods...
        th.removeAttribute('aria-sort');

        /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
        if (col.bSortable) {
          if (aSort.length > 0 && aSort[0].col == i) {
            th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
            nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
          } else {
            nextSort = asSorting[0];
          }

          label = sTitle + (nextSort === "asc" ?
            oAria.sSortAscending :
            oAria.sSortDescending
          );
        } else {
          label = sTitle;
        }

        th.setAttribute('aria-label', label);
      }
    }


    /**
     * Function to run on user sort request
     *  @param {object} settings dataTables settings object
     *  @param {node} attachTo node to attach the handler to
     *  @param {int} colIdx column sorting index
     *  @param {boolean} [append=false] Append the requested sort to the existing
     *    sort if true (i.e. multi-column sort)
     *  @param {function} [callback] callback function
     *  @memberof DataTable#oApi
     */
    function _fnSortListener(settings, colIdx, append, callback) {
      var col = settings.aoColumns[colIdx];
      var sorting = settings.aaSorting;
      var asSorting = col.asSorting;
      var nextSortIdx;
      var next = function(a, overflow) {
        var idx = a._idx;
        if (idx === undefined) {
          idx = $.inArray(a[1], asSorting);
        }

        return idx + 1 < asSorting.length ?
          idx + 1 :
          overflow ?
          null :
          0;
      };

      // Convert to 2D array if needed
      if (typeof sorting[0] === 'number') {
        sorting = settings.aaSorting = [sorting];
      }

      // If appending the sort then we are multi-column sorting
      if (append && settings.oFeatures.bSortMulti) {
        // Are we already doing some kind of sort on this column?
        var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

        if (sortIdx !== -1) {
          // Yes, modify the sort
          nextSortIdx = next(sorting[sortIdx], true);

          if (nextSortIdx === null && sorting.length === 1) {
            nextSortIdx = 0; // can't remove sorting completely
          }

          if (nextSortIdx === null) {
            sorting.splice(sortIdx, 1);
          } else {
            sorting[sortIdx][1] = asSorting[nextSortIdx];
            sorting[sortIdx]._idx = nextSortIdx;
          }
        } else {
          // No sort on this column yet
          sorting.push([colIdx, asSorting[0], 0]);
          sorting[sorting.length - 1]._idx = 0;
        }
      } else if (sorting.length && sorting[0][0] == colIdx) {
        // Single column - already sorting on this column, modify the sort
        nextSortIdx = next(sorting[0]);

        sorting.length = 1;
        sorting[0][1] = asSorting[nextSortIdx];
        sorting[0]._idx = nextSortIdx;
      } else {
        // Single column - sort only on this column
        sorting.length = 0;
        sorting.push([colIdx, asSorting[0]]);
        sorting[0]._idx = 0;
      }

      // Run the sort by calling a full redraw
      _fnReDraw(settings);

      // callback used for async user interaction
      if (typeof callback == 'function') {
        callback(settings);
      }
    }


    /**
     * Attach a sort handler (click) to a node
     *  @param {object} settings dataTables settings object
     *  @param {node} attachTo node to attach the handler to
     *  @param {int} colIdx column sorting index
     *  @param {function} [callback] callback function
     *  @memberof DataTable#oApi
     */
    function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
      var col = settings.aoColumns[colIdx];

      _fnBindAction(attachTo, {}, function(e) {
        /* If the column is not sortable - don't to anything */
        if (col.bSortable === false) {
          return;
        }

        // If processing is enabled use a timeout to allow the processing
        // display to be shown - otherwise to it synchronously
        if (settings.oFeatures.bProcessing) {
          _fnProcessingDisplay(settings, true);

          setTimeout(function() {
            _fnSortListener(settings, colIdx, e.shiftKey, callback);

            // In server-side processing, the draw callback will remove the
            // processing display
            if (_fnDataSource(settings) !== 'ssp') {
              _fnProcessingDisplay(settings, false);
            }
          }, 0);
        } else {
          _fnSortListener(settings, colIdx, e.shiftKey, callback);
        }
      });
    }


    /**
     * Set the sorting classes on table's body, Note: it is safe to call this function
     * when bSort and bSortClasses are false
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnSortingClasses(settings) {
      var oldSort = settings.aLastSort;
      var sortClass = settings.oClasses.sSortColumn;
      var sort = _fnSortFlatten(settings);
      var features = settings.oFeatures;
      var i, ien, colIdx;

      if (features.bSort && features.bSortClasses) {
        // Remove old sorting classes
        for (i = 0, ien = oldSort.length; i < ien; i++) {
          colIdx = oldSort[i].src;

          // Remove column sorting
          $(_pluck(settings.aoData, 'anCells', colIdx))
            .removeClass(sortClass + (i < 2 ? i + 1 : 3));
        }

        // Add new column sorting
        for (i = 0, ien = sort.length; i < ien; i++) {
          colIdx = sort[i].src;

          $(_pluck(settings.aoData, 'anCells', colIdx))
            .addClass(sortClass + (i < 2 ? i + 1 : 3));
        }
      }

      settings.aLastSort = sort;
    }


    // Get the data to sort a column, be it from cache, fresh (populating the
    // cache), or from a sort formatter
    function _fnSortData(settings, idx) {
      // Custom sorting function - provided by the sort data type
      var column = settings.aoColumns[idx];
      var customSort = DataTable.ext.order[column.sSortDataType];
      var customData;

      if (customSort) {
        customData = customSort.call(settings.oInstance, settings, idx,
          _fnColumnIndexToVisible(settings, idx)
        );
      }

      // Use / populate cache
      var row, cellData;
      var formatter = DataTable.ext.type.order[column.sType + "-pre"];

      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        row = settings.aoData[i];

        if (!row._aSortData) {
          row._aSortData = [];
        }

        if (!row._aSortData[idx] || customSort) {
          cellData = customSort ?
            customData[i] : // If there was a custom sort function, use data from there
            _fnGetCellData(settings, i, idx, 'sort');

          row._aSortData[idx] = formatter ?
            formatter(cellData) :
            cellData;
        }
      }
    }



    /**
     * Save the state of a table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnSaveState(settings) {
      if (!settings.oFeatures.bStateSave || settings.bDestroying) {
        return;
      }

      /* Store the interesting variables */
      var state = {
        time: +new Date(),
        start: settings._iDisplayStart,
        length: settings._iDisplayLength,
        order: $.extend(true, [], settings.aaSorting),
        search: _fnSearchToCamel(settings.oPreviousSearch),
        columns: $.map(settings.aoColumns, function(col, i) {
          return {
            visible: col.bVisible,
            search: _fnSearchToCamel(settings.aoPreSearchCols[i])
          };
        })
      };

      _fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

      settings.oSavedState = state;
      settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
    }


    /**
     * Attempt to load a saved table state
     *  @param {object} oSettings dataTables settings object
     *  @param {object} oInit DataTables init object so we can override settings
     *  @memberof DataTable#oApi
     */
    function _fnLoadState(settings, oInit) {
      var i, ien;
      var columns = settings.aoColumns;

      if (!settings.oFeatures.bStateSave) {
        return;
      }

      var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
      if (!state || !state.time) {
        return;
      }

      /* Allow custom and plug-in manipulation functions to alter the saved data set and
       * cancelling of loading by returning false
       */
      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state]);
      if ($.inArray(false, abStateLoad) !== -1) {
        return;
      }

      /* Reject old data */
      var duration = settings.iStateDuration;
      if (duration > 0 && state.time < +new Date() - (duration * 1000)) {
        return;
      }

      // Number of columns have changed - all bets are off, no restore of settings
      if (columns.length !== state.columns.length) {
        return;
      }

      // Store the saved state so it might be accessed at any time
      settings.oLoadedState = $.extend(true, {}, state);

      // Restore key features - todo - for 1.11 this needs to be done by
      // subscribed events
      if (state.start !== undefined) {
        settings._iDisplayStart = state.start;
        settings.iInitDisplayStart = state.start;
      }
      if (state.length !== undefined) {
        settings._iDisplayLength = state.length;
      }

      // Order
      if (state.order !== undefined) {
        settings.aaSorting = [];
        $.each(state.order, function(i, col) {
          settings.aaSorting.push(col[0] >= columns.length ?
            [0, col[1]] :
            col
          );
        });
      }

      // Search
      if (state.search !== undefined) {
        $.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
      }

      // Columns
      for (i = 0, ien = state.columns.length; i < ien; i++) {
        var col = state.columns[i];

        // Visibility
        if (col.visible !== undefined) {
          columns[i].bVisible = col.visible;
        }

        // Search
        if (col.search !== undefined) {
          $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
        }
      }

      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, state]);
    }


    /**
     * Return the settings object for a particular table
     *  @param {node} table table we are using as a dataTable
     *  @returns {object} Settings object - or null if not found
     *  @memberof DataTable#oApi
     */
    function _fnSettingsFromNode(table) {
      var settings = DataTable.settings;
      var idx = $.inArray(table, _pluck(settings, 'nTable'));

      return idx !== -1 ?
        settings[idx] :
        null;
    }


    /**
     * Log an error message
     *  @param {object} settings dataTables settings object
     *  @param {int} level log error messages, or display them to the user
     *  @param {string} msg error message
     *  @param {int} tn Technical note id to get more information about the error.
     *  @memberof DataTable#oApi
     */
    function _fnLog(settings, level, msg, tn) {
      msg = 'DataTables warning: ' +
        (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

      if (tn) {
        msg += '. For more information about this error, please see ' +
          'http://datatables.net/tn/' + tn;
      }

      if (!level) {
        // Backwards compatibility pre 1.10
        var ext = DataTable.ext;
        var type = ext.sErrMode || ext.errMode;

        if (settings) {
          _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);
        }

        if (type == 'alert') {
          alert(msg);
        } else if (type == 'throw') {
          throw new Error(msg);
        } else if (typeof type == 'function') {
          type(settings, tn, msg);
        }
      } else if (window.console && console.log) {
        console.log(msg);
      }
    }


    /**
     * See if a property is defined on one object, if so assign it to the other object
     *  @param {object} ret target object
     *  @param {object} src source object
     *  @param {string} name property
     *  @param {string} [mappedName] name to map too - optional, name used if not given
     *  @memberof DataTable#oApi
     */
    function _fnMap(ret, src, name, mappedName) {
      if ($.isArray(name)) {
        $.each(name, function(i, val) {
          if ($.isArray(val)) {
            _fnMap(ret, src, val[0], val[1]);
          } else {
            _fnMap(ret, src, val);
          }
        });

        return;
      }

      if (mappedName === undefined) {
        mappedName = name;
      }

      if (src[name] !== undefined) {
        ret[mappedName] = src[name];
      }
    }


    /**
     * Extend objects - very similar to jQuery.extend, but deep copy objects, and
     * shallow copy arrays. The reason we need to do this, is that we don't want to
     * deep copy array init values (such as aaSorting) since the dev wouldn't be
     * able to override them, but we do want to deep copy arrays.
     *  @param {object} out Object to extend
     *  @param {object} extender Object from which the properties will be applied to
     *      out
     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
     *      independent copy with the exception of the `data` or `aaData` parameters
     *      if they are present. This is so you can pass in a collection to
     *      DataTables and have that used as your data source without breaking the
     *      references
     *  @returns {object} out Reference, just for convenience - out === the return.
     *  @memberof DataTable#oApi
     *  @todo This doesn't take account of arrays inside the deep copied objects.
     */
    function _fnExtend(out, extender, breakRefs) {
      var val;

      for (var prop in extender) {
        if (extender.hasOwnProperty(prop)) {
          val = extender[prop];

          if ($.isPlainObject(val)) {
            if (!$.isPlainObject(out[prop])) {
              out[prop] = {};
            }
            $.extend(true, out[prop], val);
          } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
            out[prop] = val.slice();
          } else {
            out[prop] = val;
          }
        }
      }

      return out;
    }


    /**
     * Bind an event handers to allow a click or return key to activate the callback.
     * This is good for accessibility since a return on the keyboard will have the
     * same effect as a click, if the element has focus.
     *  @param {element} n Element to bind the action to
     *  @param {object} oData Data object to pass to the triggered function
     *  @param {function} fn Callback function for when the event is triggered
     *  @memberof DataTable#oApi
     */
    function _fnBindAction(n, oData, fn) {
      $(n)
        .bind('click.DT', oData, function(e) {
          n.blur(); // Remove focus outline for mouse users
          fn(e);
        })
        .bind('keypress.DT', oData, function(e) {
          if (e.which === 13) {
            e.preventDefault();
            fn(e);
          }
        })
        .bind('selectstart.DT', function() {
          /* Take the brutal approach to cancelling text selection */
          return false;
        });
    }


    /**
     * Register a callback function. Easily allows a callback function to be added to
     * an array store of callback functions that can then all be called together.
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sStore Name of the array storage for the callbacks in oSettings
     *  @param {function} fn Function to be called back
     *  @param {string} sName Identifying name for the callback (i.e. a label)
     *  @memberof DataTable#oApi
     */
    function _fnCallbackReg(oSettings, sStore, fn, sName) {
      if (fn) {
        oSettings[sStore].push({
          "fn": fn,
          "sName": sName
        });
      }
    }


    /**
     * Fire callback functions and trigger events. Note that the loop over the
     * callback array store is done backwards! Further note that you do not want to
     * fire off triggers in time sensitive applications (for example cell creation)
     * as its slow.
     *  @param {object} settings dataTables settings object
     *  @param {string} callbackArr Name of the array storage for the callbacks in
     *      oSettings
     *  @param {string} eventName Name of the jQuery custom event to trigger. If
     *      null no trigger is fired
     *  @param {array} args Array of arguments to pass to the callback function /
     *      trigger
     *  @memberof DataTable#oApi
     */
    function _fnCallbackFire(settings, callbackArr, eventName, args) {
      var ret = [];

      if (callbackArr) {
        ret = $.map(settings[callbackArr].slice().reverse(), function(val, i) {
          return val.fn.apply(settings.oInstance, args);
        });
      }

      if (eventName !== null) {
        var e = $.Event(eventName + '.dt');

        $(settings.nTable).trigger(e, args);

        ret.push(e.result);
      }

      return ret;
    }


    function _fnLengthOverflow(settings) {
      var
        start = settings._iDisplayStart,
        end = settings.fnDisplayEnd(),
        len = settings._iDisplayLength;

      /* If we have space to show extra rows (backing up from the end point - then do so */
      if (start >= end) {
        start = end - len;
      }

      // Keep the start record on the current page
      start -= (start % len);

      if (len === -1 || start < 0) {
        start = 0;
      }

      settings._iDisplayStart = start;
    }


    function _fnRenderer(settings, type) {
      var renderer = settings.renderer;
      var host = DataTable.ext.renderer[type];

      if ($.isPlainObject(renderer) && renderer[type]) {
        // Specific renderer for this type. If available use it, otherwise use
        // the default.
        return host[renderer[type]] || host._;
      } else if (typeof renderer === 'string') {
        // Common renderer - if there is one available for this type use it,
        // otherwise use the default
        return host[renderer] || host._;
      }

      // Use the default
      return host._;
    }


    /**
     * Detect the data source being used for the table. Used to simplify the code
     * a little (ajax) and to make it compress a little smaller.
     *
     *  @param {object} settings dataTables settings object
     *  @returns {string} Data source
     *  @memberof DataTable#oApi
     */
    function _fnDataSource(settings) {
      if (settings.oFeatures.bServerSide) {
        return 'ssp';
      } else if (settings.ajax || settings.sAjaxSource) {
        return 'ajax';
      }
      return 'dom';
    }


    DataTable = function(options) {
      /**
       * Perform a jQuery selector action on the table's TR elements (from the tbody) and
       * return the resulting jQuery object.
       *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
       *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
       *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
       *    criterion ("applied") or all TR elements (i.e. no filter).
       *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
       *    Can be either 'current', whereby the current sorting of the table is used, or
       *    'original' whereby the original order the data was read into the table is used.
       *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
       *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
       *    'current' and filter is 'applied', regardless of what they might be given as.
       *  @returns {object} jQuery object, filtered by the given selector.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Highlight every second row
       *      oTable.$('tr:odd').css('backgroundColor', 'blue');
       *    } );
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Filter to rows with 'Webkit' in them, add a background colour and then
       *      // remove the filter, thus highlighting the 'Webkit' rows only.
       *      oTable.fnFilter('Webkit');
       *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
       *      oTable.fnFilter('');
       *    } );
       */
      this.$ = function(sSelector, oOpts) {
        return this.api(true).$(sSelector, oOpts);
      };


      /**
       * Almost identical to $ in operation, but in this case returns the data for the matched
       * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
       * rather than any descendants, so the data can be obtained for the row/cell. If matching
       * rows are found, the data returned is the original data array/object that was used to
       * create the row (or a generated array if from a DOM source).
       *
       * This method is often useful in-combination with $ where both functions are given the
       * same parameters and the array indexes will match identically.
       *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
       *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
       *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
       *    criterion ("applied") or all elements (i.e. no filter).
       *  @param {string} [oOpts.order=current] Order of the data in the processed array.
       *    Can be either 'current', whereby the current sorting of the table is used, or
       *    'original' whereby the original order the data was read into the table is used.
       *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
       *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
       *    'current' and filter is 'applied', regardless of what they might be given as.
       *  @returns {array} Data for the matched elements. If any elements, as a result of the
       *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
       *    entry in the array.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Get the data from the first row in the table
       *      var data = oTable._('tr:first');
       *
       *      // Do something useful with the data
       *      alert( "First cell is: "+data[0] );
       *    } );
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Filter to 'Webkit' and get all data for
       *      oTable.fnFilter('Webkit');
       *      var data = oTable._('tr', {"search": "applied"});
       *
       *      // Do something with the data
       *      alert( data.length+" rows matched the search" );
       *    } );
       */
      this._ = function(sSelector, oOpts) {
        return this.api(true).rows(sSelector, oOpts).data();
      };


      /**
       * Create a DataTables Api instance, with the currently selected tables for
       * the Api's context.
       * @param {boolean} [traditional=false] Set the API instance's context to be
       *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
       *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
       *   or if all tables captured in the jQuery object should be used.
       * @return {DataTables.Api}
       */
      this.api = function(traditional) {
        return traditional ?
          new _Api(
            _fnSettingsFromNode(this[_ext.iApiIndex])
          ) :
          new _Api(this);
      };


      /**
       * Add a single new row or multiple rows of data to the table. Please note
       * that this is suitable for client-side processing only - if you are using
       * server-side processing (i.e. "bServerSide": true), then to add data, you
       * must add it to the data source, i.e. the server-side, through an Ajax call.
       *  @param {array|object} data The data to be added to the table. This can be:
       *    <ul>
       *      <li>1D array of data - add a single row with the data provided</li>
       *      <li>2D array of arrays - add multiple rows in a single call</li>
       *      <li>object - data object when using <i>mData</i></li>
       *      <li>array of objects - multiple data objects when using <i>mData</i></li>
       *    </ul>
       *  @param {bool} [redraw=true] redraw the table or not
       *  @returns {array} An array of integers, representing the list of indexes in
       *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
       *    the table.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    // Global var for counter
       *    var giCount = 2;
       *
       *    $(document).ready(function() {
       *      $('#example').dataTable();
       *    } );
       *
       *    function fnClickAddRow() {
       *      $('#example').dataTable().fnAddData( [
       *        giCount+".1",
       *        giCount+".2",
       *        giCount+".3",
       *        giCount+".4" ]
       *      );
       *
       *      giCount++;
       *    }
       */
      this.fnAddData = function(data, redraw) {
        var api = this.api(true);

        /* Check if we want to add multiple rows or not */
        var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ?
          api.rows.add(data) :
          api.row.add(data);

        if (redraw === undefined || redraw) {
          api.draw();
        }

        return rows.flatten().toArray();
      };


      /**
       * This function will make DataTables recalculate the column sizes, based on the data
       * contained in the table and the sizes applied to the columns (in the DOM, CSS or
       * through the sWidth parameter). This can be useful when the width of the table's
       * parent element changes (for example a window resize).
       *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable( {
       *        "sScrollY": "200px",
       *        "bPaginate": false
       *      } );
       *
       *      $(window).bind('resize', function () {
       *        oTable.fnAdjustColumnSizing();
       *      } );
       *    } );
       */
      this.fnAdjustColumnSizing = function(bRedraw) {
        var api = this.api(true).columns.adjust();
        var settings = api.settings()[0];
        var scroll = settings.oScroll;

        if (bRedraw === undefined || bRedraw) {
          api.draw(false);
        } else if (scroll.sX !== "" || scroll.sY !== "") {
          /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
          _fnScrollDraw(settings);
        }
      };


      /**
       * Quickly and simply clear a table
       *  @param {bool} [bRedraw=true] redraw the table or not
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
       *      oTable.fnClearTable();
       *    } );
       */
      this.fnClearTable = function(bRedraw) {
        var api = this.api(true).clear();

        if (bRedraw === undefined || bRedraw) {
          api.draw();
        }
      };


      /**
       * The exact opposite of 'opening' a row, this function will close any rows which
       * are currently 'open'.
       *  @param {node} nTr the table row to 'close'
       *  @returns {int} 0 on success, or 1 if failed (can't find the row)
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable;
       *
       *      // 'open' an information row when a row is clicked on
       *      $('#example tbody tr').click( function () {
       *        if ( oTable.fnIsOpen(this) ) {
       *          oTable.fnClose( this );
       *        } else {
       *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
       *        }
       *      } );
       *
       *      oTable = $('#example').dataTable();
       *    } );
       */
      this.fnClose = function(nTr) {
        this.api(true).row(nTr).child.hide();
      };


      /**
       * Remove a row for the table
       *  @param {mixed} target The index of the row from aoData to be deleted, or
       *    the TR element you want to delete
       *  @param {function|null} [callBack] Callback function
       *  @param {bool} [redraw=true] Redraw the table or not
       *  @returns {array} The row that was deleted
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Immediately remove the first row
       *      oTable.fnDeleteRow( 0 );
       *    } );
       */
      this.fnDeleteRow = function(target, callback, redraw) {
        var api = this.api(true);
        var rows = api.rows(target);
        var settings = rows.settings()[0];
        var data = settings.aoData[rows[0][0]];

        rows.remove();

        if (callback) {
          callback.call(this, settings, data);
        }

        if (redraw === undefined || redraw) {
          api.draw();
        }

        return data;
      };


      /**
       * Restore the table to it's original state in the DOM by removing all of DataTables
       * enhancements, alterations to the DOM structure of the table and event listeners.
       *  @param {boolean} [remove=false] Completely remove the table from the DOM
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
       *      var oTable = $('#example').dataTable();
       *      oTable.fnDestroy();
       *    } );
       */
      this.fnDestroy = function(remove) {
        this.api(true).destroy(remove);
      };


      /**
       * Redraw the table
       *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
       *      oTable.fnDraw();
       *    } );
       */
      this.fnDraw = function(complete) {
        // Note that this isn't an exact match to the old call to _fnDraw - it takes
        // into account the new data, but can hold position.
        this.api(true).draw(complete);
      };


      /**
       * Filter the input based on data
       *  @param {string} sInput String to filter the table on
       *  @param {int|null} [iColumn] Column to limit filtering to
       *  @param {bool} [bRegex=false] Treat as regular expression or not
       *  @param {bool} [bSmart=true] Perform smart filtering or not
       *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
       *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Sometime later - filter...
       *      oTable.fnFilter( 'test string' );
       *    } );
       */
      this.fnFilter = function(sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
        var api = this.api(true);

        if (iColumn === null || iColumn === undefined) {
          api.search(sInput, bRegex, bSmart, bCaseInsensitive);
        } else {
          api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
        }

        api.draw();
      };


      /**
       * Get the data for the whole table, an individual row or an individual cell based on the
       * provided parameters.
       *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
       *    a TR node then the data source for the whole row will be returned. If given as a
       *    TD/TH cell node then iCol will be automatically calculated and the data for the
       *    cell returned. If given as an integer, then this is treated as the aoData internal
       *    data index for the row (see fnGetPosition) and the data for that row used.
       *  @param {int} [col] Optional column index that you want the data of.
       *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
       *    returned. If mRow is defined, just data for that row, and is iCol is
       *    defined, only data for the designated cell is returned.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    // Row data
       *    $(document).ready(function() {
       *      oTable = $('#example').dataTable();
       *
       *      oTable.$('tr').click( function () {
       *        var data = oTable.fnGetData( this );
       *        // ... do something with the array / object of data for the row
       *      } );
       *    } );
       *
       *  @example
       *    // Individual cell data
       *    $(document).ready(function() {
       *      oTable = $('#example').dataTable();
       *
       *      oTable.$('td').click( function () {
       *        var sData = oTable.fnGetData( this );
       *        alert( 'The cell clicked on had the value of '+sData );
       *      } );
       *    } );
       */
      this.fnGetData = function(src, col) {
        var api = this.api(true);

        if (src !== undefined) {
          var type = src.nodeName ? src.nodeName.toLowerCase() : '';

          return col !== undefined || type == 'td' || type == 'th' ?
            api.cell(src, col).data() :
            api.row(src).data() || null;
        }

        return api.data().toArray();
      };


      /**
       * Get an array of the TR nodes that are used in the table's body. Note that you will
       * typically want to use the '$' API method in preference to this as it is more
       * flexible.
       *  @param {int} [iRow] Optional row index for the TR element you want
       *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
       *    in the table's body, or iRow is defined, just the TR element requested.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Get the nodes from the table
       *      var nNodes = oTable.fnGetNodes( );
       *    } );
       */
      this.fnGetNodes = function(iRow) {
        var api = this.api(true);

        return iRow !== undefined ?
          api.row(iRow).node() :
          api.rows().nodes().flatten().toArray();
      };


      /**
       * Get the array indexes of a particular cell from it's DOM element
       * and column index including hidden columns
       *  @param {node} node this can either be a TR, TD or TH in the table's body
       *  @returns {int} If nNode is given as a TR, then a single index is returned, or
       *    if given as a cell, an array of [row index, column index (visible),
       *    column index (all)] is given.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      $('#example tbody td').click( function () {
       *        // Get the position of the current data from the node
       *        var aPos = oTable.fnGetPosition( this );
       *
       *        // Get the data array for this row
       *        var aData = oTable.fnGetData( aPos[0] );
       *
       *        // Update the data array and return the value
       *        aData[ aPos[1] ] = 'clicked';
       *        this.innerHTML = 'clicked';
       *      } );
       *
       *      // Init DataTables
       *      oTable = $('#example').dataTable();
       *    } );
       */
      this.fnGetPosition = function(node) {
        var api = this.api(true);
        var nodeName = node.nodeName.toUpperCase();

        if (nodeName == 'TR') {
          return api.row(node).index();
        } else if (nodeName == 'TD' || nodeName == 'TH') {
          var cell = api.cell(node).index();

          return [
            cell.row,
            cell.columnVisible,
            cell.column
          ];
        }
        return null;
      };


      /**
       * Check to see if a row is 'open' or not.
       *  @param {node} nTr the table row to check
       *  @returns {boolean} true if the row is currently open, false otherwise
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable;
       *
       *      // 'open' an information row when a row is clicked on
       *      $('#example tbody tr').click( function () {
       *        if ( oTable.fnIsOpen(this) ) {
       *          oTable.fnClose( this );
       *        } else {
       *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
       *        }
       *      } );
       *
       *      oTable = $('#example').dataTable();
       *    } );
       */
      this.fnIsOpen = function(nTr) {
        return this.api(true).row(nTr).child.isShown();
      };


      /**
       * This function will place a new row directly after a row which is currently
       * on display on the page, with the HTML contents that is passed into the
       * function. This can be used, for example, to ask for confirmation that a
       * particular record should be deleted.
       *  @param {node} nTr The table row to 'open'
       *  @param {string|node|jQuery} mHtml The HTML to put into the row
       *  @param {string} sClass Class to give the new TD cell
       *  @returns {node} The row opened. Note that if the table row passed in as the
       *    first parameter, is not found in the table, this method will silently
       *    return.
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable;
       *
       *      // 'open' an information row when a row is clicked on
       *      $('#example tbody tr').click( function () {
       *        if ( oTable.fnIsOpen(this) ) {
       *          oTable.fnClose( this );
       *        } else {
       *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
       *        }
       *      } );
       *
       *      oTable = $('#example').dataTable();
       *    } );
       */
      this.fnOpen = function(nTr, mHtml, sClass) {
        return this.api(true)
          .row(nTr)
          .child(mHtml, sClass)
          .show()
          .child()[0];
      };


      /**
       * Change the pagination - provides the internal logic for pagination in a simple API
       * function. With this function you can have a DataTables table go to the next,
       * previous, first or last pages.
       *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
       *    or page number to jump to (integer), note that page 0 is the first page.
       *  @param {bool} [bRedraw=true] Redraw the table or not
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *      oTable.fnPageChange( 'next' );
       *    } );
       */
      this.fnPageChange = function(mAction, bRedraw) {
        var api = this.api(true).page(mAction);

        if (bRedraw === undefined || bRedraw) {
          api.draw(false);
        }
      };


      /**
       * Show a particular column
       *  @param {int} iCol The column whose display should be changed
       *  @param {bool} bShow Show (true) or hide (false) the column
       *  @param {bool} [bRedraw=true] Redraw the table or not
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Hide the second column after initialisation
       *      oTable.fnSetColumnVis( 1, false );
       *    } );
       */
      this.fnSetColumnVis = function(iCol, bShow, bRedraw) {
        var api = this.api(true).column(iCol).visible(bShow);

        if (bRedraw === undefined || bRedraw) {
          api.columns.adjust().draw();
        }
      };


      /**
       * Get the settings for a particular table for external manipulation
       *  @returns {object} DataTables settings object. See
       *    {@link DataTable.models.oSettings}
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *      var oSettings = oTable.fnSettings();
       *
       *      // Show an example parameter from the settings
       *      alert( oSettings._iDisplayStart );
       *    } );
       */
      this.fnSettings = function() {
        return _fnSettingsFromNode(this[_ext.iApiIndex]);
      };


      /**
       * Sort the table by a particular column
       *  @param {int} iCol the data index to sort on. Note that this will not match the
       *    'display index' if you have hidden data entries
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Sort immediately with columns 0 and 1
       *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
       *    } );
       */
      this.fnSort = function(aaSort) {
        this.api(true).order(aaSort).draw();
      };


      /**
       * Attach a sort listener to an element for a given column
       *  @param {node} nNode the element to attach the sort listener to
       *  @param {int} iColumn the column that a click on this node will sort on
       *  @param {function} [fnCallback] callback function when sort is run
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *
       *      // Sort on column 1, when 'sorter' is clicked on
       *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
       *    } );
       */
      this.fnSortListener = function(nNode, iColumn, fnCallback) {
        this.api(true).order.listener(nNode, iColumn, fnCallback);
      };


      /**
       * Update a table cell or row - this method will accept either a single value to
       * update the cell with, an array of values with one element for each column or
       * an object in the same format as the original data source. The function is
       * self-referencing in order to make the multi column updates easier.
       *  @param {object|array|string} mData Data to update the cell/row with
       *  @param {node|int} mRow TR element you want to update or the aoData index
       *  @param {int} [iColumn] The column to update, give as null or undefined to
       *    update a whole row.
       *  @param {bool} [bRedraw=true] Redraw the table or not
       *  @param {bool} [bAction=true] Perform pre-draw actions or not
       *  @returns {int} 0 on success, 1 on error
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
       *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
       *    } );
       */
      this.fnUpdate = function(mData, mRow, iColumn, bRedraw, bAction) {
        var api = this.api(true);

        if (iColumn === undefined || iColumn === null) {
          api.row(mRow).data(mData);
        } else {
          api.cell(mRow, iColumn).data(mData);
        }

        if (bAction === undefined || bAction) {
          api.columns.adjust();
        }

        if (bRedraw === undefined || bRedraw) {
          api.draw();
        }
        return 0;
      };


      /**
       * Provide a common method for plug-ins to check the version of DataTables being used, in order
       * to ensure compatibility.
       *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
       *    formats "X" and "X.Y" are also acceptable.
       *  @returns {boolean} true if this version of DataTables is greater or equal to the required
       *    version, or false if this version of DataTales is not suitable
       *  @method
       *  @dtopt API
       *  @deprecated Since v1.10
       *
       *  @example
       *    $(document).ready(function() {
       *      var oTable = $('#example').dataTable();
       *      alert( oTable.fnVersionCheck( '1.9.0' ) );
       *    } );
       */
      this.fnVersionCheck = _ext.fnVersionCheck;


      var _that = this;
      var emptyInit = options === undefined;
      var len = this.length;

      if (emptyInit) {
        options = {};
      }

      this.oApi = this.internal = _ext.internal;

      // Extend with old style plug-in API methods
      for (var fn in DataTable.ext.internal) {
        if (fn) {
          this[fn] = _fnExternApiFunc(fn);
        }
      }

      this.each(function() {
        // For each initialisation we want to give it a clean initialisation
        // object that can be bashed around
        var o = {};
        var oInit = len > 1 ? // optimisation for single table case
          _fnExtend(o, options, true) :
          options;

        /*global oInit,_that,emptyInit*/
        var i = 0,
          iLen, j, jLen, k, kLen;
        var sId = this.getAttribute('id');
        var bInitHandedOff = false;
        var defaults = DataTable.defaults;
        var $this = $(this);


        /* Sanity check */
        if (this.nodeName.toLowerCase() != 'table') {
          _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
          return;
        }

        /* Backwards compatibility for the defaults */
        _fnCompatOpts(defaults);
        _fnCompatCols(defaults.column);

        /* Convert the camel-case defaults to Hungarian */
        _fnCamelToHungarian(defaults, defaults, true);
        _fnCamelToHungarian(defaults.column, defaults.column, true);

        /* Setting up the initialisation object */
        _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));



        /* Check to see if we are re-initialising a table */
        var allSettings = DataTable.settings;
        for (i = 0, iLen = allSettings.length; i < iLen; i++) {
          var s = allSettings[i];

          /* Base check on table node */
          if (s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this)) {
            var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
            var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

            if (emptyInit || bRetrieve) {
              return s.oInstance;
            } else if (bDestroy) {
              s.oInstance.fnDestroy();
              break;
            } else {
              _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
              return;
            }
          }

          /* If the element we are initialising has the same ID as a table which was previously
           * initialised, but the table nodes don't match (from before) then we destroy the old
           * instance by simply deleting it. This is under the assumption that the table has been
           * destroyed by other methods. Anyone using non-id selectors will need to do this manually
           */
          if (s.sTableId == this.id) {
            allSettings.splice(i, 1);
            break;
          }
        }

        /* Ensure the table has an ID - required for accessibility */
        if (sId === null || sId === "") {
          sId = "DataTables_Table_" + (DataTable.ext._unique++);
          this.id = sId;
        }

        /* Create the settings object for this table and set some of the default parameters */
        var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
          "sDestroyWidth": $this[0].style.width,
          "sInstance": sId,
          "sTableId": sId
        });
        oSettings.nTable = this;
        oSettings.oApi = _that.internal;
        oSettings.oInit = oInit;

        allSettings.push(oSettings);

        // Need to add the instance after the instance after the settings object has been added
        // to the settings array, so we can self reference the table instance if more than one
        oSettings.oInstance = (_that.length === 1) ? _that : $this.dataTable();

        // Backwards compatibility, before we apply all the defaults
        _fnCompatOpts(oInit);

        if (oInit.oLanguage) {
          _fnLanguageCompat(oInit.oLanguage);
        }

        // If the length menu is given, but the init display length is not, use the length menu
        if (oInit.aLengthMenu && !oInit.iDisplayLength) {
          oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ?
            oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
        }

        // Apply the defaults and init options to make a single init object will all
        // options defined from defaults and instance options.
        oInit = _fnExtend($.extend(true, {}, defaults), oInit);


        // Map the initialisation options onto the settings object
        _fnMap(oSettings.oFeatures, oInit, [
          "bPaginate",
          "bLengthChange",
          "bFilter",
          "bSort",
          "bSortMulti",
          "bInfo",
          "bProcessing",
          "bAutoWidth",
          "bSortClasses",
          "bServerSide",
          "bDeferRender"
        ]);
        _fnMap(oSettings, oInit, [
          "asStripeClasses",
          "ajax",
          "fnServerData",
          "fnFormatNumber",
          "sServerMethod",
          "aaSorting",
          "aaSortingFixed",
          "aLengthMenu",
          "sPaginationType",
          "sAjaxSource",
          "sAjaxDataProp",
          "iStateDuration",
          "sDom",
          "bSortCellsTop",
          "iTabIndex",
          "fnStateLoadCallback",
          "fnStateSaveCallback",
          "renderer",
          "searchDelay",
          "rowId", ["iCookieDuration", "iStateDuration"], // backwards compat
          ["oSearch", "oPreviousSearch"],
          ["aoSearchCols", "aoPreSearchCols"],
          ["iDisplayLength", "_iDisplayLength"],
          ["bJQueryUI", "bJUI"]
        ]);
        _fnMap(oSettings.oScroll, oInit, [
          ["sScrollX", "sX"],
          ["sScrollXInner", "sXInner"],
          ["sScrollY", "sY"],
          ["bScrollCollapse", "bCollapse"]
        ]);
        _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

        /* Callback functions which are array driven */
        _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
        _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
        _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
        _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
        _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
        _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
        _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
        _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
        _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
        _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
        _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

        oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

        /* Browser support detection */
        _fnBrowserDetect(oSettings);

        var oClasses = oSettings.oClasses;

        // @todo Remove in 1.11
        if (oInit.bJQueryUI) {
          /* Use the JUI classes object for display. You could clone the oStdClasses object if
           * you want to have multiple tables with multiple independent classes
           */
          $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);

          if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
            /* Set the DOM to use a layout suitable for jQuery UI's theming */
            oSettings.sDom = '<"H"lfr>t<"F"ip>';
          }

          if (!oSettings.renderer) {
            oSettings.renderer = 'jqueryui';
          } else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
            oSettings.renderer.header = 'jqueryui';
          }
        } else {
          $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
        }
        $this.addClass(oClasses.sTable);


        if (oSettings.iInitDisplayStart === undefined) {
          /* Display start point, taking into account the save saving */
          oSettings.iInitDisplayStart = oInit.iDisplayStart;
          oSettings._iDisplayStart = oInit.iDisplayStart;
        }

        if (oInit.iDeferLoading !== null) {
          oSettings.bDeferLoading = true;
          var tmp = $.isArray(oInit.iDeferLoading);
          oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
          oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
        }

        /* Language definitions */
        var oLanguage = oSettings.oLanguage;
        $.extend(true, oLanguage, oInit.oLanguage);

        if (oLanguage.sUrl !== "") {
          /* Get the language definitions from a file - because this Ajax call makes the language
           * get async to the remainder of this function we use bInitHandedOff to indicate that
           * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
           */
          $.ajax({
            dataType: 'json',
            url: oLanguage.sUrl,
            success: function(json) {
              _fnLanguageCompat(json);
              _fnCamelToHungarian(defaults.oLanguage, json);
              $.extend(true, oLanguage, json);
              _fnInitialise(oSettings);
            },
            error: function() {
              // Error occurred loading language file, continue on as best we can
              _fnInitialise(oSettings);
            }
          });
          bInitHandedOff = true;
        }

        /*
         * Stripes
         */
        if (oInit.asStripeClasses === null) {
          oSettings.asStripeClasses = [
            oClasses.sStripeOdd,
            oClasses.sStripeEven
          ];
        }

        /* Remove row stripe classes if they are already on the table row */
        var stripeClasses = oSettings.asStripeClasses;
        var rowOne = $this.children('tbody').find('tr').eq(0);
        if ($.inArray(true, $.map(stripeClasses, function(el, i) {
            return rowOne.hasClass(el);
          })) !== -1) {
          $('tbody tr', this).removeClass(stripeClasses.join(' '));
          oSettings.asDestroyStripes = stripeClasses.slice();
        }

        /*
         * Columns
         * See if we should load columns automatically or use defined ones
         */
        var anThs = [];
        var aoColumnsInit;
        var nThead = this.getElementsByTagName('thead');
        if (nThead.length !== 0) {
          _fnDetectHeader(oSettings.aoHeader, nThead[0]);
          anThs = _fnGetUniqueThs(oSettings);
        }

        /* If not given a column array, generate one with nulls */
        if (oInit.aoColumns === null) {
          aoColumnsInit = [];
          for (i = 0, iLen = anThs.length; i < iLen; i++) {
            aoColumnsInit.push(null);
          }
        } else {
          aoColumnsInit = oInit.aoColumns;
        }

        /* Add the columns */
        for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
          _fnAddColumn(oSettings, anThs ? anThs[i] : null);
        }

        /* Apply the column definitions */
        _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function(iCol, oDef) {
          _fnColumnOptions(oSettings, iCol, oDef);
        });

        /* HTML5 attribute detection - build an mData object automatically if the
         * attributes are found
         */
        if (rowOne.length) {
          var a = function(cell, name) {
            return cell.getAttribute('data-' + name) !== null ? name : null;
          };

          $(rowOne[0]).children('th, td').each(function(i, cell) {
            var col = oSettings.aoColumns[i];

            if (col.mData === i) {
              var sort = a(cell, 'sort') || a(cell, 'order');
              var filter = a(cell, 'filter') || a(cell, 'search');

              if (sort !== null || filter !== null) {
                col.mData = {
                  _: i + '.display',
                  sort: sort !== null ? i + '.@data-' + sort : undefined,
                  type: sort !== null ? i + '.@data-' + sort : undefined,
                  filter: filter !== null ? i + '.@data-' + filter : undefined
                };

                _fnColumnOptions(oSettings, i);
              }
            }
          });
        }

        var features = oSettings.oFeatures;

        /* Must be done after everything which can be overridden by the state saving! */
        if (oInit.bStateSave) {
          features.bStateSave = true;
          _fnLoadState(oSettings, oInit);
          _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
        }


        /*
         * Sorting
         * @todo For modularisation (1.11) this needs to do into a sort start up handler
         */

        // If aaSorting is not defined, then we use the first indicator in asSorting
        // in case that has been altered, so the default sort reflects that option
        if (oInit.aaSorting === undefined) {
          var sorting = oSettings.aaSorting;
          for (i = 0, iLen = sorting.length; i < iLen; i++) {
            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
          }
        }

        /* Do a first pass on the sorting classes (allows any size changes to be taken into
         * account, and also will apply sorting disabled classes if disabled
         */
        _fnSortingClasses(oSettings);

        if (features.bSort) {
          _fnCallbackReg(oSettings, 'aoDrawCallback', function() {
            if (oSettings.bSorted) {
              var aSort = _fnSortFlatten(oSettings);
              var sortedColumns = {};

              $.each(aSort, function(i, val) {
                sortedColumns[val.src] = val.dir;
              });

              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);
              _fnSortAria(oSettings);
            }
          });
        }

        _fnCallbackReg(oSettings, 'aoDrawCallback', function() {
          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
            _fnSortingClasses(oSettings);
          }
        }, 'sc');


        /*
         * Final init
         * Cache the header, body and footer as required, creating them if needed
         */

        // Work around for Webkit bug 83867 - store the caption-side before removing from doc
        var captions = $this.children('caption').each(function() {
          this._captionSide = $this.css('caption-side');
        });

        var thead = $this.children('thead');
        if (thead.length === 0) {
          thead = $('<thead/>').appendTo(this);
        }
        oSettings.nTHead = thead[0];

        var tbody = $this.children('tbody');
        if (tbody.length === 0) {
          tbody = $('<tbody/>').appendTo(this);
        }
        oSettings.nTBody = tbody[0];

        var tfoot = $this.children('tfoot');
        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
          // If we are a scrolling table, and no footer has been given, then we need to create
          // a tfoot element for the caption element to be appended to
          tfoot = $('<tfoot/>').appendTo(this);
        }

        if (tfoot.length === 0 || tfoot.children().length === 0) {
          $this.addClass(oClasses.sNoFooter);
        } else if (tfoot.length > 0) {
          oSettings.nTFoot = tfoot[0];
          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
        }

        /* Check if there is data passing into the constructor */
        if (oInit.aaData) {
          for (i = 0; i < oInit.aaData.length; i++) {
            _fnAddData(oSettings, oInit.aaData[i]);
          }
        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
          /* Grab the data from the page - only do this when deferred loading or no Ajax
           * source since there is no point in reading the DOM data if we are then going
           * to replace it with Ajax data
           */
          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
        }

        /* Copy the data index array */
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

        /* Initialisation complete - table can be drawn */
        oSettings.bInitialised = true;

        /* Check if we need to initialise the table (it might not have been handed off to the
         * language processor)
         */
        if (bInitHandedOff === false) {
          _fnInitialise(oSettings);
        }
      });
      _that = null;
      return this;
    };



    /**
     * Computed structure of the DataTables API, defined by the options passed to
     * `DataTable.Api.register()` when building the API.
     *
     * The structure is built in order to speed creation and extension of the Api
     * objects since the extensions are effectively pre-parsed.
     *
     * The array is an array of objects with the following structure, where this
     * base array represents the Api prototype base:
     *
     *     [
     *       {
     *         name:      'data'                -- string   - Property name
     *         val:       function () {},       -- function - Api method (or undefined if just an object
     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
     *       },
     *       {
     *         name:     'row'
     *         val:       {},
     *         methodExt: [ ... ],
     *         propExt:   [
     *           {
     *             name:      'data'
     *             val:       function () {},
     *             methodExt: [ ... ],
     *             propExt:   [ ... ]
     *           },
     *           ...
     *         ]
     *       }
     *     ]
     *
     * @type {Array}
     * @ignore
     */
    var __apiStruct = [];


    /**
     * `Array.prototype` reference.
     *
     * @type object
     * @ignore
     */
    var __arrayProto = Array.prototype;


    /**
     * Abstraction for `context` parameter of the `Api` constructor to allow it to
     * take several different forms for ease of use.
     *
     * Each of the input parameter types will be converted to a DataTables settings
     * object where possible.
     *
     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
     *   of:
     *
     *   * `string` - jQuery selector. Any DataTables' matching the given selector
     *     with be found and used.
     *   * `node` - `TABLE` node which has already been formed into a DataTable.
     *   * `jQuery` - A jQuery object of `TABLE` nodes.
     *   * `object` - DataTables settings object
     *   * `DataTables.Api` - API instance
     * @return {array|null} Matching DataTables settings objects. `null` or
     *   `undefined` is returned if no matching DataTable is found.
     * @ignore
     */
    var _toSettings = function(mixed) {
      var idx, jq;
      var settings = DataTable.settings;
      var tables = $.map(settings, function(el, i) {
        return el.nTable;
      });

      if (!mixed) {
        return [];
      } else if (mixed.nTable && mixed.oApi) {
        // DataTables settings object
        return [mixed];
      } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
        // Table node
        idx = $.inArray(mixed, tables);
        return idx !== -1 ? [settings[idx]] : null;
      } else if (mixed && typeof mixed.settings === 'function') {
        return mixed.settings().toArray();
      } else if (typeof mixed === 'string') {
        // jQuery selector
        jq = $(mixed);
      } else if (mixed instanceof $) {
        // jQuery object (also DataTables instance)
        jq = mixed;
      }

      if (jq) {
        return jq.map(function(i) {
          idx = $.inArray(this, tables);
          return idx !== -1 ? settings[idx] : null;
        }).toArray();
      }
    };


    /**
     * DataTables API class - used to control and interface with  one or more
     * DataTables enhanced tables.
     *
     * The API class is heavily based on jQuery, presenting a chainable interface
     * that you can use to interact with tables. Each instance of the API class has
     * a "context" - i.e. the tables that it will operate on. This could be a single
     * table, all tables on a page or a sub-set thereof.
     *
     * Additionally the API is designed to allow you to easily work with the data in
     * the tables, retrieving and manipulating it as required. This is done by
     * presenting the API class as an array like interface. The contents of the
     * array depend upon the actions requested by each method (for example
     * `rows().nodes()` will return an array of nodes, while `rows().data()` will
     * return an array of objects or arrays depending upon your table's
     * configuration). The API object has a number of array like methods (`push`,
     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
     * `unique` etc) to assist your working with the data held in a table.
     *
     * Most methods (those which return an Api instance) are chainable, which means
     * the return from a method call also has all of the methods available that the
     * top level object had. For example, these two calls are equivalent:
     *
     *     // Not chained
     *     api.row.add( {...} );
     *     api.draw();
     *
     *     // Chained
     *     api.row.add( {...} ).draw();
     *
     * @class DataTable.Api
     * @param {array|object|string|jQuery} context DataTable identifier. This is
     *   used to define which DataTables enhanced tables this API will operate on.
     *   Can be one of:
     *
     *   * `string` - jQuery selector. Any DataTables' matching the given selector
     *     with be found and used.
     *   * `node` - `TABLE` node which has already been formed into a DataTable.
     *   * `jQuery` - A jQuery object of `TABLE` nodes.
     *   * `object` - DataTables settings object
     * @param {array} [data] Data to initialise the Api instance with.
     *
     * @example
     *   // Direct initialisation during DataTables construction
     *   var api = $('#example').DataTable();
     *
     * @example
     *   // Initialisation using a DataTables jQuery object
     *   var api = $('#example').dataTable().api();
     *
     * @example
     *   // Initialisation as a constructor
     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
     */
    _Api = function(context, data) {
      if (!(this instanceof _Api)) {
        return new _Api(context, data);
      }

      var settings = [];
      var ctxSettings = function(o) {
        var a = _toSettings(o);
        if (a) {
          settings = settings.concat(a);
        }
      };

      if ($.isArray(context)) {
        for (var i = 0, ien = context.length; i < ien; i++) {
          ctxSettings(context[i]);
        }
      } else {
        ctxSettings(context);
      }

      // Remove duplicates
      this.context = _unique(settings);

      // Initial data
      if (data) {
        $.merge(this, data);
      }

      // selector
      this.selector = {
        rows: null,
        cols: null,
        opts: null
      };

      _Api.extend(this, this, __apiStruct);
    };

    DataTable.Api = _Api;

    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
    // isPlainObject.
    $.extend(_Api.prototype, {
      any: function() {
        return this.count() !== 0;
      },


      concat: __arrayProto.concat,


      context: [], // array of table settings objects


      count: function() {
        return this.flatten().length;
      },


      each: function(fn) {
        for (var i = 0, ien = this.length; i < ien; i++) {
          fn.call(this, this[i], i, this);
        }

        return this;
      },


      eq: function(idx) {
        var ctx = this.context;

        return ctx.length > idx ?
          new _Api(ctx[idx], this[idx]) :
          null;
      },


      filter: function(fn) {
        var a = [];

        if (__arrayProto.filter) {
          a = __arrayProto.filter.call(this, fn, this);
        } else {
          // Compatibility for browsers without EMCA-252-5 (JS 1.6)
          for (var i = 0, ien = this.length; i < ien; i++) {
            if (fn.call(this, this[i], i, this)) {
              a.push(this[i]);
            }
          }
        }

        return new _Api(this.context, a);
      },


      flatten: function() {
        var a = [];
        return new _Api(this.context, a.concat.apply(a, this.toArray()));
      },


      join: __arrayProto.join,


      indexOf: __arrayProto.indexOf || function(obj, start) {
        for (var i = (start || 0), ien = this.length; i < ien; i++) {
          if (this[i] === obj) {
            return i;
          }
        }
        return -1;
      },

      iterator: function(flatten, type, fn, alwaysNew) {
        var
          a = [],
          ret,
          i, ien, j, jen,
          context = this.context,
          rows, items, item,
          selector = this.selector;

        // Argument shifting
        if (typeof flatten === 'string') {
          alwaysNew = fn;
          fn = type;
          type = flatten;
          flatten = false;
        }

        for (i = 0, ien = context.length; i < ien; i++) {
          var apiInst = new _Api(context[i]);

          if (type === 'table') {
            ret = fn.call(apiInst, context[i], i);

            if (ret !== undefined) {
              a.push(ret);
            }
          } else if (type === 'columns' || type === 'rows') {
            // this has same length as context - one entry for each table
            ret = fn.call(apiInst, context[i], this[i], i);

            if (ret !== undefined) {
              a.push(ret);
            }
          } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
            // columns and rows share the same structure.
            // 'this' is an array of column indexes for each context
            items = this[i];

            if (type === 'column-rows') {
              rows = _selector_row_indexes(context[i], selector.opts);
            }

            for (j = 0, jen = items.length; j < jen; j++) {
              item = items[j];

              if (type === 'cell') {
                ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
              } else {
                ret = fn.call(apiInst, context[i], item, i, j, rows);
              }

              if (ret !== undefined) {
                a.push(ret);
              }
            }
          }
        }

        if (a.length || alwaysNew) {
          var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
          var apiSelector = api.selector;
          apiSelector.rows = selector.rows;
          apiSelector.cols = selector.cols;
          apiSelector.opts = selector.opts;
          return api;
        }
        return this;
      },


      lastIndexOf: __arrayProto.lastIndexOf || function(obj, start) {
        // Bit cheeky...
        return this.indexOf.apply(this.toArray.reverse(), arguments);
      },


      length: 0,


      map: function(fn) {
        var a = [];

        if (__arrayProto.map) {
          a = __arrayProto.map.call(this, fn, this);
        } else {
          // Compatibility for browsers without EMCA-252-5 (JS 1.6)
          for (var i = 0, ien = this.length; i < ien; i++) {
            a.push(fn.call(this, this[i], i));
          }
        }

        return new _Api(this.context, a);
      },


      pluck: function(prop) {
        return this.map(function(el) {
          return el[prop];
        });
      },

      pop: __arrayProto.pop,


      push: __arrayProto.push,


      // Does not return an API instance
      reduce: __arrayProto.reduce || function(fn, init) {
        return _fnReduce(this, fn, init, 0, this.length, 1);
      },


      reduceRight: __arrayProto.reduceRight || function(fn, init) {
        return _fnReduce(this, fn, init, this.length - 1, -1, -1);
      },


      reverse: __arrayProto.reverse,


      // Object with rows, columns and opts
      selector: null,


      shift: __arrayProto.shift,


      sort: __arrayProto.sort, // ? name - order?


      splice: __arrayProto.splice,


      toArray: function() {
        return __arrayProto.slice.call(this);
      },


      to$: function() {
        return $(this);
      },


      toJQuery: function() {
        return $(this);
      },


      unique: function() {
        return new _Api(this.context, _unique(this));
      },


      unshift: __arrayProto.unshift
    });


    _Api.extend = function(scope, obj, ext) {
      // Only extend API instances and static properties of the API
      if (!ext.length || !obj || (!(obj instanceof _Api) && !obj.__dt_wrapper)) {
        return;
      }

      var
        i, ien,
        j, jen,
        struct, inner,
        methodScoping = function(scope, fn, struc) {
          return function() {
            var ret = fn.apply(scope, arguments);

            // Method extension
            _Api.extend(ret, ret, struc.methodExt);
            return ret;
          };
        };

      for (i = 0, ien = ext.length; i < ien; i++) {
        struct = ext[i];

        // Value
        obj[struct.name] = typeof struct.val === 'function' ?
          methodScoping(scope, struct.val, struct) :
          $.isPlainObject(struct.val) ? {} :
          struct.val;

        obj[struct.name].__dt_wrapper = true;

        // Property extension
        _Api.extend(scope, obj[struct.name], struct.propExt);
      }
    };


    // @todo - Is there need for an augment function?
    // _Api.augment = function ( inst, name )
    // {
    //  // Find src object in the structure from the name
    //  var parts = name.split('.');

    //  _Api.extend( inst, obj );
    // };


    //     [
    //       {
    //         name:      'data'                -- string   - Property name
    //         val:       function () {},       -- function - Api method (or undefined if just an object
    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
    //       },
    //       {
    //         name:     'row'
    //         val:       {},
    //         methodExt: [ ... ],
    //         propExt:   [
    //           {
    //             name:      'data'
    //             val:       function () {},
    //             methodExt: [ ... ],
    //             propExt:   [ ... ]
    //           },
    //           ...
    //         ]
    //       }
    //     ]

    _Api.register = _api_register = function(name, val) {
      if ($.isArray(name)) {
        for (var j = 0, jen = name.length; j < jen; j++) {
          _Api.register(name[j], val);
        }
        return;
      }

      var
        i, ien,
        heir = name.split('.'),
        struct = __apiStruct,
        key, method;

      var find = function(src, name) {
        for (var i = 0, ien = src.length; i < ien; i++) {
          if (src[i].name === name) {
            return src[i];
          }
        }
        return null;
      };

      for (i = 0, ien = heir.length; i < ien; i++) {
        method = heir[i].indexOf('()') !== -1;
        key = method ?
          heir[i].replace('()', '') :
          heir[i];

        var src = find(struct, key);
        if (!src) {
          src = {
            name: key,
            val: {},
            methodExt: [],
            propExt: []
          };
          struct.push(src);
        }

        if (i === ien - 1) {
          src.val = val;
        } else {
          struct = method ?
            src.methodExt :
            src.propExt;
        }
      }
    };


    _Api.registerPlural = _api_registerPlural = function(pluralName, singularName, val) {
      _Api.register(pluralName, val);

      _Api.register(singularName, function() {
        var ret = val.apply(this, arguments);

        if (ret === this) {
          // Returned item is the API instance that was passed in, return it
          return this;
        } else if (ret instanceof _Api) {
          // New API instance returned, want the value from the first item
          // in the returned array for the singular result.
          return ret.length ?
            $.isArray(ret[0]) ?
            new _Api(ret.context, ret[0]) : // Array results are 'enhanced'
            ret[0] :
            undefined;
        }

        // Non-API return - just fire it back
        return ret;
      });
    };


    /**
     * Selector for HTML tables. Apply the given selector to the give array of
     * DataTables settings objects.
     *
     * @param {string|integer} [selector] jQuery selector string or integer
     * @param  {array} Array of DataTables settings objects to be filtered
     * @return {array}
     * @ignore
     */
    var __table_selector = function(selector, a) {
      // Integer is used to pick out a table by index
      if (typeof selector === 'number') {
        return [a[selector]];
      }

      // Perform a jQuery selector on the table nodes
      var nodes = $.map(a, function(el, i) {
        return el.nTable;
      });

      return $(nodes)
        .filter(selector)
        .map(function(i) {
          // Need to translate back from the table node to the settings
          var idx = $.inArray(this, nodes);
          return a[idx];
        })
        .toArray();
    };



    /**
     * Context selector for the API's context (i.e. the tables the API instance
     * refers to.
     *
     * @name    DataTable.Api#tables
     * @param {string|integer} [selector] Selector to pick which tables the iterator
     *   should operate on. If not given, all tables in the current context are
     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
     *   select multiple tables or as an integer to select a single table.
     * @returns {DataTable.Api} Returns a new API instance if a selector is given.
     */
    _api_register('tables()', function(selector) {
      // A new instance is created if there was a selector specified
      return selector ?
        new _Api(__table_selector(selector, this.context)) :
        this;
    });


    _api_register('table()', function(selector) {
      var tables = this.tables(selector);
      var ctx = tables.context;

      // Truncate to the first matched table
      return ctx.length ?
        new _Api(ctx[0]) :
        tables;
    });


    _api_registerPlural('tables().nodes()', 'table().node()', function() {
      return this.iterator('table', function(ctx) {
        return ctx.nTable;
      }, 1);
    });


    _api_registerPlural('tables().body()', 'table().body()', function() {
      return this.iterator('table', function(ctx) {
        return ctx.nTBody;
      }, 1);
    });


    _api_registerPlural('tables().header()', 'table().header()', function() {
      return this.iterator('table', function(ctx) {
        return ctx.nTHead;
      }, 1);
    });


    _api_registerPlural('tables().footer()', 'table().footer()', function() {
      return this.iterator('table', function(ctx) {
        return ctx.nTFoot;
      }, 1);
    });


    _api_registerPlural('tables().containers()', 'table().container()', function() {
      return this.iterator('table', function(ctx) {
        return ctx.nTableWrapper;
      }, 1);
    });



    /**
     * Redraw the tables in the current context.
     */
    _api_register('draw()', function(paging) {
      return this.iterator('table', function(settings) {
        if (paging === 'page') {
          _fnDraw(settings);
        } else {
          if (typeof paging === 'string') {
            paging = paging === 'full-hold' ?
              false :
              true;
          }

          _fnReDraw(settings, paging === false);
        }
      });
    });



    /**
     * Get the current page index.
     *
     * @return {integer} Current page index (zero based)
     */
    /**
     * Set the current page.
     *
     * Note that if you attempt to show a page which does not exist, DataTables will
     * not throw an error, but rather reset the paging.
     *
     * @param {integer|string} action The paging action to take. This can be one of:
     *  * `integer` - The page index to jump to
     *  * `string` - An action to take:
     *    * `first` - Jump to first page.
     *    * `next` - Jump to the next page
     *    * `previous` - Jump to previous page
     *    * `last` - Jump to the last page.
     * @returns {DataTables.Api} this
     */
    _api_register('page()', function(action) {
      if (action === undefined) {
        return this.page.info().page; // not an expensive call
      }

      // else, have an action to take on all tables
      return this.iterator('table', function(settings) {
        _fnPageChange(settings, action);
      });
    });


    /**
     * Paging information for the first table in the current context.
     *
     * If you require paging information for another table, use the `table()` method
     * with a suitable selector.
     *
     * @return {object} Object with the following properties set:
     *  * `page` - Current page index (zero based - i.e. the first page is `0`)
     *  * `pages` - Total number of pages
     *  * `start` - Display index for the first record shown on the current page
     *  * `end` - Display index for the last record shown on the current page
     *  * `length` - Display length (number of records). Note that generally `start
     *    + length = end`, but this is not always true, for example if there are
     *    only 2 records to show on the final page, with a length of 10.
     *  * `recordsTotal` - Full data set length
     *  * `recordsDisplay` - Data set length once the current filtering criterion
     *    are applied.
     */
    _api_register('page.info()', function(action) {
      if (this.context.length === 0) {
        return undefined;
      }

      var
        settings = this.context[0],
        start = settings._iDisplayStart,
        len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
        visRecords = settings.fnRecordsDisplay(),
        all = len === -1;

      return {
        "page": all ? 0 : Math.floor(start / len),
        "pages": all ? 1 : Math.ceil(visRecords / len),
        "start": start,
        "end": settings.fnDisplayEnd(),
        "length": len,
        "recordsTotal": settings.fnRecordsTotal(),
        "recordsDisplay": visRecords,
        "serverSide": _fnDataSource(settings) === 'ssp'
      };
    });


    /**
     * Get the current page length.
     *
     * @return {integer} Current page length. Note `-1` indicates that all records
     *   are to be shown.
     */
    /**
     * Set the current page length.
     *
     * @param {integer} Page length to set. Use `-1` to show all records.
     * @returns {DataTables.Api} this
     */
    _api_register('page.len()', function(len) {
      // Note that we can't call this function 'length()' because `length`
      // is a Javascript property of functions which defines how many arguments
      // the function expects.
      if (len === undefined) {
        return this.context.length !== 0 ?
          this.context[0]._iDisplayLength :
          undefined;
      }

      // else, set the page length
      return this.iterator('table', function(settings) {
        _fnLengthChange(settings, len);
      });
    });



    var __reload = function(settings, holdPosition, callback) {
      // Use the draw event to trigger a callback
      if (callback) {
        var api = new _Api(settings);

        api.one('draw', function() {
          callback(api.ajax.json());
        });
      }

      if (_fnDataSource(settings) == 'ssp') {
        _fnReDraw(settings, holdPosition);
      } else {
        _fnProcessingDisplay(settings, true);

        // Cancel an existing request
        var xhr = settings.jqXHR;
        if (xhr && xhr.readyState !== 4) {
          xhr.abort();
        }

        // Trigger xhr
        _fnBuildAjax(settings, [], function(json) {
          _fnClearTable(settings);

          var data = _fnAjaxDataSrc(settings, json);
          for (var i = 0, ien = data.length; i < ien; i++) {
            _fnAddData(settings, data[i]);
          }

          _fnReDraw(settings, holdPosition);
          _fnProcessingDisplay(settings, false);
        });
      }
    };


    /**
     * Get the JSON response from the last Ajax request that DataTables made to the
     * server. Note that this returns the JSON from the first table in the current
     * context.
     *
     * @return {object} JSON received from the server.
     */
    _api_register('ajax.json()', function() {
      var ctx = this.context;

      if (ctx.length > 0) {
        return ctx[0].json;
      }

      // else return undefined;
    });


    /**
     * Get the data submitted in the last Ajax request
     */
    _api_register('ajax.params()', function() {
      var ctx = this.context;

      if (ctx.length > 0) {
        return ctx[0].oAjaxData;
      }

      // else return undefined;
    });


    /**
     * Reload tables from the Ajax data source. Note that this function will
     * automatically re-draw the table when the remote data has been loaded.
     *
     * @param {boolean} [reset=true] Reset (default) or hold the current paging
     *   position. A full re-sort and re-filter is performed when this method is
     *   called, which is why the pagination reset is the default action.
     * @returns {DataTables.Api} this
     */
    _api_register('ajax.reload()', function(callback, resetPaging) {
      return this.iterator('table', function(settings) {
        __reload(settings, resetPaging === false, callback);
      });
    });


    /**
     * Get the current Ajax URL. Note that this returns the URL from the first
     * table in the current context.
     *
     * @return {string} Current Ajax source URL
     */
    /**
     * Set the Ajax URL. Note that this will set the URL for all tables in the
     * current context.
     *
     * @param {string} url URL to set.
     * @returns {DataTables.Api} this
     */
    _api_register('ajax.url()', function(url) {
      var ctx = this.context;

      if (url === undefined) {
        // get
        if (ctx.length === 0) {
          return undefined;
        }
        ctx = ctx[0];

        return ctx.ajax ?
          $.isPlainObject(ctx.ajax) ?
          ctx.ajax.url :
          ctx.ajax :
          ctx.sAjaxSource;
      }

      // set
      return this.iterator('table', function(settings) {
        if ($.isPlainObject(settings.ajax)) {
          settings.ajax.url = url;
        } else {
          settings.ajax = url;
        }
        // No need to consider sAjaxSource here since DataTables gives priority
        // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
        // value of `sAjaxSource` redundant.
      });
    });


    /**
     * Load data from the newly set Ajax URL. Note that this method is only
     * available when `ajax.url()` is used to set a URL. Additionally, this method
     * has the same effect as calling `ajax.reload()` but is provided for
     * convenience when setting a new URL. Like `ajax.reload()` it will
     * automatically redraw the table once the remote data has been loaded.
     *
     * @returns {DataTables.Api} this
     */
    _api_register('ajax.url().load()', function(callback, resetPaging) {
      // Same as a reload, but makes sense to present it for easy access after a
      // url change
      return this.iterator('table', function(ctx) {
        __reload(ctx, resetPaging === false, callback);
      });
    });



    var _selector_run = function(type, selector, selectFn, settings, opts) {
      var
        out = [],
        res,
        a, i, ien, j, jen,
        selectorType = typeof selector;

      // Can't just check for isArray here, as an API or jQuery instance might be
      // given with their array like look
      if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
        selector = [selector];
      }

      for (i = 0, ien = selector.length; i < ien; i++) {
        a = selector[i] && selector[i].split ?
          selector[i].split(',') :
          [selector[i]];

        for (j = 0, jen = a.length; j < jen; j++) {
          res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

          if (res && res.length) {
            out = out.concat(res);
          }
        }
      }

      // selector extensions
      var ext = _ext.selector[type];
      if (ext.length) {
        for (i = 0, ien = ext.length; i < ien; i++) {
          out = ext[i](settings, opts, out);
        }
      }

      return _unique(out);
    };


    var _selector_opts = function(opts) {
      if (!opts) {
        opts = {};
      }

      // Backwards compatibility for 1.9- which used the terminology filter rather
      // than search
      if (opts.filter && opts.search === undefined) {
        opts.search = opts.filter;
      }

      return $.extend({
        search: 'none',
        order: 'current',
        page: 'all'
      }, opts);
    };


    var _selector_first = function(inst) {
      // Reduce the API instance to the first item found
      for (var i = 0, ien = inst.length; i < ien; i++) {
        if (inst[i].length > 0) {
          // Assign the first element to the first item in the instance
          // and truncate the instance and context
          inst[0] = inst[i];
          inst[0].length = 1;
          inst.length = 1;
          inst.context = [inst.context[i]];

          return inst;
        }
      }

      // Not found - return an empty instance
      inst.length = 0;
      return inst;
    };


    var _selector_row_indexes = function(settings, opts) {
      var
        i, ien, tmp, a = [],
        displayFiltered = settings.aiDisplay,
        displayMaster = settings.aiDisplayMaster;

      var
        search = opts.search, // none, applied, removed
        order = opts.order, // applied, current, index (original - compatibility with 1.9)
        page = opts.page; // all, current

      if (_fnDataSource(settings) == 'ssp') {
        // In server-side processing mode, most options are irrelevant since
        // rows not shown don't exist and the index order is the applied order
        // Removed is a special case - for consistency just return an empty
        // array
        return search === 'removed' ?
          [] :
          _range(0, displayMaster.length);
      } else if (page == 'current') {
        // Current page implies that order=current and fitler=applied, since it is
        // fairly senseless otherwise, regardless of what order and search actually
        // are
        for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
          a.push(displayFiltered[i]);
        }
      } else if (order == 'current' || order == 'applied') {
        a = search == 'none' ?
          displayMaster.slice() : // no search
          search == 'applied' ?
          displayFiltered.slice() : // applied search
          $.map(displayMaster, function(el, i) { // removed search
            return $.inArray(el, displayFiltered) === -1 ? el : null;
          });
      } else if (order == 'index' || order == 'original') {
        for (i = 0, ien = settings.aoData.length; i < ien; i++) {
          if (search == 'none') {
            a.push(i);
          } else { // applied | removed
            tmp = $.inArray(i, displayFiltered);

            if ((tmp === -1 && search == 'removed') ||
              (tmp >= 0 && search == 'applied')) {
              a.push(i);
            }
          }
        }
      }

      return a;
    };


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Rows
     *
     * {}          - no selector - use all available rows
     * {integer}   - row aoData index
     * {node}      - TR node
     * {string}    - jQuery selector to apply to the TR elements
     * {array}     - jQuery array of nodes, or simply an array of TR nodes
     *
     */


    var __row_selector = function(settings, selector, opts) {
      var run = function(sel) {
        var selInt = _intVal(sel);
        var i, ien;

        // Short cut - selector is a number and no options provided (default is
        // all records, so no need to check if the index is in there, since it
        // must be - dev error if the index doesn't exist).
        if (selInt !== null && !opts) {
          return [selInt];
        }

        var rows = _selector_row_indexes(settings, opts);

        if (selInt !== null && $.inArray(selInt, rows) !== -1) {
          // Selector - integer
          return [selInt];
        } else if (!sel) {
          // Selector - none
          return rows;
        }

        // Selector - function
        if (typeof sel === 'function') {
          return $.map(rows, function(idx) {
            var row = settings.aoData[idx];
            return sel(idx, row._aData, row.nTr) ? idx : null;
          });
        }

        // Get nodes in the order from the `rows` array with null values removed
        var nodes = _removeEmpty(
          _pluck_order(settings.aoData, rows, 'nTr')
        );

        // Selector - node
        if (sel.nodeName) {
          if ($.inArray(sel, nodes) !== -1) {
            return [sel._DT_RowIndex]; // sel is a TR node that is in the table
            // and DataTables adds a prop for fast lookup
          }
        }

        // ID selector. Want to always be able to select rows by id, regardless
        // of if the tr element has been created or not, so can't rely upon
        // jQuery here - hence a custom implementation. This does not match
        // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
        // but to select it using a CSS selector engine (like Sizzle or
        // querySelect) it would need to need to be escaped for some characters.
        // DataTables simplifies this for row selectors since you can select
        // only a row. A # indicates an id any anything that follows is the id -
        // unescaped.
        if (typeof sel === 'string' && sel.charAt(0) === '#') {
          // get row index from id
          var rowObj = settings.aIds[sel.replace(/^#/, '')];
          if (rowObj !== undefined) {
            return [rowObj.idx];
          }

          // need to fall through to jQuery in case there is DOM id that
          // matches
        }

        // Selector - jQuery selector string, array of nodes or jQuery object/
        // As jQuery's .filter() allows jQuery objects to be passed in filter,
        // it also allows arrays, so this will cope with all three options
        return $(nodes)
          .filter(sel)
          .map(function() {
            return this._DT_RowIndex;
          })
          .toArray();
      };

      return _selector_run('row', selector, run, settings, opts);
    };


    _api_register('rows()', function(selector, opts) {
      // argument shifting
      if (selector === undefined) {
        selector = '';
      } else if ($.isPlainObject(selector)) {
        opts = selector;
        selector = '';
      }

      opts = _selector_opts(opts);

      var inst = this.iterator('table', function(settings) {
        return __row_selector(settings, selector, opts);
      }, 1);

      // Want argument shifting here and in __row_selector?
      inst.selector.rows = selector;
      inst.selector.opts = opts;

      return inst;
    });

    _api_register('rows().nodes()', function() {
      return this.iterator('row', function(settings, row) {
        return settings.aoData[row].nTr || undefined;
      }, 1);
    });

    _api_register('rows().data()', function() {
      return this.iterator(true, 'rows', function(settings, rows) {
        return _pluck_order(settings.aoData, rows, '_aData');
      }, 1);
    });

    _api_registerPlural('rows().cache()', 'row().cache()', function(type) {
      return this.iterator('row', function(settings, row) {
        var r = settings.aoData[row];
        return type === 'search' ? r._aFilterData : r._aSortData;
      }, 1);
    });

    _api_registerPlural('rows().invalidate()', 'row().invalidate()', function(src) {
      return this.iterator('row', function(settings, row) {
        _fnInvalidate(settings, row, src);
      });
    });

    _api_registerPlural('rows().indexes()', 'row().index()', function() {
      return this.iterator('row', function(settings, row) {
        return row;
      }, 1);
    });

    _api_registerPlural('rows().ids()', 'row().id()', function(hash) {
      var a = [];
      var context = this.context;

      // `iterator` will drop undefined values, but in this case we want them
      for (var i = 0, ien = context.length; i < ien; i++) {
        for (var j = 0, jen = this[i].length; j < jen; j++) {
          var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
          a.push((hash === true ? '#' : '') + id);
        }
      }

      return new _Api(context, a);
    });

    _api_registerPlural('rows().remove()', 'row().remove()', function() {
      var that = this;

      this.iterator('row', function(settings, row, thatIdx) {
        var data = settings.aoData;
        var rowData = data[row];
        var i, ien, j, jen;
        var loopRow, loopCells;

        data.splice(row, 1);

        // Update the cached indexes
        for (i = 0, ien = data.length; i < ien; i++) {
          loopRow = data[i];
          loopCells = loopRow.anCells;

          // Rows
          if (loopRow.nTr !== null) {
            loopRow.nTr._DT_RowIndex = i;
          }

          // Cells
          if (loopCells !== null) {
            for (j = 0, jen = loopCells.length; j < jen; j++) {
              loopCells[j]._DT_CellIndex.row = i;
            }
          }
        }

        // Delete from the display arrays
        _fnDeleteIndex(settings.aiDisplayMaster, row);
        _fnDeleteIndex(settings.aiDisplay, row);
        _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

        // Check for an 'overflow' they case for displaying the table
        _fnLengthOverflow(settings);

        // Remove the row's ID reference if there is one
        var id = settings.rowIdFn(rowData._aData);
        if (id !== undefined) {
          delete settings.aIds[id];
        }
      });

      this.iterator('table', function(settings) {
        for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
          settings.aoData[i].idx = i;
        }
      });

      return this;
    });


    _api_register('rows.add()', function(rows) {
      var newRows = this.iterator('table', function(settings) {
        var row, i, ien;
        var out = [];

        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];

          if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
            out.push(_fnAddTr(settings, row)[0]);
          } else {
            out.push(_fnAddData(settings, row));
          }
        }

        return out;
      }, 1);

      // Return an Api.rows() extended instance, so rows().nodes() etc can be used
      var modRows = this.rows(-1);
      modRows.pop();
      $.merge(modRows, newRows);

      return modRows;
    });



    /**
     *
     */
    _api_register('row()', function(selector, opts) {
      return _selector_first(this.rows(selector, opts));
    });


    _api_register('row().data()', function(data) {
      var ctx = this.context;

      if (data === undefined) {
        // Get
        return ctx.length && this.length ?
          ctx[0].aoData[this[0]]._aData :
          undefined;
      }

      // Set
      ctx[0].aoData[this[0]]._aData = data;

      // Automatically invalidate
      _fnInvalidate(ctx[0], this[0], 'data');

      return this;
    });


    _api_register('row().node()', function() {
      var ctx = this.context;

      return ctx.length && this.length ?
        ctx[0].aoData[this[0]].nTr || null :
        null;
    });


    _api_register('row.add()', function(row) {
      // Allow a jQuery object to be passed in - only a single row is added from
      // it though - the first element in the set
      if (row instanceof $ && row.length) {
        row = row[0];
      }

      var rows = this.iterator('table', function(settings) {
        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
          return _fnAddTr(settings, row)[0];
        }
        return _fnAddData(settings, row);
      });

      // Return an Api.rows() extended instance, with the newly added row selected
      return this.row(rows[0]);
    });



    var __details_add = function(ctx, row, data, klass) {
      // Convert to array of TR elements
      var rows = [];
      var addRow = function(r, k) {
        // Recursion to allow for arrays of jQuery objects
        if ($.isArray(r) || r instanceof $) {
          for (var i = 0, ien = r.length; i < ien; i++) {
            addRow(r[i], k);
          }
          return;
        }

        // If we get a TR element, then just add it directly - up to the dev
        // to add the correct number of columns etc
        if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
          rows.push(r);
        } else {
          // Otherwise create a row with a wrapper
          var created = $('<tr><td/></tr>').addClass(k);
          $('td', created)
            .addClass(k)
            .html(r)[0].colSpan = _fnVisbleColumns(ctx);

          rows.push(created[0]);
        }
      };

      addRow(data, klass);

      if (row._details) {
        row._details.remove();
      }

      row._details = $(rows);

      // If the children were already shown, that state should be retained
      if (row._detailsShow) {
        row._details.insertAfter(row.nTr);
      }
    };


    var __details_remove = function(api, idx) {
      var ctx = api.context;

      if (ctx.length) {
        var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

        if (row && row._details) {
          row._details.remove();

          row._detailsShow = undefined;
          row._details = undefined;
        }
      }
    };


    var __details_display = function(api, show) {
      var ctx = api.context;

      if (ctx.length && api.length) {
        var row = ctx[0].aoData[api[0]];

        if (row._details) {
          row._detailsShow = show;

          if (show) {
            row._details.insertAfter(row.nTr);
          } else {
            row._details.detach();
          }

          __details_events(ctx[0]);
        }
      }
    };


    var __details_events = function(settings) {
      var api = new _Api(settings);
      var namespace = '.dt.DT_details';
      var drawEvent = 'draw' + namespace;
      var colvisEvent = 'column-visibility' + namespace;
      var destroyEvent = 'destroy' + namespace;
      var data = settings.aoData;

      api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

      if (_pluck(data, '_details').length > 0) {
        // On each draw, insert the required elements into the document
        api.on(drawEvent, function(e, ctx) {
          if (settings !== ctx) {
            return;
          }

          api.rows({
            page: 'current'
          }).eq(0).each(function(idx) {
            // Internal data grab
            var row = data[idx];

            if (row._detailsShow) {
              row._details.insertAfter(row.nTr);
            }
          });
        });

        // Column visibility change - update the colspan
        api.on(colvisEvent, function(e, ctx, idx, vis) {
          if (settings !== ctx) {
            return;
          }

          // Update the colspan for the details rows (note, only if it already has
          // a colspan)
          var row, visible = _fnVisbleColumns(ctx);

          for (var i = 0, ien = data.length; i < ien; i++) {
            row = data[i];

            if (row._details) {
              row._details.children('td[colspan]').attr('colspan', visible);
            }
          }
        });

        // Table destroyed - nuke any child rows
        api.on(destroyEvent, function(e, ctx) {
          if (settings !== ctx) {
            return;
          }

          for (var i = 0, ien = data.length; i < ien; i++) {
            if (data[i]._details) {
              __details_remove(api, i);
            }
          }
        });
      }
    };

    // Strings for the method names to help minification
    var _emp = '';
    var _child_obj = _emp + 'row().child';
    var _child_mth = _child_obj + '()';

    // data can be:
    //  tr
    //  string
    //  jQuery or array of any of the above
    _api_register(_child_mth, function(data, klass) {
      var ctx = this.context;

      if (data === undefined) {
        // get
        return ctx.length && this.length ?
          ctx[0].aoData[this[0]]._details :
          undefined;
      } else if (data === true) {
        // show
        this.child.show();
      } else if (data === false) {
        // remove
        __details_remove(this);
      } else if (ctx.length && this.length) {
        // set
        __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
      }

      return this;
    });


    _api_register([
      _child_obj + '.show()',
      _child_mth + '.show()' // only when `child()` was called with parameters (without
    ], function(show) { // it returns an object and this method is not executed)
      __details_display(this, true);
      return this;
    });


    _api_register([
      _child_obj + '.hide()',
      _child_mth + '.hide()' // only when `child()` was called with parameters (without
    ], function() { // it returns an object and this method is not executed)
      __details_display(this, false);
      return this;
    });


    _api_register([
      _child_obj + '.remove()',
      _child_mth + '.remove()' // only when `child()` was called with parameters (without
    ], function() { // it returns an object and this method is not executed)
      __details_remove(this);
      return this;
    });


    _api_register(_child_obj + '.isShown()', function() {
      var ctx = this.context;

      if (ctx.length && this.length) {
        // _detailsShown as false or undefined will fall through to return false
        return ctx[0].aoData[this[0]]._detailsShow || false;
      }
      return false;
    });



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Columns
     *
     * {integer}           - column index (>=0 count from left, <0 count from right)
     * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
     * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
     * "{string}:name"     - column name
     * "{string}"          - jQuery selector on column header nodes
     *
     */

    // can be an array of these items, comma separated list, or an array of comma
    // separated lists

    var __re_column_selector = /^(.+):(name|visIdx|visible)$/;


    // r1 and r2 are redundant - but it means that the parameters match for the
    // iterator callback in columns().data()
    var __columnData = function(settings, column, r1, r2, rows) {
      var a = [];
      for (var row = 0, ien = rows.length; row < ien; row++) {
        a.push(_fnGetCellData(settings, rows[row], column));
      }
      return a;
    };


    var __column_selector = function(settings, selector, opts) {
      var
        columns = settings.aoColumns,
        names = _pluck(columns, 'sName'),
        nodes = _pluck(columns, 'nTh');

      var run = function(s) {
        var selInt = _intVal(s);

        // Selector - all
        if (s === '') {
          return _range(columns.length);
        }

        // Selector - index
        if (selInt !== null) {
          return [selInt >= 0 ?
            selInt : // Count from left
            columns.length + selInt // Count from right (+ because its a negative value)
          ];
        }

        // Selector = function
        if (typeof s === 'function') {
          var rows = _selector_row_indexes(settings, opts);

          return $.map(columns, function(col, idx) {
            return s(
              idx,
              __columnData(settings, idx, 0, 0, rows),
              nodes[idx]
            ) ? idx : null;
          });
        }

        // jQuery or string selector
        var match = typeof s === 'string' ?
          s.match(__re_column_selector) :
          '';

        if (match) {
          switch (match[2]) {
            case 'visIdx':
            case 'visible':
              var idx = parseInt(match[1], 10);
              // Visible index given, convert to column index
              if (idx < 0) {
                // Counting from the right
                var visColumns = $.map(columns, function(col, i) {
                  return col.bVisible ? i : null;
                });
                return [visColumns[visColumns.length + idx]];
              }
              // Counting from the left
              return [_fnVisibleToColumnIndex(settings, idx)];

            case 'name':
              // match by name. `names` is column index complete and in order
              return $.map(names, function(name, i) {
                return name === match[1] ? i : null;
              });
          }
        } else {
          // jQuery selector on the TH elements for the columns
          return $(nodes)
            .filter(s)
            .map(function() {
              return $.inArray(this, nodes); // `nodes` is column index complete and in order
            })
            .toArray();
        }
      };

      return _selector_run('column', selector, run, settings, opts);
    };


    var __setColumnVis = function(settings, column, vis, recalc) {
      var
        cols = settings.aoColumns,
        col = cols[column],
        data = settings.aoData,
        row, cells, i, ien, tr;

      // Get
      if (vis === undefined) {
        return col.bVisible;
      }

      // Set
      // No change
      if (col.bVisible === vis) {
        return;
      }

      if (vis) {
        // Insert column
        // Need to decide if we should use appendChild or insertBefore
        var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

        for (i = 0, ien = data.length; i < ien; i++) {
          tr = data[i].nTr;
          cells = data[i].anCells;

          if (tr) {
            // insertBefore can act like appendChild if 2nd arg is null
            tr.insertBefore(cells[column], cells[insertBefore] || null);
          }
        }
      } else {
        // Remove column
        $(_pluck(settings.aoData, 'anCells', column)).detach();
      }

      // Common actions
      col.bVisible = vis;
      _fnDrawHead(settings, settings.aoHeader);
      _fnDrawHead(settings, settings.aoFooter);

      if (recalc === undefined || recalc) {
        // Automatically adjust column sizing
        _fnAdjustColumnSizing(settings);

        // Realign columns for scrolling
        if (settings.oScroll.sX || settings.oScroll.sY) {
          _fnScrollDraw(settings);
        }
      }

      _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, recalc]);

      _fnSaveState(settings);
    };


    _api_register('columns()', function(selector, opts) {
      // argument shifting
      if (selector === undefined) {
        selector = '';
      } else if ($.isPlainObject(selector)) {
        opts = selector;
        selector = '';
      }

      opts = _selector_opts(opts);

      var inst = this.iterator('table', function(settings) {
        return __column_selector(settings, selector, opts);
      }, 1);

      // Want argument shifting here and in _row_selector?
      inst.selector.cols = selector;
      inst.selector.opts = opts;

      return inst;
    });

    _api_registerPlural('columns().header()', 'column().header()', function(selector, opts) {
      return this.iterator('column', function(settings, column) {
        return settings.aoColumns[column].nTh;
      }, 1);
    });

    _api_registerPlural('columns().footer()', 'column().footer()', function(selector, opts) {
      return this.iterator('column', function(settings, column) {
        return settings.aoColumns[column].nTf;
      }, 1);
    });

    _api_registerPlural('columns().data()', 'column().data()', function() {
      return this.iterator('column-rows', __columnData, 1);
    });

    _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function() {
      return this.iterator('column', function(settings, column) {
        return settings.aoColumns[column].mData;
      }, 1);
    });

    _api_registerPlural('columns().cache()', 'column().cache()', function(type) {
      return this.iterator('column-rows', function(settings, column, i, j, rows) {
        return _pluck_order(settings.aoData, rows,
          type === 'search' ? '_aFilterData' : '_aSortData', column
        );
      }, 1);
    });

    _api_registerPlural('columns().nodes()', 'column().nodes()', function() {
      return this.iterator('column-rows', function(settings, column, i, j, rows) {
        return _pluck_order(settings.aoData, rows, 'anCells', column);
      }, 1);
    });

    _api_registerPlural('columns().visible()', 'column().visible()', function(vis, calc) {
      return this.iterator('column', function(settings, column) {
        if (vis === undefined) {
          return settings.aoColumns[column].bVisible;
        } // else
        __setColumnVis(settings, column, vis, calc);
      });
    });

    _api_registerPlural('columns().indexes()', 'column().index()', function(type) {
      return this.iterator('column', function(settings, column) {
        return type === 'visible' ?
          _fnColumnIndexToVisible(settings, column) :
          column;
      }, 1);
    });

    _api_register('columns.adjust()', function() {
      return this.iterator('table', function(settings) {
        _fnAdjustColumnSizing(settings);
      }, 1);
    });

    _api_register('column.index()', function(type, idx) {
      if (this.context.length !== 0) {
        var ctx = this.context[0];

        if (type === 'fromVisible' || type === 'toData') {
          return _fnVisibleToColumnIndex(ctx, idx);
        } else if (type === 'fromData' || type === 'toVisible') {
          return _fnColumnIndexToVisible(ctx, idx);
        }
      }
    });

    _api_register('column()', function(selector, opts) {
      return _selector_first(this.columns(selector, opts));
    });



    var __cell_selector = function(settings, selector, opts) {
      var data = settings.aoData;
      var rows = _selector_row_indexes(settings, opts);
      var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
      var allCells = $([].concat.apply([], cells));
      var row;
      var columns = settings.aoColumns.length;
      var a, i, ien, j, o, host;

      var run = function(s) {
        var fnSelector = typeof s === 'function';

        if (s === null || s === undefined || fnSelector) {
          // All cells and function selectors
          a = [];

          for (i = 0, ien = rows.length; i < ien; i++) {
            row = rows[i];

            for (j = 0; j < columns; j++) {
              o = {
                row: row,
                column: j
              };

              if (fnSelector) {
                // Selector - function
                host = data[row];

                if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                  a.push(o);
                }
              } else {
                // Selector - all
                a.push(o);
              }
            }
          }

          return a;
        }

        // Selector - index
        if ($.isPlainObject(s)) {
          return [s];
        }

        // Selector - jQuery filtered cells
        return allCells
          .filter(s)
          .map(function(i, el) {
            return { // use a new object, in case someone changes the values
              row: el._DT_CellIndex.row,
              column: el._DT_CellIndex.column
            };
          })
          .toArray();
      };

      return _selector_run('cell', selector, run, settings, opts);
    };



    _api_register('cells()', function(rowSelector, columnSelector, opts) {
      // Argument shifting
      if ($.isPlainObject(rowSelector)) {
        // Indexes
        if (rowSelector.row === undefined) {
          // Selector options in first parameter
          opts = rowSelector;
          rowSelector = null;
        } else {
          // Cell index objects in first parameter
          opts = columnSelector;
          columnSelector = null;
        }
      }
      if ($.isPlainObject(columnSelector)) {
        opts = columnSelector;
        columnSelector = null;
      }

      // Cell selector
      if (columnSelector === null || columnSelector === undefined) {
        return this.iterator('table', function(settings) {
          return __cell_selector(settings, rowSelector, _selector_opts(opts));
        });
      }

      // Row + column selector
      var columns = this.columns(columnSelector, opts);
      var rows = this.rows(rowSelector, opts);
      var a, i, ien, j, jen;

      var cells = this.iterator('table', function(settings, idx) {
        a = [];

        for (i = 0, ien = rows[idx].length; i < ien; i++) {
          for (j = 0, jen = columns[idx].length; j < jen; j++) {
            a.push({
              row: rows[idx][i],
              column: columns[idx][j]
            });
          }
        }

        return a;
      }, 1);

      $.extend(cells.selector, {
        cols: columnSelector,
        rows: rowSelector,
        opts: opts
      });

      return cells;
    });


    _api_registerPlural('cells().nodes()', 'cell().node()', function() {
      return this.iterator('cell', function(settings, row, column) {
        var cells = settings.aoData[row].anCells;
        return cells ?
          cells[column] :
          undefined;
      }, 1);
    });


    _api_register('cells().data()', function() {
      return this.iterator('cell', function(settings, row, column) {
        return _fnGetCellData(settings, row, column);
      }, 1);
    });


    _api_registerPlural('cells().cache()', 'cell().cache()', function(type) {
      type = type === 'search' ? '_aFilterData' : '_aSortData';

      return this.iterator('cell', function(settings, row, column) {
        return settings.aoData[row][type][column];
      }, 1);
    });


    _api_registerPlural('cells().render()', 'cell().render()', function(type) {
      return this.iterator('cell', function(settings, row, column) {
        return _fnGetCellData(settings, row, column, type);
      }, 1);
    });


    _api_registerPlural('cells().indexes()', 'cell().index()', function() {
      return this.iterator('cell', function(settings, row, column) {
        return {
          row: row,
          column: column,
          columnVisible: _fnColumnIndexToVisible(settings, column)
        };
      }, 1);
    });


    _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function(src) {
      return this.iterator('cell', function(settings, row, column) {
        _fnInvalidate(settings, row, src, column);
      });
    });



    _api_register('cell()', function(rowSelector, columnSelector, opts) {
      return _selector_first(this.cells(rowSelector, columnSelector, opts));
    });


    _api_register('cell().data()', function(data) {
      var ctx = this.context;
      var cell = this[0];

      if (data === undefined) {
        // Get
        return ctx.length && cell.length ?
          _fnGetCellData(ctx[0], cell[0].row, cell[0].column) :
          undefined;
      }

      // Set
      _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
      _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

      return this;
    });



    /**
     * Get current ordering (sorting) that has been applied to the table.
     *
     * @returns {array} 2D array containing the sorting information for the first
     *   table in the current context. Each element in the parent array represents
     *   a column being sorted upon (i.e. multi-sorting with two columns would have
     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
     *   the column index that the sorting condition applies to, the second is the
     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
     *   index of the sorting order from the `column.sorting` initialisation array.
     */
    /**
     * Set the ordering for the table.
     *
     * @param {integer} order Column index to sort upon.
     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
     * @returns {DataTables.Api} this
     */
    /**
     * Set the ordering for the table.
     *
     * @param {array} order 1D array of sorting information to be applied.
     * @param {array} [...] Optional additional sorting conditions
     * @returns {DataTables.Api} this
     */
    /**
     * Set the ordering for the table.
     *
     * @param {array} order 2D array of sorting information to be applied.
     * @returns {DataTables.Api} this
     */
    _api_register('order()', function(order, dir) {
      var ctx = this.context;

      if (order === undefined) {
        // get
        return ctx.length !== 0 ?
          ctx[0].aaSorting :
          undefined;
      }

      // set
      if (typeof order === 'number') {
        // Simple column / direction passed in
        order = [
          [order, dir]
        ];
      } else if (!$.isArray(order[0])) {
        // Arguments passed in (list of 1D arrays)
        order = Array.prototype.slice.call(arguments);
      }
      // otherwise a 2D array was passed in

      return this.iterator('table', function(settings) {
        settings.aaSorting = order.slice();
      });
    });


    /**
     * Attach a sort listener to an element for a given column
     *
     * @param {node|jQuery|string} node Identifier for the element(s) to attach the
     *   listener to. This can take the form of a single DOM node, a jQuery
     *   collection of nodes or a jQuery selector which will identify the node(s).
     * @param {integer} column the column that a click on this node will sort on
     * @param {function} [callback] callback function when sort is run
     * @returns {DataTables.Api} this
     */
    _api_register('order.listener()', function(node, column, callback) {
      return this.iterator('table', function(settings) {
        _fnSortAttachListener(settings, node, column, callback);
      });
    });


    _api_register('order.fixed()', function(set) {
      if (!set) {
        var ctx = this.context;
        var fixed = ctx.length ?
          ctx[0].aaSortingFixed :
          undefined;

        return $.isArray(fixed) ? {
            pre: fixed
          } :
          fixed;
      }

      return this.iterator('table', function(settings) {
        settings.aaSortingFixed = $.extend(true, {}, set);
      });
    });


    // Order by the selected column(s)
    _api_register([
      'columns().order()',
      'column().order()'
    ], function(dir) {
      var that = this;

      return this.iterator('table', function(settings, i) {
        var sort = [];

        $.each(that[i], function(j, col) {
          sort.push([col, dir]);
        });

        settings.aaSorting = sort;
      });
    });



    _api_register('search()', function(input, regex, smart, caseInsen) {
      var ctx = this.context;

      if (input === undefined) {
        // get
        return ctx.length !== 0 ?
          ctx[0].oPreviousSearch.sSearch :
          undefined;
      }

      // set
      return this.iterator('table', function(settings) {
        if (!settings.oFeatures.bFilter) {
          return;
        }

        _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
          "sSearch": input + "",
          "bRegex": regex === null ? false : regex,
          "bSmart": smart === null ? true : smart,
          "bCaseInsensitive": caseInsen === null ? true : caseInsen
        }), 1);
      });
    });


    _api_registerPlural(
      'columns().search()',
      'column().search()',
      function(input, regex, smart, caseInsen) {
        return this.iterator('column', function(settings, column) {
          var preSearch = settings.aoPreSearchCols;

          if (input === undefined) {
            // get
            return preSearch[column].sSearch;
          }

          // set
          if (!settings.oFeatures.bFilter) {
            return;
          }

          $.extend(preSearch[column], {
            "sSearch": input + "",
            "bRegex": regex === null ? false : regex,
            "bSmart": smart === null ? true : smart,
            "bCaseInsensitive": caseInsen === null ? true : caseInsen
          });

          _fnFilterComplete(settings, settings.oPreviousSearch, 1);
        });
      }
    );

    /*
     * State API methods
     */

    _api_register('state()', function() {
      return this.context.length ?
        this.context[0].oSavedState :
        null;
    });


    _api_register('state.clear()', function() {
      return this.iterator('table', function(settings) {
        // Save an empty object
        settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
      });
    });


    _api_register('state.loaded()', function() {
      return this.context.length ?
        this.context[0].oLoadedState :
        null;
    });


    _api_register('state.save()', function() {
      return this.iterator('table', function(settings) {
        _fnSaveState(settings);
      });
    });



    /**
     * Provide a common method for plug-ins to check the version of DataTables being
     * used, in order to ensure compatibility.
     *
     *  @param {string} version Version string to check for, in the format "X.Y.Z".
     *    Note that the formats "X" and "X.Y" are also acceptable.
     *  @returns {boolean} true if this version of DataTables is greater or equal to
     *    the required version, or false if this version of DataTales is not
     *    suitable
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
     */
    DataTable.versionCheck = DataTable.fnVersionCheck = function(version) {
      var aThis = DataTable.version.split('.');
      var aThat = version.split('.');
      var iThis, iThat;

      for (var i = 0, iLen = aThat.length; i < iLen; i++) {
        iThis = parseInt(aThis[i], 10) || 0;
        iThat = parseInt(aThat[i], 10) || 0;

        // Parts are the same, keep comparing
        if (iThis === iThat) {
          continue;
        }

        // Parts are different, return immediately
        return iThis > iThat;
      }

      return true;
    };


    /**
     * Check if a `<table>` node is a DataTable table already or not.
     *
     *  @param {node|jquery|string} table Table node, jQuery object or jQuery
     *      selector for the table to test. Note that if more than more than one
     *      table is passed on, only the first will be checked
     *  @returns {boolean} true the table given is a DataTable, or false otherwise
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
     *      $('#example').dataTable();
     *    }
     */
    DataTable.isDataTable = DataTable.fnIsDataTable = function(table) {
      var t = $(table).get(0);
      var is = false;

      $.each(DataTable.settings, function(i, o) {
        var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
        var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

        if (o.nTable === t || head === t || foot === t) {
          is = true;
        }
      });

      return is;
    };


    /**
     * Get all DataTable tables that have been initialised - optionally you can
     * select to get only currently visible tables.
     *
     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
     *    or visible tables only.
     *  @returns {array} Array of `table` nodes (not DataTable instances) which are
     *    DataTables
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    $.each( $.fn.dataTable.tables(true), function () {
     *      $(table).DataTable().columns.adjust();
     *    } );
     */
    DataTable.tables = DataTable.fnTables = function(visible) {
      var api = false;

      if ($.isPlainObject(visible)) {
        api = visible.api;
        visible = visible.visible;
      }

      var a = $.map(DataTable.settings, function(o) {
        if (!visible || (visible && $(o.nTable).is(':visible'))) {
          return o.nTable;
        }
      });

      return api ?
        new _Api(a) :
        a;
    };


    /**
     * DataTables utility methods
     * 
     * This namespace provides helper methods that DataTables uses internally to
     * create a DataTable, but which are not exclusively used only for DataTables.
     * These methods can be used by extension authors to save the duplication of
     * code.
     *
     *  @namespace
     */
    DataTable.util = {
      /**
       * Throttle the calls to a function. Arguments and context are maintained
       * for the throttled function.
       *
       * @param {function} fn Function to be called
       * @param {integer} freq Call frequency in mS
       * @return {function} Wrapped function
       */
      throttle: _fnThrottle,


      /**
       * Escape a string such that it can be used in a regular expression
       *
       *  @param {string} sVal string to escape
       *  @returns {string} escaped string
       */
      escapeRegex: _fnEscapeRegex
    };


    /**
     * Convert from camel case parameters to Hungarian notation. This is made public
     * for the extensions to provide the same ability as DataTables core to accept
     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
     * parameters.
     *
     *  @param {object} src The model object which holds all parameters that can be
     *    mapped.
     *  @param {object} user The object to convert from camel case to Hungarian.
     *  @param {boolean} force When set to `true`, properties which already have a
     *    Hungarian value in the `user` object will be overwritten. Otherwise they
     *    won't be.
     */
    DataTable.camelToHungarian = _fnCamelToHungarian;



    /**
     *
     */
    _api_register('$()', function(selector, opts) {
      var
        rows = this.rows(opts).nodes(), // Get all rows
        jqRows = $(rows);

      return $([].concat(
        jqRows.filter(selector).toArray(),
        jqRows.find(selector).toArray()
      ));
    });


    // jQuery functions to operate on the tables
    $.each(['on', 'one', 'off'], function(i, key) {
      _api_register(key + '()', function( /* event, handler */ ) {
        var args = Array.prototype.slice.call(arguments);

        // Add the `dt` namespace automatically if it isn't already present
        if (!args[0].match(/\.dt\b/)) {
          args[0] += '.dt';
        }

        var inst = $(this.tables().nodes());
        inst[key].apply(inst, args);
        return this;
      });
    });


    _api_register('clear()', function() {
      return this.iterator('table', function(settings) {
        _fnClearTable(settings);
      });
    });


    _api_register('settings()', function() {
      return new _Api(this.context, this.context);
    });


    _api_register('init()', function() {
      var ctx = this.context;
      return ctx.length ? ctx[0].oInit : null;
    });


    _api_register('data()', function() {
      return this.iterator('table', function(settings) {
        return _pluck(settings.aoData, '_aData');
      }).flatten();
    });


    _api_register('destroy()', function(remove) {
      remove = remove || false;

      return this.iterator('table', function(settings) {
        var orig = settings.nTableWrapper.parentNode;
        var classes = settings.oClasses;
        var table = settings.nTable;
        var tbody = settings.nTBody;
        var thead = settings.nTHead;
        var tfoot = settings.nTFoot;
        var jqTable = $(table);
        var jqTbody = $(tbody);
        var jqWrapper = $(settings.nTableWrapper);
        var rows = $.map(settings.aoData, function(r) {
          return r.nTr;
        });
        var i, ien;

        // Flag to note that the table is currently being destroyed - no action
        // should be taken
        settings.bDestroying = true;

        // Fire off the destroy callbacks for plug-ins etc
        _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

        // If not being removed from the document, make all columns visible
        if (!remove) {
          new _Api(settings).columns().visible(true);
        }

        // Blitz all `DT` namespaced events (these are internal events, the
        // lowercase, `dt` events are user subscribed and they are responsible
        // for removing them
        jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
        $(window).unbind('.DT-' + settings.sInstance);

        // When scrolling we had to break the table up - restore it
        if (table != thead.parentNode) {
          jqTable.children('thead').detach();
          jqTable.append(thead);
        }

        if (tfoot && table != tfoot.parentNode) {
          jqTable.children('tfoot').detach();
          jqTable.append(tfoot);
        }

        settings.aaSorting = [];
        settings.aaSortingFixed = [];
        _fnSortingClasses(settings);

        $(rows).removeClass(settings.asStripeClasses.join(' '));

        $('th, td', thead).removeClass(classes.sSortable + ' ' +
          classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone
        );

        if (settings.bJUI) {
          $('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
          $('th, td', thead).each(function() {
            var wrapper = $('div.' + classes.sSortJUIWrapper, this);
            $(this).append(wrapper.contents());
            wrapper.detach();
          });
        }

        // Add the TR elements back into the table in their original order
        jqTbody.children().detach();
        jqTbody.append(rows);

        // Remove the DataTables generated nodes, events and classes
        var removedMethod = remove ? 'remove' : 'detach';
        jqTable[removedMethod]();
        jqWrapper[removedMethod]();

        // If we need to reattach the table to the document
        if (!remove && orig) {
          // insertBefore acts like appendChild if !arg[1]
          orig.insertBefore(table, settings.nTableReinsertBefore);

          // Restore the width of the original table - was read from the style property,
          // so we can restore directly to that
          jqTable
            .css('width', settings.sDestroyWidth)
            .removeClass(classes.sTable);

          // If the were originally stripe classes - then we add them back here.
          // Note this is not fool proof (for example if not all rows had stripe
          // classes - but it's a good effort without getting carried away
          ien = settings.asDestroyStripes.length;

          if (ien) {
            jqTbody.children().each(function(i) {
              $(this).addClass(settings.asDestroyStripes[i % ien]);
            });
          }
        }

        /* Remove the settings object from the settings array */
        var idx = $.inArray(settings, DataTable.settings);
        if (idx !== -1) {
          DataTable.settings.splice(idx, 1);
        }
      });
    });


    // Add the `every()` method for rows, columns and cells in a compact form
    $.each(['column', 'row', 'cell'], function(i, type) {
      _api_register(type + 's().every()', function(fn) {
        var opts = this.selector.opts;
        var api = this;

        return this.iterator(type, function(settings, arg1, arg2, arg3, arg4) {
          // Rows and columns:
          //  arg1 - index
          //  arg2 - table counter
          //  arg3 - loop counter
          //  arg4 - undefined
          // Cells:
          //  arg1 - row index
          //  arg2 - column index
          //  arg3 - table counter
          //  arg4 - loop counter
          fn.call(
            api[type](
              arg1,
              type === 'cell' ? arg2 : opts,
              type === 'cell' ? opts : undefined
            ),
            arg1, arg2, arg3, arg4
          );
        });
      });
    });


    // i18n method for extensions to be able to use the language object from the
    // DataTable
    _api_register('i18n()', function(token, def, plural) {
      var ctx = this.context[0];
      var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

      if (resolved === undefined) {
        resolved = def;
      }

      if (plural !== undefined && $.isPlainObject(resolved)) {
        resolved = resolved[plural] !== undefined ?
          resolved[plural] :
          resolved._;
      }

      return resolved.replace('%d', plural); // nb: plural might be undefined,
    });

    /**
     * Version string for plug-ins to check compatibility. Allowed format is
     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
     * only for non-release builds. See http://semver.org/ for more information.
     *  @member
     *  @type string
     *  @default Version number
     */
    DataTable.version = "1.10.10";

    /**
     * Private data store, containing all of the settings objects that are
     * created for the tables on a given page.
     *
     * Note that the `DataTable.settings` object is aliased to
     * `jQuery.fn.dataTableExt` through which it may be accessed and
     * manipulated, or `jQuery.fn.dataTable.settings`.
     *  @member
     *  @type array
     *  @default []
     *  @private
     */
    DataTable.settings = [];

    /**
     * Object models container, for the various models that DataTables has
     * available to it. These models define the objects that are used to hold
     * the active state and configuration of the table.
     *  @namespace
     */
    DataTable.models = {};



    /**
     * Template object for the way in which DataTables holds information about
     * search information for the global filter and individual column filters.
     *  @namespace
     */
    DataTable.models.oSearch = {
      /**
       * Flag to indicate if the filtering should be case insensitive or not
       *  @type boolean
       *  @default true
       */
      "bCaseInsensitive": true,

      /**
       * Applied search term
       *  @type string
       *  @default <i>Empty string</i>
       */
      "sSearch": "",

      /**
       * Flag to indicate if the search term should be interpreted as a
       * regular expression (true) or not (false) and therefore and special
       * regex characters escaped.
       *  @type boolean
       *  @default false
       */
      "bRegex": false,

      /**
       * Flag to indicate if DataTables is to use its smart filtering or not.
       *  @type boolean
       *  @default true
       */
      "bSmart": true
    };



    /**
     * Template object for the way in which DataTables holds information about
     * each individual row. This is the object format used for the settings
     * aoData array.
     *  @namespace
     */
    DataTable.models.oRow = {
      /**
       * TR element for the row
       *  @type node
       *  @default null
       */
      "nTr": null,

      /**
       * Array of TD elements for each row. This is null until the row has been
       * created.
       *  @type array nodes
       *  @default []
       */
      "anCells": null,

      /**
       * Data object from the original data source for the row. This is either
       * an array if using the traditional form of DataTables, or an object if
       * using mData options. The exact type will depend on the passed in
       * data from the data source, or will be an array if using DOM a data
       * source.
       *  @type array|object
       *  @default []
       */
      "_aData": [],

      /**
       * Sorting data cache - this array is ostensibly the same length as the
       * number of columns (although each index is generated only as it is
       * needed), and holds the data that is used for sorting each column in the
       * row. We do this cache generation at the start of the sort in order that
       * the formatting of the sort data need be done only once for each cell
       * per sort. This array should not be read from or written to by anything
       * other than the master sorting methods.
       *  @type array
       *  @default null
       *  @private
       */
      "_aSortData": null,

      /**
       * Per cell filtering data cache. As per the sort data cache, used to
       * increase the performance of the filtering in DataTables
       *  @type array
       *  @default null
       *  @private
       */
      "_aFilterData": null,

      /**
       * Filtering data cache. This is the same as the cell filtering cache, but
       * in this case a string rather than an array. This is easily computed with
       * a join on `_aFilterData`, but is provided as a cache so the join isn't
       * needed on every search (memory traded for performance)
       *  @type array
       *  @default null
       *  @private
       */
      "_sFilterRow": null,

      /**
       * Cache of the class name that DataTables has applied to the row, so we
       * can quickly look at this variable rather than needing to do a DOM check
       * on className for the nTr property.
       *  @type string
       *  @default <i>Empty string</i>
       *  @private
       */
      "_sRowStripe": "",

      /**
       * Denote if the original data source was from the DOM, or the data source
       * object. This is used for invalidating data, so DataTables can
       * automatically read data from the original source, unless uninstructed
       * otherwise.
       *  @type string
       *  @default null
       *  @private
       */
      "src": null,

      /**
       * Index in the aoData array. This saves an indexOf lookup when we have the
       * object, but want to know the index
       *  @type integer
       *  @default -1
       *  @private
       */
      "idx": -1
    };


    /**
     * Template object for the column information object in DataTables. This object
     * is held in the settings aoColumns array and contains all the information that
     * DataTables needs about each individual column.
     *
     * Note that this object is related to {@link DataTable.defaults.column}
     * but this one is the internal data store for DataTables's cache of columns.
     * It should NOT be manipulated outside of DataTables. Any configuration should
     * be done through the initialisation options.
     *  @namespace
     */
    DataTable.models.oColumn = {
      /**
       * Column index. This could be worked out on-the-fly with $.inArray, but it
       * is faster to just hold it as a variable
       *  @type integer
       *  @default null
       */
      "idx": null,

      /**
       * A list of the columns that sorting should occur on when this column
       * is sorted. That this property is an array allows multi-column sorting
       * to be defined for a column (for example first name / last name columns
       * would benefit from this). The values are integers pointing to the
       * columns to be sorted on (typically it will be a single integer pointing
       * at itself, but that doesn't need to be the case).
       *  @type array
       */
      "aDataSort": null,

      /**
       * Define the sorting directions that are applied to the column, in sequence
       * as the column is repeatedly sorted upon - i.e. the first value is used
       * as the sorting direction when the column if first sorted (clicked on).
       * Sort it again (click again) and it will move on to the next index.
       * Repeat until loop.
       *  @type array
       */
      "asSorting": null,

      /**
       * Flag to indicate if the column is searchable, and thus should be included
       * in the filtering or not.
       *  @type boolean
       */
      "bSearchable": null,

      /**
       * Flag to indicate if the column is sortable or not.
       *  @type boolean
       */
      "bSortable": null,

      /**
       * Flag to indicate if the column is currently visible in the table or not
       *  @type boolean
       */
      "bVisible": null,

      /**
       * Store for manual type assignment using the `column.type` option. This
       * is held in store so we can manipulate the column's `sType` property.
       *  @type string
       *  @default null
       *  @private
       */
      "_sManualType": null,

      /**
       * Flag to indicate if HTML5 data attributes should be used as the data
       * source for filtering or sorting. True is either are.
       *  @type boolean
       *  @default false
       *  @private
       */
      "_bAttrSrc": false,

      /**
       * Developer definable function that is called whenever a cell is created (Ajax source,
       * etc) or processed for input (DOM source). This can be used as a compliment to mRender
       * allowing you to modify the DOM element (add background colour for example) when the
       * element is available.
       *  @type function
       *  @param {element} nTd The TD node that has been created
       *  @param {*} sData The Data for the cell
       *  @param {array|object} oData The data for the whole row
       *  @param {int} iRow The row index for the aoData data store
       *  @default null
       */
      "fnCreatedCell": null,

      /**
       * Function to get data from a cell in a column. You should <b>never</b>
       * access data directly through _aData internally in DataTables - always use
       * the method attached to this property. It allows mData to function as
       * required. This function is automatically assigned by the column
       * initialisation method
       *  @type function
       *  @param {array|object} oData The data array/object for the array
       *    (i.e. aoData[]._aData)
       *  @param {string} sSpecific The specific data type you want to get -
       *    'display', 'type' 'filter' 'sort'
       *  @returns {*} The data for the cell from the given row's data
       *  @default null
       */
      "fnGetData": null,

      /**
       * Function to set data for a cell in the column. You should <b>never</b>
       * set the data directly to _aData internally in DataTables - always use
       * this method. It allows mData to function as required. This function
       * is automatically assigned by the column initialisation method
       *  @type function
       *  @param {array|object} oData The data array/object for the array
       *    (i.e. aoData[]._aData)
       *  @param {*} sValue Value to set
       *  @default null
       */
      "fnSetData": null,

      /**
       * Property to read the value for the cells in the column from the data
       * source array / object. If null, then the default content is used, if a
       * function is given then the return from the function is used.
       *  @type function|int|string|null
       *  @default null
       */
      "mData": null,

      /**
       * Partner property to mData which is used (only when defined) to get
       * the data - i.e. it is basically the same as mData, but without the
       * 'set' option, and also the data fed to it is the result from mData.
       * This is the rendering method to match the data method of mData.
       *  @type function|int|string|null
       *  @default null
       */
      "mRender": null,

      /**
       * Unique header TH/TD element for this column - this is what the sorting
       * listener is attached to (if sorting is enabled.)
       *  @type node
       *  @default null
       */
      "nTh": null,

      /**
       * Unique footer TH/TD element for this column (if there is one). Not used
       * in DataTables as such, but can be used for plug-ins to reference the
       * footer for each column.
       *  @type node
       *  @default null
       */
      "nTf": null,

      /**
       * The class to apply to all TD elements in the table's TBODY for the column
       *  @type string
       *  @default null
       */
      "sClass": null,

      /**
       * When DataTables calculates the column widths to assign to each column,
       * it finds the longest string in each column and then constructs a
       * temporary table and reads the widths from that. The problem with this
       * is that "mmm" is much wider then "iiii", but the latter is a longer
       * string - thus the calculation can go wrong (doing it properly and putting
       * it into an DOM object and measuring that is horribly(!) slow). Thus as
       * a "work around" we provide this option. It will append its value to the
       * text that is found to be the longest string for the column - i.e. padding.
       *  @type string
       */
      "sContentPadding": null,

      /**
       * Allows a default value to be given for a column's data, and will be used
       * whenever a null data source is encountered (this can be because mData
       * is set to null, or because the data source itself is null).
       *  @type string
       *  @default null
       */
      "sDefaultContent": null,

      /**
       * Name for the column, allowing reference to the column by name as well as
       * by index (needs a lookup to work by name).
       *  @type string
       */
      "sName": null,

      /**
       * Custom sorting data type - defines which of the available plug-ins in
       * afnSortData the custom sorting will use - if any is defined.
       *  @type string
       *  @default std
       */
      "sSortDataType": 'std',

      /**
       * Class to be applied to the header element when sorting on this column
       *  @type string
       *  @default null
       */
      "sSortingClass": null,

      /**
       * Class to be applied to the header element when sorting on this column -
       * when jQuery UI theming is used.
       *  @type string
       *  @default null
       */
      "sSortingClassJUI": null,

      /**
       * Title of the column - what is seen in the TH element (nTh).
       *  @type string
       */
      "sTitle": null,

      /**
       * Column sorting and filtering type
       *  @type string
       *  @default null
       */
      "sType": null,

      /**
       * Width of the column
       *  @type string
       *  @default null
       */
      "sWidth": null,

      /**
       * Width of the column when it was first "encountered"
       *  @type string
       *  @default null
       */
      "sWidthOrig": null
    };


    /*
     * Developer note: The properties of the object below are given in Hungarian
     * notation, that was used as the interface for DataTables prior to v1.10, however
     * from v1.10 onwards the primary interface is camel case. In order to avoid
     * breaking backwards compatibility utterly with this change, the Hungarian
     * version is still, internally the primary interface, but is is not documented
     * - hence the @name tags in each doc comment. This allows a Javascript function
     * to create a map from Hungarian notation to camel case (going the other direction
     * would require each property to be listed, which would at around 3K to the size
     * of DataTables, while this method is about a 0.5K hit.
     *
     * Ultimately this does pave the way for Hungarian notation to be dropped
     * completely, but that is a massive amount of work and will break current
     * installs (therefore is on-hold until v2).
     */

    /**
     * Initialisation options that can be given to DataTables at initialisation
     * time.
     *  @namespace
     */
    DataTable.defaults = {
      /**
       * An array of data to use for the table, passed in at initialisation which
       * will be used in preference to any data which is already in the DOM. This is
       * particularly useful for constructing tables purely in Javascript, for
       * example with a custom Ajax call.
       *  @type array
       *  @default null
       *
       *  @dtopt Option
       *  @name DataTable.defaults.data
       *
       *  @example
       *    // Using a 2D array data source
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "data": [
       *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
       *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
       *        ],
       *        "columns": [
       *          { "title": "Engine" },
       *          { "title": "Browser" },
       *          { "title": "Platform" },
       *          { "title": "Version" },
       *          { "title": "Grade" }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using an array of objects as a data source (`data`)
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "data": [
       *          {
       *            "engine":   "Trident",
       *            "browser":  "Internet Explorer 4.0",
       *            "platform": "Win 95+",
       *            "version":  4,
       *            "grade":    "X"
       *          },
       *          {
       *            "engine":   "Trident",
       *            "browser":  "Internet Explorer 5.0",
       *            "platform": "Win 95+",
       *            "version":  5,
       *            "grade":    "C"
       *          }
       *        ],
       *        "columns": [
       *          { "title": "Engine",   "data": "engine" },
       *          { "title": "Browser",  "data": "browser" },
       *          { "title": "Platform", "data": "platform" },
       *          { "title": "Version",  "data": "version" },
       *          { "title": "Grade",    "data": "grade" }
       *        ]
       *      } );
       *    } );
       */
      "aaData": null,


      /**
       * If ordering is enabled, then DataTables will perform a first pass sort on
       * initialisation. You can define which column(s) the sort is performed
       * upon, and the sorting direction, with this variable. The `sorting` array
       * should contain an array for each column to be sorted initially containing
       * the column's index and a direction string ('asc' or 'desc').
       *  @type array
       *  @default [[0,'asc']]
       *
       *  @dtopt Option
       *  @name DataTable.defaults.order
       *
       *  @example
       *    // Sort by 3rd column first, and then 4th column
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "order": [[2,'asc'], [3,'desc']]
       *      } );
       *    } );
       *
       *    // No initial sorting
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "order": []
       *      } );
       *    } );
       */
      "aaSorting": [
        [0, 'asc']
      ],


      /**
       * This parameter is basically identical to the `sorting` parameter, but
       * cannot be overridden by user interaction with the table. What this means
       * is that you could have a column (visible or hidden) which the sorting
       * will always be forced on first - any sorting after that (from the user)
       * will then be performed as required. This can be useful for grouping rows
       * together.
       *  @type array
       *  @default null
       *
       *  @dtopt Option
       *  @name DataTable.defaults.orderFixed
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "orderFixed": [[0,'asc']]
       *      } );
       *    } )
       */
      "aaSortingFixed": [],


      /**
       * DataTables can be instructed to load data to display in the table from a
       * Ajax source. This option defines how that Ajax call is made and where to.
       *
       * The `ajax` property has three different modes of operation, depending on
       * how it is defined. These are:
       *
       * * `string` - Set the URL from where the data should be loaded from.
       * * `object` - Define properties for `jQuery.ajax`.
       * * `function` - Custom data get function
       *
       * `string`
       * --------
       *
       * As a string, the `ajax` property simply defines the URL from which
       * DataTables will load data.
       *
       * `object`
       * --------
       *
       * As an object, the parameters in the object are passed to
       * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
       * of the Ajax request. DataTables has a number of default parameters which
       * you can override using this option. Please refer to the jQuery
       * documentation for a full description of the options available, although
       * the following parameters provide additional options in DataTables or
       * require special consideration:
       *
       * * `data` - As with jQuery, `data` can be provided as an object, but it
       *   can also be used as a function to manipulate the data DataTables sends
       *   to the server. The function takes a single parameter, an object of
       *   parameters with the values that DataTables has readied for sending. An
       *   object may be returned which will be merged into the DataTables
       *   defaults, or you can add the items to the object that was passed in and
       *   not return anything from the function. This supersedes `fnServerParams`
       *   from DataTables 1.9-.
       *
       * * `dataSrc` - By default DataTables will look for the property `data` (or
       *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
       *   from an Ajax source or for server-side processing - this parameter
       *   allows that property to be changed. You can use Javascript dotted
       *   object notation to get a data source for multiple levels of nesting, or
       *   it my be used as a function. As a function it takes a single parameter,
       *   the JSON returned from the server, which can be manipulated as
       *   required, with the returned value being that used by DataTables as the
       *   data source for the table. This supersedes `sAjaxDataProp` from
       *   DataTables 1.9-.
       *
       * * `success` - Should not be overridden it is used internally in
       *   DataTables. To manipulate / transform the data returned by the server
       *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
       *
       * `function`
       * ----------
       *
       * As a function, making the Ajax call is left up to yourself allowing
       * complete control of the Ajax request. Indeed, if desired, a method other
       * than Ajax could be used to obtain the required data, such as Web storage
       * or an AIR database.
       *
       * The function is given four parameters and no return is required. The
       * parameters are:
       *
       * 1. _object_ - Data to send to the server
       * 2. _function_ - Callback function that must be executed when the required
       *    data has been obtained. That data should be passed into the callback
       *    as the only parameter
       * 3. _object_ - DataTables settings object for the table
       *
       * Note that this supersedes `fnServerData` from DataTables 1.9-.
       *
       *  @type string|object|function
       *  @default null
       *
       *  @dtopt Option
       *  @name DataTable.defaults.ajax
       *  @since 1.10.0
       *
       * @example
       *   // Get JSON data from a file via Ajax.
       *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
       *   $('#example').dataTable( {
       *     "ajax": "data.json"
       *   } );
       *
       * @example
       *   // Get JSON data from a file via Ajax, using `dataSrc` to change
       *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
       *   $('#example').dataTable( {
       *     "ajax": {
       *       "url": "data.json",
       *       "dataSrc": "tableData"
       *     }
       *   } );
       *
       * @example
       *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
       *   // from a plain array rather than an array in an object
       *   $('#example').dataTable( {
       *     "ajax": {
       *       "url": "data.json",
       *       "dataSrc": ""
       *     }
       *   } );
       *
       * @example
       *   // Manipulate the data returned from the server - add a link to data
       *   // (note this can, should, be done using `render` for the column - this
       *   // is just a simple example of how the data can be manipulated).
       *   $('#example').dataTable( {
       *     "ajax": {
       *       "url": "data.json",
       *       "dataSrc": function ( json ) {
       *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
       *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
       *         }
       *         return json;
       *       }
       *     }
       *   } );
       *
       * @example
       *   // Add data to the request
       *   $('#example').dataTable( {
       *     "ajax": {
       *       "url": "data.json",
       *       "data": function ( d ) {
       *         return {
       *           "extra_search": $('#extra').val()
       *         };
       *       }
       *     }
       *   } );
       *
       * @example
       *   // Send request as POST
       *   $('#example').dataTable( {
       *     "ajax": {
       *       "url": "data.json",
       *       "type": "POST"
       *     }
       *   } );
       *
       * @example
       *   // Get the data from localStorage (could interface with a form for
       *   // adding, editing and removing rows).
       *   $('#example').dataTable( {
       *     "ajax": function (data, callback, settings) {
       *       callback(
       *         JSON.parse( localStorage.getItem('dataTablesData') )
       *       );
       *     }
       *   } );
       */
      "ajax": null,


      /**
       * This parameter allows you to readily specify the entries in the length drop
       * down menu that DataTables shows when pagination is enabled. It can be
       * either a 1D array of options which will be used for both the displayed
       * option and the value, or a 2D array which will use the array in the first
       * position as the value, and the array in the second position as the
       * displayed options (useful for language strings such as 'All').
       *
       * Note that the `pageLength` property will be automatically set to the
       * first value given in this array, unless `pageLength` is also provided.
       *  @type array
       *  @default [ 10, 25, 50, 100 ]
       *
       *  @dtopt Option
       *  @name DataTable.defaults.lengthMenu
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
       *      } );
       *    } );
       */
      "aLengthMenu": [10, 25, 50, 100],


      /**
       * The `columns` option in the initialisation parameter allows you to define
       * details about the way individual columns behave. For a full list of
       * column options that can be set, please see
       * {@link DataTable.defaults.column}. Note that if you use `columns` to
       * define your columns, you must have an entry in the array for every single
       * column that you have in your table (these can be null if you don't which
       * to specify any options).
       *  @member
       *
       *  @name DataTable.defaults.column
       */
      "aoColumns": null,

      /**
       * Very similar to `columns`, `columnDefs` allows you to target a specific
       * column, multiple columns, or all columns, using the `targets` property of
       * each object in the array. This allows great flexibility when creating
       * tables, as the `columnDefs` arrays can be of any length, targeting the
       * columns you specifically want. `columnDefs` may use any of the column
       * options available: {@link DataTable.defaults.column}, but it _must_
       * have `targets` defined in each object in the array. Values in the `targets`
       * array may be:
       *   <ul>
       *     <li>a string - class name will be matched on the TH for the column</li>
       *     <li>0 or a positive integer - column index counting from the left</li>
       *     <li>a negative integer - column index counting from the right</li>
       *     <li>the string "_all" - all columns (i.e. assign a default)</li>
       *   </ul>
       *  @member
       *
       *  @name DataTable.defaults.columnDefs
       */
      "aoColumnDefs": null,


      /**
       * Basically the same as `search`, this parameter defines the individual column
       * filtering state at initialisation time. The array must be of the same size
       * as the number of columns, and each element be an object with the parameters
       * `search` and `escapeRegex` (the latter is optional). 'null' is also
       * accepted and the default will be used.
       *  @type array
       *  @default []
       *
       *  @dtopt Option
       *  @name DataTable.defaults.searchCols
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "searchCols": [
       *          null,
       *          { "search": "My filter" },
       *          null,
       *          { "search": "^[0-9]", "escapeRegex": false }
       *        ]
       *      } );
       *    } )
       */
      "aoSearchCols": [],


      /**
       * An array of CSS classes that should be applied to displayed rows. This
       * array may be of any length, and DataTables will apply each class
       * sequentially, looping when required.
       *  @type array
       *  @default null <i>Will take the values determined by the `oClasses.stripe*`
       *    options</i>
       *
       *  @dtopt Option
       *  @name DataTable.defaults.stripeClasses
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
       *      } );
       *    } )
       */
      "asStripeClasses": null,


      /**
       * Enable or disable automatic column width calculation. This can be disabled
       * as an optimisation (it takes some time to calculate the widths) if the
       * tables widths are passed in using `columns`.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.autoWidth
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "autoWidth": false
       *      } );
       *    } );
       */
      "bAutoWidth": true,


      /**
       * Deferred rendering can provide DataTables with a huge speed boost when you
       * are using an Ajax or JS data source for the table. This option, when set to
       * true, will cause DataTables to defer the creation of the table elements for
       * each row until they are needed for a draw - saving a significant amount of
       * time.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Features
       *  @name DataTable.defaults.deferRender
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "ajax": "sources/arrays.txt",
       *        "deferRender": true
       *      } );
       *    } );
       */
      "bDeferRender": false,


      /**
       * Replace a DataTable which matches the given selector and replace it with
       * one which has the properties of the new initialisation object passed. If no
       * table matches the selector, then the new DataTable will be constructed as
       * per normal.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Options
       *  @name DataTable.defaults.destroy
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "srollY": "200px",
       *        "paginate": false
       *      } );
       *
       *      // Some time later....
       *      $('#example').dataTable( {
       *        "filter": false,
       *        "destroy": true
       *      } );
       *    } );
       */
      "bDestroy": false,


      /**
       * Enable or disable filtering of data. Filtering in DataTables is "smart" in
       * that it allows the end user to input multiple words (space separated) and
       * will match a row containing those words, even if not in the order that was
       * specified (this allow matching across multiple columns). Note that if you
       * wish to use filtering in DataTables this must remain 'true' - to remove the
       * default filtering input box and retain filtering abilities, please use
       * {@link DataTable.defaults.dom}.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.searching
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "searching": false
       *      } );
       *    } );
       */
      "bFilter": true,


      /**
       * Enable or disable the table information display. This shows information
       * about the data that is currently visible on the page, including information
       * about filtered data if that action is being performed.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.info
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "info": false
       *      } );
       *    } );
       */
      "bInfo": true,


      /**
       * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
       * slightly different and additional mark-up from what DataTables has
       * traditionally used).
       *  @type boolean
       *  @default false
       *
       *  @dtopt Features
       *  @name DataTable.defaults.jQueryUI
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "jQueryUI": true
       *      } );
       *    } );
       */
      "bJQueryUI": false,


      /**
       * Allows the end user to select the size of a formatted page from a select
       * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.lengthChange
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "lengthChange": false
       *      } );
       *    } );
       */
      "bLengthChange": true,


      /**
       * Enable or disable pagination.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.paging
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "paging": false
       *      } );
       *    } );
       */
      "bPaginate": true,


      /**
       * Enable or disable the display of a 'processing' indicator when the table is
       * being processed (e.g. a sort). This is particularly useful for tables with
       * large amounts of data where it can take a noticeable amount of time to sort
       * the entries.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Features
       *  @name DataTable.defaults.processing
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "processing": true
       *      } );
       *    } );
       */
      "bProcessing": false,


      /**
       * Retrieve the DataTables object for the given selector. Note that if the
       * table has already been initialised, this parameter will cause DataTables
       * to simply return the object that has already been set up - it will not take
       * account of any changes you might have made to the initialisation object
       * passed to DataTables (setting this parameter to true is an acknowledgement
       * that you understand this). `destroy` can be used to reinitialise a table if
       * you need.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Options
       *  @name DataTable.defaults.retrieve
       *
       *  @example
       *    $(document).ready( function() {
       *      initTable();
       *      tableActions();
       *    } );
       *
       *    function initTable ()
       *    {
       *      return $('#example').dataTable( {
       *        "scrollY": "200px",
       *        "paginate": false,
       *        "retrieve": true
       *      } );
       *    }
       *
       *    function tableActions ()
       *    {
       *      var table = initTable();
       *      // perform API operations with oTable
       *    }
       */
      "bRetrieve": false,


      /**
       * When vertical (y) scrolling is enabled, DataTables will force the height of
       * the table's viewport to the given height at all times (useful for layout).
       * However, this can look odd when filtering data down to a small data set,
       * and the footer is left "floating" further down. This parameter (when
       * enabled) will cause DataTables to collapse the table's viewport down when
       * the result set will fit within the given Y height.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Options
       *  @name DataTable.defaults.scrollCollapse
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "scrollY": "200",
       *        "scrollCollapse": true
       *      } );
       *    } );
       */
      "bScrollCollapse": false,


      /**
       * Configure DataTables to use server-side processing. Note that the
       * `ajax` parameter must also be given in order to give DataTables a
       * source to obtain the required data for each draw.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Features
       *  @dtopt Server-side
       *  @name DataTable.defaults.serverSide
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "serverSide": true,
       *        "ajax": "xhr.php"
       *      } );
       *    } );
       */
      "bServerSide": false,


      /**
       * Enable or disable sorting of columns. Sorting of individual columns can be
       * disabled by the `sortable` option for each column.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.ordering
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "ordering": false
       *      } );
       *    } );
       */
      "bSort": true,


      /**
       * Enable or display DataTables' ability to sort multiple columns at the
       * same time (activated by shift-click by the user).
       *  @type boolean
       *  @default true
       *
       *  @dtopt Options
       *  @name DataTable.defaults.orderMulti
       *
       *  @example
       *    // Disable multiple column sorting ability
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "orderMulti": false
       *      } );
       *    } );
       */
      "bSortMulti": true,


      /**
       * Allows control over whether DataTables should use the top (true) unique
       * cell that is found for a single column, or the bottom (false - default).
       * This is useful when using complex headers.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Options
       *  @name DataTable.defaults.orderCellsTop
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "orderCellsTop": true
       *      } );
       *    } );
       */
      "bSortCellsTop": false,


      /**
       * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
       * `sorting\_3` to the columns which are currently being sorted on. This is
       * presented as a feature switch as it can increase processing time (while
       * classes are removed and added) so for large data sets you might want to
       * turn this off.
       *  @type boolean
       *  @default true
       *
       *  @dtopt Features
       *  @name DataTable.defaults.orderClasses
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "orderClasses": false
       *      } );
       *    } );
       */
      "bSortClasses": true,


      /**
       * Enable or disable state saving. When enabled HTML5 `localStorage` will be
       * used to save table display information such as pagination information,
       * display length, filtering and sorting. As such when the end user reloads
       * the page the display display will match what thy had previously set up.
       *
       * Due to the use of `localStorage` the default state saving is not supported
       * in IE6 or 7. If state saving is required in those browsers, use
       * `stateSaveCallback` to provide a storage solution such as cookies.
       *  @type boolean
       *  @default false
       *
       *  @dtopt Features
       *  @name DataTable.defaults.stateSave
       *
       *  @example
       *    $(document).ready( function () {
       *      $('#example').dataTable( {
       *        "stateSave": true
       *      } );
       *    } );
       */
      "bStateSave": false,


      /**
       * This function is called when a TR element is created (and all TD child
       * elements have been inserted), or registered if using a DOM source, allowing
       * manipulation of the TR element (adding classes etc).
       *  @type function
       *  @param {node} row "TR" element for the current row
       *  @param {array} data Raw data array for this row
       *  @param {int} dataIndex The index of this row in the internal aoData array
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.createdRow
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "createdRow": function( row, data, dataIndex ) {
       *          // Bold the grade for all 'A' grade browsers
       *          if ( data[4] == "A" )
       *          {
       *            $('td:eq(4)', row).html( '<b>A</b>' );
       *          }
       *        }
       *      } );
       *    } );
       */
      "fnCreatedRow": null,


      /**
       * This function is called on every 'draw' event, and allows you to
       * dynamically modify any aspect you want about the created DOM.
       *  @type function
       *  @param {object} settings DataTables settings object
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.drawCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "drawCallback": function( settings ) {
       *          alert( 'DataTables has redrawn the table' );
       *        }
       *      } );
       *    } );
       */
      "fnDrawCallback": null,


      /**
       * Identical to fnHeaderCallback() but for the table footer this function
       * allows you to modify the table footer on every 'draw' event.
       *  @type function
       *  @param {node} foot "TR" element for the footer
       *  @param {array} data Full table data (as derived from the original HTML)
       *  @param {int} start Index for the current display starting point in the
       *    display array
       *  @param {int} end Index for the current display ending point in the
       *    display array
       *  @param {array int} display Index array to translate the visual position
       *    to the full data array
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.footerCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "footerCallback": function( tfoot, data, start, end, display ) {
       *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
       *        }
       *      } );
       *    } )
       */
      "fnFooterCallback": null,


      /**
       * When rendering large numbers in the information element for the table
       * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
       * to have a comma separator for the 'thousands' units (e.g. 1 million is
       * rendered as "1,000,000") to help readability for the end user. This
       * function will override the default method DataTables uses.
       *  @type function
       *  @member
       *  @param {int} toFormat number to be formatted
       *  @returns {string} formatted string for DataTables to show the number
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.formatNumber
       *
       *  @example
       *    // Format a number using a single quote for the separator (note that
       *    // this can also be done with the language.thousands option)
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "formatNumber": function ( toFormat ) {
       *          return toFormat.toString().replace(
       *            /\B(?=(\d{3})+(?!\d))/g, "'"
       *          );
       *        };
       *      } );
       *    } );
       */
      "fnFormatNumber": function(toFormat) {
        return toFormat.toString().replace(
          /\B(?=(\d{3})+(?!\d))/g,
          this.oLanguage.sThousands
        );
      },


      /**
       * This function is called on every 'draw' event, and allows you to
       * dynamically modify the header row. This can be used to calculate and
       * display useful information about the table.
       *  @type function
       *  @param {node} head "TR" element for the header
       *  @param {array} data Full table data (as derived from the original HTML)
       *  @param {int} start Index for the current display starting point in the
       *    display array
       *  @param {int} end Index for the current display ending point in the
       *    display array
       *  @param {array int} display Index array to translate the visual position
       *    to the full data array
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.headerCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "fheaderCallback": function( head, data, start, end, display ) {
       *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
       *        }
       *      } );
       *    } )
       */
      "fnHeaderCallback": null,


      /**
       * The information element can be used to convey information about the current
       * state of the table. Although the internationalisation options presented by
       * DataTables are quite capable of dealing with most customisations, there may
       * be times where you wish to customise the string further. This callback
       * allows you to do exactly that.
       *  @type function
       *  @param {object} oSettings DataTables settings object
       *  @param {int} start Starting position in data for the draw
       *  @param {int} end End position in data for the draw
       *  @param {int} max Total number of rows in the table (regardless of
       *    filtering)
       *  @param {int} total Total number of rows in the data set, after filtering
       *  @param {string} pre The string that DataTables has formatted using it's
       *    own rules
       *  @returns {string} The string to be displayed in the information element.
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.infoCallback
       *
       *  @example
       *    $('#example').dataTable( {
       *      "infoCallback": function( settings, start, end, max, total, pre ) {
       *        return start +" to "+ end;
       *      }
       *    } );
       */
      "fnInfoCallback": null,


      /**
       * Called when the table has been initialised. Normally DataTables will
       * initialise sequentially and there will be no need for this function,
       * however, this does not hold true when using external language information
       * since that is obtained using an async XHR call.
       *  @type function
       *  @param {object} settings DataTables settings object
       *  @param {object} json The JSON object request from the server - only
       *    present if client-side Ajax sourced data is used
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.initComplete
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "initComplete": function(settings, json) {
       *          alert( 'DataTables has finished its initialisation.' );
       *        }
       *      } );
       *    } )
       */
      "fnInitComplete": null,


      /**
       * Called at the very start of each table draw and can be used to cancel the
       * draw by returning false, any other return (including undefined) results in
       * the full draw occurring).
       *  @type function
       *  @param {object} settings DataTables settings object
       *  @returns {boolean} False will cancel the draw, anything else (including no
       *    return) will allow it to complete.
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.preDrawCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "preDrawCallback": function( settings ) {
       *          if ( $('#test').val() == 1 ) {
       *            return false;
       *          }
       *        }
       *      } );
       *    } );
       */
      "fnPreDrawCallback": null,


      /**
       * This function allows you to 'post process' each row after it have been
       * generated for each table draw, but before it is rendered on screen. This
       * function might be used for setting the row class name etc.
       *  @type function
       *  @param {node} row "TR" element for the current row
       *  @param {array} data Raw data array for this row
       *  @param {int} displayIndex The display index for the current table draw
       *  @param {int} displayIndexFull The index of the data in the full list of
       *    rows (after filtering)
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.rowCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
       *          // Bold the grade for all 'A' grade browsers
       *          if ( data[4] == "A" ) {
       *            $('td:eq(4)', row).html( '<b>A</b>' );
       *          }
       *        }
       *      } );
       *    } );
       */
      "fnRowCallback": null,


      /**
       * __Deprecated__ The functionality provided by this parameter has now been
       * superseded by that provided through `ajax`, which should be used instead.
       *
       * This parameter allows you to override the default function which obtains
       * the data from the server so something more suitable for your application.
       * For example you could use POST data, or pull information from a Gears or
       * AIR database.
       *  @type function
       *  @member
       *  @param {string} source HTTP source to obtain the data from (`ajax`)
       *  @param {array} data A key/value pair object containing the data to send
       *    to the server
       *  @param {function} callback to be called on completion of the data get
       *    process that will draw the data on the page.
       *  @param {object} settings DataTables settings object
       *
       *  @dtopt Callbacks
       *  @dtopt Server-side
       *  @name DataTable.defaults.serverData
       *
       *  @deprecated 1.10. Please use `ajax` for this functionality now.
       */
      "fnServerData": null,


      /**
       * __Deprecated__ The functionality provided by this parameter has now been
       * superseded by that provided through `ajax`, which should be used instead.
       *
       *  It is often useful to send extra data to the server when making an Ajax
       * request - for example custom filtering information, and this callback
       * function makes it trivial to send extra information to the server. The
       * passed in parameter is the data set that has been constructed by
       * DataTables, and you can add to this or modify it as you require.
       *  @type function
       *  @param {array} data Data array (array of objects which are name/value
       *    pairs) that has been constructed by DataTables and will be sent to the
       *    server. In the case of Ajax sourced data with server-side processing
       *    this will be an empty array, for server-side processing there will be a
       *    significant number of parameters!
       *  @returns {undefined} Ensure that you modify the data array passed in,
       *    as this is passed by reference.
       *
       *  @dtopt Callbacks
       *  @dtopt Server-side
       *  @name DataTable.defaults.serverParams
       *
       *  @deprecated 1.10. Please use `ajax` for this functionality now.
       */
      "fnServerParams": null,


      /**
       * Load the table state. With this function you can define from where, and how, the
       * state of a table is loaded. By default DataTables will load from `localStorage`
       * but you might wish to use a server-side database or cookies.
       *  @type function
       *  @member
       *  @param {object} settings DataTables settings object
       *  @return {object} The DataTables state object to be loaded
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.stateLoadCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateLoadCallback": function (settings) {
       *          var o;
       *
       *          // Send an Ajax request to the server to get the data. Note that
       *          // this is a synchronous request.
       *          $.ajax( {
       *            "url": "/state_load",
       *            "async": false,
       *            "dataType": "json",
       *            "success": function (json) {
       *              o = json;
       *            }
       *          } );
       *
       *          return o;
       *        }
       *      } );
       *    } );
       */
      "fnStateLoadCallback": function(settings) {
        try {
          return JSON.parse(
            (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
              'DataTables_' + settings.sInstance + '_' + location.pathname
            )
          );
        } catch (e) {}
      },


      /**
       * Callback which allows modification of the saved state prior to loading that state.
       * This callback is called when the table is loading state from the stored data, but
       * prior to the settings object being modified by the saved state. Note that for
       * plug-in authors, you should use the `stateLoadParams` event to load parameters for
       * a plug-in.
       *  @type function
       *  @param {object} settings DataTables settings object
       *  @param {object} data The state object that is to be loaded
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.stateLoadParams
       *
       *  @example
       *    // Remove a saved filter, so filtering is never loaded
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateLoadParams": function (settings, data) {
       *          data.oSearch.sSearch = "";
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Disallow state loading by returning false
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateLoadParams": function (settings, data) {
       *          return false;
       *        }
       *      } );
       *    } );
       */
      "fnStateLoadParams": null,


      /**
       * Callback that is called when the state has been loaded from the state saving method
       * and the DataTables settings object has been modified as a result of the loaded state.
       *  @type function
       *  @param {object} settings DataTables settings object
       *  @param {object} data The state object that was loaded
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.stateLoaded
       *
       *  @example
       *    // Show an alert with the filtering value that was saved
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateLoaded": function (settings, data) {
       *          alert( 'Saved filter was: '+data.oSearch.sSearch );
       *        }
       *      } );
       *    } );
       */
      "fnStateLoaded": null,


      /**
       * Save the table state. This function allows you to define where and how the state
       * information for the table is stored By default DataTables will use `localStorage`
       * but you might wish to use a server-side database or cookies.
       *  @type function
       *  @member
       *  @param {object} settings DataTables settings object
       *  @param {object} data The state object to be saved
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.stateSaveCallback
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateSaveCallback": function (settings, data) {
       *          // Send an Ajax request to the server with the state object
       *          $.ajax( {
       *            "url": "/state_save",
       *            "data": data,
       *            "dataType": "json",
       *            "method": "POST"
       *            "success": function () {}
       *          } );
       *        }
       *      } );
       *    } );
       */
      "fnStateSaveCallback": function(settings, data) {
        try {
          (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
            'DataTables_' + settings.sInstance + '_' + location.pathname,
            JSON.stringify(data)
          );
        } catch (e) {}
      },


      /**
       * Callback which allows modification of the state to be saved. Called when the table
       * has changed state a new state save is required. This method allows modification of
       * the state saving object prior to actually doing the save, including addition or
       * other state properties or modification. Note that for plug-in authors, you should
       * use the `stateSaveParams` event to save parameters for a plug-in.
       *  @type function
       *  @param {object} settings DataTables settings object
       *  @param {object} data The state object to be saved
       *
       *  @dtopt Callbacks
       *  @name DataTable.defaults.stateSaveParams
       *
       *  @example
       *    // Remove a saved filter, so filtering is never saved
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateSave": true,
       *        "stateSaveParams": function (settings, data) {
       *          data.oSearch.sSearch = "";
       *        }
       *      } );
       *    } );
       */
      "fnStateSaveParams": null,


      /**
       * Duration for which the saved state information is considered valid. After this period
       * has elapsed the state will be returned to the default.
       * Value is given in seconds.
       *  @type int
       *  @default 7200 <i>(2 hours)</i>
       *
       *  @dtopt Options
       *  @name DataTable.defaults.stateDuration
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "stateDuration": 60*60*24; // 1 day
       *      } );
       *    } )
       */
      "iStateDuration": 7200,


      /**
       * When enabled DataTables will not make a request to the server for the first
       * page draw - rather it will use the data already on the page (no sorting etc
       * will be applied to it), thus saving on an XHR at load time. `deferLoading`
       * is used to indicate that deferred loading is required, but it is also used
       * to tell DataTables how many records there are in the full table (allowing
       * the information element and pagination to be displayed correctly). In the case
       * where a filtering is applied to the table on initial load, this can be
       * indicated by giving the parameter as an array, where the first element is
       * the number of records available after filtering and the second element is the
       * number of records without filtering (allowing the table information element
       * to be shown correctly).
       *  @type int | array
       *  @default null
       *
       *  @dtopt Options
       *  @name DataTable.defaults.deferLoading
       *
       *  @example
       *    // 57 records available in the table, no filtering applied
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "serverSide": true,
       *        "ajax": "scripts/server_processing.php",
       *        "deferLoading": 57
       *      } );
       *    } );
       *
       *  @example
       *    // 57 records after filtering, 100 without filtering (an initial filter applied)
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "serverSide": true,
       *        "ajax": "scripts/server_processing.php",
       *        "deferLoading": [ 57, 100 ],
       *        "search": {
       *          "search": "my_filter"
       *        }
       *      } );
       *    } );
       */
      "iDeferLoading": null,


      /**
       * Number of rows to display on a single page when using pagination. If
       * feature enabled (`lengthChange`) then the end user will be able to override
       * this to a custom setting using a pop-up menu.
       *  @type int
       *  @default 10
       *
       *  @dtopt Options
       *  @name DataTable.defaults.pageLength
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "pageLength": 50
       *      } );
       *    } )
       */
      "iDisplayLength": 10,


      /**
       * Define the starting point for data display when using DataTables with
       * pagination. Note that this parameter is the number of records, rather than
       * the page number, so if you have 10 records per page and want to start on
       * the third page, it should be "20".
       *  @type int
       *  @default 0
       *
       *  @dtopt Options
       *  @name DataTable.defaults.displayStart
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "displayStart": 20
       *      } );
       *    } )
       */
      "iDisplayStart": 0,


      /**
       * By default DataTables allows keyboard navigation of the table (sorting, paging,
       * and filtering) by adding a `tabindex` attribute to the required elements. This
       * allows you to tab through the controls and press the enter key to activate them.
       * The tabindex is default 0, meaning that the tab follows the flow of the document.
       * You can overrule this using this parameter if you wish. Use a value of -1 to
       * disable built-in keyboard navigation.
       *  @type int
       *  @default 0
       *
       *  @dtopt Options
       *  @name DataTable.defaults.tabIndex
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "tabIndex": 1
       *      } );
       *    } );
       */
      "iTabIndex": 0,


      /**
       * Classes that DataTables assigns to the various components and features
       * that it adds to the HTML table. This allows classes to be configured
       * during initialisation in addition to through the static
       * {@link DataTable.ext.oStdClasses} object).
       *  @namespace
       *  @name DataTable.defaults.classes
       */
      "oClasses": {},


      /**
       * All strings that DataTables uses in the user interface that it creates
       * are defined in this object, allowing you to modified them individually or
       * completely replace them all as required.
       *  @namespace
       *  @name DataTable.defaults.language
       */
      "oLanguage": {
        /**
         * Strings that are used for WAI-ARIA labels and controls only (these are not
         * actually visible on the page, but will be read by screenreaders, and thus
         * must be internationalised as well).
         *  @namespace
         *  @name DataTable.defaults.language.aria
         */
        "oAria": {
          /**
           * ARIA label that is added to the table headers when the column may be
           * sorted ascending by activing the column (click or return when focused).
           * Note that the column header is prefixed to this string.
           *  @type string
           *  @default : activate to sort column ascending
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.aria.sortAscending
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "aria": {
           *            "sortAscending": " - click/return to sort ascending"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sSortAscending": ": activate to sort column ascending",

          /**
           * ARIA label that is added to the table headers when the column may be
           * sorted descending by activing the column (click or return when focused).
           * Note that the column header is prefixed to this string.
           *  @type string
           *  @default : activate to sort column ascending
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.aria.sortDescending
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "aria": {
           *            "sortDescending": " - click/return to sort descending"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sSortDescending": ": activate to sort column descending"
        },

        /**
         * Pagination string used by DataTables for the built-in pagination
         * control types.
         *  @namespace
         *  @name DataTable.defaults.language.paginate
         */
        "oPaginate": {
          /**
           * Text to use when using the 'full_numbers' type of pagination for the
           * button to take the user to the first page.
           *  @type string
           *  @default First
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.paginate.first
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "paginate": {
           *            "first": "First page"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sFirst": "First",


          /**
           * Text to use when using the 'full_numbers' type of pagination for the
           * button to take the user to the last page.
           *  @type string
           *  @default Last
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.paginate.last
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "paginate": {
           *            "last": "Last page"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sLast": "Last",


          /**
           * Text to use for the 'next' pagination button (to take the user to the
           * next page).
           *  @type string
           *  @default Next
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.paginate.next
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "paginate": {
           *            "next": "Next page"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sNext": "Next",


          /**
           * Text to use for the 'previous' pagination button (to take the user to
           * the previous page).
           *  @type string
           *  @default Previous
           *
           *  @dtopt Language
           *  @name DataTable.defaults.language.paginate.previous
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "language": {
           *          "paginate": {
           *            "previous": "Previous page"
           *          }
           *        }
           *      } );
           *    } );
           */
          "sPrevious": "Previous"
        },

        /**
         * This string is shown in preference to `zeroRecords` when the table is
         * empty of data (regardless of filtering). Note that this is an optional
         * parameter - if it is not given, the value of `zeroRecords` will be used
         * instead (either the default or given value).
         *  @type string
         *  @default No data available in table
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.emptyTable
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "emptyTable": "No data available in table"
         *        }
         *      } );
         *    } );
         */
        "sEmptyTable": "No Available Data In The Table",


        /**
         * This string gives information to the end user about the information
         * that is current on display on the page. The following tokens can be
         * used in the string and will be dynamically replaced as the table
         * display updates. This tokens can be placed anywhere in the string, or
         * removed as needed by the language requires:
         *
         * * `\_START\_` - Display index of the first record on the current page
         * * `\_END\_` - Display index of the last record on the current page
         * * `\_TOTAL\_` - Number of records in the table after filtering
         * * `\_MAX\_` - Number of records in the table without filtering
         * * `\_PAGE\_` - Current page number
         * * `\_PAGES\_` - Total number of pages of data in the table
         *
         *  @type string
         *  @default Showing _START_ to _END_ of _TOTAL_ entries
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.info
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "info": "Showing page _PAGE_ of _PAGES_"
         *        }
         *      } );
         *    } );
         */
        "sInfo": "Showing _START_ To _END_ From _TOTAL_ Row",


        /**
         * Display information string for when the table is empty. Typically the
         * format of this string should match `info`.
         *  @type string
         *  @default Showing 0 to 0 of 0 entries
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.infoEmpty
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "infoEmpty": "No entries to show"
         *        }
         *      } );
         *    } );
         */
        "sInfoEmpty": "Showing 0 To 0 From 0 Row",


        /**
         * When a user filters the information in a table, this string is appended
         * to the information (`info`) to give an idea of how strong the filtering
         * is. The variable _MAX_ is dynamically updated.
         *  @type string
         *  @default (filtered from _MAX_ total entries)
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.infoFiltered
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "infoFiltered": " - filtering from _MAX_ records"
         *        }
         *      } );
         *    } );
         */
        "sInfoFiltered": "(Filtered From _MAX_ All Rows)",


        /**
         * If can be useful to append extra information to the info string at times,
         * and this variable does exactly that. This information will be appended to
         * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
         * being used) at all times.
         *  @type string
         *  @default <i>Empty string</i>
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.infoPostFix
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "infoPostFix": "All records shown are derived from real information."
         *        }
         *      } );
         *    } );
         */
        "sInfoPostFix": "",


        /**
         * This decimal place operator is a little different from the other
         * language options since DataTables doesn't output floating point
         * numbers, so it won't ever use this for display of a number. Rather,
         * what this parameter does is modify the sort methods of the table so
         * that numbers which are in a format which has a character other than
         * a period (`.`) as a decimal place will be sorted numerically.
         *
         * Note that numbers with different decimal places cannot be shown in
         * the same table and still be sortable, the table must be consistent.
         * However, multiple different tables on the page can use different
         * decimal place characters.
         *  @type string
         *  @default 
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.decimal
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "decimal": ","
         *          "thousands": "."
         *        }
         *      } );
         *    } );
         */
        "sDecimal": "",


        /**
         * DataTables has a build in number formatter (`formatNumber`) which is
         * used to format large numbers that are used in the table information.
         * By default a comma is used, but this can be trivially changed to any
         * character you wish with this parameter.
         *  @type string
         *  @default ,
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.thousands
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "thousands": "'"
         *        }
         *      } );
         *    } );
         */
        "sThousands": ",",


        /**
         * Detail the action that will be taken when the drop down menu for the
         * pagination length option is changed. The '_MENU_' variable is replaced
         * with a default select list of 10, 25, 50 and 100, and can be replaced
         * with a custom select box if required.
         *  @type string
         *  @default Show _MENU_ entries
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.lengthMenu
         *
         *  @example
         *    // Language change only
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "lengthMenu": "Display _MENU_ records"
         *        }
         *      } );
         *    } );
         *
         *  @example
         *    // Language and options change
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "lengthMenu": 'Display <select>'+
         *            '<option value="10">10</option>'+
         *            '<option value="20">20</option>'+
         *            '<option value="30">30</option>'+
         *            '<option value="40">40</option>'+
         *            '<option value="50">50</option>'+
         *            '<option value="-1">All</option>'+
         *            '</select> records'
         *        }
         *      } );
         *    } );
         */
        "sLengthMenu": "Show _MENU_ Rows",


        /**
         * When using Ajax sourced data and during the first draw when DataTables is
         * gathering the data, this message is shown in an empty row in the table to
         * indicate to the end user the the data is being loaded. Note that this
         * parameter is not used when loading data by server-side processing, just
         * Ajax sourced data with client-side processing.
         *  @type string
         *  @default Loading...
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.loadingRecords
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "loadingRecords": "Please wait - loading..."
         *        }
         *      } );
         *    } );
         */
        "sLoadingRecords": "Loading...",


        /**
         * Text which is displayed when the table is processing a user action
         * (usually a sort command or similar).
         *  @type string
         *  @default Processing...
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.processing
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "processing": "DataTables is currently busy"
         *        }
         *      } );
         *    } );
         */
        "sProcessing": "Processing...",


        /**
         * Details the actions that will be taken when the user types into the
         * filtering input text box. The variable "_INPUT_", if used in the string,
         * is replaced with the HTML text box for the filtering input allowing
         * control over where it appears in the string. If "_INPUT_" is not given
         * then the input box is appended to the string automatically.
         *  @type string
         *  @default Search:
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.search
         *
         *  @example
         *    // Input text box will be appended at the end automatically
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "search": "Filter records:"
         *        }
         *      } );
         *    } );
         *
         *  @example
         *    // Specify where the filter should appear
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "search": "Apply filter _INPUT_ to table"
         *        }
         *      } );
         *    } );
         */
        "sSearch": "",


        /**
         * Assign a `placeholder` attribute to the search `input` element
         *  @type string
         *  @default 
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.searchPlaceholder
         */
        "sSearchPlaceholder": "Searching In The Rows",


        /**
         * All of the language information can be stored in a file on the
         * server-side, which DataTables will look up if this parameter is passed.
         * It must store the URL of the language file, which is in a JSON format,
         * and the object has the same properties as the oLanguage object in the
         * initialiser object (i.e. the above parameters). Please refer to one of
         * the example language files to see how this works in action.
         *  @type string
         *  @default <i>Empty string - i.e. disabled</i>
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.url
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
         *        }
         *      } );
         *    } );
         */
        "sUrl": "",


        /**
         * Text shown inside the table records when the is no information to be
         * displayed after filtering. `emptyTable` is shown when there is simply no
         * information in the table at all (regardless of filtering).
         *  @type string
         *  @default No matching records found
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.zeroRecords
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "zeroRecords": "No records to display"
         *        }
         *      } );
         *    } );
         */
        "sZeroRecords": "No Results"
      },


      /**
       * This parameter allows you to have define the global filtering state at
       * initialisation time. As an object the `search` parameter must be
       * defined, but all other parameters are optional. When `regex` is true,
       * the search string will be treated as a regular expression, when false
       * (default) it will be treated as a straight string. When `smart`
       * DataTables will use it's smart filtering methods (to word match at
       * any point in the data), when false this will not be done.
       *  @namespace
       *  @extends DataTable.models.oSearch
       *
       *  @dtopt Options
       *  @name DataTable.defaults.search
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "search": {"search": "Initial search"}
       *      } );
       *    } )
       */
      "oSearch": $.extend({}, DataTable.models.oSearch),


      /**
       * __Deprecated__ The functionality provided by this parameter has now been
       * superseded by that provided through `ajax`, which should be used instead.
       *
       * By default DataTables will look for the property `data` (or `aaData` for
       * compatibility with DataTables 1.9-) when obtaining data from an Ajax
       * source or for server-side processing - this parameter allows that
       * property to be changed. You can use Javascript dotted object notation to
       * get a data source for multiple levels of nesting.
       *  @type string
       *  @default data
       *
       *  @dtopt Options
       *  @dtopt Server-side
       *  @name DataTable.defaults.ajaxDataProp
       *
       *  @deprecated 1.10. Please use `ajax` for this functionality now.
       */
      "sAjaxDataProp": "data",


      /**
       * __Deprecated__ The functionality provided by this parameter has now been
       * superseded by that provided through `ajax`, which should be used instead.
       *
       * You can instruct DataTables to load data from an external
       * source using this parameter (use aData if you want to pass data in you
       * already have). Simply provide a url a JSON object can be obtained from.
       *  @type string
       *  @default null
       *
       *  @dtopt Options
       *  @dtopt Server-side
       *  @name DataTable.defaults.ajaxSource
       *
       *  @deprecated 1.10. Please use `ajax` for this functionality now.
       */
      "sAjaxSource": null,


      /**
       * This initialisation variable allows you to specify exactly where in the
       * DOM you want DataTables to inject the various controls it adds to the page
       * (for example you might want the pagination controls at the top of the
       * table). DIV elements (with or without a custom class) can also be added to
       * aid styling. The follow syntax is used:
       *   <ul>
       *     <li>The following options are allowed:
       *       <ul>
       *         <li>'l' - Length changing</li>
       *         <li>'f' - Filtering input</li>
       *         <li>'t' - The table!</li>
       *         <li>'i' - Information</li>
       *         <li>'p' - Pagination</li>
       *         <li>'r' - pRocessing</li>
       *       </ul>
       *     </li>
       *     <li>The following constants are allowed:
       *       <ul>
       *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
       *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
       *       </ul>
       *     </li>
       *     <li>The following syntax is expected:
       *       <ul>
       *         <li>'&lt;' and '&gt;' - div elements</li>
       *         <li>'&lt;"class" and '&gt;' - div with a class</li>
       *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
       *       </ul>
       *     </li>
       *     <li>Examples:
       *       <ul>
       *         <li>'&lt;"wrapper"flipt&gt;'</li>
       *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
       *       </ul>
       *     </li>
       *   </ul>
       *  @type string
       *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
       *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
       *
       *  @dtopt Options
       *  @name DataTable.defaults.dom
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
       *      } );
       *    } );
       */
      "sDom": "lfrtip",


      /**
       * Search delay option. This will throttle full table searches that use the
       * DataTables provided search input element (it does not effect calls to
       * `dt-api search()`, providing a delay before the search is made.
       *  @type integer
       *  @default 0
       *
       *  @dtopt Options
       *  @name DataTable.defaults.searchDelay
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "searchDelay": 200
       *      } );
       *    } )
       */
      "searchDelay": null,


      /**
       * DataTables features four different built-in options for the buttons to
       * display for pagination control:
       *
       * * `simple` - 'Previous' and 'Next' buttons only
       * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
       * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
       * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
       *   page numbers
       *  
       * Further methods can be added using {@link DataTable.ext.oPagination}.
       *  @type string
       *  @default simple_numbers
       *
       *  @dtopt Options
       *  @name DataTable.defaults.pagingType
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "pagingType": "full_numbers"
       *      } );
       *    } )
       */
      "sPaginationType": "simple_numbers",


      /**
       * Enable horizontal scrolling. When a table is too wide to fit into a
       * certain layout, or you have a large number of columns in the table, you
       * can enable x-scrolling to show the table in a viewport, which can be
       * scrolled. This property can be `true` which will allow the table to
       * scroll horizontally when needed, or any CSS unit, or a number (in which
       * case it will be treated as a pixel measurement). Setting as simply `true`
       * is recommended.
       *  @type boolean|string
       *  @default <i>blank string - i.e. disabled</i>
       *
       *  @dtopt Features
       *  @name DataTable.defaults.scrollX
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "scrollX": true,
       *        "scrollCollapse": true
       *      } );
       *    } );
       */
      "sScrollX": "",


      /**
       * This property can be used to force a DataTable to use more width than it
       * might otherwise do when x-scrolling is enabled. For example if you have a
       * table which requires to be well spaced, this parameter is useful for
       * "over-sizing" the table, and thus forcing scrolling. This property can by
       * any CSS unit, or a number (in which case it will be treated as a pixel
       * measurement).
       *  @type string
       *  @default <i>blank string - i.e. disabled</i>
       *
       *  @dtopt Options
       *  @name DataTable.defaults.scrollXInner
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "scrollX": "100%",
       *        "scrollXInner": "110%"
       *      } );
       *    } );
       */
      "sScrollXInner": "",


      /**
       * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
       * to the given height, and enable scrolling for any data which overflows the
       * current viewport. This can be used as an alternative to paging to display
       * a lot of data in a small area (although paging and scrolling can both be
       * enabled at the same time). This property can be any CSS unit, or a number
       * (in which case it will be treated as a pixel measurement).
       *  @type string
       *  @default <i>blank string - i.e. disabled</i>
       *
       *  @dtopt Features
       *  @name DataTable.defaults.scrollY
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "scrollY": "200px",
       *        "paginate": false
       *      } );
       *    } );
       */
      "sScrollY": "",


      /**
       * __Deprecated__ The functionality provided by this parameter has now been
       * superseded by that provided through `ajax`, which should be used instead.
       *
       * Set the HTTP method that is used to make the Ajax call for server-side
       * processing or Ajax sourced data.
       *  @type string
       *  @default GET
       *
       *  @dtopt Options
       *  @dtopt Server-side
       *  @name DataTable.defaults.serverMethod
       *
       *  @deprecated 1.10. Please use `ajax` for this functionality now.
       */
      "sServerMethod": "GET",


      /**
       * DataTables makes use of renderers when displaying HTML elements for
       * a table. These renderers can be added or modified by plug-ins to
       * generate suitable mark-up for a site. For example the Bootstrap
       * integration plug-in for DataTables uses a paging button renderer to
       * display pagination buttons in the mark-up required by Bootstrap.
       *
       * For further information about the renderers available see
       * DataTable.ext.renderer
       *  @type string|object
       *  @default null
       *
       *  @name DataTable.defaults.renderer
       *
       */
      "renderer": null,


      /**
       * Set the data property name that DataTables should use to get a row's id
       * to set as the `id` property in the node.
       *  @type string
       *  @default DT_RowId
       *
       *  @name DataTable.defaults.rowId
       */
      "rowId": "DT_RowId"
    };

    _fnHungarianMap(DataTable.defaults);



    /*
     * Developer note - See note in model.defaults.js about the use of Hungarian
     * notation and camel case.
     */

    /**
     * Column options that can be given to DataTables at initialisation time.
     *  @namespace
     */
    DataTable.defaults.column = {
      /**
       * Define which column(s) an order will occur on for this column. This
       * allows a column's ordering to take multiple columns into account when
       * doing a sort or use the data from a different column. For example first
       * name / last name columns make sense to do a multi-column sort over the
       * two columns.
       *  @type array|int
       *  @default null <i>Takes the value of the column index automatically</i>
       *
       *  @name DataTable.defaults.column.orderData
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
       *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
       *          { "orderData": 2, "targets": [ 2 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "orderData": [ 0, 1 ] },
       *          { "orderData": [ 1, 0 ] },
       *          { "orderData": 2 },
       *          null,
       *          null
       *        ]
       *      } );
       *    } );
       */
      "aDataSort": null,
      "iDataSort": -1,


      /**
       * You can control the default ordering direction, and even alter the
       * behaviour of the sort handler (i.e. only allow ascending ordering etc)
       * using this parameter.
       *  @type array
       *  @default [ 'asc', 'desc' ]
       *
       *  @name DataTable.defaults.column.orderSequence
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
       *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
       *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          null,
       *          { "orderSequence": [ "asc" ] },
       *          { "orderSequence": [ "desc", "asc", "asc" ] },
       *          { "orderSequence": [ "desc" ] },
       *          null
       *        ]
       *      } );
       *    } );
       */
      "asSorting": ['asc', 'desc'],


      /**
       * Enable or disable filtering on the data in this column.
       *  @type boolean
       *  @default true
       *
       *  @name DataTable.defaults.column.searchable
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "searchable": false, "targets": [ 0 ] }
       *        ] } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "searchable": false },
       *          null,
       *          null,
       *          null,
       *          null
       *        ] } );
       *    } );
       */
      "bSearchable": true,


      /**
       * Enable or disable ordering on this column.
       *  @type boolean
       *  @default true
       *
       *  @name DataTable.defaults.column.orderable
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "orderable": false, "targets": [ 0 ] }
       *        ] } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "orderable": false },
       *          null,
       *          null,
       *          null,
       *          null
       *        ] } );
       *    } );
       */
      "bSortable": true,


      /**
       * Enable or disable the display of this column.
       *  @type boolean
       *  @default true
       *
       *  @name DataTable.defaults.column.visible
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "visible": false, "targets": [ 0 ] }
       *        ] } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "visible": false },
       *          null,
       *          null,
       *          null,
       *          null
       *        ] } );
       *    } );
       */
      "bVisible": true,


      /**
       * Developer definable function that is called whenever a cell is created (Ajax source,
       * etc) or processed for input (DOM source). This can be used as a compliment to mRender
       * allowing you to modify the DOM element (add background colour for example) when the
       * element is available.
       *  @type function
       *  @param {element} td The TD node that has been created
       *  @param {*} cellData The Data for the cell
       *  @param {array|object} rowData The data for the whole row
       *  @param {int} row The row index for the aoData data store
       *  @param {int} col The column index for aoColumns
       *
       *  @name DataTable.defaults.column.createdCell
       *  @dtopt Columns
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [3],
       *          "createdCell": function (td, cellData, rowData, row, col) {
       *            if ( cellData == "1.7" ) {
       *              $(td).css('color', 'blue')
       *            }
       *          }
       *        } ]
       *      });
       *    } );
       */
      "fnCreatedCell": null,


      /**
       * This parameter has been replaced by `data` in DataTables to ensure naming
       * consistency. `dataProp` can still be used, as there is backwards
       * compatibility in DataTables for this option, but it is strongly
       * recommended that you use `data` in preference to `dataProp`.
       *  @name DataTable.defaults.column.dataProp
       */


      /**
       * This property can be used to read data from any data source property,
       * including deeply nested objects / properties. `data` can be given in a
       * number of different ways which effect its behaviour:
       *
       * * `integer` - treated as an array index for the data source. This is the
       *   default that DataTables uses (incrementally increased for each column).
       * * `string` - read an object property from the data source. There are
       *   three 'special' options that can be used in the string to alter how
       *   DataTables reads the data from the source object:
       *    * `.` - Dotted Javascript notation. Just as you use a `.` in
       *      Javascript to read from nested objects, so to can the options
       *      specified in `data`. For example: `browser.version` or
       *      `browser.name`. If your object parameter name contains a period, use
       *      `\\` to escape it - i.e. `first\\.name`.
       *    * `[]` - Array notation. DataTables can automatically combine data
       *      from and array source, joining the data with the characters provided
       *      between the two brackets. For example: `name[, ]` would provide a
       *      comma-space separated list from the source array. If no characters
       *      are provided between the brackets, the original array source is
       *      returned.
       *    * `()` - Function notation. Adding `()` to the end of a parameter will
       *      execute a function of the name given. For example: `browser()` for a
       *      simple function on the data source, `browser.version()` for a
       *      function in a nested property or even `browser().version` to get an
       *      object property if the function called returns an object. Note that
       *      function notation is recommended for use in `render` rather than
       *      `data` as it is much simpler to use as a renderer.
       * * `null` - use the original data source for the row rather than plucking
       *   data directly from it. This action has effects on two other
       *   initialisation options:
       *    * `defaultContent` - When null is given as the `data` option and
       *      `defaultContent` is specified for the column, the value defined by
       *      `defaultContent` will be used for the cell.
       *    * `render` - When null is used for the `data` option and the `render`
       *      option is specified for the column, the whole data source for the
       *      row is used for the renderer.
       * * `function` - the function given will be executed whenever DataTables
       *   needs to set or get the data for a cell in the column. The function
       *   takes three parameters:
       *    * Parameters:
       *      * `{array|object}` The data source for the row
       *      * `{string}` The type call data requested - this will be 'set' when
       *        setting data or 'filter', 'display', 'type', 'sort' or undefined
       *        when gathering data. Note that when `undefined` is given for the
       *        type DataTables expects to get the raw data for the object back<
       *      * `{*}` Data to set when the second parameter is 'set'.
       *    * Return:
       *      * The return value from the function is not required when 'set' is
       *        the type of call, but otherwise the return is what will be used
       *        for the data requested.
       *
       * Note that `data` is a getter and setter option. If you just require
       * formatting of data for output, you will likely want to use `render` which
       * is simply a getter and thus simpler to use.
       *
       * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
       * name change reflects the flexibility of this property and is consistent
       * with the naming of mRender. If 'mDataProp' is given, then it will still
       * be used by DataTables, as it automatically maps the old name to the new
       * if required.
       *
       *  @type string|int|function|null
       *  @default null <i>Use automatically calculated column index</i>
       *
       *  @name DataTable.defaults.column.data
       *  @dtopt Columns
       *
       *  @example
       *    // Read table data from objects
       *    // JSON structure for each row:
       *    //   {
       *    //      "engine": {value},
       *    //      "browser": {value},
       *    //      "platform": {value},
       *    //      "version": {value},
       *    //      "grade": {value}
       *    //   }
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "ajaxSource": "sources/objects.txt",
       *        "columns": [
       *          { "data": "engine" },
       *          { "data": "browser" },
       *          { "data": "platform" },
       *          { "data": "version" },
       *          { "data": "grade" }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Read information from deeply nested objects
       *    // JSON structure for each row:
       *    //   {
       *    //      "engine": {value},
       *    //      "browser": {value},
       *    //      "platform": {
       *    //         "inner": {value}
       *    //      },
       *    //      "details": [
       *    //         {value}, {value}
       *    //      ]
       *    //   }
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "ajaxSource": "sources/deep.txt",
       *        "columns": [
       *          { "data": "engine" },
       *          { "data": "browser" },
       *          { "data": "platform.inner" },
       *          { "data": "platform.details.0" },
       *          { "data": "platform.details.1" }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `data` as a function to provide different information for
       *    // sorting, filtering and display. In this case, currency (price)
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": function ( source, type, val ) {
       *            if (type === 'set') {
       *              source.price = val;
       *              // Store the computed dislay and filter values for efficiency
       *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
       *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
       *              return;
       *            }
       *            else if (type === 'display') {
       *              return source.price_display;
       *            }
       *            else if (type === 'filter') {
       *              return source.price_filter;
       *            }
       *            // 'sort', 'type' and undefined all just use the integer
       *            return source.price;
       *          }
       *        } ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using default content
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": null,
       *          "defaultContent": "Click to edit"
       *        } ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using array notation - outputting a list from an array
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": "name[, ]"
       *        } ]
       *      } );
       *    } );
       *
       */
      "mData": null,


      /**
       * This property is the rendering partner to `data` and it is suggested that
       * when you want to manipulate data for display (including filtering,
       * sorting etc) without altering the underlying data for the table, use this
       * property. `render` can be considered to be the the read only companion to
       * `data` which is read / write (then as such more complex). Like `data`
       * this option can be given in a number of different ways to effect its
       * behaviour:
       *
       * * `integer` - treated as an array index for the data source. This is the
       *   default that DataTables uses (incrementally increased for each column).
       * * `string` - read an object property from the data source. There are
       *   three 'special' options that can be used in the string to alter how
       *   DataTables reads the data from the source object:
       *    * `.` - Dotted Javascript notation. Just as you use a `.` in
       *      Javascript to read from nested objects, so to can the options
       *      specified in `data`. For example: `browser.version` or
       *      `browser.name`. If your object parameter name contains a period, use
       *      `\\` to escape it - i.e. `first\\.name`.
       *    * `[]` - Array notation. DataTables can automatically combine data
       *      from and array source, joining the data with the characters provided
       *      between the two brackets. For example: `name[, ]` would provide a
       *      comma-space separated list from the source array. If no characters
       *      are provided between the brackets, the original array source is
       *      returned.
       *    * `()` - Function notation. Adding `()` to the end of a parameter will
       *      execute a function of the name given. For example: `browser()` for a
       *      simple function on the data source, `browser.version()` for a
       *      function in a nested property or even `browser().version` to get an
       *      object property if the function called returns an object.
       * * `object` - use different data for the different data types requested by
       *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
       *   of the object is the data type the property refers to and the value can
       *   defined using an integer, string or function using the same rules as
       *   `render` normally does. Note that an `_` option _must_ be specified.
       *   This is the default value to use if you haven't specified a value for
       *   the data type requested by DataTables.
       * * `function` - the function given will be executed whenever DataTables
       *   needs to set or get the data for a cell in the column. The function
       *   takes three parameters:
       *    * Parameters:
       *      * {array|object} The data source for the row (based on `data`)
       *      * {string} The type call data requested - this will be 'filter',
       *        'display', 'type' or 'sort'.
       *      * {array|object} The full data source for the row (not based on
       *        `data`)
       *    * Return:
       *      * The return value from the function is what will be used for the
       *        data requested.
       *
       *  @type string|int|function|object|null
       *  @default null Use the data source value.
       *
       *  @name DataTable.defaults.column.render
       *  @dtopt Columns
       *
       *  @example
       *    // Create a comma separated list from an array of objects
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "ajaxSource": "sources/deep.txt",
       *        "columns": [
       *          { "data": "engine" },
       *          { "data": "browser" },
       *          {
       *            "data": "platform",
       *            "render": "[, ].name"
       *          }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Execute a function to obtain data
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": null, // Use the full data source object for the renderer's source
       *          "render": "browserName()"
       *        } ]
       *      } );
       *    } );
       *
       *  @example
       *    // As an object, extracting different data for the different types
       *    // This would be used with a data source such as:
       *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
       *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
       *    // (which has both forms) is used for filtering for if a user inputs either format, while
       *    // the formatted phone number is the one that is shown in the table.
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": null, // Use the full data source object for the renderer's source
       *          "render": {
       *            "_": "phone",
       *            "filter": "phone_filter",
       *            "display": "phone_display"
       *          }
       *        } ]
       *      } );
       *    } );
       *
       *  @example
       *    // Use as a function to create a link from the data source
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "data": "download_link",
       *          "render": function ( data, type, full ) {
       *            return '<a href="'+data+'">Download</a>';
       *          }
       *        } ]
       *      } );
       *    } );
       */
      "mRender": null,


      /**
       * Change the cell type created for the column - either TD cells or TH cells. This
       * can be useful as TH cells have semantic meaning in the table body, allowing them
       * to act as a header for a row (you may wish to add scope='row' to the TH elements).
       *  @type string
       *  @default td
       *
       *  @name DataTable.defaults.column.cellType
       *  @dtopt Columns
       *
       *  @example
       *    // Make the first column use TH cells
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [ {
       *          "targets": [ 0 ],
       *          "cellType": "th"
       *        } ]
       *      } );
       *    } );
       */
      "sCellType": "td",


      /**
       * Class to give to each cell in this column.
       *  @type string
       *  @default <i>Empty string</i>
       *
       *  @name DataTable.defaults.column.class
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "class": "my_class", "targets": [ 0 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "class": "my_class" },
       *          null,
       *          null,
       *          null,
       *          null
       *        ]
       *      } );
       *    } );
       */
      "sClass": "",

      /**
       * When DataTables calculates the column widths to assign to each column,
       * it finds the longest string in each column and then constructs a
       * temporary table and reads the widths from that. The problem with this
       * is that "mmm" is much wider then "iiii", but the latter is a longer
       * string - thus the calculation can go wrong (doing it properly and putting
       * it into an DOM object and measuring that is horribly(!) slow). Thus as
       * a "work around" we provide this option. It will append its value to the
       * text that is found to be the longest string for the column - i.e. padding.
       * Generally you shouldn't need this!
       *  @type string
       *  @default <i>Empty string<i>
       *
       *  @name DataTable.defaults.column.contentPadding
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          null,
       *          null,
       *          null,
       *          {
       *            "contentPadding": "mmm"
       *          }
       *        ]
       *      } );
       *    } );
       */
      "sContentPadding": "",


      /**
       * Allows a default value to be given for a column's data, and will be used
       * whenever a null data source is encountered (this can be because `data`
       * is set to null, or because the data source itself is null).
       *  @type string
       *  @default null
       *
       *  @name DataTable.defaults.column.defaultContent
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          {
       *            "data": null,
       *            "defaultContent": "Edit",
       *            "targets": [ -1 ]
       *          }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          null,
       *          null,
       *          null,
       *          {
       *            "data": null,
       *            "defaultContent": "Edit"
       *          }
       *        ]
       *      } );
       *    } );
       */
      "sDefaultContent": null,


      /**
       * This parameter is only used in DataTables' server-side processing. It can
       * be exceptionally useful to know what columns are being displayed on the
       * client side, and to map these to database fields. When defined, the names
       * also allow DataTables to reorder information from the server if it comes
       * back in an unexpected order (i.e. if you switch your columns around on the
       * client-side, your server-side code does not also need updating).
       *  @type string
       *  @default <i>Empty string</i>
       *
       *  @name DataTable.defaults.column.name
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "name": "engine", "targets": [ 0 ] },
       *          { "name": "browser", "targets": [ 1 ] },
       *          { "name": "platform", "targets": [ 2 ] },
       *          { "name": "version", "targets": [ 3 ] },
       *          { "name": "grade", "targets": [ 4 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "name": "engine" },
       *          { "name": "browser" },
       *          { "name": "platform" },
       *          { "name": "version" },
       *          { "name": "grade" }
       *        ]
       *      } );
       *    } );
       */
      "sName": "",


      /**
       * Defines a data source type for the ordering which can be used to read
       * real-time information from the table (updating the internally cached
       * version) prior to ordering. This allows ordering to occur on user
       * editable elements such as form inputs.
       *  @type string
       *  @default std
       *
       *  @name DataTable.defaults.column.orderDataType
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
       *          { "type": "numeric", "targets": [ 3 ] },
       *          { "orderDataType": "dom-select", "targets": [ 4 ] },
       *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          null,
       *          null,
       *          { "orderDataType": "dom-text" },
       *          { "orderDataType": "dom-text", "type": "numeric" },
       *          { "orderDataType": "dom-select" },
       *          { "orderDataType": "dom-checkbox" }
       *        ]
       *      } );
       *    } );
       */
      "sSortDataType": "std",


      /**
       * The title of this column.
       *  @type string
       *  @default null <i>Derived from the 'TH' value for this column in the
       *    original HTML table.</i>
       *
       *  @name DataTable.defaults.column.title
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "title": "My column title", "targets": [ 0 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "title": "My column title" },
       *          null,
       *          null,
       *          null,
       *          null
       *        ]
       *      } );
       *    } );
       */
      "sTitle": null,


      /**
       * The type allows you to specify how the data for this column will be
       * ordered. Four types (string, numeric, date and html (which will strip
       * HTML tags before ordering)) are currently available. Note that only date
       * formats understood by Javascript's Date() object will be accepted as type
       * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
       * 'numeric', 'date' or 'html' (by default). Further types can be adding
       * through plug-ins.
       *  @type string
       *  @default null <i>Auto-detected from raw data</i>
       *
       *  @name DataTable.defaults.column.type
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "type": "html", "targets": [ 0 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "type": "html" },
       *          null,
       *          null,
       *          null,
       *          null
       *        ]
       *      } );
       *    } );
       */
      "sType": null,


      /**
       * Defining the width of the column, this parameter may take any CSS value
       * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
       * been given a specific width through this interface ensuring that the table
       * remains readable.
       *  @type string
       *  @default null <i>Automatic</i>
       *
       *  @name DataTable.defaults.column.width
       *  @dtopt Columns
       *
       *  @example
       *    // Using `columnDefs`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columnDefs": [
       *          { "width": "20%", "targets": [ 0 ] }
       *        ]
       *      } );
       *    } );
       *
       *  @example
       *    // Using `columns`
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "columns": [
       *          { "width": "20%" },
       *          null,
       *          null,
       *          null,
       *          null
       *        ]
       *      } );
       *    } );
       */
      "sWidth": null
    };

    _fnHungarianMap(DataTable.defaults.column);



    /**
     * DataTables settings object - this holds all the information needed for a
     * given table, including configuration, data and current application of the
     * table options. DataTables does not have a single instance for each DataTable
     * with the settings attached to that instance, but rather instances of the
     * DataTable "class" are created on-the-fly as needed (typically by a
     * $().dataTable() call) and the settings object is then applied to that
     * instance.
     *
     * Note that this object is related to {@link DataTable.defaults} but this
     * one is the internal data store for DataTables's cache of columns. It should
     * NOT be manipulated outside of DataTables. Any configuration should be done
     * through the initialisation options.
     *  @namespace
     *  @todo Really should attach the settings object to individual instances so we
     *    don't need to create new instances on each $().dataTable() call (if the
     *    table already exists). It would also save passing oSettings around and
     *    into every single function. However, this is a very significant
     *    architecture change for DataTables and will almost certainly break
     *    backwards compatibility with older installations. This is something that
     *    will be done in 2.0.
     */
    DataTable.models.oSettings = {
      /**
       * Primary features of DataTables and their enablement state.
       *  @namespace
       */
      "oFeatures": {

        /**
         * Flag to say if DataTables should automatically try to calculate the
         * optimum table and columns widths (true) or not (false).
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bAutoWidth": null,

        /**
         * Delay the creation of TR and TD elements until they are actually
         * needed by a driven page draw. This can give a significant speed
         * increase for Ajax source and Javascript source data, but makes no
         * difference at all fro DOM and server-side processing tables.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bDeferRender": null,

        /**
         * Enable filtering on the table or not. Note that if this is disabled
         * then there is no filtering at all on the table, including fnFilter.
         * To just remove the filtering input use sDom and remove the 'f' option.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bFilter": null,

        /**
         * Table information element (the 'Showing x of y records' div) enable
         * flag.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bInfo": null,

        /**
         * Present a user control allowing the end user to change the page size
         * when pagination is enabled.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bLengthChange": null,

        /**
         * Pagination enabled or not. Note that if this is disabled then length
         * changing must also be disabled.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bPaginate": null,

        /**
         * Processing indicator enable flag whenever DataTables is enacting a
         * user request - typically an Ajax request for server-side processing.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bProcessing": null,

        /**
         * Server-side processing enabled flag - when enabled DataTables will
         * get all data from the server for every draw - there is no filtering,
         * sorting or paging done on the client-side.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bServerSide": null,

        /**
         * Sorting enablement flag.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bSort": null,

        /**
         * Multi-column sorting
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bSortMulti": null,

        /**
         * Apply a class to the columns which are being sorted to provide a
         * visual highlight or not. This can slow things down when enabled since
         * there is a lot of DOM interaction.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bSortClasses": null,

        /**
         * State saving enablement flag.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bStateSave": null
      },


      /**
       * Scrolling settings for a table.
       *  @namespace
       */
      "oScroll": {
        /**
         * When the table is shorter in height than sScrollY, collapse the
         * table container down to the height of the table (when true).
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type boolean
         */
        "bCollapse": null,

        /**
         * Width of the scrollbar for the web-browser's platform. Calculated
         * during table initialisation.
         *  @type int
         *  @default 0
         */
        "iBarWidth": 0,

        /**
         * Viewport width for horizontal scrolling. Horizontal scrolling is
         * disabled if an empty string.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type string
         */
        "sX": null,

        /**
         * Width to expand the table to when using x-scrolling. Typically you
         * should not need to use this.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type string
         *  @deprecated
         */
        "sXInner": null,

        /**
         * Viewport height for vertical scrolling. Vertical scrolling is disabled
         * if an empty string.
         * Note that this parameter will be set by the initialisation routine. To
         * set a default use {@link DataTable.defaults}.
         *  @type string
         */
        "sY": null
      },

      /**
       * Language information for the table.
       *  @namespace
       *  @extends DataTable.defaults.oLanguage
       */
      "oLanguage": {
        /**
         * Information callback function. See
         * {@link DataTable.defaults.fnInfoCallback}
         *  @type function
         *  @default null
         */
        "fnInfoCallback": null
      },

      /**
       * Browser support parameters
       *  @namespace
       */
      "oBrowser": {
        /**
         * Indicate if the browser incorrectly calculates width:100% inside a
         * scrolling element (IE6/7)
         *  @type boolean
         *  @default false
         */
        "bScrollOversize": false,

        /**
         * Determine if the vertical scrollbar is on the right or left of the
         * scrolling container - needed for rtl language layout, although not
         * all browsers move the scrollbar (Safari).
         *  @type boolean
         *  @default false
         */
        "bScrollbarLeft": false,

        /**
         * Flag for if `getBoundingClientRect` is fully supported or not
         *  @type boolean
         *  @default false
         */
        "bBounding": false,

        /**
         * Browser scrollbar width
         *  @type integer
         *  @default 0
         */
        "barWidth": 0
      },


      "ajax": null,


      /**
       * Array referencing the nodes which are used for the features. The
       * parameters of this object match what is allowed by sDom - i.e.
       *   <ul>
       *     <li>'l' - Length changing</li>
       *     <li>'f' - Filtering input</li>
       *     <li>'t' - The table!</li>
       *     <li>'i' - Information</li>
       *     <li>'p' - Pagination</li>
       *     <li>'r' - pRocessing</li>
       *   </ul>
       *  @type array
       *  @default []
       */
      "aanFeatures": [],

      /**
       * Store data information - see {@link DataTable.models.oRow} for detailed
       * information.
       *  @type array
       *  @default []
       */
      "aoData": [],

      /**
       * Array of indexes which are in the current display (after filtering etc)
       *  @type array
       *  @default []
       */
      "aiDisplay": [],

      /**
       * Array of indexes for display - no filtering
       *  @type array
       *  @default []
       */
      "aiDisplayMaster": [],

      /**
       * Map of row ids to data indexes
       *  @type object
       *  @default {}
       */
      "aIds": {},

      /**
       * Store information about each column that is in use
       *  @type array
       *  @default []
       */
      "aoColumns": [],

      /**
       * Store information about the table's header
       *  @type array
       *  @default []
       */
      "aoHeader": [],

      /**
       * Store information about the table's footer
       *  @type array
       *  @default []
       */
      "aoFooter": [],

      /**
       * Store the applied global search information in case we want to force a
       * research or compare the old search to a new one.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @namespace
       *  @extends DataTable.models.oSearch
       */
      "oPreviousSearch": {},

      /**
       * Store the applied search for each column - see
       * {@link DataTable.models.oSearch} for the format that is used for the
       * filtering information for each column.
       *  @type array
       *  @default []
       */
      "aoPreSearchCols": [],

      /**
       * Sorting that is applied to the table. Note that the inner arrays are
       * used in the following manner:
       * <ul>
       *   <li>Index 0 - column number</li>
       *   <li>Index 1 - current sorting direction</li>
       * </ul>
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type array
       *  @todo These inner arrays should really be objects
       */
      "aaSorting": null,

      /**
       * Sorting that is always applied to the table (i.e. prefixed in front of
       * aaSorting).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type array
       *  @default []
       */
      "aaSortingFixed": [],

      /**
       * Classes to use for the striping of a table.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type array
       *  @default []
       */
      "asStripeClasses": null,

      /**
       * If restoring a table - we should restore its striping classes as well
       *  @type array
       *  @default []
       */
      "asDestroyStripes": [],

      /**
       * If restoring a table - we should restore its width
       *  @type int
       *  @default 0
       */
      "sDestroyWidth": 0,

      /**
       * Callback functions array for every time a row is inserted (i.e. on a draw).
       *  @type array
       *  @default []
       */
      "aoRowCallback": [],

      /**
       * Callback functions for the header on each draw.
       *  @type array
       *  @default []
       */
      "aoHeaderCallback": [],

      /**
       * Callback function for the footer on each draw.
       *  @type array
       *  @default []
       */
      "aoFooterCallback": [],

      /**
       * Array of callback functions for draw callback functions
       *  @type array
       *  @default []
       */
      "aoDrawCallback": [],

      /**
       * Array of callback functions for row created function
       *  @type array
       *  @default []
       */
      "aoRowCreatedCallback": [],

      /**
       * Callback functions for just before the table is redrawn. A return of
       * false will be used to cancel the draw.
       *  @type array
       *  @default []
       */
      "aoPreDrawCallback": [],

      /**
       * Callback functions for when the table has been initialised.
       *  @type array
       *  @default []
       */
      "aoInitComplete": [],


      /**
       * Callbacks for modifying the settings to be stored for state saving, prior to
       * saving state.
       *  @type array
       *  @default []
       */
      "aoStateSaveParams": [],

      /**
       * Callbacks for modifying the settings that have been stored for state saving
       * prior to using the stored values to restore the state.
       *  @type array
       *  @default []
       */
      "aoStateLoadParams": [],

      /**
       * Callbacks for operating on the settings object once the saved state has been
       * loaded
       *  @type array
       *  @default []
       */
      "aoStateLoaded": [],

      /**
       * Cache the table ID for quick access
       *  @type string
       *  @default <i>Empty string</i>
       */
      "sTableId": "",

      /**
       * The TABLE node for the main table
       *  @type node
       *  @default null
       */
      "nTable": null,

      /**
       * Permanent ref to the thead element
       *  @type node
       *  @default null
       */
      "nTHead": null,

      /**
       * Permanent ref to the tfoot element - if it exists
       *  @type node
       *  @default null
       */
      "nTFoot": null,

      /**
       * Permanent ref to the tbody element
       *  @type node
       *  @default null
       */
      "nTBody": null,

      /**
       * Cache the wrapper node (contains all DataTables controlled elements)
       *  @type node
       *  @default null
       */
      "nTableWrapper": null,

      /**
       * Indicate if when using server-side processing the loading of data
       * should be deferred until the second draw.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       *  @default false
       */
      "bDeferLoading": false,

      /**
       * Indicate if all required information has been read in
       *  @type boolean
       *  @default false
       */
      "bInitialised": false,

      /**
       * Information about open rows. Each object in the array has the parameters
       * 'nTr' and 'nParent'
       *  @type array
       *  @default []
       */
      "aoOpenRows": [],

      /**
       * Dictate the positioning of DataTables' control elements - see
       * {@link DataTable.model.oInit.sDom}.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @default null
       */
      "sDom": null,

      /**
       * Search delay (in mS)
       *  @type integer
       *  @default null
       */
      "searchDelay": null,

      /**
       * Which type of pagination should be used.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @default two_button
       */
      "sPaginationType": "two_button",

      /**
       * The state duration (for `stateSave`) in seconds.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type int
       *  @default 0
       */
      "iStateDuration": 0,

      /**
       * Array of callback functions for state saving. Each array element is an
       * object with the following parameters:
       *   <ul>
       *     <li>function:fn - function to call. Takes two parameters, oSettings
       *       and the JSON string to save that has been thus far created. Returns
       *       a JSON string to be inserted into a json object
       *       (i.e. '"param": [ 0, 1, 2]')</li>
       *     <li>string:sName - name of callback</li>
       *   </ul>
       *  @type array
       *  @default []
       */
      "aoStateSave": [],

      /**
       * Array of callback functions for state loading. Each array element is an
       * object with the following parameters:
       *   <ul>
       *     <li>function:fn - function to call. Takes two parameters, oSettings
       *       and the object stored. May return false to cancel state loading</li>
       *     <li>string:sName - name of callback</li>
       *   </ul>
       *  @type array
       *  @default []
       */
      "aoStateLoad": [],

      /**
       * State that was saved. Useful for back reference
       *  @type object
       *  @default null
       */
      "oSavedState": null,

      /**
       * State that was loaded. Useful for back reference
       *  @type object
       *  @default null
       */
      "oLoadedState": null,

      /**
       * Source url for AJAX data for the table.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @default null
       */
      "sAjaxSource": null,

      /**
       * Property from a given object from which to read the table data from. This
       * can be an empty string (when not server-side processing), in which case
       * it is  assumed an an array is given directly.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      "sAjaxDataProp": null,

      /**
       * Note if draw should be blocked while getting data
       *  @type boolean
       *  @default true
       */
      "bAjaxDataGet": true,

      /**
       * The last jQuery XHR object that was used for server-side data gathering.
       * This can be used for working with the XHR information in one of the
       * callbacks
       *  @type object
       *  @default null
       */
      "jqXHR": null,

      /**
       * JSON returned from the server in the last Ajax request
       *  @type object
       *  @default undefined
       */
      "json": undefined,

      /**
       * Data submitted as part of the last Ajax request
       *  @type object
       *  @default undefined
       */
      "oAjaxData": undefined,

      /**
       * Function to get the server-side data.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type function
       */
      "fnServerData": null,

      /**
       * Functions which are called prior to sending an Ajax request so extra
       * parameters can easily be sent to the server
       *  @type array
       *  @default []
       */
      "aoServerParams": [],

      /**
       * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
       * required).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      "sServerMethod": null,

      /**
       * Format numbers for display.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type function
       */
      "fnFormatNumber": null,

      /**
       * List of options that can be used for the user selectable length menu.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type array
       *  @default []
       */
      "aLengthMenu": null,

      /**
       * Counter for the draws that the table does. Also used as a tracker for
       * server-side processing
       *  @type int
       *  @default 0
       */
      "iDraw": 0,

      /**
       * Indicate if a redraw is being done - useful for Ajax
       *  @type boolean
       *  @default false
       */
      "bDrawing": false,

      /**
       * Draw index (iDraw) of the last error when parsing the returned data
       *  @type int
       *  @default -1
       */
      "iDrawError": -1,

      /**
       * Paging display length
       *  @type int
       *  @default 10
       */
      "_iDisplayLength": 10,

      /**
       * Paging start point - aiDisplay index
       *  @type int
       *  @default 0
       */
      "_iDisplayStart": 0,

      /**
       * Server-side processing - number of records in the result set
       * (i.e. before filtering), Use fnRecordsTotal rather than
       * this property to get the value of the number of records, regardless of
       * the server-side processing setting.
       *  @type int
       *  @default 0
       *  @private
       */
      "_iRecordsTotal": 0,

      /**
       * Server-side processing - number of records in the current display set
       * (i.e. after filtering). Use fnRecordsDisplay rather than
       * this property to get the value of the number of records, regardless of
       * the server-side processing setting.
       *  @type boolean
       *  @default 0
       *  @private
       */
      "_iRecordsDisplay": 0,

      /**
       * Flag to indicate if jQuery UI marking and classes should be used.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bJUI": null,

      /**
       * The classes to use for the table
       *  @type object
       *  @default {}
       */
      "oClasses": {},

      /**
       * Flag attached to the settings object so you can check in the draw
       * callback if filtering has been done in the draw. Deprecated in favour of
       * events.
       *  @type boolean
       *  @default false
       *  @deprecated
       */
      "bFiltered": false,

      /**
       * Flag attached to the settings object so you can check in the draw
       * callback if sorting has been done in the draw. Deprecated in favour of
       * events.
       *  @type boolean
       *  @default false
       *  @deprecated
       */
      "bSorted": false,

      /**
       * Indicate that if multiple rows are in the header and there is more than
       * one unique cell per column, if the top one (true) or bottom one (false)
       * should be used for sorting / title by DataTables.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bSortCellsTop": null,

      /**
       * Initialisation object that is used for the table
       *  @type object
       *  @default null
       */
      "oInit": null,

      /**
       * Destroy callback functions - for plug-ins to attach themselves to the
       * destroy so they can clean up markup and events.
       *  @type array
       *  @default []
       */
      "aoDestroyCallback": [],


      /**
       * Get the number of records in the current record set, before filtering
       *  @type function
       */
      "fnRecordsTotal": function() {
        return _fnDataSource(this) == 'ssp' ?
          this._iRecordsTotal * 1 :
          this.aiDisplayMaster.length;
      },

      /**
       * Get the number of records in the current record set, after filtering
       *  @type function
       */
      "fnRecordsDisplay": function() {
        return _fnDataSource(this) == 'ssp' ?
          this._iRecordsDisplay * 1 :
          this.aiDisplay.length;
      },

      /**
       * Get the display end point - aiDisplay index
       *  @type function
       */
      "fnDisplayEnd": function() {
        var
          len = this._iDisplayLength,
          start = this._iDisplayStart,
          calc = start + len,
          records = this.aiDisplay.length,
          features = this.oFeatures,
          paginate = features.bPaginate;

        if (features.bServerSide) {
          return paginate === false || len === -1 ?
            start + records :
            Math.min(start + len, this._iRecordsDisplay);
        } else {
          return !paginate || calc > records || len === -1 ?
            records :
            calc;
        }
      },

      /**
       * The DataTables object for this table
       *  @type object
       *  @default null
       */
      "oInstance": null,

      /**
       * Unique identifier for each instance of the DataTables object. If there
       * is an ID on the table node, then it takes that value, otherwise an
       * incrementing internal counter is used.
       *  @type string
       *  @default null
       */
      "sInstance": null,

      /**
       * tabindex attribute value that is added to DataTables control elements, allowing
       * keyboard navigation of the table and its controls.
       */
      "iTabIndex": 0,

      /**
       * DIV container for the footer scrolling table if scrolling
       */
      "nScrollHead": null,

      /**
       * DIV container for the footer scrolling table if scrolling
       */
      "nScrollFoot": null,

      /**
       * Last applied sort
       *  @type array
       *  @default []
       */
      "aLastSort": [],

      /**
       * Stored plug-in instances
       *  @type object
       *  @default {}
       */
      "oPlugins": {},

      /**
       * Function used to get a row's id from the row's data
       *  @type function
       *  @default null
       */
      "rowIdFn": null,

      /**
       * Data location where to store a row's id
       *  @type string
       *  @default null
       */
      "rowId": null
    };

    /**
     * Extension object for DataTables that is used to provide all extension
     * options.
     *
     * Note that the `DataTable.ext` object is available through
     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
     *  @namespace
     *  @extends DataTable.models.ext
     */


    /**
     * DataTables extensions
     * 
     * This namespace acts as a collection area for plug-ins that can be used to
     * extend DataTables capabilities. Indeed many of the build in methods
     * use this method to provide their own capabilities (sorting methods for
     * example).
     *
     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
     * reasons
     *
     *  @namespace
     */
    DataTable.ext = _ext = {
      /**
       * Buttons. For use with the Buttons extension for DataTables. This is
       * defined here so other extensions can define buttons regardless of load
       * order. It is _not_ used by DataTables core.
       *
       *  @type object
       *  @default {}
       */
      buttons: {},


      /**
       * Element class names
       *
       *  @type object
       *  @default {}
       */
      classes: {},


      /**
       * DataTables build type (expanded by the download builder)
       *
       *  @type string
       */
      builder: "-source-",


      /**
       * Error reporting.
       * 
       * How should DataTables report an error. Can take the value 'alert',
       * 'throw', 'none' or a function.
       *
       *  @type string|function
       *  @default alert
       */
      errMode: "alert",


      /**
       * Feature plug-ins.
       * 
       * This is an array of objects which describe the feature plug-ins that are
       * available to DataTables. These feature plug-ins are then available for
       * use through the `dom` initialisation option.
       * 
       * Each feature plug-in is described by an object which must have the
       * following properties:
       * 
       * * `fnInit` - function that is used to initialise the plug-in,
       * * `cFeature` - a character so the feature can be enabled by the `dom`
       *   instillation option. This is case sensitive.
       *
       * The `fnInit` function has the following input parameters:
       *
       * 1. `{object}` DataTables settings object: see
       *    {@link DataTable.models.oSettings}
       *
       * And the following return is expected:
       * 
       * * {node|null} The element which contains your feature. Note that the
       *   return may also be void if your plug-in does not require to inject any
       *   DOM elements into DataTables control (`dom`) - for example this might
       *   be useful when developing a plug-in which allows table control via
       *   keyboard entry
       *
       *  @type array
       *
       *  @example
       *    $.fn.dataTable.ext.features.push( {
       *      "fnInit": function( oSettings ) {
       *        return new TableTools( { "oDTSettings": oSettings } );
       *      },
       *      "cFeature": "T"
       *    } );
       */
      feature: [],


      /**
       * Row searching.
       * 
       * This method of searching is complimentary to the default type based
       * searching, and a lot more comprehensive as it allows you complete control
       * over the searching logic. Each element in this array is a function
       * (parameters described below) that is called for every row in the table,
       * and your logic decides if it should be included in the searching data set
       * or not.
       *
       * Searching functions have the following input parameters:
       *
       * 1. `{object}` DataTables settings object: see
       *    {@link DataTable.models.oSettings}
       * 2. `{array|object}` Data for the row to be processed (same as the
       *    original format that was passed in as the data source, or an array
       *    from a DOM data source
       * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
       *    can be useful to retrieve the `TR` element if you need DOM interaction.
       *
       * And the following return is expected:
       *
       * * {boolean} Include the row in the searched result set (true) or not
       *   (false)
       *
       * Note that as with the main search ability in DataTables, technically this
       * is "filtering", since it is subtractive. However, for consistency in
       * naming we call it searching here.
       *
       *  @type array
       *  @default []
       *
       *  @example
       *    // The following example shows custom search being applied to the
       *    // fourth column (i.e. the data[3] index) based on two input values
       *    // from the end-user, matching the data in a certain range.
       *    $.fn.dataTable.ext.search.push(
       *      function( settings, data, dataIndex ) {
       *        var min = document.getElementById('min').value * 1;
       *        var max = document.getElementById('max').value * 1;
       *        var version = data[3] == "-" ? 0 : data[3]*1;
       *
       *        if ( min == "" && max == "" ) {
       *          return true;
       *        }
       *        else if ( min == "" && version < max ) {
       *          return true;
       *        }
       *        else if ( min < version && "" == max ) {
       *          return true;
       *        }
       *        else if ( min < version && version < max ) {
       *          return true;
       *        }
       *        return false;
       *      }
       *    );
       */
      search: [],


      /**
       * Selector extensions
       *
       * The `selector` option can be used to extend the options available for the
       * selector modifier options (`selector-modifier` object data type) that
       * each of the three built in selector types offer (row, column and cell +
       * their plural counterparts). For example the Select extension uses this
       * mechanism to provide an option to select only rows, columns and cells
       * that have been marked as selected by the end user (`{selected: true}`),
       * which can be used in conjunction with the existing built in selector
       * options.
       *
       * Each property is an array to which functions can be pushed. The functions
       * take three attributes:
       *
       * * Settings object for the host table
       * * Options object (`selector-modifier` object type)
       * * Array of selected item indexes
       *
       * The return is an array of the resulting item indexes after the custom
       * selector has been applied.
       *
       *  @type object
       */
      selector: {
        cell: [],
        column: [],
        row: []
      },


      /**
       * Internal functions, exposed for used in plug-ins.
       * 
       * Please note that you should not need to use the internal methods for
       * anything other than a plug-in (and even then, try to avoid if possible).
       * The internal function may change between releases.
       *
       *  @type object
       *  @default {}
       */
      internal: {},


      /**
       * Legacy configuration options. Enable and disable legacy options that
       * are available in DataTables.
       *
       *  @type object
       */
      legacy: {
        /**
         * Enable / disable DataTables 1.9 compatible server-side processing
         * requests
         *
         *  @type boolean
         *  @default null
         */
        ajax: null
      },


      /**
       * Pagination plug-in methods.
       * 
       * Each entry in this object is a function and defines which buttons should
       * be shown by the pagination rendering method that is used for the table:
       * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
       * buttons are displayed in the document, while the functions here tell it
       * what buttons to display. This is done by returning an array of button
       * descriptions (what each button will do).
       *
       * Pagination types (the four built in options and any additional plug-in
       * options defined here) can be used through the `paginationType`
       * initialisation parameter.
       *
       * The functions defined take two parameters:
       *
       * 1. `{int} page` The current page index
       * 2. `{int} pages` The number of pages in the table
       *
       * Each function is expected to return an array where each element of the
       * array can be one of:
       *
       * * `first` - Jump to first page when activated
       * * `last` - Jump to last page when activated
       * * `previous` - Show previous page when activated
       * * `next` - Show next page when activated
       * * `{int}` - Show page of the index given
       * * `{array}` - A nested array containing the above elements to add a
       *   containing 'DIV' element (might be useful for styling).
       *
       * Note that DataTables v1.9- used this object slightly differently whereby
       * an object with two functions would be defined for each plug-in. That
       * ability is still supported by DataTables 1.10+ to provide backwards
       * compatibility, but this option of use is now decremented and no longer
       * documented in DataTables 1.10+.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    // Show previous, next and current page buttons only
       *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
       *      return [ 'previous', page, 'next' ];
       *    };
       */
      pager: {},


      renderer: {
        pageButton: {},
        header: {}
      },


      /**
       * Ordering plug-ins - custom data source
       * 
       * The extension options for ordering of data available here is complimentary
       * to the default type based ordering that DataTables typically uses. It
       * allows much greater control over the the data that is being used to
       * order a column, but is necessarily therefore more complex.
       * 
       * This type of ordering is useful if you want to do ordering based on data
       * live from the DOM (for example the contents of an 'input' element) rather
       * than just the static string that DataTables knows of.
       * 
       * The way these plug-ins work is that you create an array of the values you
       * wish to be ordering for the column in question and then return that
       * array. The data in the array much be in the index order of the rows in
       * the table (not the currently ordering order!). Which order data gathering
       * function is run here depends on the `dt-init columns.orderDataType`
       * parameter that is used for the column (if any).
       *
       * The functions defined take two parameters:
       *
       * 1. `{object}` DataTables settings object: see
       *    {@link DataTable.models.oSettings}
       * 2. `{int}` Target column index
       *
       * Each function is expected to return an array:
       *
       * * `{array}` Data for the column to be ordering upon
       *
       *  @type array
       *
       *  @example
       *    // Ordering using `input` node values
       *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
       *    {
       *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
       *        return $('input', td).val();
       *      } );
       *    }
       */
      order: {},


      /**
       * Type based plug-ins.
       *
       * Each column in DataTables has a type assigned to it, either by automatic
       * detection or by direct assignment using the `type` option for the column.
       * The type of a column will effect how it is ordering and search (plug-ins
       * can also make use of the column type if required).
       *
       * @namespace
       */
      type: {
        /**
         * Type detection functions.
         *
         * The functions defined in this object are used to automatically detect
         * a column's type, making initialisation of DataTables super easy, even
         * when complex data is in the table.
         *
         * The functions defined take two parameters:
         *
         *  1. `{*}` Data from the column cell to be analysed
         *  2. `{settings}` DataTables settings object. This can be used to
         *     perform context specific type detection - for example detection
         *     based on language settings such as using a comma for a decimal
         *     place. Generally speaking the options from the settings will not
         *     be required
         *
         * Each function is expected to return:
         *
         * * `{string|null}` Data type detected, or null if unknown (and thus
         *   pass it on to the other type detection functions.
         *
         *  @type array
         *
         *  @example
         *    // Currency type detection plug-in:
         *    $.fn.dataTable.ext.type.detect.push(
         *      function ( data, settings ) {
         *        // Check the numeric part
         *        if ( ! $.isNumeric( data.substring(1) ) ) {
         *          return null;
         *        }
         *
         *        // Check prefixed by currency
         *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
         *          return 'currency';
         *        }
         *        return null;
         *      }
         *    );
         */
        detect: [],


        /**
         * Type based search formatting.
         *
         * The type based searching functions can be used to pre-format the
         * data to be search on. For example, it can be used to strip HTML
         * tags or to de-format telephone numbers for numeric only searching.
         *
         * Note that is a search is not defined for a column of a given type,
         * no search formatting will be performed.
         * 
         * Pre-processing of searching data plug-ins - When you assign the sType
         * for a column (or have it automatically detected for you by DataTables
         * or a type detection plug-in), you will typically be using this for
         * custom sorting, but it can also be used to provide custom searching
         * by allowing you to pre-processing the data and returning the data in
         * the format that should be searched upon. This is done by adding
         * functions this object with a parameter name which matches the sType
         * for that target column. This is the corollary of <i>afnSortData</i>
         * for searching data.
         *
         * The functions defined take a single parameter:
         *
         *  1. `{*}` Data from the column cell to be prepared for searching
         *
         * Each function is expected to return:
         *
         * * `{string|null}` Formatted string that will be used for the searching.
         *
         *  @type object
         *  @default {}
         *
         *  @example
         *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
         *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
         *    }
         */
        search: {},


        /**
         * Type based ordering.
         *
         * The column type tells DataTables what ordering to apply to the table
         * when a column is sorted upon. The order for each type that is defined,
         * is defined by the functions available in this object.
         *
         * Each ordering option can be described by three properties added to
         * this object:
         *
         * * `{type}-pre` - Pre-formatting function
         * * `{type}-asc` - Ascending order function
         * * `{type}-desc` - Descending order function
         *
         * All three can be used together, only `{type}-pre` or only
         * `{type}-asc` and `{type}-desc` together. It is generally recommended
         * that only `{type}-pre` is used, as this provides the optimal
         * implementation in terms of speed, although the others are provided
         * for compatibility with existing Javascript sort functions.
         *
         * `{type}-pre`: Functions defined take a single parameter:
         *
         *  1. `{*}` Data from the column cell to be prepared for ordering
         *
         * And return:
         *
         * * `{*}` Data to be sorted upon
         *
         * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
         * functions, taking two parameters:
         *
         *  1. `{*}` Data to compare to the second parameter
         *  2. `{*}` Data to compare to the first parameter
         *
         * And returning:
         *
         * * `{*}` Ordering match: <0 if first parameter should be sorted lower
         *   than the second parameter, ===0 if the two parameters are equal and
         *   >0 if the first parameter should be sorted height than the second
         *   parameter.
         * 
         *  @type object
         *  @default {}
         *
         *  @example
         *    // Numeric ordering of formatted numbers with a pre-formatter
         *    $.extend( $.fn.dataTable.ext.type.order, {
         *      "string-pre": function(x) {
         *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
         *        return parseFloat( a );
         *      }
         *    } );
         *
         *  @example
         *    // Case-sensitive string ordering, with no pre-formatting method
         *    $.extend( $.fn.dataTable.ext.order, {
         *      "string-case-asc": function(x,y) {
         *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
         *      },
         *      "string-case-desc": function(x,y) {
         *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
         *      }
         *    } );
         */
        order: {}
      },

      /**
       * Unique DataTables instance counter
       *
       * @type int
       * @private
       */
      _unique: 0,


      //
      // Depreciated
      // The following properties are retained for backwards compatiblity only.
      // The should not be used in new projects and will be removed in a future
      // version
      //

      /**
       * Version check function.
       *  @type function
       *  @depreciated Since 1.10
       */
      fnVersionCheck: DataTable.fnVersionCheck,


      /**
       * Index for what 'this' index API functions should use
       *  @type int
       *  @deprecated Since v1.10
       */
      iApiIndex: 0,


      /**
       * jQuery UI class container
       *  @type object
       *  @deprecated Since v1.10
       */
      oJUIClasses: {},


      /**
       * Software version
       *  @type string
       *  @deprecated Since v1.10
       */
      sVersion: DataTable.version
    };


    //
    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
    //
    $.extend(_ext, {
      afnFiltering: _ext.search,
      aTypes: _ext.type.detect,
      ofnSearch: _ext.type.search,
      oSort: _ext.type.order,
      afnSortData: _ext.order,
      aoFeatures: _ext.feature,
      oApi: _ext.internal,
      oStdClasses: _ext.classes,
      oPagination: _ext.pager
    });


    $.extend(DataTable.ext.classes, {
      "sTable": "dataTable",
      "sNoFooter": "no-footer",

      /* Paging buttons */
      "sPageButton": "paginate_button",
      "sPageButtonActive": "current",
      "sPageButtonDisabled": "disabled",

      /* Striping classes */
      "sStripeOdd": "odd",
      "sStripeEven": "even",

      /* Empty row */
      "sRowEmpty": "dataTables_empty",

      /* Features */
      "sWrapper": "dataTables_wrapper",
      "sFilter": "dataTables_filter",
      "sInfo": "dataTables_info",
      "sPaging": "dataTables_paginate paging_",
      /* Note that the type is postfixed */
      "sLength": "dataTables_length",
      "sProcessing": "dataTables_processing",

      /* Sorting */
      "sSortAsc": "sorting_asc",
      "sSortDesc": "sorting_desc",
      "sSortable": "sorting",
      /* Sortable in both directions */
      "sSortableAsc": "sorting_asc_disabled",
      "sSortableDesc": "sorting_desc_disabled",
      "sSortableNone": "sorting_disabled",
      "sSortColumn": "sorting_",
      /* Note that an int is postfixed for the sorting order */

      /* Filtering */
      "sFilterInput": "",

      /* Page length */
      "sLengthSelect": "",

      /* Scrolling */
      "sScrollWrapper": "dataTables_scroll",
      "sScrollHead": "dataTables_scrollHead",
      "sScrollHeadInner": "dataTables_scrollHeadInner",
      "sScrollBody": "dataTables_scrollBody",
      "sScrollFoot": "dataTables_scrollFoot",
      "sScrollFootInner": "dataTables_scrollFootInner",

      /* Misc */
      "sHeaderTH": "",
      "sFooterTH": "",

      // Deprecated
      "sSortJUIAsc": "",
      "sSortJUIDesc": "",
      "sSortJUI": "",
      "sSortJUIAscAllowed": "",
      "sSortJUIDescAllowed": "",
      "sSortJUIWrapper": "",
      "sSortIcon": "",
      "sJUIHeader": "",
      "sJUIFooter": ""
    });


    (function() {

      // Reused strings for better compression. Closure compiler appears to have a
      // weird edge case where it is trying to expand strings rather than use the
      // variable version. This results in about 200 bytes being added, for very
      // little preference benefit since it this run on script load only.
      var _empty = '';
      _empty = '';

      var _stateDefault = _empty + 'ui-state-default';
      var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
      var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';

      $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
        /* Full numbers paging buttons */
        "sPageButton": "fg-button ui-button " + _stateDefault,
        "sPageButtonActive": "ui-state-disabled",
        "sPageButtonDisabled": "ui-state-disabled",

        /* Features */
        "sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " +
          "ui-buttonset-multi paging_",
        /* Note that the type is postfixed */

        /* Sorting */
        "sSortAsc": _stateDefault + " sorting_asc",
        "sSortDesc": _stateDefault + " sorting_desc",
        "sSortable": _stateDefault + " sorting",
        "sSortableAsc": _stateDefault + " sorting_asc_disabled",
        "sSortableDesc": _stateDefault + " sorting_desc_disabled",
        "sSortableNone": _stateDefault + " sorting_disabled",
        "sSortJUIAsc": _sortIcon + "triangle-1-n",
        "sSortJUIDesc": _sortIcon + "triangle-1-s",
        "sSortJUI": _sortIcon + "carat-2-n-s",
        "sSortJUIAscAllowed": _sortIcon + "carat-1-n",
        "sSortJUIDescAllowed": _sortIcon + "carat-1-s",
        "sSortJUIWrapper": "DataTables_sort_wrapper",
        "sSortIcon": "DataTables_sort_icon",

        /* Scrolling */
        "sScrollHead": "dataTables_scrollHead " + _stateDefault,
        "sScrollFoot": "dataTables_scrollFoot " + _stateDefault,

        /* Misc */
        "sHeaderTH": _stateDefault,
        "sFooterTH": _stateDefault,
        "sJUIHeader": _headerFooter + " ui-corner-tl ui-corner-tr",
        "sJUIFooter": _headerFooter + " ui-corner-bl ui-corner-br"
      });

    }());



    var extPagination = DataTable.ext.pager;

    function _numbers(page, pages) {
      var
        numbers = [],
        buttons = extPagination.numbers_length,
        half = Math.floor(buttons / 2),
        i = 1;

      if (pages <= buttons) {
        numbers = _range(0, pages);
      } else if (page <= half) {
        numbers = _range(0, buttons - 2);
        numbers.push('ellipsis');
        numbers.push(pages - 1);
      } else if (page >= pages - 1 - half) {
        numbers = _range(pages - (buttons - 2), pages);
        numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6
        numbers.splice(0, 0, 0);
      } else {
        numbers = _range(page - half + 2, page + half - 1);
        numbers.push('ellipsis');
        numbers.push(pages - 1);
        numbers.splice(0, 0, 'ellipsis');
        numbers.splice(0, 0, 0);
      }

      numbers.DT_el = 'span';
      return numbers;
    }


    $.extend(extPagination, {
      simple: function(page, pages) {
        return ['previous', 'next'];
      },

      full: function(page, pages) {
        return ['first', 'previous', 'next', 'last'];
      },

      numbers: function(page, pages) {
        return [_numbers(page, pages)];
      },

      simple_numbers: function(page, pages) {
        return ['previous', _numbers(page, pages), 'next'];
      },

      full_numbers: function(page, pages) {
        return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
      },

      // For testing and plug-ins to use
      _numbers: _numbers,

      // Number of number buttons (including ellipsis) to show. _Must be odd!_
      numbers_length: 7
    });


    $.extend(true, DataTable.ext.renderer, {
      pageButton: {
        _: function(settings, host, idx, buttons, page, pages) {
          var classes = settings.oClasses;
          var lang = settings.oLanguage.oPaginate;
          var aria = settings.oLanguage.oAria.paginate || {};
          var btnDisplay, btnClass, counter = 0;

          var attach = function(container, buttons) {
            var i, ien, node, button;
            var clickHandler = function(e) {
              _fnPageChange(settings, e.data.action, true);
            };

            for (i = 0, ien = buttons.length; i < ien; i++) {
              button = buttons[i];

              if ($.isArray(button)) {
                var inner = $('<' + (button.DT_el || 'div') + '/>')
                  .appendTo(container);
                attach(inner, button);
              } else {
                btnDisplay = null;
                btnClass = '';

                switch (button) {
                  case 'ellipsis':
                    container.append('<span class="ellipsis">&#x2026;</span>');
                    break;

                  case 'first':
                    btnDisplay = lang.sFirst;
                    btnClass = button + (page > 0 ?
                      '' : ' ' + classes.sPageButtonDisabled);
                    break;

                  case 'previous':
                    btnDisplay = lang.sPrevious;
                    btnClass = button + (page > 0 ?
                      '' : ' ' + classes.sPageButtonDisabled);
                    break;

                  case 'next':
                    btnDisplay = lang.sNext;
                    btnClass = button + (page < pages - 1 ?
                      '' : ' ' + classes.sPageButtonDisabled);
                    break;

                  case 'last':
                    btnDisplay = lang.sLast;
                    btnClass = button + (page < pages - 1 ?
                      '' : ' ' + classes.sPageButtonDisabled);
                    break;

                  default:
                    btnDisplay = button + 1;
                    btnClass = page === button ?
                      classes.sPageButtonActive : '';
                    break;
                }

                if (btnDisplay !== null) {
                  node = $('<a>', {
                      'class': classes.sPageButton + ' ' + btnClass,
                      'aria-controls': settings.sTableId,
                      'aria-label': aria[button],
                      'data-dt-idx': counter,
                      'tabindex': settings.iTabIndex,
                      'id': idx === 0 && typeof button === 'string' ?
                        settings.sTableId + '_' + button : null
                    })
                    .html(btnDisplay)
                    .appendTo(container);

                  _fnBindAction(
                    node, {
                      action: button
                    }, clickHandler
                  );

                  counter++;
                }
              }
            }
          };

          // IE9 throws an 'unknown error' if document.activeElement is used
          // inside an iframe or frame. Try / catch the error. Not good for
          // accessibility, but neither are frames.
          var activeEl;

          try {
            // Because this approach is destroying and recreating the paging
            // elements, focus is lost on the select button which is bad for
            // accessibility. So we want to restore focus once the draw has
            // completed
            activeEl = $(host).find(document.activeElement).data('dt-idx');
          } catch (e) {}

          attach($(host).empty(), buttons);

          if (activeEl) {
            $(host).find('[data-dt-idx=' + activeEl + ']').focus();
          }
        }
      }
    });



    // Built in type detection. See model.ext.aTypes for information about
    // what is required from this methods.
    $.extend(DataTable.ext.type.detect, [
      // Plain numbers - first since V8 detects some plain numbers as dates
      // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
      function(d, settings) {
        var decimal = settings.oLanguage.sDecimal;
        return _isNumber(d, decimal) ? 'num' + decimal : null;
      },

      // Dates (only those recognised by the browser's Date.parse)
      function(d, settings) {
        // V8 will remove any unknown characters at the start and end of the
        // expression, leading to false matches such as `$245.12` or `10%` being
        // a valid date. See forum thread 18941 for detail.
        if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) {
          return null;
        }
        var parsed = Date.parse(d);
        return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
      },

      // Formatted numbers
      function(d, settings) {
        var decimal = settings.oLanguage.sDecimal;
        return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
      },

      // HTML numeric
      function(d, settings) {
        var decimal = settings.oLanguage.sDecimal;
        return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
      },

      // HTML numeric, formatted
      function(d, settings) {
        var decimal = settings.oLanguage.sDecimal;
        return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
      },

      // HTML (this is strict checking - there must be html)
      function(d, settings) {
        return _empty(d) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
          'html' : null;
      }
    ]);



    // Filter formatting functions. See model.ext.ofnSearch for information about
    // what is required from these methods.
    // 
    // Note that additional search methods are added for the html numbers and
    // html formatted numbers by `_addNumericSort()` when we know what the decimal
    // place is


    $.extend(DataTable.ext.type.search, {
      html: function(data) {
        return _empty(data) ?
          data :
          typeof data === 'string' ?
          data
          .replace(_re_new_lines, " ")
          .replace(_re_html, "") :
          '';
      },

      string: function(data) {
        return _empty(data) ?
          data :
          typeof data === 'string' ?
          data.replace(_re_new_lines, " ") :
          data;
      }
    });



    var __numericReplace = function(d, decimalPlace, re1, re2) {
      if (d !== 0 && (!d || d === '-')) {
        return -Infinity;
      }

      // If a decimal place other than `.` is used, it needs to be given to the
      // function so we can detect it and replace with a `.` which is the only
      // decimal place Javascript recognises - it is not locale aware.
      if (decimalPlace) {
        d = _numToDecimal(d, decimalPlace);
      }

      if (d.replace) {
        if (re1) {
          d = d.replace(re1, '');
        }

        if (re2) {
          d = d.replace(re2, '');
        }
      }

      return d * 1;
    };


    // Add the numeric 'deformatting' functions for sorting and search. This is done
    // in a function to provide an easy ability for the language options to add
    // additional methods if a non-period decimal place is used.
    function _addNumericSort(decimalPlace) {
      $.each({
          // Plain numbers
          "num": function(d) {
            return __numericReplace(d, decimalPlace);
          },

          // Formatted numbers
          "num-fmt": function(d) {
            return __numericReplace(d, decimalPlace, _re_formatted_numeric);
          },

          // HTML numeric
          "html-num": function(d) {
            return __numericReplace(d, decimalPlace, _re_html);
          },

          // HTML numeric, formatted
          "html-num-fmt": function(d) {
            return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
          }
        },
        function(key, fn) {
          // Add the ordering method
          _ext.type.order[key + decimalPlace + '-pre'] = fn;

          // For HTML types add a search formatter that will strip the HTML
          if (key.match(/^html\-/)) {
            _ext.type.search[key + decimalPlace] = _ext.type.search.html;
          }
        }
      );
    }


    // Default sort methods
    $.extend(_ext.type.order, {
      // Dates
      "date-pre": function(d) {
        return Date.parse(d) || 0;
      },

      // html
      "html-pre": function(a) {
        return _empty(a) ?
          '' :
          a.replace ?
          a.replace(/<.*?>/g, "").toLowerCase() :
          a + '';
      },

      // string
      "string-pre": function(a) {
        // This is a little complex, but faster than always calling toString,
        // http://jsperf.com/tostring-v-check
        return _empty(a) ?
          '' :
          typeof a === 'string' ?
          a.toLowerCase() :
          !a.toString ?
          '' :
          a.toString();
      },

      // string-asc and -desc are retained only for compatibility with the old
      // sort methods
      "string-asc": function(x, y) {
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
      },

      "string-desc": function(x, y) {
        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
      }
    });


    // Numeric sorting types - order doesn't matter here
    _addNumericSort('');


    $.extend(true, DataTable.ext.renderer, {
      header: {
        _: function(settings, cell, column, classes) {
          // No additional mark-up required
          // Attach a sort listener to update on sort - note that using the
          // `DT` namespace will allow the event to be removed automatically
          // on destroy, while the `dt` namespaced event is the one we are
          // listening for
          $(settings.nTable).on('order.dt.DT', function(e, ctx, sorting, columns) {
            if (settings !== ctx) { // need to check this this is the host
              return; // table, not a nested one
            }

            var colIdx = column.idx;

            cell
              .removeClass(
                column.sSortingClass + ' ' +
                classes.sSortAsc + ' ' +
                classes.sSortDesc
              )
              .addClass(columns[colIdx] == 'asc' ?
                classes.sSortAsc : columns[colIdx] == 'desc' ?
                classes.sSortDesc :
                column.sSortingClass
              );
          });
        },

        jqueryui: function(settings, cell, column, classes) {
          $('<div/>')
            .addClass(classes.sSortJUIWrapper)
            .append(cell.contents())
            .append($('<span/>')
              .addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)
            )
            .appendTo(cell);

          // Attach a sort listener to update on sort
          $(settings.nTable).on('order.dt.DT', function(e, ctx, sorting, columns) {
            if (settings !== ctx) {
              return;
            }

            var colIdx = column.idx;

            cell
              .removeClass(classes.sSortAsc + " " + classes.sSortDesc)
              .addClass(columns[colIdx] == 'asc' ?
                classes.sSortAsc : columns[colIdx] == 'desc' ?
                classes.sSortDesc :
                column.sSortingClass
              );

            cell
              .find('span.' + classes.sSortIcon)
              .removeClass(
                classes.sSortJUIAsc + " " +
                classes.sSortJUIDesc + " " +
                classes.sSortJUI + " " +
                classes.sSortJUIAscAllowed + " " +
                classes.sSortJUIDescAllowed
              )
              .addClass(columns[colIdx] == 'asc' ?
                classes.sSortJUIAsc : columns[colIdx] == 'desc' ?
                classes.sSortJUIDesc :
                column.sSortingClassJUI
              );
          });
        }
      }
    });

    /*
     * Public helper functions. These aren't used internally by DataTables, or
     * called by any of the options passed into DataTables, but they can be used
     * externally by developers working with DataTables. They are helper functions
     * to make working with DataTables a little bit easier.
     */

    /**
     * Helpers for `columns.render`.
     *
     * The options defined here can be used with the `columns.render` initialisation
     * option to provide a display renderer. The following functions are defined:
     *
     * * `number` - Will format numeric data (defined by `columns.data`) for
     *   display, retaining the original unformatted data for sorting and filtering.
     *   It takes 5 parameters:
     *   * `string` - Thousands grouping separator
     *   * `string` - Decimal point indicator
     *   * `integer` - Number of decimal points to show
     *   * `string` (optional) - Prefix.
     *   * `string` (optional) - Postfix (/suffix).
     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
     *   parameters.
     *
     * @example
     *   // Column definition using the number renderer
     *   {
     *     data: "salary",
     *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
     *   }
     *
     * @namespace
     */
    DataTable.render = {
      number: function(thousands, decimal, precision, prefix, postfix) {
        return {
          display: function(d) {
            if (typeof d !== 'number' && typeof d !== 'string') {
              return d;
            }

            var negative = d < 0 ? '-' : '';
            var flo = parseFloat(d);

            // If NaN then there isn't much formatting that we can do - just
            // return immediately
            if (isNaN(flo)) {
              return d;
            }

            d = Math.abs(flo);

            var intPart = parseInt(d, 10);
            var floatPart = precision ?
              decimal + (d - intPart).toFixed(precision).substring(2) :
              '';

            return negative + (prefix || '') +
              intPart.toString().replace(
                /\B(?=(\d{3})+(?!\d))/g, thousands
              ) +
              floatPart +
              (postfix || '');
          }
        };
      },

      text: function() {
        return {
          display: function(d) {
            return typeof d === 'string' ?
              d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
              d;
          }
        };
      }
    };


    /*
     * This is really a good bit rubbish this method of exposing the internal methods
     * publicly... - To be fixed in 2.0 using methods on the prototype
     */


    /**
     * Create a wrapper function for exporting an internal functions to an external API.
     *  @param {string} fn API function name
     *  @returns {function} wrapped function
     *  @memberof DataTable#internal
     */
    function _fnExternApiFunc(fn) {
      return function() {
        var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(
          Array.prototype.slice.call(arguments)
        );
        return DataTable.ext.internal[fn].apply(this, args);
      };
    }


    /**
     * Reference to internal functions for use by plug-in developers. Note that
     * these methods are references to internal functions and are considered to be
     * private. If you use these methods, be aware that they are liable to change
     * between versions.
     *  @namespace
     */
    $.extend(DataTable.ext.internal, {
      _fnExternApiFunc: _fnExternApiFunc,
      _fnBuildAjax: _fnBuildAjax,
      _fnAjaxUpdate: _fnAjaxUpdate,
      _fnAjaxParameters: _fnAjaxParameters,
      _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
      _fnAjaxDataSrc: _fnAjaxDataSrc,
      _fnAddColumn: _fnAddColumn,
      _fnColumnOptions: _fnColumnOptions,
      _fnAdjustColumnSizing: _fnAdjustColumnSizing,
      _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
      _fnColumnIndexToVisible: _fnColumnIndexToVisible,
      _fnVisbleColumns: _fnVisbleColumns,
      _fnGetColumns: _fnGetColumns,
      _fnColumnTypes: _fnColumnTypes,
      _fnApplyColumnDefs: _fnApplyColumnDefs,
      _fnHungarianMap: _fnHungarianMap,
      _fnCamelToHungarian: _fnCamelToHungarian,
      _fnLanguageCompat: _fnLanguageCompat,
      _fnBrowserDetect: _fnBrowserDetect,
      _fnAddData: _fnAddData,
      _fnAddTr: _fnAddTr,
      _fnNodeToDataIndex: _fnNodeToDataIndex,
      _fnNodeToColumnIndex: _fnNodeToColumnIndex,
      _fnGetCellData: _fnGetCellData,
      _fnSetCellData: _fnSetCellData,
      _fnSplitObjNotation: _fnSplitObjNotation,
      _fnGetObjectDataFn: _fnGetObjectDataFn,
      _fnSetObjectDataFn: _fnSetObjectDataFn,
      _fnGetDataMaster: _fnGetDataMaster,
      _fnClearTable: _fnClearTable,
      _fnDeleteIndex: _fnDeleteIndex,
      _fnInvalidate: _fnInvalidate,
      _fnGetRowElements: _fnGetRowElements,
      _fnCreateTr: _fnCreateTr,
      _fnBuildHead: _fnBuildHead,
      _fnDrawHead: _fnDrawHead,
      _fnDraw: _fnDraw,
      _fnReDraw: _fnReDraw,
      _fnAddOptionsHtml: _fnAddOptionsHtml,
      _fnDetectHeader: _fnDetectHeader,
      _fnGetUniqueThs: _fnGetUniqueThs,
      _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
      _fnFilterComplete: _fnFilterComplete,
      _fnFilterCustom: _fnFilterCustom,
      _fnFilterColumn: _fnFilterColumn,
      _fnFilter: _fnFilter,
      _fnFilterCreateSearch: _fnFilterCreateSearch,
      _fnEscapeRegex: _fnEscapeRegex,
      _fnFilterData: _fnFilterData,
      _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
      _fnUpdateInfo: _fnUpdateInfo,
      _fnInfoMacros: _fnInfoMacros,
      _fnInitialise: _fnInitialise,
      _fnInitComplete: _fnInitComplete,
      _fnLengthChange: _fnLengthChange,
      _fnFeatureHtmlLength: _fnFeatureHtmlLength,
      _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
      _fnPageChange: _fnPageChange,
      _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
      _fnProcessingDisplay: _fnProcessingDisplay,
      _fnFeatureHtmlTable: _fnFeatureHtmlTable,
      _fnScrollDraw: _fnScrollDraw,
      _fnApplyToChildren: _fnApplyToChildren,
      _fnCalculateColumnWidths: _fnCalculateColumnWidths,
      _fnThrottle: _fnThrottle,
      _fnConvertToWidth: _fnConvertToWidth,
      _fnGetWidestNode: _fnGetWidestNode,
      _fnGetMaxLenString: _fnGetMaxLenString,
      _fnStringToCss: _fnStringToCss,
      _fnSortFlatten: _fnSortFlatten,
      _fnSort: _fnSort,
      _fnSortAria: _fnSortAria,
      _fnSortListener: _fnSortListener,
      _fnSortAttachListener: _fnSortAttachListener,
      _fnSortingClasses: _fnSortingClasses,
      _fnSortData: _fnSortData,
      _fnSaveState: _fnSaveState,
      _fnLoadState: _fnLoadState,
      _fnSettingsFromNode: _fnSettingsFromNode,
      _fnLog: _fnLog,
      _fnMap: _fnMap,
      _fnBindAction: _fnBindAction,
      _fnCallbackReg: _fnCallbackReg,
      _fnCallbackFire: _fnCallbackFire,
      _fnLengthOverflow: _fnLengthOverflow,
      _fnRenderer: _fnRenderer,
      _fnDataSource: _fnDataSource,
      _fnRowAttributes: _fnRowAttributes,
      _fnCalculateEnd: function() {} // Used by a lot of plug-ins, but redundant
        // in 1.10, so this dead-end function is
        // added to prevent errors
    });


    // jQuery access
    $.fn.dataTable = DataTable;

    // Provide access to the host jQuery object (circular reference)
    DataTable.$ = $;

    // Legacy aliases
    $.fn.dataTableSettings = DataTable.settings;
    $.fn.dataTableExt = DataTable.ext;

    // With a capital `D` we return a DataTables API instance rather than a
    // jQuery object
    $.fn.DataTable = function(opts) {
      return $(this).dataTable(opts).api();
    };

    // All properties that are available to $.fn.dataTable should also be
    // available on $.fn.DataTable
    $.each(DataTable, function(prop, val) {
      $.fn.DataTable[prop] = val;
    });


    // Information about events fired by DataTables - for documentation.
    /**
     * Draw event, fired whenever the table is redrawn on the page, at the same
     * point as fnDrawCallback. This may be useful for binding events or
     * performing calculations when the table is altered at all.
     *  @name DataTable#draw.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * Search event, fired when the searching applied to the table (using the
     * built-in global search, or column filters) is altered.
     *  @name DataTable#search.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * Page change event, fired when the paging of the table is altered.
     *  @name DataTable#page.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * Order event, fired when the ordering applied to the table is altered.
     *  @name DataTable#order.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * DataTables initialisation complete event, fired when the table is fully
     * drawn, including Ajax data loaded, if Ajax data is required.
     *  @name DataTable#init.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} oSettings DataTables settings object
     *  @param {object} json The JSON object request from the server - only
     *    present if client-side Ajax sourced data is used</li></ol>
     */

    /**
     * State save event, fired when the table has changed state a new state save
     * is required. This event allows modification of the state saving object
     * prior to actually doing the save, including addition or other state
     * properties (for plug-ins) or modification of a DataTables core property.
     *  @name DataTable#stateSaveParams.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} oSettings DataTables settings object
     *  @param {object} json The state information to be saved
     */

    /**
     * State load event, fired when the table is loading state from the stored
     * data, but prior to the settings object being modified by the saved state
     * - allowing modification of the saved state is required or loading of
     * state for a plug-in.
     *  @name DataTable#stateLoadParams.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} oSettings DataTables settings object
     *  @param {object} json The saved state information
     */

    /**
     * State loaded event, fired when state has been loaded from stored data and
     * the settings object has been modified by the loaded data.
     *  @name DataTable#stateLoaded.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} oSettings DataTables settings object
     *  @param {object} json The saved state information
     */

    /**
     * Processing event, fired when DataTables is doing some kind of processing
     * (be it, order, searcg or anything else). It can be used to indicate to
     * the end user that there is something happening, or that something has
     * finished.
     *  @name DataTable#processing.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} oSettings DataTables settings object
     *  @param {boolean} bShow Flag for if DataTables is doing processing or not
     */

    /**
     * Ajax (XHR) event, fired whenever an Ajax request is completed from a
     * request to made to the server for new data. This event is called before
     * DataTables processed the returned data, so it can also be used to pre-
     * process the data returned from the server, if needed.
     *
     * Note that this trigger is called in `fnServerData`, if you override
     * `fnServerData` and which to use this event, you need to trigger it in you
     * success function.
     *  @name DataTable#xhr.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     *  @param {object} json JSON returned from the server
     *
     *  @example
     *     // Use a custom property returned from the server in another DOM element
     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
     *       $('#status').html( json.status );
     *     } );
     *
     *  @example
     *     // Pre-process the data returned from the server
     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
     *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
     *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
     *       }
     *       // Note no return - manipulate the data directly in the JSON object.
     *     } );
     */

    /**
     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
     * or passing the bDestroy:true parameter in the initialisation object. This
     * can be used to remove bound events, added DOM nodes, etc.
     *  @name DataTable#destroy.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * Page length change event, fired when number of records to show on each
     * page (the length) is changed.
     *  @name DataTable#length.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     *  @param {integer} len New length
     */

    /**
     * Column sizing has changed.
     *  @name DataTable#column-sizing.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     */

    /**
     * Column visibility has changed.
     *  @name DataTable#column-visibility.dt
     *  @event
     *  @param {event} e jQuery event object
     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
     *  @param {int} column Column index
     *  @param {bool} vis `false` if column now hidden, or `true` if visible
     */

    return $.fn.dataTable;
  }));
//--------------------------------------------------------------------------------------------

/*!
 DataTables Bootstrap 3 integration
 Â©2011-2015 SpryMedia Ltd - datatables.net/license
*/
(function(b) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function(a) {
    return b(a, window, document)
  }) : "object" === typeof exports ? module.exports = function(a, e) {
    a || (a = window);
    if (!e || !e.fn.dataTable) e = require("datatables.net")(a, e).$;
    return b(e, a, a.document)
  } : b(jQuery, window, document)
})(function(b, a, e) {
  var d = b.fn.dataTable;
  b.extend(!0, d.defaults, {
    dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
    renderer: "bootstrap"
  });
  b.extend(d.ext.classes, {
    sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
    sFilterInput: "form-control input-sm",
    sLengthSelect: "form-control input-sm",
    sProcessing: "dataTables_processing panel panel-default"
  });
  d.ext.renderer.pageButton.bootstrap = function(a, h, r, m, j, n) {
    var o = new d.Api(a),
      s = a.oClasses,
      k = a.oLanguage.oPaginate,
      t = a.oLanguage.oAria.paginate || {},
      f, g, p = 0,
      q = function(d, e) {
        var l, h, i, c, m = function(a) {
          a.preventDefault();
          !b(a.currentTarget).hasClass("disabled") && o.page() != a.data.action && o.page(a.data.action).draw("page")
        };
        l = 0;
        for (h = e.length; l < h; l++)
          if (c = e[l], b.isArray(c)) q(d, c);
          else {
            g = f = "";
            switch (c) {
              case "ellipsis":
                f = "&#x2026;";
                g = "disabled";
                break;
              case "first":
                f = k.sFirst;
                g = c + (0 < j ? "" : " disabled");
                break;
              case "previous":
                f = k.sPrevious;
                g = c + (0 < j ? "" : " disabled");
                break;
              case "next":
                f = k.sNext;
                g = c + (j < n - 1 ? "" : " disabled");
                break;
              case "last":
                f = k.sLast;
                g = c + (j < n - 1 ? "" : " disabled");
                break;
              default:
                f = c + 1, g = j === c ? "active" : ""
            }
            f && (i = b("<li>", {
              "class": s.sPageButton + " " + g,
              id: 0 === r && "string" === typeof c ? a.sTableId + "_" + c : null
            }).append(b("<a>", {
              href: "#",
              "aria-controls": a.sTableId,
              "aria-label": t[c],
              "data-dt-idx": p,
              tabindex: a.iTabIndex
            }).html(f)).appendTo(d), a.oApi._fnBindAction(i, {
              action: c
            }, m), p++)
          }
      },
      i;
    try {
      i = b(h).find(e.activeElement).data("dt-idx")
    } catch (u) {}
    q(b(h).empty().html('<ul class="pagination"/>').children("ul"), m);
    i && b(h).find("[data-dt-idx=" + i + "]").focus()
  };
  d.TableTools && (b.extend(!0, d.TableTools.classes, {
    container: "DTTT btn-group",
    buttons: {
      normal: "btn btn-default",
      disabled: "disabled"
    },
    collection: {
      container: "DTTT_dropdown dropdown-menu",
      buttons: {
        normal: "",
        disabled: "disabled"
      }
    },
    print: {
      info: "DTTT_print_info"
    },
    select: {
      row: "active"
    }
  }), b.extend(!0, d.TableTools.DEFAULTS.oTags, {
    collection: {
      container: "ul",
      button: "li",
      liner: "a"
    }
  }));
  return d
});


//--------------------------------------------------------------------------------------------



/**
 * jQuery Bar Rating Plugin v1.1.4
 *
 * http://github.com/antennaio/jquery-bar-rating
 *
 * Copyright (c) 2012-2015 Kazik Pietruszewski
 *
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 */
(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // browser globals
    factory(jQuery);
  }
}(function($) {

  var BarRating = (function() {

    function BarRating() {
      var self = this;

      // wrap element in a wrapper div
      var wrapElement = function() {
        var classes = [self.options.wrapperClass];

        if (self.options.theme !== '') {
          classes.push('br-theme-' + self.options.theme);
        }

        self.$elem.wrap($('<div />', {
          'class': classes.join(' ')
        }));
      };

      // unwrap element
      var unwrapElement = function() {
        self.$elem.unwrap();
      };

      // return initial option
      var findInitialOption = function() {
        var option;

        if (self.options.initialRating) {
          option = $('option[value="' + self.options.initialRating + '"]', self.$elem);
        } else {
          option = $('option:selected', self.$elem);
        }

        return option;
      };

      // get data
      var getData = function(key) {
        var data = self.$elem.data('barrating');

        if (typeof key !== 'undefined') {
          return data[key];
        }

        return data;
      };

      // set data
      var setData = function(key, value) {
        if (value !== null && typeof value === 'object') {
          self.$elem.data('barrating', value);
        } else {
          self.$elem.data('barrating')[key] = value;
        }
      };

      // save data on element
      var saveDataOnElement = function() {
        var $opt = findInitialOption();

        setData(null, {
          userOptions: self.options,

          // initial rating based on the OPTION value
          ratingValue: $opt.val(),
          ratingText: ($opt.data('html')) ? $opt.data('html') : $opt.text(),

          // rating will be restored by calling clear method
          originalRatingValue: $opt.val(),
          originalRatingText: ($opt.data('html')) ? $opt.data('html') : $opt.text(),

          // read-only state
          readOnly: self.options.readonly,

          // first OPTION empty - allow deselecting of ratings
          deselectable: (!self.$elem.find('option:first').val()) ? true : false
        });
      };

      // remove data on element
      var removeDataOnElement = function() {
        self.$elem.removeData('barrating');
      };

      // return current rating text
      var ratingText = function() {
        return getData('ratingText');
      };

      // return current rating value
      var ratingValue = function() {
        return getData('ratingValue');
      };

      // build widget and return jQuery element
      var buildWidget = function() {
        var $w = $('<div />', {
          'class': 'br-widget'
        });

        // create A elements that will replace OPTIONs
        self.$elem.find('option').each(function() {
          var val, text, html, $a;

          val = $(this).val();

          // create ratings - but only if val is defined
          if (val) {
            text = $(this).text();
            html = $(this).data('html');
            if (html) {
              text = html;
            }

            $a = $('<a />', {
              'href': '#',
              'data-rating-value': val,
              'data-rating-text': text,
              'html': (self.options.showValues) ? text : ''
            });

            $w.append($a);
          }

        });

        // append .br-current-rating div to the widget
        if (self.options.showSelectedRating) {
          $w.append($('<div />', {
            'text': '',
            'class': 'br-current-rating'
          }));
        }

        // additional classes for the widget
        if (self.options.reverse) {
          $w.addClass('br-reverse');
        }

        if (self.options.readonly) {
          $w.addClass('br-readonly');
        }

        return $w;
      };

      // return a jQuery function name depending on the 'reverse' setting
      var nextAllorPreviousAll = function() {
        if (getData('userOptions').reverse) {
          return 'nextAll';
        } else {
          return 'prevAll';
        }
      };

      // set the value of the select field
      var setSelectFieldValue = function(value) {
        // change selected OPTION in the select field (hidden)
        self.$elem.find('option[value="' + value + '"]').prop('selected', true);
        self.$elem.change();
      };

      // display the currently selected rating
      var showSelectedRating = function(text) {
        // text undefined?
        text = text ? text : ratingText();

        // update .br-current-rating div
        if (self.options.showSelectedRating) {
          self.$elem.parent().find('.br-current-rating').text(text);
        }
      };

      // apply style by setting classes on elements
      var applyStyle = function() {
        // remove classes
        self.$widget.find('a').removeClass('br-selected br-current');

        // add classes
        self.$widget.find('a[data-rating-value="' + ratingValue() + '"]')
          .addClass('br-selected br-current')[nextAllorPreviousAll()]()
          .addClass('br-selected');
      };

      // check if the element is deselectable?
      var isDeselectable = function($element) {
        return ($element.hasClass('br-current') && getData('deselectable'));
      };

      // handle click events
      var attachClickHandler = function($elements) {
        $elements.on('click.barrating', function(event) {
          var $a = $(this),
            options = getData('userOptions'),
            value,
            text;

          event.preventDefault();

          $elements.removeClass('br-active br-selected');
          $a.addClass('br-selected')[nextAllorPreviousAll()]()
            .addClass('br-selected');

          value = $a.attr('data-rating-value');
          text = $a.attr('data-rating-text');

          // is current and deselectable?
          if (isDeselectable($a)) {
            $a.removeClass('br-selected br-current')[nextAllorPreviousAll()]()
              .removeClass('br-selected br-current');
            value = '';
            text = '';
          } else {
            $elements.removeClass('br-current');
            $a.addClass('br-current');
          }

          // remember selected rating
          setData('ratingValue', value);
          setData('ratingText', text);

          setSelectFieldValue(value);
          showSelectedRating(text);

          // onSelect callback
          options.onSelect.call(
            self,
            ratingValue(),
            ratingText(),
            event
          );

          return false;
        });
      };

      // handle mouseenter events
      var attachMouseEnterHandler = function($elements) {
        $elements.on('mouseenter.barrating focus.barrating', function() {
          var $a = $(this);

          $elements.removeClass('br-active br-selected');
          $a.addClass('br-active')[nextAllorPreviousAll()]()
            .addClass('br-active');

          showSelectedRating($a.attr('data-rating-text'));
        });
      };

      // handle mouseleave events
      var attachMouseLeaveHandler = function($elements) {
        self.$widget.on('mouseleave.barrating blur.barrating', function() {
          $elements.removeClass('br-active');
          showSelectedRating();
          applyStyle();
        });
      };

      // somewhat primitive way to remove 300ms click delay on touch devices
      // for a more advanced solution consider setting `fastClicks` option to false
      // and using a library such as fastclick (https://github.com/ftlabs/fastclick)
      var fastClicks = function($elements) {
        $elements.on('touchstart.barrating', function(event) {
          event.preventDefault();
          event.stopPropagation();

          $(this).click();
        });
      };

      // disable clicks
      var disableClicks = function($elements) {
        $elements.on('click.barrating', function(event) {
          event.preventDefault();
        });
      };

      var attachHandlers = function($elements) {
        // attach click event handler
        attachClickHandler($elements);

        if (self.options.hoverState) {
          // attach mouseenter event handler
          attachMouseEnterHandler($elements);

          // attach mouseleave event handler
          attachMouseLeaveHandler($elements);
        }
      };

      var detachHandlers = function($elements) {
        // remove event handlers in the ".barrating" namespace
        $elements.off('.barrating');
      };

      var setupHandlers = function(readonly) {
        $elements = self.$widget.find('a');

        if (fastClicks) {
          fastClicks($elements);
        }

        if (readonly) {
          detachHandlers($elements);
          disableClicks($elements);
        } else {
          attachHandlers($elements);
        }
      };

      this.show = function() {
        // run only once
        if (getData()) return;

        // wrap element
        wrapElement();

        // save data
        saveDataOnElement();

        // build & append widget to the DOM
        self.$widget = buildWidget();
        self.$widget.insertAfter(self.$elem);

        applyStyle();

        showSelectedRating();

        setupHandlers(self.options.readonly);

        // hide the select field
        self.$elem.hide();
      };

      this.readonly = function(state) {
        if (typeof state !== 'boolean' || getData('readOnly') == state) return;

        setupHandlers(state);
        setData('readOnly', state);
        self.$widget.toggleClass('br-readonly');
      };

      this.set = function(value) {
        var options = getData('userOptions');

        if (!self.$elem.find('option[value="' + value + '"]').val()) return;

        // set data
        setData('ratingValue', value);
        setData('ratingText', self.$elem.find('option[value="' + value + '"]').text());

        setSelectFieldValue(ratingValue());
        showSelectedRating(ratingText());

        applyStyle();

        // onSelect callback
        if (!options.silent) {
          options.onSelect.call(
            this,
            ratingValue(),
            ratingText()
          );
        }
      };

      this.clear = function() {
        var options = getData('userOptions');

        // restore original data
        setData('ratingValue', getData('originalRatingValue'));
        setData('ratingText', getData('originalRatingText'));

        setSelectFieldValue(ratingValue());
        showSelectedRating(ratingText());

        applyStyle();

        // onClear callback
        options.onClear.call(
          this,
          ratingValue(),
          ratingText()
        );
      };

      this.destroy = function() {
        var value = ratingValue();
        var text = ratingText();
        var options = getData('userOptions');

        // detach handlers
        detachHandlers(self.$widget.find('a'));

        // remove widget
        self.$widget.remove();

        // remove data
        removeDataOnElement();

        // unwrap the element
        unwrapElement();

        // show the element
        self.$elem.show();

        // onDestroy callback
        options.onDestroy.call(
          this,
          value,
          text
        );
      };
    }

    BarRating.prototype.init = function(options, elem) {
      this.$elem = $(elem);
      this.options = $.extend({}, $.fn.barrating.defaults, options);

      return this.options;
    };

    return BarRating;
  })();

  $.fn.barrating = function(method, options) {
    return this.each(function() {
      var plugin = new BarRating();

      // plugin works with select fields
      if (!$(this).is('select')) {
        $.error('Sorry, this plugin only works with select fields.');
      }

      // method supplied
      if (plugin.hasOwnProperty(method)) {
        plugin.init(options, this);
        if (method === 'show') {
          return plugin.show(options);
        } else {
          // plugin exists?
          if (plugin.$elem.data('barrating')) {
            plugin.$widget = $(this).next('.br-widget');
            return plugin[method](options);
          }
        }

        // no method supplied or only options supplied
      } else if (typeof method === 'object' || !method) {
        options = method;
        plugin.init(options, this);
        return plugin.show();

      } else {
        $.error('Method ' + method + ' does not exist on jQuery.barrating');
      }
    });
  };

  $.fn.barrating.defaults = {
    theme: '',
    initialRating: null, // initial rating
    showValues: false, // display rating values on the bars?
    showSelectedRating: true, // append a div with a rating to the widget?
    reverse: false, // reverse the rating?
    readonly: false, // make the rating ready-only?
    fastClicks: true, // remove 300ms click delay on touch devices?
    hoverState: true, // change state on hover?
    silent: false, // supress callbacks when controlling ratings programatically
    wrapperClass: 'br-wrapper', // class applied to wrapper div
    onSelect: function(value, text, event) {}, // callback fired when a rating is selected
    onClear: function(value, text) {}, // callback fired when a rating is cleared
    onDestroy: function(value, text) {} // callback fired when a widget is destroyed
  };

  $.fn.barrating.BarRating = BarRating;

}));



/* ---------------------- 
  Tweetie-plugin
---------------------- */
/**
 * Tweetie: A simple Twitter feed plugin
 * Author: Sonny T. <hi@sonnyt.com>, sonnyt.com
 */

(function($) {
  'use strict';

  $.fn.twittie = function() {
    var options = (arguments[0] instanceof Object) ? arguments[0] : {},
      callback = (typeof arguments[0] === 'function') ? arguments[0] : arguments[1];

    // Default settings
    var settings = $.extend({
      'username': null,
      'list': null,
      'hashtag': null,
      'count': 10,
      'hideReplies': false,
      'dateFormat': '%b/%d/%Y',
      'template': '{{date}} - {{tweet}}',
      'apiPath': 'php/twitter-api/tweet.php',
      'loadingText': 'Loading...'
    }, options);

    if (settings.list && !settings.username) {
      $.error('If you want to fetch tweets from a list, you must define the username of the list owner.');
    }

    /**
     * Applies @reply, #hash and http links
     * @param  {String} tweet A single tweet
     * @return {String}       Fixed tweet
     *
     * Thanks to @Wachem enhanced linking.
     */
    var linking = function(tweet) {
      var twit = tweet.replace(/(https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?)/ig, '<a href="$1" target="_blank" title="Visit this link">$1</a>')
        .replace(/#([a-zA-Z0-9_]+)/g, '<a href="https://twitter.com/search?q=%23$1&amp;src=hash" target="_blank" title="Search for #$1">#$1</a>')
        .replace(/@([a-zA-Z0-9_]+)/g, '<a href="https://twitter.com/$1" target="_blank" title="$1 on Twitter">@$1</a>');

      return twit;
    };

    /**
     * Formating a date
     * @param  {String} twt_date Twitter date
     * @return {String}          Formatted date
     */
    var dating = function(twt_date) {
      // fix for IE
      var time = twt_date.split(' ');
      twt_date = new Date(Date.parse(time[1] + ' ' + time[2] + ', ' + time[5] + ' ' + time[3] + ' UTC'));

      var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      var _date = {
        '%d': twt_date.getDate(),
        '%m': twt_date.getMonth() + 1,
        '%b': months[twt_date.getMonth()].substr(0, 3),
        '%B': months[twt_date.getMonth()],
        '%y': String(twt_date.getFullYear()).slice(-2),
        '%Y': twt_date.getFullYear()
      };

      var date = settings.dateFormat;
      var format = settings.dateFormat.match(/%[dmbByY]/g);

      for (var i = 0, len = format.length; i < len; i++) {
        date = date.replace(format[i], _date[format[i]]);
      }

      return date;
    };

    /**
     * Templating a tweet using '{{ }}' braces
     * @param  {Object} data Tweet details are passed
     * @return {String}      Templated string
     */
    var templating = function(data) {
      var temp = settings.template;
      var temp_variables = ['date', 'tweet', 'avatar', 'url', 'retweeted', 'screen_name', 'user_name'];

      for (var i = 0, len = temp_variables.length; i < len; i++) {
        temp = temp.replace(new RegExp('{{' + temp_variables[i] + '}}', 'gi'), data[temp_variables[i]]);
      }

      return temp;
    };

    // Set loading
    this.html('<span>' + settings.loadingText + '</span>');

    var that = this;

    // Fetch tweets
    $.getJSON(settings.apiPath, {
      username: settings.username,
      list: settings.list,
      hashtag: settings.hashtag,
      count: settings.count,
      exclude_replies: settings.hideReplies
    }, function(twt) {
      that.find('span').fadeOut('fast', function() {
        that.html('<ul></ul>');

        for (var i = 0; i < settings.count; i++) {
          var tweet = false;
          if (twt[i]) {
            tweet = twt[i];
          } else if (twt.statuses !== undefined && twt.statuses[i]) {
            tweet = twt.statuses[i];
          } else {
            break;
          }

          var temp_data = {
            user_name: tweet.user.name,
            date: dating(tweet.created_at),
            tweet: (tweet.retweeted) ? linking('RT @' + tweet.user.screen_name + ': ' + tweet.retweeted_status.text) : linking(tweet.text),
            avatar: '<img src="' + tweet.user.profile_image_url + '" />',
            url: 'https://twitter.com/' + tweet.user.screen_name + '/status/' + tweet.id_str,
            retweeted: tweet.retweeted,
            screen_name: linking('@' + tweet.user.screen_name)
          };

          that.find('ul').append('<li>' + templating(temp_data) + '</li>');
        }

        if (typeof callback === 'function') {
          callback();
        }
      });
    });
  };

})(jQuery);
//--------------------------------------------------------------------------------------------

/*!
 * Bootstrap v3.3.4 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+ function($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.4
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return {
          end: transEndEventNames[name]
        }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function(duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function() {
      called = true
    })
    var callback = function() {
      if (!called) $($el).trigger($.support.transition.end)
    }
    setTimeout(callback, duration)
    return this
  }

  $(function() {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.4
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert = function(el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.4'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function(e) {
    var $this = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
      .one('bsTransitionEnd', removeElement)
      .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function() {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.4
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function(element, options) {
    this.$element = $(element)
    this.options = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION = '3.3.4'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function(state) {
    var d = 'disabled'
    var $el = this.$element
    var val = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function() {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function() {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
        else $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function() {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function(e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function(e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);



/* ========================================================================
 * Bootstrap: collapse.js v3.3.4
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function(element, options) {
    this.$element = $(element)
    this.options = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
      '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION = '3.3.4'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function() {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function() {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function() {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function() {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function() {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element[dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function() {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function() {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function(i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function() {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function(e) {
    var $this = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data = $target.data('bs.collapse')
    var option = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);



/* ========================================================================
 * Bootstrap: tooltip.js v3.3.4
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function(element, options) {
    this.type = null
    this.options = null
    this.enabled = null
    this.timeout = null
    this.hoverState = null
    this.$element = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION = '3.3.4'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function(type, element, options) {
    this.enabled = true
    this.type = type
    this.$element = $(element)
    this.options = this.getOptions(options)
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, {
        trigger: 'manual',
        selector: ''
      })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function() {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function(options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function() {
    var options = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function(key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function(obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (self && self.$tip && self.$tip.is(':visible')) {
      self.hoverState = 'in'
      return
    }

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function() {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function(obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function() {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function() {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({
          top: 0,
          left: 0,
          display: 'block'
        })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos = this.getPosition()
      var actualWidth = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var $container = this.options.container ? $(this.options.container) : this.$element.parent()
        var containerDim = this.getPosition($container)

        placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top' :
          placement == 'top' && pos.top - actualHeight < containerDim.top ? 'bottom' :
          placement == 'right' && pos.right + actualWidth > containerDim.width ? 'left' :
          placement == 'left' && pos.left - actualWidth < containerDim.left ? 'right' :
          placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function() {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function(offset, placement) {
    var $tip = this.tip()
    var width = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top = offset.top + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function(props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical = /top|bottom/.test(placement)
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function(delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function() {
    var $tip = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function(callback) {
    var that = this
    var $tip = $(this.$tip)
    var e = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
      .one('bsTransitionEnd', complete)
      .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function() {
    var $e = this.$element
    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function() {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function($element) {
    $element = $element || this.$element

    var el = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, {
        width: elRect.right - elRect.left,
        height: elRect.bottom - elRect.top
      })
    }
    var elOffset = isBody ? {
      top: 0,
      left: 0
    } : $element.offset()
    var scroll = {
      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
    }
    var outerDims = isBody ? {
      width: $(window).width(),
      height: $(window).height()
    } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? {
        top: pos.top + pos.height,
        left: pos.left + pos.width / 2 - actualWidth / 2
      } :
      placement == 'top' ? {
        top: pos.top - actualHeight,
        left: pos.left + pos.width / 2 - actualWidth / 2
      } :
      placement == 'left' ? {
        top: pos.top + pos.height / 2 - actualHeight / 2,
        left: pos.left - actualWidth
      } :
      /* placement == 'right' */
      {
        top: pos.top + pos.height / 2 - actualHeight / 2,
        left: pos.left + pos.width
      }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
    var delta = {
      top: 0,
      left: 0
    }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function() {
    var title
    var $e = this.$element
    var o = this.options

    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

    return title
  }

  Tooltip.prototype.getUID = function(prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function() {
    return (this.$tip = this.$tip || $(this.options.template))
  }

  Tooltip.prototype.arrow = function() {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function() {
    this.enabled = true
  }

  Tooltip.prototype.disable = function() {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function() {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function(e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function() {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function() {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function() {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.4
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function(element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION = '3.3.4'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function() {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function() {
    var $tip = this.tip()
    var title = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function() {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function() {
    var $e = this.$element
    var o = this.options

    return $e.attr('data-content') || (typeof o.content == 'function' ?
      o.content.call($e[0]) :
      o.content)
  }

  Popover.prototype.arrow = function() {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function() {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.4
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function(element) {
    this.element = $(element)
  }

  Tab.VERSION = '3.3.4'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function() {
    var $this = this.element
    var $ul = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function() {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function(element, container, callback) {
    var $active = container.find('> .active')
    var transition = callback && $.support.transition && (($active.length && $active.hasClass('fade')) || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
          .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
      .one('bsTransitionEnd', next)
      .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function() {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function(e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);


/* ========================================================================
 * Bootstrap: modal.js v3.3.4
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function(element, options) {
    this.options = options
    this.$body = $(document.body)
    this.$element = $(element)
    this.$dialog = this.$element.find('.modal-dialog')
    this.$backdrop = null
    this.isShown = null
    this.originalBodyPad = null
    this.scrollbarWidth = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function() {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION = '3.3.4'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function(_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function(_relatedTarget) {
    var that = this
    var e = $.Event('show.bs.modal', {
      relatedTarget: _relatedTarget
    })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function() {
      that.$element.one('mouseup.dismiss.bs.modal', function(e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function() {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', {
        relatedTarget: _relatedTarget
      })

      transition ?
        that.$dialog // wait for modal to slide in
        .one('bsTransitionEnd', function() {
          that.$element.trigger('focus').trigger(e)
        })
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function(e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
      .one('bsTransitionEnd', $.proxy(this.hideModal, this))
      .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function() {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function(e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function() {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function(e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function() {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function() {
    var that = this
    this.$element.hide()
    this.backdrop(function() {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function() {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function(callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function(e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
        .one('bsTransitionEnd', callback)
        .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function() {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
        .one('bsTransitionEnd', callbackRemove)
        .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function() {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function() {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function() {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function() {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function() {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function() {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function() { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function() {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function(e) {
    var $this = $(this)
    var href = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({
      remote: !/#/.test(href) && href
    }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function(showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function() {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.4
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+ function($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this))

    this.$element = $(element)
    this.affixed = null
    this.unpin = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION = '3.3.4'

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function(scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop()
    var position = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing = this.affixed == null
    var colliderTop = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function() {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function() {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function() {
    if (!this.$element.is(':visible')) return

    var height = this.$element.height()
    var offset = this.options.offset
    var offsetTop = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = $(document.body).height()

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this)
      var data = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function() {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function() {
    $('[data-spy="affix"]').each(function() {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop != null) data.offset.top = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);
//-----------------------------------------------------------------------------------------------------------
//--fancbox--

(function(r, G, f, v) {
  var J = f("html"),
    n = f(r),
    p = f(G),
    b = f.fancybox = function() {
      b.open.apply(this, arguments)
    },
    I = navigator.userAgent.match(/msie/i),
    B = null,
    s = G.createTouch !== v,
    t = function(a) {
      return a && a.hasOwnProperty && a instanceof f
    },
    q = function(a) {
      return a && "string" === f.type(a)
    },
    E = function(a) {
      return q(a) && 0 < a.indexOf("%")
    },
    l = function(a, d) {
      var e = parseInt(a, 10) || 0;
      d && E(a) && (e *= b.getViewport()[d] / 100);
      return Math.ceil(e)
    },
    w = function(a, b) {
      return l(a, b) + "px"
    };
  f.extend(b, {
    version: "2.1.5",
    defaults: {
      padding: 20,
      margin: 20,
      width: 800,
      height: 600,
      minWidth: 100,
      minHeight: 100,
      maxWidth: 9999,
      maxHeight: 9999,
      pixelRatio: 1,
      autoSize: !0,
      autoHeight: !1,
      autoWidth: !1,
      autoResize: !0,
      autoCenter: !s,
      fitToView: !0,
      aspectRatio: !1,
      topRatio: 0.5,
      leftRatio: 0.5,
      scrolling: "auto",
      wrapCSS: "",
      arrows: !0,
      closeBtn: !0,
      closeClick: !1,
      nextClick: !1,
      mouseWheel: !0,
      autoPlay: !1,
      playSpeed: 3E3,
      preload: 3,
      modal: !1,
      loop: !0,
      ajax: {
        dataType: "html",
        headers: {
          "X-fancyBox": !0
        }
      },
      iframe: {
        scrolling: "auto",
        preload: !0
      },
      swf: {
        wmode: "transparent",
        allowfullscreen: "true",
        allowscriptaccess: "always"
      },
      keys: {
        next: {
          13: "left",
          34: "up",
          39: "left",
          40: "up"
        },
        prev: {
          8: "right",
          33: "down",
          37: "right",
          38: "down"
        },
        close: [27],
        play: [32],
        toggle: [70]
      },
      direction: {
        next: "left",
        prev: "right"
      },
      scrollOutside: !0,
      index: 0,
      type: null,
      href: null,
      content: null,
      title: null,
      tpl: {
        wrap: '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
        image: '<img class="fancybox-image" src="{href}" alt="" />',
        iframe: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' +
          (I ? ' allowtransparency="true"' : "") + "></iframe>",
        error: '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
        closeBtn: '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
        next: '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
        prev: '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
      },
      openEffect: "fade",
      openSpeed: 250,
      openEasing: "swing",
      openOpacity: !0,
      openMethod: "zoomIn",
      closeEffect: "fade",
      closeSpeed: 250,
      closeEasing: "swing",
      closeOpacity: !0,
      closeMethod: "zoomOut",
      nextEffect: "elastic",
      nextSpeed: 250,
      nextEasing: "swing",
      nextMethod: "changeIn",
      prevEffect: "elastic",
      prevSpeed: 250,
      prevEasing: "swing",
      prevMethod: "changeOut",
      helpers: {
        overlay: !0,
        title: !0
      },
      onCancel: f.noop,
      beforeLoad: f.noop,
      afterLoad: f.noop,
      beforeShow: f.noop,
      afterShow: f.noop,
      beforeChange: f.noop,
      beforeClose: f.noop,
      afterClose: f.noop
    },
    group: {},
    opts: {},
    previous: null,
    coming: null,
    current: null,
    isActive: !1,
    isOpen: !1,
    isOpened: !1,
    wrap: null,
    skin: null,
    outer: null,
    inner: null,
    player: {
      timer: null,
      isActive: !1
    },
    ajaxLoad: null,
    imgPreload: null,
    transitions: {},
    helpers: {},
    open: function(a, d) {
      if (a && (f.isPlainObject(d) || (d = {}), !1 !== b.close(!0))) return f.isArray(a) || (a = t(a) ? f(a).get() : [a]), f.each(a, function(e, c) {
        var k = {},
          g, h, j, m, l;
        "object" === f.type(c) && (c.nodeType && (c = f(c)), t(c) ? (k = {
          href: c.data("fancybox-href") || c.attr("href"),
          title: c.data("fancybox-title") || c.attr("title"),
          isDom: !0,
          element: c
        }, f.metadata && f.extend(!0, k,
          c.metadata())) : k = c);
        g = d.href || k.href || (q(c) ? c : null);
        h = d.title !== v ? d.title : k.title || "";
        m = (j = d.content || k.content) ? "html" : d.type || k.type;
        !m && k.isDom && (m = c.data("fancybox-type"), m || (m = (m = c.prop("class").match(/fancybox\.(\w+)/)) ? m[1] : null));
        q(g) && (m || (b.isImage(g) ? m = "image" : b.isSWF(g) ? m = "swf" : "#" === g.charAt(0) ? m = "inline" : q(c) && (m = "html", j = c)), "ajax" === m && (l = g.split(/\s+/, 2), g = l.shift(), l = l.shift()));
        j || ("inline" === m ? g ? j = f(q(g) ? g.replace(/.*(?=#[^\s]+$)/, "") : g) : k.isDom && (j = c) : "html" === m ? j = g : !m && (!g &&
          k.isDom) && (m = "inline", j = c));
        f.extend(k, {
          href: g,
          type: m,
          content: j,
          title: h,
          selector: l
        });
        a[e] = k
      }), b.opts = f.extend(!0, {}, b.defaults, d), d.keys !== v && (b.opts.keys = d.keys ? f.extend({}, b.defaults.keys, d.keys) : !1), b.group = a, b._start(b.opts.index)
    },
    cancel: function() {
      var a = b.coming;
      a && !1 !== b.trigger("onCancel") && (b.hideLoading(), b.ajaxLoad && b.ajaxLoad.abort(), b.ajaxLoad = null, b.imgPreload && (b.imgPreload.onload = b.imgPreload.onerror = null), a.wrap && a.wrap.stop(!0, !0).trigger("onReset").remove(), b.coming = null, b.current ||
        b._afterZoomOut(a))
    },
    close: function(a) {
      b.cancel();
      !1 !== b.trigger("beforeClose") && (b.unbindEvents(), b.isActive && (!b.isOpen || !0 === a ? (f(".fancybox-wrap").stop(!0).trigger("onReset").remove(), b._afterZoomOut()) : (b.isOpen = b.isOpened = !1, b.isClosing = !0, f(".fancybox-item, .fancybox-nav").remove(), b.wrap.stop(!0, !0).removeClass("fancybox-opened"), b.transitions[b.current.closeMethod]())))
    },
    play: function(a) {
      var d = function() {
          clearTimeout(b.player.timer)
        },
        e = function() {
          d();
          b.current && b.player.isActive && (b.player.timer =
            setTimeout(b.next, b.current.playSpeed))
        },
        c = function() {
          d();
          p.unbind(".player");
          b.player.isActive = !1;
          b.trigger("onPlayEnd")
        };
      if (!0 === a || !b.player.isActive && !1 !== a) {
        if (b.current && (b.current.loop || b.current.index < b.group.length - 1)) b.player.isActive = !0, p.bind({
          "onCancel.player beforeClose.player": c,
          "onUpdate.player": e,
          "beforeLoad.player": d
        }), e(), b.trigger("onPlayStart")
      } else c()
    },
    next: function(a) {
      var d = b.current;
      d && (q(a) || (a = d.direction.next), b.jumpto(d.index + 1, a, "next"))
    },
    prev: function(a) {
      var d = b.current;
      d && (q(a) || (a = d.direction.prev), b.jumpto(d.index - 1, a, "prev"))
    },
    jumpto: function(a, d, e) {
      var c = b.current;
      c && (a = l(a), b.direction = d || c.direction[a >= c.index ? "next" : "prev"], b.router = e || "jumpto", c.loop && (0 > a && (a = c.group.length + a % c.group.length), a %= c.group.length), c.group[a] !== v && (b.cancel(), b._start(a)))
    },
    reposition: function(a, d) {
      var e = b.current,
        c = e ? e.wrap : null,
        k;
      c && (k = b._getPosition(d), a && "scroll" === a.type ? (delete k.position, c.stop(!0, !0).animate(k, 200)) : (c.css(k), e.pos = f.extend({}, e.dim, k)))
    },
    update: function(a) {
      var d =
        a && a.type,
        e = !d || "orientationchange" === d;
      e && (clearTimeout(B), B = null);
      b.isOpen && !B && (B = setTimeout(function() {
        var c = b.current;
        c && !b.isClosing && (b.wrap.removeClass("fancybox-tmp"), (e || "load" === d || "resize" === d && c.autoResize) && b._setDimension(), "scroll" === d && c.canShrink || b.reposition(a), b.trigger("onUpdate"), B = null)
      }, e && !s ? 0 : 300))
    },
    toggle: function(a) {
      b.isOpen && (b.current.fitToView = "boolean" === f.type(a) ? a : !b.current.fitToView, s && (b.wrap.removeAttr("style").addClass("fancybox-tmp"), b.trigger("onUpdate")),
        b.update())
    },
    hideLoading: function() {
      p.unbind(".loading");
      f("#fancybox-loading").remove()
    },
    showLoading: function() {
      var a, d;
      b.hideLoading();
      a = f('<div id="fancybox-loading"><div></div></div>').click(b.cancel).appendTo("body");
      p.bind("keydown.loading", function(a) {
        if (27 === (a.which || a.keyCode)) a.preventDefault(), b.cancel()
      });
      b.defaults.fixed || (d = b.getViewport(), a.css({
        position: "absolute",
        top: 0.5 * d.h + d.y,
        left: 0.5 * d.w + d.x
      }))
    },
    getViewport: function() {
      var a = b.current && b.current.locked || !1,
        d = {
          x: n.scrollLeft(),
          y: n.scrollTop()
        };
      a ? (d.w = a[0].clientWidth, d.h = a[0].clientHeight) : (d.w = s && r.innerWidth ? r.innerWidth : n.width(), d.h = s && r.innerHeight ? r.innerHeight : n.height());
      return d
    },
    unbindEvents: function() {
      b.wrap && t(b.wrap) && b.wrap.unbind(".fb");
      p.unbind(".fb");
      n.unbind(".fb")
    },
    bindEvents: function() {
      var a = b.current,
        d;
      a && (n.bind("orientationchange.fb" + (s ? "" : " resize.fb") + (a.autoCenter && !a.locked ? " scroll.fb" : ""), b.update), (d = a.keys) && p.bind("keydown.fb", function(e) {
        var c = e.which || e.keyCode,
          k = e.target || e.srcElement;
        if (27 === c && b.coming) return !1;
        !e.ctrlKey && (!e.altKey && !e.shiftKey && !e.metaKey && (!k || !k.type && !f(k).is("[contenteditable]"))) && f.each(d, function(d, k) {
          if (1 < a.group.length && k[c] !== v) return b[d](k[c]), e.preventDefault(), !1;
          if (-1 < f.inArray(c, k)) return b[d](), e.preventDefault(), !1
        })
      }), f.fn.mousewheel && a.mouseWheel && b.wrap.bind("mousewheel.fb", function(d, c, k, g) {
        for (var h = f(d.target || null), j = !1; h.length && !j && !h.is(".fancybox-skin") && !h.is(".fancybox-wrap");) j = h[0] && !(h[0].style.overflow && "hidden" === h[0].style.overflow) &&
          (h[0].clientWidth && h[0].scrollWidth > h[0].clientWidth || h[0].clientHeight && h[0].scrollHeight > h[0].clientHeight), h = f(h).parent();
        if (0 !== c && !j && 1 < b.group.length && !a.canShrink) {
          if (0 < g || 0 < k) b.prev(0 < g ? "down" : "left");
          else if (0 > g || 0 > k) b.next(0 > g ? "up" : "right");
          d.preventDefault()
        }
      }))
    },
    trigger: function(a, d) {
      var e, c = d || b.coming || b.current;
      if (c) {
        f.isFunction(c[a]) && (e = c[a].apply(c, Array.prototype.slice.call(arguments, 1)));
        if (!1 === e) return !1;
        c.helpers && f.each(c.helpers, function(d, e) {
          if (e && b.helpers[d] && f.isFunction(b.helpers[d][a])) b.helpers[d][a](f.extend(!0, {}, b.helpers[d].defaults, e), c)
        });
        p.trigger(a)
      }
    },
    isImage: function(a) {
      return q(a) && a.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)
    },
    isSWF: function(a) {
      return q(a) && a.match(/\.(swf)((\?|#).*)?$/i)
    },
    _start: function(a) {
      var d = {},
        e, c;
      a = l(a);
      e = b.group[a] || null;
      if (!e) return !1;
      d = f.extend(!0, {}, b.opts, e);
      e = d.margin;
      c = d.padding;
      "number" === f.type(e) && (d.margin = [e, e, e, e]);
      "number" === f.type(c) && (d.padding = [c, c, c, c]);
      d.modal && f.extend(!0, d, {
        closeBtn: !1,
        closeClick: !1,
        nextClick: !1,
        arrows: !1,
        mouseWheel: !1,
        keys: null,
        helpers: {
          overlay: {
            closeClick: !1
          }
        }
      });
      d.autoSize && (d.autoWidth = d.autoHeight = !0);
      "auto" === d.width && (d.autoWidth = !0);
      "auto" === d.height && (d.autoHeight = !0);
      d.group = b.group;
      d.index = a;
      b.coming = d;
      if (!1 === b.trigger("beforeLoad")) b.coming = null;
      else {
        c = d.type;
        e = d.href;
        if (!c) return b.coming = null, b.current && b.router && "jumpto" !== b.router ? (b.current.index = a, b[b.router](b.direction)) : !1;
        b.isActive = !0;
        if ("image" === c || "swf" === c) d.autoHeight = d.autoWidth = !1, d.scrolling = "visible";
        "image" === c && (d.aspectRatio = !0);
        "iframe" === c && s && (d.scrolling = "scroll");
        d.wrap = f(d.tpl.wrap).addClass("fancybox-" + (s ? "mobile" : "desktop") + " fancybox-type-" + c + " fancybox-tmp " + d.wrapCSS).appendTo(d.parent || "body");
        f.extend(d, {
          skin: f(".fancybox-skin", d.wrap),
          outer: f(".fancybox-outer", d.wrap),
          inner: f(".fancybox-inner", d.wrap)
        });
        f.each(["Top", "Right", "Bottom", "Left"], function(a, b) {
          d.skin.css("padding" + b, w(d.padding[a]))
        });
        b.trigger("onReady");
        if ("inline" === c || "html" === c) {
          if (!d.content || !d.content.length) return b._error("content")
        } else if (!e) return b._error("href");
        "image" === c ? b._loadImage() : "ajax" === c ? b._loadAjax() : "iframe" === c ? b._loadIframe() : b._afterLoad()
      }
    },
    _error: function(a) {
      f.extend(b.coming, {
        type: "html",
        autoWidth: !0,
        autoHeight: !0,
        minWidth: 0,
        minHeight: 0,
        scrolling: "no",
        hasError: a,
        content: b.coming.tpl.error
      });
      b._afterLoad()
    },
    _loadImage: function() {
      var a = b.imgPreload = new Image;
      a.onload = function() {
        this.onload = this.onerror = null;
        b.coming.width = this.width / b.opts.pixelRatio;
        b.coming.height = this.height / b.opts.pixelRatio;
        b._afterLoad()
      };
      a.onerror = function() {
        this.onload =
          this.onerror = null;
        b._error("image")
      };
      a.src = b.coming.href;
      !0 !== a.complete && b.showLoading()
    },
    _loadAjax: function() {
      var a = b.coming;
      b.showLoading();
      b.ajaxLoad = f.ajax(f.extend({}, a.ajax, {
        url: a.href,
        error: function(a, e) {
          b.coming && "abort" !== e ? b._error("ajax", a) : b.hideLoading()
        },
        success: function(d, e) {
          "success" === e && (a.content = d, b._afterLoad())
        }
      }))
    },
    _loadIframe: function() {
      var a = b.coming,
        d = f(a.tpl.iframe.replace(/\{rnd\}/g, (new Date).getTime())).attr("scrolling", s ? "auto" : a.iframe.scrolling).attr("src", a.href);
      f(a.wrap).bind("onReset", function() {
        try {
          f(this).find("iframe").hide().attr("src", "//about:blank").end().empty()
        } catch (a) {}
      });
      a.iframe.preload && (b.showLoading(), d.one("load", function() {
        f(this).data("ready", 1);
        s || f(this).bind("load.fb", b.update);
        f(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show();
        b._afterLoad()
      }));
      a.content = d.appendTo(a.inner);
      a.iframe.preload || b._afterLoad()
    },
    _preloadImages: function() {
      var a = b.group,
        d = b.current,
        e = a.length,
        c = d.preload ? Math.min(d.preload,
          e - 1) : 0,
        f, g;
      for (g = 1; g <= c; g += 1) f = a[(d.index + g) % e], "image" === f.type && f.href && ((new Image).src = f.href)
    },
    _afterLoad: function() {
      var a = b.coming,
        d = b.current,
        e, c, k, g, h;
      b.hideLoading();
      if (a && !1 !== b.isActive)
        if (!1 === b.trigger("afterLoad", a, d)) a.wrap.stop(!0).trigger("onReset").remove(), b.coming = null;
        else {
          d && (b.trigger("beforeChange", d), d.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove());
          b.unbindEvents();
          e = a.content;
          c = a.type;
          k = a.scrolling;
          f.extend(b, {
            wrap: a.wrap,
            skin: a.skin,
            outer: a.outer,
            inner: a.inner,
            current: a,
            previous: d
          });
          g = a.href;
          switch (c) {
            case "inline":
            case "ajax":
            case "html":
              a.selector ? e = f("<div>").html(e).find(a.selector) : t(e) && (e.data("fancybox-placeholder") || e.data("fancybox-placeholder", f('<div class="fancybox-placeholder"></div>').insertAfter(e).hide()), e = e.show().detach(), a.wrap.bind("onReset", function() {
                f(this).find(e).length && e.hide().replaceAll(e.data("fancybox-placeholder")).data("fancybox-placeholder", !1)
              }));
              break;
            case "image":
              e = a.tpl.image.replace("{href}",
                g);
              break;
            case "swf":
              e = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + g + '"></param>', h = "", f.each(a.swf, function(a, b) {
                e += '<param name="' + a + '" value="' + b + '"></param>';
                h += " " + a + '="' + b + '"'
              }), e += '<embed src="' + g + '" type="application/x-shockwave-flash" width="100%" height="100%"' + h + "></embed></object>"
          }(!t(e) || !e.parent().is(a.inner)) && a.inner.append(e);
          b.trigger("beforeShow");
          a.inner.css("overflow", "yes" === k ? "scroll" :
            "no" === k ? "hidden" : k);
          b._setDimension();
          b.reposition();
          b.isOpen = !1;
          b.coming = null;
          b.bindEvents();
          if (b.isOpened) {
            if (d.prevMethod) b.transitions[d.prevMethod]()
          } else f(".fancybox-wrap").not(a.wrap).stop(!0).trigger("onReset").remove();
          b.transitions[b.isOpened ? a.nextMethod : a.openMethod]();
          b._preloadImages()
        }
    },
    _setDimension: function() {
      var a = b.getViewport(),
        d = 0,
        e = !1,
        c = !1,
        e = b.wrap,
        k = b.skin,
        g = b.inner,
        h = b.current,
        c = h.width,
        j = h.height,
        m = h.minWidth,
        u = h.minHeight,
        n = h.maxWidth,
        p = h.maxHeight,
        s = h.scrolling,
        q = h.scrollOutside ?
        h.scrollbarWidth : 0,
        x = h.margin,
        y = l(x[1] + x[3]),
        r = l(x[0] + x[2]),
        v, z, t, C, A, F, B, D, H;
      e.add(k).add(g).width("auto").height("auto").removeClass("fancybox-tmp");
      x = l(k.outerWidth(!0) - k.width());
      v = l(k.outerHeight(!0) - k.height());
      z = y + x;
      t = r + v;
      C = E(c) ? (a.w - z) * l(c) / 100 : c;
      A = E(j) ? (a.h - t) * l(j) / 100 : j;
      if ("iframe" === h.type) {
        if (H = h.content, h.autoHeight && 1 === H.data("ready")) try {
          H[0].contentWindow.document.location && (g.width(C).height(9999), F = H.contents().find("body"), q && F.css("overflow-x", "hidden"), A = F.outerHeight(!0))
        } catch (G) {}
      } else if (h.autoWidth ||
        h.autoHeight) g.addClass("fancybox-tmp"), h.autoWidth || g.width(C), h.autoHeight || g.height(A), h.autoWidth && (C = g.width()), h.autoHeight && (A = g.height()), g.removeClass("fancybox-tmp");
      c = l(C);
      j = l(A);
      D = C / A;
      m = l(E(m) ? l(m, "w") - z : m);
      n = l(E(n) ? l(n, "w") - z : n);
      u = l(E(u) ? l(u, "h") - t : u);
      p = l(E(p) ? l(p, "h") - t : p);
      F = n;
      B = p;
      h.fitToView && (n = Math.min(a.w - z, n), p = Math.min(a.h - t, p));
      z = a.w - y;
      r = a.h - r;
      h.aspectRatio ? (c > n && (c = n, j = l(c / D)), j > p && (j = p, c = l(j * D)), c < m && (c = m, j = l(c / D)), j < u && (j = u, c = l(j * D))) : (c = Math.max(m, Math.min(c, n)), h.autoHeight &&
        "iframe" !== h.type && (g.width(c), j = g.height()), j = Math.max(u, Math.min(j, p)));
      if (h.fitToView)
        if (g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height(), h.aspectRatio)
          for (;
            (a > z || y > r) && (c > m && j > u) && !(19 < d++);) j = Math.max(u, Math.min(p, j - 10)), c = l(j * D), c < m && (c = m, j = l(c / D)), c > n && (c = n, j = l(c / D)), g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height();
        else c = Math.max(m, Math.min(c, c - (a - z))), j = Math.max(u, Math.min(j, j - (y - r)));
      q && ("auto" === s && j < A && c + x + q < z) && (c += q);
      g.width(c).height(j);
      e.width(c + x);
      a = e.width();
      y = e.height();
      e = (a > z || y > r) && c > m && j > u;
      c = h.aspectRatio ? c < F && j < B && c < C && j < A : (c < F || j < B) && (c < C || j < A);
      f.extend(h, {
        dim: {
          width: w(a),
          height: w(y)
        },
        origWidth: C,
        origHeight: A,
        canShrink: e,
        canExpand: c,
        wPadding: x,
        hPadding: v,
        wrapSpace: y - k.outerHeight(!0),
        skinSpace: k.height() - j
      });
      !H && (h.autoHeight && j > u && j < p && !c) && g.height("auto")
    },
    _getPosition: function(a) {
      var d = b.current,
        e = b.getViewport(),
        c = d.margin,
        f = b.wrap.width() + c[1] + c[3],
        g = b.wrap.height() + c[0] + c[2],
        c = {
          position: "absolute",
          top: c[0],
          left: c[3]
        };
      d.autoCenter && d.fixed &&
        !a && g <= e.h && f <= e.w ? c.position = "fixed" : d.locked || (c.top += e.y, c.left += e.x);
      c.top = w(Math.max(c.top, c.top + (e.h - g) * d.topRatio));
      c.left = w(Math.max(c.left, c.left + (e.w - f) * d.leftRatio));
      return c
    },
    _afterZoomIn: function() {
      var a = b.current;
      a && (b.isOpen = b.isOpened = !0, b.wrap.css("overflow", "visible").addClass("fancybox-opened"), b.update(), (a.closeClick || a.nextClick && 1 < b.group.length) && b.inner.css("cursor", "pointer").bind("click.fb", function(d) {
        !f(d.target).is("a") && !f(d.target).parent().is("a") && (d.preventDefault(),
          b[a.closeClick ? "close" : "next"]())
      }), a.closeBtn && f(a.tpl.closeBtn).appendTo(b.skin).bind("click.fb", function(a) {
        a.preventDefault();
        b.close()
      }), a.arrows && 1 < b.group.length && ((a.loop || 0 < a.index) && f(a.tpl.prev).appendTo(b.outer).bind("click.fb", b.prev), (a.loop || a.index < b.group.length - 1) && f(a.tpl.next).appendTo(b.outer).bind("click.fb", b.next)), b.trigger("afterShow"), !a.loop && a.index === a.group.length - 1 ? b.play(!1) : b.opts.autoPlay && !b.player.isActive && (b.opts.autoPlay = !1, b.play()))
    },
    _afterZoomOut: function(a) {
      a =
        a || b.current;
      f(".fancybox-wrap").trigger("onReset").remove();
      f.extend(b, {
        group: {},
        opts: {},
        router: !1,
        current: null,
        isActive: !1,
        isOpened: !1,
        isOpen: !1,
        isClosing: !1,
        wrap: null,
        skin: null,
        outer: null,
        inner: null
      });
      b.trigger("afterClose", a)
    }
  });
  b.transitions = {
    getOrigPosition: function() {
      var a = b.current,
        d = a.element,
        e = a.orig,
        c = {},
        f = 50,
        g = 50,
        h = a.hPadding,
        j = a.wPadding,
        m = b.getViewport();
      !e && (a.isDom && d.is(":visible")) && (e = d.find("img:first"), e.length || (e = d));
      t(e) ? (c = e.offset(), e.is("img") && (f = e.outerWidth(), g = e.outerHeight())) :
        (c.top = m.y + (m.h - g) * a.topRatio, c.left = m.x + (m.w - f) * a.leftRatio);
      if ("fixed" === b.wrap.css("position") || a.locked) c.top -= m.y, c.left -= m.x;
      return c = {
        top: w(c.top - h * a.topRatio),
        left: w(c.left - j * a.leftRatio),
        width: w(f + j),
        height: w(g + h)
      }
    },
    step: function(a, d) {
      var e, c, f = d.prop;
      c = b.current;
      var g = c.wrapSpace,
        h = c.skinSpace;
      if ("width" === f || "height" === f) e = d.end === d.start ? 1 : (a - d.start) / (d.end - d.start), b.isClosing && (e = 1 - e), c = "width" === f ? c.wPadding : c.hPadding, c = a - c, b.skin[f](l("width" === f ? c : c - g * e)), b.inner[f](l("width" ===
        f ? c : c - g * e - h * e))
    },
    zoomIn: function() {
      var a = b.current,
        d = a.pos,
        e = a.openEffect,
        c = "elastic" === e,
        k = f.extend({
          opacity: 1
        }, d);
      delete k.position;
      c ? (d = this.getOrigPosition(), a.openOpacity && (d.opacity = 0.1)) : "fade" === e && (d.opacity = 0.1);
      b.wrap.css(d).animate(k, {
        duration: "none" === e ? 0 : a.openSpeed,
        easing: a.openEasing,
        step: c ? this.step : null,
        complete: b._afterZoomIn
      })
    },
    zoomOut: function() {
      var a = b.current,
        d = a.closeEffect,
        e = "elastic" === d,
        c = {
          opacity: 0.1
        };
      e && (c = this.getOrigPosition(), a.closeOpacity && (c.opacity = 0.1));
      b.wrap.animate(c, {
        duration: "none" === d ? 0 : a.closeSpeed,
        easing: a.closeEasing,
        step: e ? this.step : null,
        complete: b._afterZoomOut
      })
    },
    changeIn: function() {
      var a = b.current,
        d = a.nextEffect,
        e = a.pos,
        c = {
          opacity: 1
        },
        f = b.direction,
        g;
      e.opacity = 0.1;
      "elastic" === d && (g = "down" === f || "up" === f ? "top" : "left", "down" === f || "right" === f ? (e[g] = w(l(e[g]) - 200), c[g] = "+=200px") : (e[g] = w(l(e[g]) + 200), c[g] = "-=200px"));
      "none" === d ? b._afterZoomIn() : b.wrap.css(e).animate(c, {
        duration: a.nextSpeed,
        easing: a.nextEasing,
        complete: b._afterZoomIn
      })
    },
    changeOut: function() {
      var a =
        b.previous,
        d = a.prevEffect,
        e = {
          opacity: 0.1
        },
        c = b.direction;
      "elastic" === d && (e["down" === c || "up" === c ? "top" : "left"] = ("up" === c || "left" === c ? "-" : "+") + "=200px");
      a.wrap.animate(e, {
        duration: "none" === d ? 0 : a.prevSpeed,
        easing: a.prevEasing,
        complete: function() {
          f(this).trigger("onReset").remove()
        }
      })
    }
  };
  b.helpers.overlay = {
    defaults: {
      closeClick: !0,
      speedOut: 200,
      showEarly: !0,
      css: {},
      locked: !s,
      fixed: !0
    },
    overlay: null,
    fixed: !1,
    el: f("html"),
    create: function(a) {
      a = f.extend({}, this.defaults, a);
      this.overlay && this.close();
      this.overlay =
        f('<div class="fancybox-overlay"></div>').appendTo(b.coming ? b.coming.parent : a.parent);
      this.fixed = !1;
      a.fixed && b.defaults.fixed && (this.overlay.addClass("fancybox-overlay-fixed"), this.fixed = !0)
    },
    open: function(a) {
      var d = this;
      a = f.extend({}, this.defaults, a);
      this.overlay ? this.overlay.unbind(".overlay").width("auto").height("auto") : this.create(a);
      this.fixed || (n.bind("resize.overlay", f.proxy(this.update, this)), this.update());
      a.closeClick && this.overlay.bind("click.overlay", function(a) {
        if (f(a.target).hasClass("fancybox-overlay")) return b.isActive ?
          b.close() : d.close(), !1
      });
      this.overlay.css(a.css).show()
    },
    close: function() {
      var a, b;
      n.unbind("resize.overlay");
      this.el.hasClass("fancybox-lock") && (f(".fancybox-margin").removeClass("fancybox-margin"), a = n.scrollTop(), b = n.scrollLeft(), this.el.removeClass("fancybox-lock"), n.scrollTop(a).scrollLeft(b));
      f(".fancybox-overlay").remove().hide();
      f.extend(this, {
        overlay: null,
        fixed: !1
      })
    },
    update: function() {
      var a = "100%",
        b;
      this.overlay.width(a).height("100%");
      I ? (b = Math.max(G.documentElement.offsetWidth, G.body.offsetWidth),
        p.width() > b && (a = p.width())) : p.width() > n.width() && (a = p.width());
      this.overlay.width(a).height(p.height())
    },
    onReady: function(a, b) {
      var e = this.overlay;
      f(".fancybox-overlay").stop(!0, !0);
      e || this.create(a);
      a.locked && (this.fixed && b.fixed) && (e || (this.margin = p.height() > n.height() ? f("html").css("margin-right").replace("px", "") : !1), b.locked = this.overlay.append(b.wrap), b.fixed = !1);
      !0 === a.showEarly && this.beforeShow.apply(this, arguments)
    },
    beforeShow: function(a, b) {
      var e, c;
      b.locked && (!1 !== this.margin && (f("*").filter(function() {
        return "fixed" ===
          f(this).css("position") && !f(this).hasClass("fancybox-overlay") && !f(this).hasClass("fancybox-wrap")
      }).addClass("fancybox-margin"), this.el.addClass("fancybox-margin")), e = n.scrollTop(), c = n.scrollLeft(), this.el.addClass("fancybox-lock"), n.scrollTop(e).scrollLeft(c));
      this.open(a)
    },
    onUpdate: function() {
      this.fixed || this.update()
    },
    afterClose: function(a) {
      this.overlay && !b.coming && this.overlay.fadeOut(a.speedOut, f.proxy(this.close, this))
    }
  };
  b.helpers.title = {
    defaults: {
      type: "float",
      position: "bottom"
    },
    beforeShow: function(a) {
      var d =
        b.current,
        e = d.title,
        c = a.type,
        des = $('.fancybox').attr("data-description");
      f.isFunction(e) && (e = e.call(d.element, d));
      if (q(e) && "" !== f.trim(e)) {
        d = f('<div class="fancybox-title box fancybox-title-' + c + '-wrap"><header class="section-header"><h5 class="section-title">' + e + '</h5></header></div>');
        switch (c) {
          case "inside":
            c = b.skin;
            break;
          case "outside":
            c = b.wrap;
            break;
          case "over":
            c = b.inner;
            break;
          default:
            c = b.skin, d.appendTo("body"), I && d.width(d.width()), d.wrapInner('<span class="child"></span>'), b.current.margin[2] += Math.abs(l(d.css("margin-bottom")))
        }
        d["top" === a.position ? "prependTo" : "appendTo"](c)
      }
    }
  };
  f.fn.fancybox = function(a) {
    var d,
      e = f(this),
      c = this.selector || "",
      k = function(g) {
        var h = f(this).blur(),
          j = d,
          k, l;
        !g.ctrlKey && (!g.altKey && !g.shiftKey && !g.metaKey) && !h.is(".fancybox-wrap") && (k = a.groupAttr || "data-fancybox-group", l = h.attr(k), l || (k = "rel", l = h.get(0)[k]), l && ("" !== l && "nofollow" !== l) && (h = c.length ? f(c) : e, h = h.filter("[" + k + '="' + l + '"]'), j = h.index(this)), a.index = j, !1 !== b.open(h, a) && g.preventDefault())
      };
    a = a || {};
    d = a.index || 0;
    !c || !1 === a.live ? e.unbind("click.fb-start").bind("click.fb-start", k) : p.undelegate(c, "click.fb-start").delegate(c +
      ":not('.fancybox-item, .fancybox-nav')", "click.fb-start", k);
    this.filter("[data-fancybox-start=1]").trigger("click");
    return this
  };
  p.ready(function() {
    var a, d;
    f.scrollbarWidth === v && (f.scrollbarWidth = function() {
      var a = f('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),
        b = a.children(),
        b = b.innerWidth() - b.height(99).innerWidth();
      a.remove();
      return b
    });
    if (f.support.fixedPosition === v) {
      a = f.support;
      d = f('<div style="position:fixed;top:20px;"></div>').appendTo("body");
      var e = 20 ===
        d[0].offsetTop || 15 === d[0].offsetTop;
      d.remove();
      a.fixedPosition = e
    }
    f.extend(b.defaults, {
      scrollbarWidth: f.scrollbarWidth(),
      fixed: f.support.fixedPosition,
      parent: f("body")
    });
    a = f(r).width();
    J.addClass("fancybox-lock-test");
    d = f(r).width();
    J.removeClass("fancybox-lock-test");
    f("<style type='text/css'>.fancybox-margin{margin-right:" + (d - a) + "px;}</style>").appendTo("head")
  })
})(window, document, jQuery);


(function(d) {
  function e(a) {
    var b = a || window.event,
      c = [].slice.call(arguments, 1),
      f = 0,
      e = 0,
      g = 0,
      a = d.event.fix(b);
    a.type = "mousewheel";
    b.wheelDelta && (f = b.wheelDelta / 120);
    b.detail && (f = -b.detail / 3);
    g = f;
    b.axis !== void 0 && b.axis === b.HORIZONTAL_AXIS && (g = 0, e = -1 * f);
    b.wheelDeltaY !== void 0 && (g = b.wheelDeltaY / 120);
    b.wheelDeltaX !== void 0 && (e = -1 * b.wheelDeltaX / 120);
    c.unshift(a, f, e, g);
    return (d.event.dispatch || d.event.handle).apply(this, c)
  }
  var c = ["DOMMouseScroll", "mousewheel"];
  if (d.event.fixHooks)
    for (var h = c.length; h;) d.event.fixHooks[c[--h]] =
      d.event.mouseHooks;
  d.event.special.mousewheel = {
    setup: function() {
      if (this.addEventListener)
        for (var a = c.length; a;) this.addEventListener(c[--a], e, false);
      else this.onmousewheel = e
    },
    teardown: function() {
      if (this.removeEventListener)
        for (var a = c.length; a;) this.removeEventListener(c[--a], e, false);
      else this.onmousewheel = null
    }
  };
  d.fn.extend({
    mousewheel: function(a) {
      return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
    },
    unmousewheel: function(a) {
      return this.unbind("mousewheel", a)
    }
  })
})(jQuery);

/*!
 * Media helper for fancyBox
 * version: 1.0.6 (Fri, 14 Jun 2013)
 * @requires fancyBox v2.0 or later
 *
 * Usage:
 *     $(".fancybox").fancybox({
 *         helpers : {
 *             media: true
 *         }
 *     });
 *
 * Set custom URL parameters:
 *     $(".fancybox").fancybox({
 *         helpers : {
 *             media: {
 *                 youtube : {
 *                     params : {
 *                         autoplay : 0
 *                     }
 *                 }
 *             }
 *         }
 *     });
 *
 * Or:
 *     $(".fancybox").fancybox({,
 *         helpers : {
 *             media: true
 *         },
 *         youtube : {
 *             autoplay: 0
 *         }
 *     });
 *
 *  Supports:
 *
 *      Youtube
 *          http://www.youtube.com/watch?v=opj24KnzrWo
 *          http://www.youtube.com/embed/opj24KnzrWo
 *          http://youtu.be/opj24KnzrWo
 *      http://www.youtube-nocookie.com/embed/opj24KnzrWo
 *      Vimeo
 *          http://vimeo.com/40648169
 *          http://vimeo.com/channels/staffpicks/38843628
 *          http://vimeo.com/groups/surrealism/videos/36516384
 *          http://player.vimeo.com/video/45074303
 *      Metacafe
 *          http://www.metacafe.com/watch/7635964/dr_seuss_the_lorax_movie_trailer/
 *          http://www.metacafe.com/watch/7635964/
 *      Dailymotion
 *          http://www.dailymotion.com/video/xoytqh_dr-seuss-the-lorax-premiere_people
 *      Twitvid
 *          http://twitvid.com/QY7MD
 *      Twitpic
 *          http://twitpic.com/7p93st
 *      Instagram
 *          http://instagr.am/p/IejkuUGxQn/
 *          http://instagram.com/p/IejkuUGxQn/
 *      Google maps
 *          http://maps.google.com/maps?q=Eiffel+Tower,+Avenue+Gustave+Eiffel,+Paris,+France&t=h&z=17
 *          http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
 *          http://maps.google.com/?ll=48.859463,2.292626&spn=0.000965,0.002642&t=m&z=19&layer=c&cbll=48.859524,2.292532&panoid=YJ0lq28OOy3VT2IqIuVY0g&cbp=12,151.58,,0,-15.56
 */
(function ($) {
  "use strict";

  //Shortcut for fancyBox object
  var F = $.fancybox,
    format = function( url, rez, params ) {
      params = params || '';

      if ( $.type( params ) === "object" ) {
        params = $.param(params, true);
      }

      $.each(rez, function(key, value) {
        url = url.replace( '$' + key, value || '' );
      });

      if (params.length) {
        url += ( url.indexOf('?') > 0 ? '&' : '?' ) + params;
      }

      return url;
    };

  //Add helper object
  F.helpers.media = {
    defaults : {
      youtube : {
        matcher : /(youtube\.com|youtu\.be|youtube-nocookie\.com)\/(watch\?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*)).*/i,
        params  : {
          autoplay    : 1,
          autohide    : 1,
          fs          : 1,
          rel         : 0,
          hd          : 1,
          wmode       : 'opaque',
          enablejsapi : 1
        },
        type : 'iframe',
        url  : '//www.youtube.com/embed/$3'
      },
      vimeo : {
        matcher : /(?:vimeo(?:pro)?.com)\/(?:[^\d]+)?(\d+)(?:.*)/,
        params  : {
          autoplay      : 1,
          hd            : 1,
          show_title    : 1,
          show_byline   : 1,
          show_portrait : 0,
          fullscreen    : 1
        },
        type : 'iframe',
        url  : '//player.vimeo.com/video/$1'
      },
      metacafe : {
        matcher : /metacafe.com\/(?:watch|fplayer)\/([\w\-]{1,10})/,
        params  : {
          autoPlay : 'yes'
        },
        type : 'swf',
        url  : function( rez, params, obj ) {
          obj.swf.flashVars = 'playerVars=' + $.param( params, true );

          return '//www.metacafe.com/fplayer/' + rez[1] + '/.swf';
        }
      },
      dailymotion : {
        matcher : /dailymotion.com\/video\/(.*)\/?(.*)/,
        params  : {
          additionalInfos : 0,
          autoStart : 1
        },
        type : 'swf',
        url  : '//www.dailymotion.com/swf/video/$1'
      },
      twitvid : {
        matcher : /twitvid\.com\/([a-zA-Z0-9_\-\?\=]+)/i,
        params  : {
          autoplay : 0
        },
        type : 'iframe',
        url  : '//www.twitvid.com/embed.php?guid=$1'
      },
      twitpic : {
        matcher : /twitpic\.com\/(?!(?:place|photos|events)\/)([a-zA-Z0-9\?\=\-]+)/i,
        type : 'image',
        url  : '//twitpic.com/show/full/$1/'
      },
      instagram : {
        matcher : /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
        type : 'image',
        url  : '//$1/p/$2/media/?size=l'
      },
      google_maps : {
        matcher : /maps\.google\.([a-z]{2,3}(\.[a-z]{2})?)\/(\?ll=|maps\?)(.*)/i,
        type : 'iframe',
        url  : function( rez ) {
          return '//maps.google.' + rez[1] + '/' + rez[3] + '' + rez[4] + '&output=' + (rez[4].indexOf('layer=c') > 0 ? 'svembed' : 'embed');
        }
      }
    },

    beforeLoad : function(opts, obj) {
      var url   = obj.href || '',
        type  = false,
        what,
        item,
        rez,
        params;

      for (what in opts) {
        if (opts.hasOwnProperty(what)) {
          item = opts[ what ];
          rez  = url.match( item.matcher );

          if (rez) {
            type   = item.type;
            params = $.extend(true, {}, item.params, obj[ what ] || ($.isPlainObject(opts[ what ]) ? opts[ what ].params : null));

            url = $.type( item.url ) === "function" ? item.url.call( this, rez, params, obj ) : format( item.url, rez, params );

            break;
          }
        }
      }

      if (type) {
        obj.href = url;
        obj.type = type;

        obj.autoHeight = false;
      }
    }
  };

}(jQuery));
//--------------------------------------------------------------------------------------------



/*
 Sticky-kit v1.1.2 | WTFPL | Leaf Corcoran 2015 | http://leafo.net
*/
(function(){var b,f;b=this.jQuery||window.jQuery;f=b(window);b.fn.stick_in_parent=function(d){var A,w,J,n,B,K,p,q,k,E,t;null==d&&(d={});t=d.sticky_class;B=d.inner_scrolling;E=d.recalc_every;k=d.parent;q=d.offset_top;p=d.spacer;w=d.bottoming;null==q&&(q=0);null==k&&(k=void 0);null==B&&(B=!0);null==t&&(t="is_stuck");A=b(document);null==w&&(w=!0);J=function(a,d,n,C,F,u,r,G){var v,H,m,D,I,c,g,x,y,z,h,l;if(!a.data("sticky_kit")){a.data("sticky_kit",!0);I=A.height();g=a.parent();null!=k&&(g=g.closest(k));
if(!g.length)throw"failed to find stick parent";v=m=!1;(h=null!=p?p&&a.closest(p):b("<div />"))&&h.css("position",a.css("position"));x=function(){var c,f,e;if(!G&&(I=A.height(),c=parseInt(g.css("border-top-width"),10),f=parseInt(g.css("padding-top"),10),d=parseInt(g.css("padding-bottom"),10),n=g.offset().top+c+f,C=g.height(),m&&(v=m=!1,null==p&&(a.insertAfter(h),h.detach()),a.css({position:"",top:"",width:"",bottom:""}).removeClass(t),e=!0),F=a.offset().top-(parseInt(a.css("margin-top"),10)||0)-q,
u=a.outerHeight(!0),r=a.css("float"),h&&h.css({width:a.outerWidth(!0),height:u,display:a.css("display"),"vertical-align":a.css("vertical-align"),"float":r}),e))return l()};x();if(u!==C)return D=void 0,c=q,z=E,l=function(){var b,l,e,k;if(!G&&(e=!1,null!=z&&(--z,0>=z&&(z=E,x(),e=!0)),e||A.height()===I||x(),e=f.scrollTop(),null!=D&&(l=e-D),D=e,m?(w&&(k=e+u+c>C+n,v&&!k&&(v=!1,a.css({position:"fixed",bottom:"",top:c}).trigger("sticky_kit:unbottom"))),e<F&&(m=!1,c=q,null==p&&("left"!==r&&"right"!==r||a.insertAfter(h),
h.detach()),b={position:"",width:"",top:""},a.css(b).removeClass(t).trigger("sticky_kit:unstick")),B&&(b=f.height(),u+q>b&&!v&&(c-=l,c=Math.max(b-u,c),c=Math.min(q,c),m&&a.css({top:c+"px"})))):e>F&&(m=!0,b={position:"fixed",top:c},b.width="border-box"===a.css("box-sizing")?a.outerWidth()+"px":a.width()+"px",a.css(b).addClass(t),null==p&&(a.after(h),"left"!==r&&"right"!==r||h.append(a)),a.trigger("sticky_kit:stick")),m&&w&&(null==k&&(k=e+u+c>C+n),!v&&k)))return v=!0,"static"===g.css("position")&&g.css({position:"relative"}),
a.css({position:"absolute",bottom:d,top:"auto"}).trigger("sticky_kit:bottom")},y=function(){x();return l()},H=function(){G=!0;f.off("touchmove",l);f.off("scroll",l);f.off("resize",y);b(document.body).off("sticky_kit:recalc",y);a.off("sticky_kit:detach",H);a.removeData("sticky_kit");a.css({position:"",bottom:"",top:"",width:""});g.position("position","");if(m)return null==p&&("left"!==r&&"right"!==r||a.insertAfter(h),h.remove()),a.removeClass(t)},f.on("touchmove",l),f.on("scroll",l),f.on("resize",
y),b(document.body).on("sticky_kit:recalc",y),a.on("sticky_kit:detach",H),setTimeout(l,0)}};n=0;for(K=this.length;n<K;n++)d=this[n],J(b(d));return this}}).call(this);

//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------


/**
 * jQuery prettySocial: Use custom social share buttons
 * Author: Sonny T. <hi@sonnyt.com>, sonnyt.com
 */
(function(a) {
  a.fn.prettySocial = function() {
    var b = {
        pinterest: {
          url: "http://pinterest.com/pin/create/button/?url={{url}}&media={{media}}&description={{description}}",
          popup: {
            width: 685,
            height: 500
          }
        },
        facebook: {
          url: "https://www.facebook.com/sharer/sharer.php?s=100&p[title]={{title}}&p[summary]={{description}}&p[url]={{url}}&p[images][0]={{media}}",
          popup: {
            width: 626,
            height: 436
          }
        },
        twitter: {
          url: "https://twitter.com/share?url={{url}}&via={{via}}&text={{description}}",
          popup: {
            width: 685,
            height: 500
          }
        },
        googleplus: {
          url: "https://plus.google.com/share?url={{url}}",
          popup: {
            width: 600,
            height: 600
          }
        },
        linkedin: {
          url: "https://www.linkedin.com/shareArticle?mini=true&url={{url}}&title={{title}}&summary={{description}}+&source={{via}}",
          popup: {
            width: 600,
            height: 600
          }
        }
      },
      d = function(f, e) {
        var h = (window.innerWidth / 2) - (f.popup.width / 2),
          g = (window.innerHeight / 2) - (f.popup.height / 2);
        return window.open(e, "", "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=" + f.popup.width + ", height=" + f.popup.height + ", top=" + g + ", left=" + h)
      },
      c = function(f, g) {
        var e = f.url.replace(/{{url}}/g, encodeURIComponent(g.url)).replace(/{{title}}/g, encodeURIComponent(g.title)).replace(/{{description}}/g, encodeURIComponent(g.description)).replace(/{{media}}/g, encodeURIComponent(g.media)).replace(/{{via}}/g, encodeURIComponent(g.via));
        return e
      };
    return this.each(function() {
      var i = a(this);
      var g = i.data("type"),
        f = b[g] || null;
      if (!f) {
        a.error("Social site is not set.")
      }
      var h = {
        url: i.data("url") || "",
        title: i.data("title") || "",
        description: i.data("description") || "",
        media: i.data("media") || "",
        via: i.data("via") || ""
      };
      var e = c(f, h);
      if (navigator.userAgent.match(/Android|IEMobile|BlackBerry|iPhone|iPad|iPod|Opera Mini/i)) {
        i.bind("touchstart", function(j) {
          if (j.originalEvent.touches.length > 1) {
            return
          }
          i.data("touchWithoutScroll", true)
        }).bind("touchmove", function() {
          i.data("touchWithoutScroll", false);
          return
        }).bind("touchend", function(k) {
          k.preventDefault();
          var j = i.data("touchWithoutScroll");
          if (k.originalEvent.touches.length > 1 || !j) {
            return
          }
          d(f, e)
        })
      } else {
        i.bind("click", function(j) {
          j.preventDefault();
          d(f, e)
        })
      }
    })
  }
})(jQuery);
//--------------------------------------------------------------------------------------------



/*
intl-tel-input 
version: 0.9.2
description: A jQuery plugin for entering international telephone numbers
repository: https://github.com/Bluefieldscom/intl-tel-input.git
license: MIT
author: Jack O'Connor (http://jackocnr.com)
*/
(function($, window, document, undefined) {
    var pluginName = "intlTelInput", defaults = {
        preferredCountries: [ "kw","sa","ae","eg","bh","qa","lb"],
        // united states and united kingdom
        initialDialCode: true,
        americaMode: false,
        onlyCountries: []
    };
    function Plugin(element, options) {
        this.element = element;
        this.options = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    }
    Plugin.prototype = {
        init: function() {
            var that = this;
            // process onlyCountries array and update intlTelInput.countries
            // and intlTelInput.countryCodes accordingly
            if (this.options.onlyCountries.length > 0) {
                var newCountries = [], newCountryCodes = {};
                $.each(this.options.onlyCountries, function(i, countryCode) {
                    var countryData = that._getCountryData(countryCode);
                    if (countryData) {
                        newCountries.push(countryData);
                        var callingCode = countryData["calling-code"];
                        if (newCountryCodes[callingCode]) {
                            newCountryCodes[callingCode].push(countryCode);
                        } else {
                            newCountryCodes[callingCode] = [ countryCode ];
                        }
                    }
                });
                // update the global data object
                intlTelInput.countries = newCountries;
                intlTelInput.countryCodes = newCountryCodes;
            }
            // process preferred countries - iterate through the preferences,
            // finding the relevant data from the provided intlTelInput.countries array
            var preferredCountries = [];
            $.each(this.options.preferredCountries, function(i, countryCode) {
                var countryData = that._getCountryData(countryCode);
                if (countryData) {
                    preferredCountries.push(countryData);
                }
            });
            this.defaultCountry = preferredCountries.length ? preferredCountries[0] : intlTelInput.countries[0];
            // telephone input
            this.telInput = $(this.element);
            // if initialDialCode is enabled, insert the default dial code
            if (this.options.initialDialCode && this.telInput.val() === "") {
                // this.telInput.val("+" + this.defaultCountry["calling-code"]+ " ");
                $('.phones-key').val(this.defaultCountry["calling-code"]);
            }
            // containers (mostly for positioning)
            this.telInput.wrap($("<div>", {
                "class": "intl-tel-input"
            }));
            var flagsContainer = $("<div>", {
                "class": "flag-dropdown f16"
            }).insertBefore(this.telInput);
            // currently selected flag (displayed to left of input)
            var selectedFlag = $("<div>", {
                "class": "selected-flag"
            }).appendTo(flagsContainer);
            // here we default to the first country in the list
            var firstCountry = this.defaultCountry.cca2;
            this.selectedFlagInner = $("<div>", {
                "class": "flag " + firstCountry
            }).appendTo(selectedFlag);
            // CSS triangle
            $("<div>", {
                "class": "down-arrow"
            }).appendTo(this.selectedFlagInner);
            // country list contains: preferred countries, then divider, then all countries
            this.countryList = $("<ul>", {
                "class": "country-list hide"
            }).appendTo(flagsContainer);
            if (preferredCountries.length) {
                this._appendListItems(preferredCountries, "preferred");
                $("<li>", {
                    "class": "divider"
                }).appendTo(this.countryList);
            }
            this._appendListItems(intlTelInput.countries, "");
            this.countryListItems = this.countryList.children(".country");
            // auto select the top one
            this.countryListItems.first().addClass("active");
            // update flag on keyup
            // (by extracting the dial code from the input value)
            this.telInput.keyup(function() {
                var countryCode, alreadySelected = false;
                // try and extract valid dial code from input
                var dialCode = that._getDialCode(that.telInput.val());
                if (dialCode) {
                    // check if one of the matching country's is already selected
                    var countryCodes = intlTelInput.countryCodes[dialCode];
                    $.each(countryCodes, function(i, c) {
                        if (that.selectedFlagInner.hasClass(c)) {
                            alreadySelected = true;
                        }
                    });
                    countryCode = countryCodes[0];
                } else {
                    countryCode = that.defaultCountry.cca2;
                }
                if (!alreadySelected) {
                    that._selectFlag(countryCode);
                }
            });
            // trigger it now in case there is already a number in the input
            this.telInput.keyup();
            // toggle country dropdown on click
            selectedFlag.click(function(e) {
                // prevent the click-off-to-close listener from firing
                e.stopPropagation();
                // toggle dropdown
                if (that.countryList.hasClass("hide")) {
                    // update highlighting and scroll to active list item
                    that.countryListItems.removeClass("highlight");
                    var activeListItem = that.countryList.children(".active").addClass("highlight");
                    // show it
                    that.countryList.removeClass("hide");
                    that._scrollTo(activeListItem);
                    // listen for typing
                    $(document).bind("keydown.intlTelInput", function(e) {
                        // up (38) and down (40) to navigate
                        if (e.which == 38 || e.which == 40) {
                            var current = that.countryList.children(".highlight").first();
                            var next = e.which == 38 ? current.prev() : current.next();
                            if (next) {
                                // skip the divider
                                if (next.hasClass("divider")) {
                                    next = e.which == 38 ? next.prev() : next.next();
                                }
                                that.countryListItems.removeClass("highlight");
                                next.addClass("highlight");
                                that._scrollTo(next);
                            }
                        } else if (e.which == 13) {
                            var currentCountry = that.countryList.children(".highlight").first();
                            if (currentCountry.length) {
                                that._selectListItem(currentCountry);
                            }
                        } else if (e.which == 9 || e.which == 27) {
                            that._closeDropdown();
                        } else if (e.which >= 97 && e.which <= 122 || e.which >= 65 && e.which <= 90) {
                            var letter = String.fromCharCode(e.which);
                            // filter out the countries beginning with that letter
                            var countries = that.countryListItems.filter(function() {
                                return $(this).text().charAt(0) == letter && !$(this).hasClass("preferred");
                            });
                            if (countries.length) {
                                // if one is already highlighted, then we want the next one
                                var highlightedCountry = countries.filter(".highlight").first();
                                var listItem;
                                // if the next country in the list also starts with that letter
                                if (highlightedCountry && highlightedCountry.next() && highlightedCountry.next().text().charAt(0) == letter) {
                                    listItem = highlightedCountry.next();
                                } else {
                                    listItem = countries.first();
                                }
                                // update highlighting and scroll
                                that.countryListItems.removeClass("highlight");
                                listItem.addClass("highlight");
                                that._scrollTo(listItem);
                            }
                        }
                    });
                } else {
                    // close it
                    that._closeDropdown();
                }
            });
            // when mouse over a list item, remove any highlighting from any other items
            this.countryListItems.mouseover(function() {
                that.countryListItems.removeClass("highlight");
                $(this).addClass("highlight");
            });
            // listen for country selection
            this.countryListItems.click(function(e) {
                var listItem = $(e.currentTarget);
                that._selectListItem(listItem);
            });
            // click off to close
            $("html").click(function(e) {
                if (!$(e.target).closest(".country-list").length) {
                    // close it
                    that._closeDropdown();
                }
            });
        },
        // find the country data for the given country code
        _getCountryData: function(countryCode) {
            for (var i = 0; i < intlTelInput.countries.length; i++) {
                if (intlTelInput.countries[i].cca2 == countryCode) {
                    return intlTelInput.countries[i];
                }
            }
        },
        // update the selected flag and the active list item
        _selectFlag: function(countryCode) {
            this.selectedFlagInner.attr("class", "flag " + countryCode);
            // and the active list item
            this.countryListItems.removeClass("active");
            var listItem = this.countryListItems.children(".flag." + countryCode).parent();
            listItem.addClass("active");
            return listItem;
        },
        // update the selected flag, and insert the dial code
        selectCountry: function(countryCode) {
            // check if already selected
            if (!this.selectedFlagInner.hasClass(countryCode)) {
                var listItem = this._selectFlag(countryCode);
                var dialCode = listItem.attr("data-dial-code");
                // this.telInput.val("+" + dialCode + " ");
                $('.phones-key').val(dialCode);
            }
        },
        // called when the user selects a list item from the dropdown
        _selectListItem: function(listItem) {
            var countryCode = listItem.attr("data-country-code");
            // update selected flag
            this.selectedFlagInner.attr("class", "flag " + countryCode);
            // update input value
            var newNumber = this._updateNumber(this.telInput.val(), listItem.attr("data-dial-code"));
            // this.telInput.val(newNumber);
            // hide dropdown again
            this._closeDropdown();
            // focus the input
            this.telInput.focus();
            // mark the list item as active (incase they open the dropdown again)
            this.countryListItems.removeClass("active highlight");
            listItem.addClass("active");
        },
        // close the dropdown and unbind any listeners
        _closeDropdown: function() {
            this.countryList.addClass("hide");
            $(document).unbind("keydown.intlTelInput");
        },
        // check if an element is visible within it's container, else scroll until it is
        _scrollTo: function(element) {
            var container = this.countryList;
            var containerHeight = container.height();
            var containerTop = container.offset().top;
            var containerBottom = containerTop + containerHeight;
            var elementHeight = element.outerHeight();
            var elementTop = element.offset().top;
            var elementBottom = elementTop + elementHeight;
            var newScrollTop = elementTop - containerTop + container.scrollTop();
            if (elementTop < containerTop) {
                // scroll up
                container.scrollTop(newScrollTop);
            } else if (elementBottom > containerBottom) {
                // scroll down
                var heightDifference = containerHeight - elementHeight;
                container.scrollTop(newScrollTop - heightDifference);
            }
        },
        // replace any existing dial code with the new one
        _updateNumber: function(inputVal, dialCode) {
            var prevDialCode = "+" + this._getDialCode(inputVal);
            var newDialCode = "+" + dialCode;
            var newNumber;
            // if the previous number contained a valid dial code, replace it
            // (if more than just a plus character)
            if (prevDialCode.length > 1) {
                newNumber = inputVal.replace(prevDialCode, newDialCode);
                // if the old number was just the dial code,
                // then we will need to add the space again
                if (inputVal == prevDialCode) {
                    newNumber += " ";
                }
            } else if (inputVal.length && inputVal.substr(0, 1) != "+") {
                // previous number didn't contain a dial code, so persist it
                newNumber = newDialCode + " " + inputVal.trim();
            } else {
                // previous number contained an invalid dial code, so wipe it
                newNumber = newDialCode + " ";
            }
            // if americaMode is enabled, we dont display the dial code for american numbers
            if (this.options.americaMode && newNumber.substring(0, 3) == "+1 ") {
                newNumber = newNumber.substring(3);
            }
            $('.phones-key').val(this.defaultCountry["calling-code"]);
            $('.phones-key').val(dialCode);
            return newNumber;
        },
        // try and extract a valid international dial code from a full telephone number
        _getDialCode: function(inputVal) {
            var firstPart = inputVal.trim().split(" ")[0];
            // only interested in international numbers (starting with a plus)
            if (firstPart.substring(0, 1) == "+") {
                // strip out non-numeric chars (e.g. pluses, spaces, brackets)
                // and grab the first 4 numbers (max length of a dial code is 4)
                var dialCode = firstPart.replace(/\D/g, "").substring(0, 4);
                // try first 4 digits, then 3, then 2, then 1...
                for (var i = dialCode.length; i > 0; i--) {
                    dialCode = dialCode.substring(0, i);
                    // if we find a match (a valid dial code), then return the dial code
                    if (intlTelInput.countryCodes[dialCode]) {
                        return dialCode;
                    }
                }
            }
            return "";
        },
        // add a country <li> to the countryList <ul> container
        _appendListItems: function(countries, className) {
            // we create so many DOM elements, I decided it was faster to build a temp string
            // and then add everything to the DOM in one go at the end
            var tmp = "";
            // for each country
            $.each(countries, function(i, c) {
                // open the list item
                tmp += "<li class='country " + className + "' data-dial-code='" + c["calling-code"] + "' data-country-code='" + c.cca2 + "'>";
                // add the flag
                tmp += "<div class='flag " + c.cca2 + "'></div>";
                // and the country name and dial code
                tmp += "<span class='country-name'>" + c.name + "</span>";
                tmp += "<span class='dial-code'>+" + c["calling-code"] + "</span>";
                // close the list item
                tmp += "</li>";
            });
            this.countryList.append(tmp);
        }
    };
    // adapted to allow public functions
    // using https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate
    $.fn[pluginName] = function(options) {
        var args = arguments;
        // Is the first parameter an object (options), or was omitted,
        // instantiate a new instance of the plugin.
        if (options === undefined || typeof options === "object") {
            return this.each(function() {
                if (!$.data(this, "plugin_" + pluginName)) {
                    $.data(this, "plugin_" + pluginName, new Plugin(this, options));
                }
            });
        } else if (typeof options === "string" && options[0] !== "_" && options !== "init") {
            // Cache the method call to make it possible to return a value
            var returns;
            this.each(function() {
                var instance = $.data(this, "plugin_" + pluginName);
                // Tests that there's already a plugin-instance
                // and checks that the requested public method exists
                if (instance instanceof Plugin && typeof instance[options] === "function") {
                    // Call the method of our plugin instance,
                    // and pass it the supplied arguments.
                    returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
                }
            });
            // If the earlier cached method gives a value back return the value,
            // otherwise return this to preserve chainability.
            return returns !== undefined ? returns : this;
        }
    };
})(jQuery, window, document);

// Namespaced to prevent clashes
var intlTelInput = {
    // Array of country objects for the flag dropdown.
    // Each contains a name, country code (ISO 3166-1 alpha-2) and dial code.
    // Originally from https://github.com/mledoze/countries
    // then stripped down by copying the JSON into Chrome dev tools and manipulating it
    // and then using JSON.stringify to print it out as a string again and copy it here.
    // Also commented some countries which we dont yet have flags for.
    countries: [ {
        name: "Afghanistan",
        cca2: "af",
        "calling-code": "93"
    }, {
        name: "Albania",
        cca2: "al",
        "calling-code": "355"
    }, {
        name: "Algeria",
        cca2: "dz",
        "calling-code": "213"
    }, {
        name: "American Samoa",
        cca2: "as",
        "calling-code": "1684"
    }, {
        name: "Andorra",
        cca2: "ad",
        "calling-code": "376"
    }, {
        name: "Angola",
        cca2: "ao",
        "calling-code": "244"
    }, {
        name: "Anguilla",
        cca2: "ai",
        "calling-code": "1264"
    }, {
        name: "Antigua and Barbuda",
        cca2: "ag",
        "calling-code": "1268"
    }, {
        name: "Argentina",
        cca2: "ar",
        "calling-code": "54"
    }, {
        name: "Armenia",
        cca2: "am",
        "calling-code": "374"
    }, {
        name: "Aruba",
        cca2: "aw",
        "calling-code": "297"
    }, {
        name: "Australia",
        cca2: "au",
        "calling-code": "61"
    }, {
        name: "Austria",
        cca2: "at",
        "calling-code": "43"
    }, {
        name: "Azerbaijan",
        cca2: "az",
        "calling-code": "994"
    }, {
        name: "Bahamas",
        cca2: "bs",
        "calling-code": "1242"
    }, {
        name: "Bahrain",
        cca2: "bh",
        "calling-code": "973"
    }, {
        name: "Bangladesh",
        cca2: "bd",
        "calling-code": "880"
    }, {
        name: "Barbados",
        cca2: "bb",
        "calling-code": "1246"
    }, {
        name: "Belarus",
        cca2: "by",
        "calling-code": "375"
    }, {
        name: "Belgium",
        cca2: "be",
        "calling-code": "32"
    }, {
        name: "Belize",
        cca2: "bz",
        "calling-code": "501"
    }, {
        name: "Benin",
        cca2: "bj",
        "calling-code": "229"
    }, {
        name: "Bermuda",
        cca2: "bm",
        "calling-code": "1441"
    }, {
        name: "Bhutan",
        cca2: "bt",
        "calling-code": "975"
    }, {
        name: "Bolivia",
        cca2: "bo",
        "calling-code": "591"
    }, {
        name: "Bosnia and Herzegovina",
        cca2: "ba",
        "calling-code": "387"
    }, {
        name: "Botswana",
        cca2: "bw",
        "calling-code": "267"
    }, {
        name: "Brazil",
        cca2: "br",
        "calling-code": "55"
    }, {
        name: "Brunei Darussalam",
        cca2: "bn",
        "calling-code": "673"
    }, {
        name: "Bulgaria",
        cca2: "bg",
        "calling-code": "359"
    }, {
        name: "Burkina Faso",
        cca2: "bf",
        "calling-code": "226"
    }, {
        name: "Burundi",
        cca2: "bi",
        "calling-code": "257"
    }, {
        name: "Cambodia",
        cca2: "kh",
        "calling-code": "855"
    }, {
        name: "Cameroon",
        cca2: "cm",
        "calling-code": "237"
    }, {
        name: "Canada",
        cca2: "ca",
        "calling-code": "1"
    }, {
        name: "Cape Verde",
        cca2: "cv",
        "calling-code": "238"
    }, {
        name: "Cayman Islands",
        cca2: "ky",
        "calling-code": "1345"
    }, {
        name: "Central African Republic",
        cca2: "cf",
        "calling-code": "236"
    }, {
        name: "Chad",
        cca2: "td",
        "calling-code": "235"
    }, {
        name: "Chile",
        cca2: "cl",
        "calling-code": "56"
    }, {
        name: "China",
        cca2: "cn",
        "calling-code": "86"
    }, {
        name: "Colombia",
        cca2: "co",
        "calling-code": "57"
    }, {
        name: "Comoros",
        cca2: "km",
        "calling-code": "269"
    }, {
        name: "Congo (DRC)",
        cca2: "cd",
        "calling-code": "243"
    }, {
        name: "Congo (Republic)",
        cca2: "cg",
        "calling-code": "242"
    }, {
        name: "Cook Islands",
        cca2: "ck",
        "calling-code": "682"
    }, {
        name: "Costa Rica",
        cca2: "cr",
        "calling-code": "506"
    }, {
        name: "CÃ´te d'Ivoire",
        cca2: "ci",
        "calling-code": "225"
    }, {
        name: "Croatia",
        cca2: "hr",
        "calling-code": "385"
    }, {
        name: "Cuba",
        cca2: "cu",
        "calling-code": "53"
    }, {
        name: "Cyprus",
        cca2: "cy",
        "calling-code": "357"
    }, {
        name: "Czech Republic",
        cca2: "cz",
        "calling-code": "420"
    }, {
        name: "Denmark",
        cca2: "dk",
        "calling-code": "45"
    }, {
        name: "Djibouti",
        cca2: "dj",
        "calling-code": "253"
    }, {
        name: "Dominica",
        cca2: "dm",
        "calling-code": "1767"
    }, {
        name: "Dominican Republic",
        cca2: "do",
        "calling-code": "1809"
    }, {
        name: "Ecuador",
        cca2: "ec",
        "calling-code": "593"
    }, {
        name: "Egypt",
        cca2: "eg",
        "calling-code": "20"
    }, {
        name: "El Salvador",
        cca2: "sv",
        "calling-code": "503"
    }, {
        name: "Equatorial Guinea",
        cca2: "gq",
        "calling-code": "240"
    }, {
        name: "Eritrea",
        cca2: "er",
        "calling-code": "291"
    }, {
        name: "Estonia",
        cca2: "ee",
        "calling-code": "372"
    }, {
        name: "Ethiopia",
        cca2: "et",
        "calling-code": "251"
    }, {
        name: "Faroe Islands",
        cca2: "fo",
        "calling-code": "298"
    }, {
        name: "Fiji",
        cca2: "fj",
        "calling-code": "679"
    }, {
        name: "Finland",
        cca2: "fi",
        "calling-code": "358"
    }, {
        name: "France",
        cca2: "fr",
        "calling-code": "33"
    }, {
        name: "French Polynesia",
        cca2: "pf",
        "calling-code": "689"
    }, {
        name: "Gabon",
        cca2: "ga",
        "calling-code": "241"
    }, {
        name: "Gambia",
        cca2: "gm",
        "calling-code": "220"
    }, {
        name: "Georgia",
        cca2: "ge",
        "calling-code": "995"
    }, {
        name: "Germany",
        cca2: "de",
        "calling-code": "49"
    }, {
        name: "Ghana",
        cca2: "gh",
        "calling-code": "233"
    }, {
        name: "Gibraltar",
        cca2: "gi",
        "calling-code": "350"
    }, {
        name: "Greece",
        cca2: "gr",
        "calling-code": "30"
    }, {
        name: "Greenland",
        cca2: "gl",
        "calling-code": "299"
    }, {
        name: "Grenada",
        cca2: "gd",
        "calling-code": "1473"
    }, {
        name: "Guadeloupe",
        cca2: "gp",
        "calling-code": "590"
    }, {
        name: "Guam",
        cca2: "gu",
        "calling-code": "1671"
    }, {
        name: "Guatemala",
        cca2: "gt",
        "calling-code": "502"
    }, {
        name: "Guernsey",
        cca2: "gg",
        "calling-code": "44"
    }, {
        name: "Guinea",
        cca2: "gn",
        "calling-code": "224"
    }, {
        name: "Guinea-Bissau",
        cca2: "gw",
        "calling-code": "245"
    }, {
        name: "Guyana",
        cca2: "gy",
        "calling-code": "592"
    }, {
        name: "Haiti",
        cca2: "ht",
        "calling-code": "509"
    }, {
        name: "Honduras",
        cca2: "hn",
        "calling-code": "504"
    }, {
        name: "Hong Kong",
        cca2: "hk",
        "calling-code": "852"
    }, {
        name: "Hungary",
        cca2: "hu",
        "calling-code": "36"
    }, {
        name: "Iceland",
        cca2: "is",
        "calling-code": "354"
    }, {
        name: "India",
        cca2: "in",
        "calling-code": "91"
    }, {
        name: "Indonesia",
        cca2: "id",
        "calling-code": "62"
    }, {
        name: "Iran",
        cca2: "ir",
        "calling-code": "98"
    }, {
        name: "Iraq",
        cca2: "iq",
        "calling-code": "964"
    }, {
        name: "Ireland",
        cca2: "ie",
        "calling-code": "353"
    }, {
        name: "Isle of Man",
        cca2: "im",
        "calling-code": "44"
    }, {
        name: "Israel",
        cca2: "il",
        "calling-code": "972"
    }, {
        name: "Italy",
        cca2: "it",
        "calling-code": "39"
    }, {
        name: "Jamaica",
        cca2: "jm",
        "calling-code": "1876"
    }, {
        name: "Japan",
        cca2: "jp",
        "calling-code": "81"
    }, {
        name: "Jersey",
        cca2: "je",
        "calling-code": "44"
    }, {
        name: "Jordan",
        cca2: "jo",
        "calling-code": "962"
    }, {
        name: "Kazakhstan",
        cca2: "kz",
        "calling-code": "7"
    }, {
        name: "Kenya",
        cca2: "ke",
        "calling-code": "254"
    }, {
        name: "Kiribati",
        cca2: "ki",
        "calling-code": "686"
    }, {
        name: "Kuwait",
        cca2: "kw",
        "calling-code": "965"
    }, {
        name: "Kyrgyzstan",
        cca2: "kg",
        "calling-code": "996"
    }, {
        name: "Laos",
        cca2: "la",
        "calling-code": "856"
    }, {
        name: "Latvia",
        cca2: "lv",
        "calling-code": "371"
    }, {
        name: "Lebanon",
        cca2: "lb",
        "calling-code": "961"
    }, {
        name: "Lesotho",
        cca2: "ls",
        "calling-code": "266"
    }, {
        name: "Liberia",
        cca2: "lr",
        "calling-code": "231"
    }, {
        name: "Libya",
        cca2: "ly",
        "calling-code": "218"
    }, {
        name: "Liechtenstein",
        cca2: "li",
        "calling-code": "423"
    }, {
        name: "Lithuania",
        cca2: "lt",
        "calling-code": "370"
    }, {
        name: "Luxembourg",
        cca2: "lu",
        "calling-code": "352"
    }, {
        name: "Macao",
        cca2: "mo",
        "calling-code": "853"
    }, {
        name: "Macedonia",
        cca2: "mk",
        "calling-code": "389"
    }, {
        name: "Madagascar",
        cca2: "mg",
        "calling-code": "261"
    }, {
        name: "Malawi",
        cca2: "mw",
        "calling-code": "265"
    }, {
        name: "Malaysia",
        cca2: "my",
        "calling-code": "60"
    }, {
        name: "Maldives",
        cca2: "mv",
        "calling-code": "960"
    }, {
        name: "Mali",
        cca2: "ml",
        "calling-code": "223"
    }, {
        name: "Malta",
        cca2: "mt",
        "calling-code": "356"
    }, {
        name: "Marshall Islands",
        cca2: "mh",
        "calling-code": "692"
    }, {
        name: "Martinique",
        cca2: "mq",
        "calling-code": "596"
    }, {
        name: "Mauritania",
        cca2: "mr",
        "calling-code": "222"
    }, {
        name: "Mauritius",
        cca2: "mu",
        "calling-code": "230"
    }, {
        name: "Mexico",
        cca2: "mx",
        "calling-code": "52"
    }, {
        name: "Micronesia",
        cca2: "fm",
        "calling-code": "691"
    }, {
        name: "Moldova",
        cca2: "md",
        "calling-code": "373"
    }, {
        name: "Monaco",
        cca2: "mc",
        "calling-code": "377"
    }, {
        name: "Mongolia",
        cca2: "mn",
        "calling-code": "976"
    }, {
        name: "Montenegro",
        cca2: "me",
        "calling-code": "382"
    }, {
        name: "Montserrat",
        cca2: "ms",
        "calling-code": "1664"
    }, {
        name: "Morocco",
        cca2: "ma",
        "calling-code": "212"
    }, {
        name: "Mozambique",
        cca2: "mz",
        "calling-code": "258"
    }, {
        name: "Myanmar (Burma)",
        cca2: "mm",
        "calling-code": "95"
    }, {
        name: "Namibia",
        cca2: "na",
        "calling-code": "264"
    }, {
        name: "Nauru",
        cca2: "nr",
        "calling-code": "674"
    }, {
        name: "Nepal",
        cca2: "np",
        "calling-code": "977"
    }, {
        name: "Netherlands",
        cca2: "nl",
        "calling-code": "31"
    }, {
        name: "New Caledonia",
        cca2: "nc",
        "calling-code": "687"
    }, {
        name: "New Zealand",
        cca2: "nz",
        "calling-code": "64"
    }, {
        name: "Nicaragua",
        cca2: "ni",
        "calling-code": "505"
    }, {
        name: "Niger",
        cca2: "ne",
        "calling-code": "227"
    }, {
        name: "Nigeria",
        cca2: "ng",
        "calling-code": "234"
    }, {
        name: "North Korea",
        cca2: "kp",
        "calling-code": "850"
    }, {
        name: "Norway",
        cca2: "no",
        "calling-code": "47"
    }, {
        name: "Oman",
        cca2: "om",
        "calling-code": "968"
    }, {
        name: "Pakistan",
        cca2: "pk",
        "calling-code": "92"
    }, {
        name: "Palau",
        cca2: "pw",
        "calling-code": "680"
    }, {
        name: "Palestinian Territory",
        cca2: "ps",
        "calling-code": "970"
    }, {
        name: "Panama",
        cca2: "pa",
        "calling-code": "507"
    }, {
        name: "Papua New Guinea",
        cca2: "pg",
        "calling-code": "675"
    }, {
        name: "Paraguay",
        cca2: "py",
        "calling-code": "595"
    }, {
        name: "Peru",
        cca2: "pe",
        "calling-code": "51"
    }, {
        name: "Philippines",
        cca2: "ph",
        "calling-code": "63"
    }, {
        name: "Poland",
        cca2: "pl",
        "calling-code": "48"
    }, {
        name: "Portugal",
        cca2: "pt",
        "calling-code": "351"
    }, {
        name: "Puerto Rico",
        cca2: "pr",
        "calling-code": "1787"
    }, {
        name: "Qatar",
        cca2: "qa",
        "calling-code": "974"
    }, {
        name: "RÃ©union",
        cca2: "re",
        "calling-code": "262"
    }, {
        name: "Romania",
        cca2: "ro",
        "calling-code": "40"
    }, {
        name: "Russian Federation",
        cca2: "ru",
        "calling-code": "7"
    }, {
        name: "Rwanda",
        cca2: "rw",
        "calling-code": "250"
    }, {
        name: "Saint Kitts and Nevis",
        cca2: "kn",
        "calling-code": "1869"
    }, {
        name: "Saint Lucia",
        cca2: "lc",
        "calling-code": "1758"
    }, {
        name: "Saint Vincent and the Grenadines",
        cca2: "vc",
        "calling-code": "1784"
    }, {
        name: "Samoa",
        cca2: "ws",
        "calling-code": "685"
    }, {
        name: "San Marino",
        cca2: "sm",
        "calling-code": "378"
    }, {
        name: "SÃ£o TomÃ© and PrÃ­ncipe",
        cca2: "st",
        "calling-code": "239"
    }, {
        name: "Saudi Arabia",
        cca2: "sa",
        "calling-code": "966"
    }, {
        name: "Senegal",
        cca2: "sn",
        "calling-code": "221"
    }, {
        name: "Serbia",
        cca2: "rs",
        "calling-code": "381"
    }, {
        name: "Seychelles",
        cca2: "sc",
        "calling-code": "248"
    }, {
        name: "Sierra Leone",
        cca2: "sl",
        "calling-code": "232"
    }, {
        name: "Singapore",
        cca2: "sg",
        "calling-code": "65"
    }, {
        name: "Slovakia",
        cca2: "sk",
        "calling-code": "421"
    }, {
        name: "Slovenia",
        cca2: "si",
        "calling-code": "386"
    }, {
        name: "Solomon Islands",
        cca2: "sb",
        "calling-code": "677"
    }, {
        name: "Somalia",
        cca2: "so",
        "calling-code": "252"
    }, {
        name: "South Africa",
        cca2: "za",
        "calling-code": "27"
    }, {
        name: "South Korea",
        cca2: "kr",
        "calling-code": "82"
    }, {
        name: "Spain",
        cca2: "es",
        "calling-code": "34"
    }, {
        name: "Sri Lanka",
        cca2: "lk",
        "calling-code": "94"
    }, {
        name: "Sudan",
        cca2: "sd",
        "calling-code": "249"
    }, {
        name: "Suriname",
        cca2: "sr",
        "calling-code": "597"
    }, {
        name: "Swaziland",
        cca2: "sz",
        "calling-code": "268"
    }, {
        name: "Sweden",
        cca2: "se",
        "calling-code": "46"
    }, {
        name: "Switzerland",
        cca2: "ch",
        "calling-code": "41"
    }, {
        name: "Syrian Arab Republic",
        cca2: "sy",
        "calling-code": "963"
    }, {
        name: "Taiwan, Province of China",
        cca2: "tw",
        "calling-code": "886"
    }, {
        name: "Tajikistan",
        cca2: "tj",
        "calling-code": "992"
    }, {
        name: "Tanzania",
        cca2: "tz",
        "calling-code": "255"
    }, {
        name: "Thailand",
        cca2: "th",
        "calling-code": "66"
    }, {
        name: "Timor-Leste",
        cca2: "tl",
        "calling-code": "670"
    }, {
        name: "Togo",
        cca2: "tg",
        "calling-code": "228"
    }, {
        name: "Tonga",
        cca2: "to",
        "calling-code": "676"
    }, {
        name: "Trinidad and Tobago",
        cca2: "tt",
        "calling-code": "1868"
    }, {
        name: "Tunisia",
        cca2: "tn",
        "calling-code": "216"
    }, {
        name: "Turkey",
        cca2: "tr",
        "calling-code": "90"
    }, {
        name: "Turkmenistan",
        cca2: "tm",
        "calling-code": "993"
    }, {
        name: "Turks and Caicos Islands",
        cca2: "tc",
        "calling-code": "1649"
    }, {
        name: "Tuvalu",
        cca2: "tv",
        "calling-code": "688"
    }, {
        name: "Uganda",
        cca2: "ug",
        "calling-code": "256"
    }, {
        name: "Ukraine",
        cca2: "ua",
        "calling-code": "380"
    }, {
        name: "United Arab Emirates",
        cca2: "ae",
        "calling-code": "971"
    }, {
        name: "United Kingdom",
        cca2: "gb",
        "calling-code": "44"
    }, {
        name: "United States",
        cca2: "us",
        "calling-code": "1"
    }, {
        name: "Uruguay",
        cca2: "uy",
        "calling-code": "598"
    }, {
        name: "Uzbekistan",
        cca2: "uz",
        "calling-code": "998"
    }, {
        name: "Vanuatu",
        cca2: "vu",
        "calling-code": "678"
    }, {
        name: "Vatican City",
        cca2: "va",
        "calling-code": "379"
    }, {
        name: "Venezuela",
        cca2: "ve",
        "calling-code": "58"
    }, {
        name: "Viet Nam",
        cca2: "vn",
        "calling-code": "84"
    }, {
        name: "Virgin Islands (British)",
        cca2: "vg",
        "calling-code": "1284"
    }, {
        name: "Virgin Islands (U.S.)",
        cca2: "vi",
        "calling-code": "1340"
    }, {
        name: "Western Sahara",
        cca2: "eh",
        "calling-code": "212"
    }, {
        name: "Yemen",
        cca2: "ye",
        "calling-code": "967"
    }, {
        name: "Zambia",
        cca2: "zm",
        "calling-code": "260"
    }, {
        name: "Zimbabwe",
        cca2: "zw",
        "calling-code": "263"
    } ],
    // JavaScript object mapping dial code to country code.
    // This is used when the user enters a number,
    // to quickly look up the corresponding country code.
    // Originally from http://libphonenumber.googlecode.com/svn/trunk/javascript/i18n/phonenumbers/metadata.js
    // then I commented some weird 001 entries and added some 4-digit country-code
    // items at the end e.g. 1246 for Barbados
    countryCodes: {
        "1": [ "us", "ca" ],
        "7": [ "ru", "kz" ],
        "20": [ "eg" ],
        "27": [ "za" ],
        "30": [ "gr" ],
        "31": [ "nl" ],
        "32": [ "be" ],
        "33": [ "fr" ],
        "34": [ "es" ],
        "36": [ "hu" ],
        "39": [ "it" ],
        "40": [ "ro" ],
        "41": [ "ch" ],
        "43": [ "at" ],
        "44": [ "gb", "gg", "im", "je" ],
        "45": [ "dk" ],
        "46": [ "se" ],
        "47": [ "no", "sj" ],
        "48": [ "pl" ],
        "49": [ "de" ],
        "51": [ "pe" ],
        "52": [ "mx" ],
        "53": [ "cu" ],
        "54": [ "ar" ],
        "55": [ "br" ],
        "56": [ "cl" ],
        "57": [ "co" ],
        "58": [ "ve" ],
        "60": [ "my" ],
        "61": [ "au", "cc", "cx" ],
        "62": [ "id" ],
        "63": [ "ph" ],
        "64": [ "nz" ],
        "65": [ "sg" ],
        "66": [ "th" ],
        "81": [ "jp" ],
        "82": [ "kr" ],
        "84": [ "vn" ],
        "86": [ "cn" ],
        "90": [ "tr" ],
        "91": [ "in" ],
        "92": [ "pk" ],
        "93": [ "af" ],
        "94": [ "lk" ],
        "95": [ "mm" ],
        "98": [ "ir" ],
        "211": [ "ss" ],
        "212": [ "ma", "eh" ],
        "213": [ "dz" ],
        "216": [ "tn" ],
        "218": [ "ly" ],
        "220": [ "gm" ],
        "221": [ "sn" ],
        "222": [ "mr" ],
        "223": [ "ml" ],
        "224": [ "gn" ],
        "225": [ "ci" ],
        "226": [ "bf" ],
        "227": [ "ne" ],
        "228": [ "tg" ],
        "229": [ "bj" ],
        "230": [ "mu" ],
        "231": [ "lr" ],
        "232": [ "sl" ],
        "233": [ "gh" ],
        "234": [ "ng" ],
        "235": [ "td" ],
        "236": [ "cf" ],
        "237": [ "cm" ],
        "238": [ "cv" ],
        "239": [ "st" ],
        "240": [ "gq" ],
        "241": [ "ga" ],
        "242": [ "cg" ],
        "243": [ "cd" ],
        "244": [ "ao" ],
        "245": [ "gw" ],
        "246": [ "io" ],
        "247": [ "ac" ],
        "248": [ "sc" ],
        "249": [ "sd" ],
        "250": [ "rw" ],
        "251": [ "et" ],
        "252": [ "so" ],
        "253": [ "dj" ],
        "254": [ "ke" ],
        "255": [ "tz" ],
        "256": [ "ug" ],
        "257": [ "bi" ],
        "258": [ "mz" ],
        "260": [ "zm" ],
        "261": [ "mg" ],
        "262": [ "re", "yt" ],
        "263": [ "zw" ],
        "264": [ "na" ],
        "265": [ "mw" ],
        "266": [ "ls" ],
        "267": [ "bw" ],
        "268": [ "sz" ],
        "269": [ "km" ],
        "290": [ "sh" ],
        "291": [ "er" ],
        "297": [ "aw" ],
        "298": [ "fo" ],
        "299": [ "gl" ],
        "350": [ "gi" ],
        "351": [ "pt" ],
        "352": [ "lu" ],
        "353": [ "ie" ],
        "354": [ "is" ],
        "355": [ "al" ],
        "356": [ "mt" ],
        "357": [ "cy" ],
        "358": [ "fi", "ax" ],
        "359": [ "bg" ],
        "370": [ "lt" ],
        "371": [ "lv" ],
        "372": [ "ee" ],
        "373": [ "md" ],
        "374": [ "am" ],
        "375": [ "by" ],
        "376": [ "ad" ],
        "377": [ "mc" ],
        "378": [ "sm" ],
        "379": [ "va" ],
        "380": [ "ua" ],
        "381": [ "rs" ],
        "382": [ "me" ],
        "385": [ "hr" ],
        "386": [ "si" ],
        "387": [ "ba" ],
        "389": [ "mk" ],
        "420": [ "cz" ],
        "421": [ "sk" ],
        "423": [ "li" ],
        "500": [ "fk" ],
        "501": [ "bz" ],
        "502": [ "gt" ],
        "503": [ "sv" ],
        "504": [ "hn" ],
        "505": [ "ni" ],
        "506": [ "cr" ],
        "507": [ "pa" ],
        "508": [ "pm" ],
        "509": [ "ht" ],
        "590": [ "gp", "bl", "mf" ],
        "591": [ "bo" ],
        "592": [ "gy" ],
        "593": [ "ec" ],
        "594": [ "gf" ],
        "595": [ "py" ],
        "596": [ "mq" ],
        "597": [ "sr" ],
        "598": [ "uy" ],
        "599": [ "cw", "bq" ],
        "670": [ "tl" ],
        "672": [ "nf" ],
        "673": [ "bn" ],
        "674": [ "nr" ],
        "675": [ "pg" ],
        "676": [ "to" ],
        "677": [ "sb" ],
        "678": [ "vu" ],
        "679": [ "fj" ],
        "680": [ "pw" ],
        "681": [ "wf" ],
        "682": [ "ck" ],
        "683": [ "nu" ],
        "685": [ "ws" ],
        "686": [ "ki" ],
        "687": [ "nc" ],
        "688": [ "tv" ],
        "689": [ "pf" ],
        "690": [ "tk" ],
        "691": [ "fm" ],
        "692": [ "mh" ],
        "850": [ "kp" ],
        "852": [ "hk" ],
        "853": [ "mo" ],
        "855": [ "kh" ],
        "856": [ "la" ],
        "880": [ "bd" ],
        "886": [ "tw" ],
        "960": [ "mv" ],
        "961": [ "lb" ],
        "962": [ "jo" ],
        "963": [ "sy" ],
        "964": [ "iq" ],
        "965": [ "kw" ],
        "966": [ "sa" ],
        "967": [ "ye" ],
        "968": [ "om" ],
        "970": [ "ps" ],
        "971": [ "ae" ],
        "972": [ "il" ],
        "973": [ "bh" ],
        "974": [ "qa" ],
        "975": [ "bt" ],
        "976": [ "mn" ],
        "977": [ "np" ],
        "992": [ "tj" ],
        "993": [ "tm" ],
        "994": [ "az" ],
        "995": [ "ge" ],
        "996": [ "kg" ],
        "998": [ "uz" ],
        "1242": [ "bs" ],
        "1246": [ "bb" ],
        "1264": [ "ai" ],
        "1268": [ "ag" ],
        "1284": [ "vg" ],
        "1340": [ "vi" ],
        "1345": [ "ky" ],
        "1441": [ "bm" ],
        "1473": [ "gd" ],
        "1649": [ "tc" ],
        "1664": [ "ms" ],
        "1671": [ "gu" ],
        "1684": [ "as" ],
        "1758": [ "lc" ],
        "1767": [ "dm" ],
        "1784": [ "vc" ],
        "1787": [ "pr" ],
        "1809": [ "do" ],
        "1868": [ "tt" ],
        "1869": [ "kn" ],
        "1876": [ "jm" ]
    }
};








/*!
 * Lazy Load - jQuery plugin for lazy loading images
 *
 * Copyright (c) 2007-2015 Mika Tuupola
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 *   http://www.appelsiini.net/projects/lazyload
 *
 * Version:  1.9.7
 *
 */

(function($, window, document, undefined) {
    var $window = $(window);

    $.fn.lazyload = function(options) {
        var elements = this;
        var $container;
        var settings = {
            threshold       : 0,
            failure_limit   : 0,
            event           : "scroll",
            effect          : "show",
            container       : window,
            data_attribute  : "original",
            skip_invisible  : false,
            appear          : null,
            load            : null,
            placeholder     : "interface/images/clock-loading.gif"
        };

        function update() {
            var counter = 0;

            elements.each(function() {
                var $this = $(this);
                if (settings.skip_invisible && !$this.is(":visible")) {
                    return;
                }
                if ($.abovethetop(this, settings) ||
                    $.leftofbegin(this, settings)) {
                        /* Nothing. */
                } else if (!$.belowthefold(this, settings) &&
                    !$.rightoffold(this, settings)) {
                        $this.trigger("appear");
                        /* if we found an image we'll load, reset the counter */
                        counter = 0;
                } else {
                    if (++counter > settings.failure_limit) {
                        return false;
                    }
                }
            });

        }

        if(options) {
            /* Maintain BC for a couple of versions. */
            if (undefined !== options.failurelimit) {
                options.failure_limit = options.failurelimit;
                delete options.failurelimit;
            }
            if (undefined !== options.effectspeed) {
                options.effect_speed = options.effectspeed;
                delete options.effectspeed;
            }

            $.extend(settings, options);
        }

        /* Cache container as jQuery as object. */
        $container = (settings.container === undefined ||
                      settings.container === window) ? $window : $(settings.container);

        /* Fire one scroll event per scroll. Not one scroll event per image. */
        if (0 === settings.event.indexOf("scroll")) {
            $container.on(settings.event, function() {
                return update();
            });
        }

        this.each(function() {
            var self = this;
            var $self = $(self);

            self.loaded = false;

            /* If no src attribute given use data:uri. */
            if ($self.attr("src") === undefined || $self.attr("src") === false) {
                if ($self.is("img")) {
                    $self.attr("src", settings.placeholder);
                }
            }

            /* When appear is triggered load original image. */
            $self.one("appear", function() {
                if (!this.loaded) {
                    if (settings.appear) {
                        var elements_left = elements.length;
                        settings.appear.call(self, elements_left, settings);
                    }
                    $("<img />")
                        .one("load", function() {
                            var original = $self.attr("data-" + settings.data_attribute);
                            $self.hide();
                            if ($self.is("img")) {
                                $self.attr("src", original);
                            } else {
                                $self.css("background-image", "url('" + original + "')");
                            }
                            $self[settings.effect](settings.effect_speed);

                            self.loaded = true;

                            /* Remove image from array so it is not looped next time. */
                            var temp = $.grep(elements, function(element) {
                                return !element.loaded;
                            });
                            elements = $(temp);

                            if (settings.load) {
                                var elements_left = elements.length;
                                settings.load.call(self, elements_left, settings);
                            }
                        })
                        .attr("src", $self.attr("data-" + settings.data_attribute));
                }
            });

            /* When wanted event is triggered load original image */
            /* by triggering appear.                              */
            if (0 !== settings.event.indexOf("scroll")) {
                $self.on(settings.event, function() {
                    if (!self.loaded) {
                        $self.trigger("appear");
                    }
                });
            }
        });

        /* Check if something appears when window is resized. */
        $window.on("resize", function() {
            update();
        });

        /* With IOS5 force loading images when navigating with back button. */
        /* Non optimal workaround. */
        if ((/(?:iphone|ipod|ipad).*os 5/gi).test(navigator.appVersion)) {
            $window.on("pageshow", function(event) {
                if (event.originalEvent && event.originalEvent.persisted) {
                    elements.each(function() {
                        $(this).trigger("appear");
                    });
                }
            });
        }

        /* Force initial check if images should appear. */
        $(document).ready(function() {
            update();
        });

        return this;
    };

    /* Convenience methods in jQuery namespace.           */
    /* Use as  $.belowthefold(element, {threshold : 100, container : window}) */

    $.belowthefold = function(element, settings) {
        var fold;

        if (settings.container === undefined || settings.container === window) {
            fold = (window.innerHeight ? window.innerHeight : $window.height()) + $window.scrollTop();
        } else {
            fold = $(settings.container).offset().top + $(settings.container).height();
        }

        return fold <= $(element).offset().top - settings.threshold;
    };

    $.rightoffold = function(element, settings) {
        var fold;

        if (settings.container === undefined || settings.container === window) {
            fold = $window.width() + $window.scrollLeft();
        } else {
            fold = $(settings.container).offset().left + $(settings.container).width();
        }

        return fold <= $(element).offset().left - settings.threshold;
    };

    $.abovethetop = function(element, settings) {
        var fold;

        if (settings.container === undefined || settings.container === window) {
            fold = $window.scrollTop();
        } else {
            fold = $(settings.container).offset().top;
        }

        return fold >= $(element).offset().top + settings.threshold  + $(element).height();
    };

    $.leftofbegin = function(element, settings) {
        var fold;

        if (settings.container === undefined || settings.container === window) {
            fold = $window.scrollLeft();
        } else {
            fold = $(settings.container).offset().left;
        }

        return fold >= $(element).offset().left + settings.threshold + $(element).width();
    };

    $.inviewport = function(element, settings) {
         return !$.rightoffold(element, settings) && !$.leftofbegin(element, settings) &&
                !$.belowthefold(element, settings) && !$.abovethetop(element, settings);
     };

    /* Custom selectors for your convenience.   */
    /* Use as $("img:below-the-fold").something() or */
    /* $("img").filter(":below-the-fold").something() which is faster */

    $.extend($.expr[":"], {
        "below-the-fold" : function(a) { return $.belowthefold(a, {threshold : 0}); },
        "above-the-top"  : function(a) { return !$.belowthefold(a, {threshold : 0}); },
        "right-of-screen": function(a) { return $.rightoffold(a, {threshold : 0}); },
        "left-of-screen" : function(a) { return !$.rightoffold(a, {threshold : 0}); },
        "in-viewport"    : function(a) { return $.inviewport(a, {threshold : 0}); },
        /* Maintain BC for couple of versions. */
        "above-the-fold" : function(a) { return !$.belowthefold(a, {threshold : 0}); },
        "right-of-fold"  : function(a) { return $.rightoffold(a, {threshold : 0}); },
        "left-of-fold"   : function(a) { return !$.rightoffold(a, {threshold : 0}); }
    });

})(jQuery, window, document);






/* ---------------------- 
  Instafeed
---------------------- */
// Generated by CoffeeScript 1.3.3
(function() {
  var Instafeed, root;

  Instafeed = (function() {

    function Instafeed(params, context) {
      var option, value;
      this.options = {
        target: 'instafeeed',
        get: 'user',
        resolution: 'thumbnail',
        sortBy: 'none',
        links: true,
        mock: false,
        useHttp: false
      };
      if (typeof params === 'object') {
        for (option in params) {
          value = params[option];
          this.options[option] = value;
        }
      }
      this.context = context != null ? context : this;
      this.unique = this._genKey();
    }

    Instafeed.prototype.hasNext = function() {
      return typeof this.context.nextUrl === 'string' && this.context.nextUrl.length > 0;
    };

    Instafeed.prototype.next = function() {
      if (!this.hasNext()) {
        return false;
      }
      return this.run(this.context.nextUrl);
    };

    Instafeed.prototype.run = function(url) {
      var header, instanceName, script;
      if (typeof this.options.clientId !== 'string') {
        if (typeof this.options.accessToken !== 'string') {
          throw new Error("Missing clientId or accessToken.");
        }
      }
      if (typeof this.options.accessToken !== 'string') {
        if (typeof this.options.clientId !== 'string') {
          throw new Error("Missing clientId or accessToken.");
        }
      }
      if ((this.options.before != null) && typeof this.options.before === 'function') {
        this.options.before.call(this);
      }
      if (typeof document !== "undefined" && document !== null) {
        script = document.createElement('script');
        script.id = 'instafeed-fetcher';
        script.src = url || this._buildUrl();
        header = document.getElementsByTagName('head');
        header[0].appendChild(script);
        instanceName = "instafeedCache" + this.unique;
        window[instanceName] = new Instafeed(this.options, this);
        window[instanceName].unique = this.unique;
      }
      return true;
    };

    Instafeed.prototype.parse = function(response) {
      var anchor, fragment, header, htmlString, image, imageString, imageUrl, images, img, imgUrl, instanceName, node, reverse, sortSettings, tmpEl, _i, _j, _k, _len, _len1, _len2, _ref;
      if (typeof response !== 'object') {
        if ((this.options.error != null) && typeof this.options.error === 'function') {
          this.options.error.call(this, 'Invalid JSON data');
          return false;
        } else {
          throw new Error('Invalid JSON response');
        }
      }
      if (response.meta.code !== 200) {
        if ((this.options.error != null) && typeof this.options.error === 'function') {
          this.options.error.call(this, response.meta.error_message);
          return false;
        } else {
          throw new Error("Error from Instagram: " + response.meta.error_message);
        }
      }
      if (response.data.length === 0) {
        if ((this.options.error != null) && typeof this.options.error === 'function') {
          this.options.error.call(this, 'No images were returned from Instagram');
          return false;
        } else {
          throw new Error('No images were returned from Instagram');
        }
      }
      if ((this.options.success != null) && typeof this.options.success === 'function') {
        this.options.success.call(this, response);
      }
      this.context.nextUrl = '';
      if (response.pagination != null) {
        this.context.nextUrl = response.pagination.next_url;
      }
      if (this.options.sortBy !== 'none') {
        if (this.options.sortBy === 'random') {
          sortSettings = ['', 'random'];
        } else {
          sortSettings = this.options.sortBy.split('-');
        }
        reverse = sortSettings[0] === 'least' ? true : false;
        switch (sortSettings[1]) {
          case 'random':
            response.data.sort(function() {
              return 0.5 - Math.random();
            });
            break;
          case 'recent':
            response.data = this._sortBy(response.data, 'created_time', reverse);
            break;
          case 'liked':
            response.data = this._sortBy(response.data, 'likes.count', reverse);
            break;
          case 'commented':
            response.data = this._sortBy(response.data, 'comments.count', reverse);
            break;
          default:
            throw new Error("Invalid option for sortBy: '" + this.options.sortBy + "'.");
        }
      }
      if ((typeof document !== "undefined" && document !== null) && this.options.mock === false) {
        images = response.data;
        if (this.options.limit != null) {
          if (images.length > this.options.limit) {
            images = images.slice(0, this.options.limit + 1 || 9e9);
          }
        }
        fragment = document.createDocumentFragment();
        if ((this.options.filter != null) && typeof this.options.filter === 'function') {
          images = this._filter(images, this.options.filter);
        }
        if ((this.options.template != null) && typeof this.options.template === 'string') {
          htmlString = '';
          imageString = '';
          imgUrl = '';
          tmpEl = document.createElement('div');
          for (_i = 0, _len = images.length; _i < _len; _i++) {
            image = images[_i];
            imageUrl = image.images[this.options.resolution].url;
            if (!this.options.useHttp) {
              imageUrl = imageUrl.replace('http://', '//');
            }
            imageString = this._makeTemplate(this.options.template, {
              model: image,
              id: image.id,
              link: image.link,
              image: imageUrl,
              caption: this._getObjectProperty(image, 'caption.text'),
              likes: image.likes.count,
              comments: image.comments.count,
              location: this._getObjectProperty(image, 'location.name')
            });
            htmlString += imageString;
          }
          tmpEl.innerHTML = htmlString;
          _ref = [].slice.call(tmpEl.childNodes);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            node = _ref[_j];
            fragment.appendChild(node);
          }
        } else {
          for (_k = 0, _len2 = images.length; _k < _len2; _k++) {
            image = images[_k];
            img = document.createElement('img');
            imageUrl = image.images[this.options.resolution].url;
            if (!this.options.useHttp) {
              imageUrl = imageUrl.replace('http://', '//');
            }
            img.src = imageUrl;
            if (this.options.links === true) {
              anchor = document.createElement('a');
              anchor.href = image.link;
              anchor.appendChild(img);
              fragment.appendChild(anchor);
            } else {
              fragment.appendChild(img);
            }
          }
        }
        document.getElementById(this.options.target).appendChild(fragment);
        header = document.getElementsByTagName('head')[0];
        header.removeChild(document.getElementById('instafeed-fetcher'));
        instanceName = "instafeedCache" + this.unique;
        window[instanceName] = void 0;
        try {
          delete window[instanceName];
        } catch (e) {

        }
      }
      if ((this.options.after != null) && typeof this.options.after === 'function') {
        this.options.after.call(this);
      }
      return true;
    };

    Instafeed.prototype._buildUrl = function() {
      var base, endpoint, final;
      base = "https://api.instagram.com/v1";
      switch (this.options.get) {
        case "popular":
          endpoint = "media/popular";
          break;
        case "tagged":
          if (typeof this.options.tagName !== 'string') {
            throw new Error("No tag name specified. Use the 'tagName' option.");
          }
          endpoint = "tags/" + this.options.tagName + "/media/recent";
          break;
        case "location":
          if (typeof this.options.locationId !== 'number') {
            throw new Error("No location specified. Use the 'locationId' option.");
          }
          endpoint = "locations/" + this.options.locationId + "/media/recent";
          break;
        case "user":
          if (typeof this.options.userId !== 'number') {
            throw new Error("No user specified. Use the 'userId' option.");
          }
          if (typeof this.options.accessToken !== 'string') {
            throw new Error("No access token. Use the 'accessToken' option.");
          }
          endpoint = "users/" + this.options.userId + "/media/recent";
          break;
        default:
          throw new Error("Invalid option for get: '" + this.options.get + "'.");
      }
      final = "" + base + "/" + endpoint;
      if (this.options.accessToken != null) {
        final += "?access_token=" + this.options.accessToken;
      } else {
        final += "?client_id=" + this.options.clientId;
      }
      if (this.options.limit != null) {
        final += "&count=" + this.options.limit;
      }
      final += "&callback=instafeedCache" + this.unique + ".parse";
      return final;
    };

    Instafeed.prototype._genKey = function() {
      var S4;
      S4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
      };
      return "" + (S4()) + (S4()) + (S4()) + (S4());
    };

    Instafeed.prototype._makeTemplate = function(template, data) {
      var output, pattern, varName, varValue, _ref;
      pattern = /(?:\{{2})([\w\[\]\.]+)(?:\}{2})/;
      output = template;
      while (pattern.test(output)) {
        varName = output.match(pattern)[1];
        varValue = (_ref = this._getObjectProperty(data, varName)) != null ? _ref : '';
        output = output.replace(pattern, "" + varValue);
      }
      return output;
    };

    Instafeed.prototype._getObjectProperty = function(object, property) {
      var piece, pieces;
      property = property.replace(/\[(\w+)\]/g, '.$1');
      pieces = property.split('.');
      while (pieces.length) {
        piece = pieces.shift();
        if ((object != null) && piece in object) {
          object = object[piece];
        } else {
          return null;
        }
      }
      return object;
    };

    Instafeed.prototype._sortBy = function(data, property, reverse) {
      var sorter;
      sorter = function(a, b) {
        var valueA, valueB;
        valueA = this._getObjectProperty(a, property);
        valueB = this._getObjectProperty(b, property);
        if (reverse) {
          if (valueA > valueB) {
            return 1;
          } else {
            return -1;
          }
        }
        if (valueA < valueB) {
          return 1;
        } else {
          return -1;
        }
      };
      data.sort(sorter.bind(this));
      return data;
    };

    Instafeed.prototype._filter = function(images, filter) {
      var filteredImages, image, _fn, _i, _len;
      filteredImages = [];
      _fn = function(image) {
        if (filter(image)) {
          return filteredImages.push(image);
        }
      };
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        image = images[_i];
        _fn(image);
      }
      return filteredImages;
    };

    return Instafeed;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Instafeed = Instafeed;

}).call(this);

//--------------------------------------------------------------------------------------------


/* ---------------------- 
  scrollReveal
---------------------- */
/*
                       _ _ _____                      _   _
                      | | |  __ \                    | | (_)
    ___  ___ _ __ ___ | | | |__) |_____   _____  __ _| |  _ ___
   / __|/ __| '__/ _ \| | |  _  // _ \ \ / / _ \/ _` | | | / __|
   \__ \ (__| | | (_) | | | | \ \  __/\ V /  __/ (_| | |_| \__ \
   |___/\___|_|  \___/|_|_|_|  \_\___| \_/ \___|\__,_|_(_) |___/ v.0.1.3
                                                        _/ |
                                                       |__/

    "Declarative on-scroll reveal animations."

/*=============================================================================

    scrollReveal.js was inspired by cbpScroller.js (c) 2014 Codrops.

    Licensed under the MIT license.
    http://www.opensource.org/licenses/mit-license.php

=============================================================================*/

/*! scrollReveal.js v0.1.3 (c) 2014 Julian Lloyd | MIT license */

/*===========================================================================*/


window.scrollReveal = (function (window) {

  'use strict';

  // generator (increments) for the next scroll-reveal-id
  var nextId = 1;

  /**
   * RequestAnimationFrame polyfill
   * @function
   * @private
   */
  var requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };
  }());

  function scrollReveal(options) {

      this.options = this.extend(this.defaults, options);
      this.docElem = this.options.elem;
      this.styleBank = {};

      if (this.options.init == true) this.init();
  }

  scrollReveal.prototype = {

    defaults: {
      after:   '0s',
      enter:   'bottom',
      move:    '24px',
      over:    '0.66s',
      easing:  'ease-in-out',
      opacity: 0,
      complete: function() {},

  //  if 0, the element is considered in the viewport as soon as it enters
  //  if 1, the element is considered in the viewport when it's fully visible
      viewportFactor: 0.33,

  // if false, animations occur only once
  // if true, animations occur each time an element enters the viewport
      reset: false,

  // if true, scrollReveal.init() is automaticaly called upon instantiation
      init: true,
    elem: window.document.documentElement
    },

    /*=============================================================================*/

    init: function () {

      this.scrolled = false;

      var self = this;

  //  Check DOM for the data-scrollReveal attribute
  //  and initialize all found elements.
      this.elems = Array.prototype.slice.call(this.docElem.querySelectorAll('[data-scroll-reveal]'));
      this.elems.forEach(function (el, i) {

    //  Capture original style attribute
        var id = el.getAttribute("data-scroll-reveal-id");
        if (!id) {
            id = nextId++;
            el.setAttribute("data-scroll-reveal-id", id);
        }
        if (!self.styleBank[id]) {
          self.styleBank[id] = el.getAttribute('style');
        }

        self.update(el);
      });

      var scrollHandler = function (e) {
        // No changing, exit
        if (!self.scrolled) {
          self.scrolled = true;
          requestAnimFrame(function () {
            self._scrollPage();
          });
        }
      };

      var resizeHandler = function () {

    //  If we’re still waiting for settimeout, reset the timer.
        if (self.resizeTimeout) {
          clearTimeout(self.resizeTimeout);
        }
        function delayed() {
          self._scrollPage();
          self.resizeTimeout = null;
        }
        self.resizeTimeout = setTimeout(delayed, 200);
      };

      // captureScroll
      if (this.docElem == window.document.documentElement) {
      window.addEventListener('scroll', scrollHandler, false);
      window.addEventListener('resize', resizeHandler, false);
    }
    else {
      this.docElem.addEventListener('scroll', scrollHandler, false);
    }
    },

    /*=============================================================================*/

    _scrollPage: function () {
        var self = this;

        this.elems.forEach(function (el, i) {
          self.update(el);
        });
        this.scrolled = false;
    },

    /*=============================================================================*/

    parseLanguage: function (el) {

  //  Splits on a sequence of one or more commas or spaces.
      var words = el.getAttribute('data-scroll-reveal').split(/[, ]+/),
          parsed = {};

      function filter (words) {
        var ret = [],

            blacklist = [
              "from",
              "the",
              "and",
              "then",
              "but",
              "with"
            ];

        words.forEach(function (word, i) {
          if (blacklist.indexOf(word) > -1) {
            return;
          }
          ret.push(word);
        });

        return ret;
      }

      words = filter(words);

      words.forEach(function (word, i) {

        switch (word) {
          case "enter":
            parsed.enter = words[i + 1];
            return;

          case "after":
            parsed.after = words[i + 1];
            return;

          case "wait":
            parsed.after = words[i + 1];
            return;

          case "move":
            parsed.move = words[i + 1];
            return;

          case "ease":
            parsed.move = words[i + 1];
            parsed.ease = "ease";
            return;

          case "ease-in":
            parsed.move = words[i + 1];
            parsed.easing = "ease-in";
            return;

          case "ease-in-out":
            parsed.move = words[i + 1];
            parsed.easing = "ease-in-out";
            return;

          case "ease-out":
            parsed.move = words[i + 1];
            parsed.easing = "ease-out";
            return;

          case "over":
            parsed.over = words[i + 1];
            return;

          default:
            return;
        }
      });

      return parsed;
    },


    /*=============================================================================*/

    update: function (el) {

      var that = this;
      var css   = this.genCSS(el);
      var style = this.styleBank[el.getAttribute("data-scroll-reveal-id")];

      if (style != null) style += ";"; else style = "";

      if (!el.getAttribute('data-scroll-reveal-initialized')) {
        el.setAttribute('style', style + css.initial);
        el.setAttribute('data-scroll-reveal-initialized', true);
      }

      if (!this.isElementInViewport(el, this.options.viewportFactor)) {
        if (this.options.reset) {
          el.setAttribute('style', style + css.initial + css.reset);
        }
        return;
      }

      if (el.getAttribute('data-scroll-reveal-complete')) return;

      if (this.isElementInViewport(el, this.options.viewportFactor)) {
        el.setAttribute('style', style + css.target + css.transition);
    //  Without reset enabled, we can safely remove the style tag
    //  to prevent CSS specificy wars with authored CSS.
        if (!this.options.reset) {
          setTimeout(function () {
            if (style != "") {
              el.setAttribute('style', style);
            } else {
              el.removeAttribute('style');
            }
            el.setAttribute('data-scroll-reveal-complete',true);
            that.options.complete(el);
          }, css.totalDuration);
        }
      return;
      }
    },

    /*=============================================================================*/

    genCSS: function (el) {
      var parsed = this.parseLanguage(el),
          enter,
          axis;

      if (parsed.enter) {

        if (parsed.enter == "top" || parsed.enter == "bottom") {
          enter = parsed.enter;
          axis = "y";
        }

        if (parsed.enter == "left" || parsed.enter == "right") {
          enter = parsed.enter;
          axis = "x";
        }

      } else {

        if (this.options.enter == "top" || this.options.enter == "bottom") {
          enter = this.options.enter
          axis = "y";
        }

        if (this.options.enter == "left" || this.options.enter == "right") {
          enter = this.options.enter
          axis = "x";
        }
      }

  //  After all values are parsed, let’s make sure our our
  //  pixel distance is negative for top and left entrances.
  //
  //  ie. "move 25px from top" starts at 'top: -25px' in CSS.

      if (enter == "top" || enter == "left") {
        if (parsed.move) {
          parsed.move = "-" + parsed.move;
        }
        else {
          parsed.move = "-" + this.options.move;
        }
      }

      var dist    = parsed.move    || this.options.move,
          dur     = parsed.over    || this.options.over,
          delay   = parsed.after   || this.options.after,
          easing  = parsed.easing  || this.options.easing,
          opacity = parsed.opacity || this.options.opacity;

      var transition = "-webkit-transition: -webkit-transform " + dur + " " + easing + " " + delay + ",  opacity " + dur + " " + easing + " " + delay + ";" +
                               "transition: transform " + dur + " " + easing + " " + delay + ", opacity " + dur + " " + easing + " " + delay + ";" +
                      "-webkit-perspective: 1000;" +
              "-webkit-backface-visibility: hidden;";

  //  The same as transition, but removing the delay for elements fading out.
      var reset = "-webkit-transition: -webkit-transform " + dur + " " + easing + " 0s,  opacity " + dur + " " + easing + " " + delay + ";" +
                          "transition: transform " + dur + " " + easing + " 0s,  opacity " + dur + " " + easing + " " + delay + ";" +
                 "-webkit-perspective: 1000;" +
         "-webkit-backface-visibility: hidden;";

      var initial = "-webkit-transform: translate" + axis + "(" + dist + ");" +
                            "transform: translate" + axis + "(" + dist + ");" +
                              "opacity: " + opacity + ";";

      var target = "-webkit-transform: translate" + axis + "(0);" +
                           "transform: translate" + axis + "(0);" +
                             "opacity: 1;";
      return {
        transition: transition,
        initial: initial,
        target: target,
        reset: reset,
        totalDuration: ((parseFloat(dur) + parseFloat(delay)) * 1000)
      };
    },

    getViewportH : function () {
      var client = this.docElem['clientHeight'],
        inner = window['innerHeight'];

      if (this.docElem == window.document.documentElement)
                return (client < inner) ? inner : client;
            else
                return client;
    },

    getOffset : function(el) {
      var offsetTop = 0,
          offsetLeft = 0;

      do {
        if (!isNaN(el.offsetTop)) {
          offsetTop += el.offsetTop;
        }
        if (!isNaN(el.offsetLeft)) {
          offsetLeft += el.offsetLeft;
        }
      } while (el = el.offsetParent)

      return {
        top: offsetTop,
        left: offsetLeft
      }
    },

    isElementInViewport : function(el, h) {
      var scrolled = this.docElem.scrollTop + this.docElem.offsetTop;
    if (this.docElem == window.document.documentElement)scrolled = window.pageYOffset;
    var
      viewed = scrolled + this.getViewportH(),
          elH = el.offsetHeight,
          elTop = this.getOffset(el).top,
          elBottom = elTop + elH,
          h = h || 0;

      return (elTop + elH * h) <= viewed
          && (elBottom) >= scrolled
          || (el.currentStyle? el.currentStyle : window.getComputedStyle(el, null)).position == 'fixed';
    },

    extend: function (a, b){
      for (var key in b) {
        if (b.hasOwnProperty(key)) {
          a[key] = b[key];
        }
      }
      return a;
    }
  }; // end scrollReveal.prototype

  return scrollReveal;
})(window);
//--------------------------------------------------------------------------------------------



//! moment.js
//! version : 2.7.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a) {
  function b(a, b, c) {
    switch (arguments.length) {
      case 2:
        return null != a ? a : b;
      case 3:
        return null != a ? a : null != b ? b : c;
      default:
        throw new Error("Implement me")
    }
  }

  function c() {
    return {
      empty: !1,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: !1,
      invalidMonth: null,
      invalidFormat: !1,
      userInvalidated: !1,
      iso: !1
    }
  }

  function d(a, b) {
    function c() {
      mb.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + a)
    }
    var d = !0;
    return j(function() {
      return d && (c(), d = !1), b.apply(this, arguments)
    }, b)
  }

  function e(a, b) {
    return function(c) {
      return m(a.call(this, c), b)
    }
  }

  function f(a, b) {
    return function(c) {
      return this.lang().ordinal(a.call(this, c), b)
    }
  }

  function g() {}

  function h(a) {
    z(a), j(this, a)
  }

  function i(a) {
    var b = s(a),
      c = b.year || 0,
      d = b.quarter || 0,
      e = b.month || 0,
      f = b.week || 0,
      g = b.day || 0,
      h = b.hour || 0,
      i = b.minute || 0,
      j = b.second || 0,
      k = b.millisecond || 0;
    this._milliseconds = +k + 1e3 * j + 6e4 * i + 36e5 * h, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._bubble()
  }

  function j(a, b) {
    for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
    return b.hasOwnProperty("toString") && (a.toString = b.toString), b.hasOwnProperty("valueOf") && (a.valueOf = b.valueOf), a
  }

  function k(a) {
    var b, c = {};
    for (b in a) a.hasOwnProperty(b) && Ab.hasOwnProperty(b) && (c[b] = a[b]);
    return c
  }

  function l(a) {
    return 0 > a ? Math.ceil(a) : Math.floor(a)
  }

  function m(a, b, c) {
    for (var d = "" + Math.abs(a), e = a >= 0; d.length < b;) d = "0" + d;
    return (e ? c ? "+" : "" : "-") + d
  }

  function n(a, b, c, d) {
    var e = b._milliseconds,
      f = b._days,
      g = b._months;
    d = null == d ? !0 : d, e && a._d.setTime(+a._d + e * c), f && hb(a, "Date", gb(a, "Date") + f * c), g && fb(a, gb(a, "Month") + g * c), d && mb.updateOffset(a, f || g)
  }

  function o(a) {
    return "[object Array]" === Object.prototype.toString.call(a)
  }

  function p(a) {
    return "[object Date]" === Object.prototype.toString.call(a) || a instanceof Date
  }

  function q(a, b, c) {
    var d, e = Math.min(a.length, b.length),
      f = Math.abs(a.length - b.length),
      g = 0;
    for (d = 0; e > d; d++)(c && a[d] !== b[d] || !c && u(a[d]) !== u(b[d])) && g++;
    return g + f
  }

  function r(a) {
    if (a) {
      var b = a.toLowerCase().replace(/(.)s$/, "$1");
      a = bc[a] || cc[b] || b
    }
    return a
  }

  function s(a) {
    var b, c, d = {};
    for (c in a) a.hasOwnProperty(c) && (b = r(c), b && (d[b] = a[c]));
    return d
  }

  function t(b) {
    var c, d;
    if (0 === b.indexOf("week")) c = 7, d = "day";
    else {
      if (0 !== b.indexOf("month")) return;
      c = 12, d = "month"
    }
    mb[b] = function(e, f) {
      var g, h, i = mb.fn._lang[b],
        j = [];
      if ("number" == typeof e && (f = e, e = a), h = function(a) {
          var b = mb().utc().set(d, a);
          return i.call(mb.fn._lang, b, e || "")
        }, null != f) return h(f);
      for (g = 0; c > g; g++) j.push(h(g));
      return j
    }
  }

  function u(a) {
    var b = +a,
      c = 0;
    return 0 !== b && isFinite(b) && (c = b >= 0 ? Math.floor(b) : Math.ceil(b)), c
  }

  function v(a, b) {
    return new Date(Date.UTC(a, b + 1, 0)).getUTCDate()
  }

  function w(a, b, c) {
    return bb(mb([a, 11, 31 + b - c]), b, c).week
  }

  function x(a) {
    return y(a) ? 366 : 365
  }

  function y(a) {
    return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0
  }

  function z(a) {
    var b;
    a._a && -2 === a._pf.overflow && (b = a._a[tb] < 0 || a._a[tb] > 11 ? tb : a._a[ub] < 1 || a._a[ub] > v(a._a[sb], a._a[tb]) ? ub : a._a[vb] < 0 || a._a[vb] > 23 ? vb : a._a[wb] < 0 || a._a[wb] > 59 ? wb : a._a[xb] < 0 || a._a[xb] > 59 ? xb : a._a[yb] < 0 || a._a[yb] > 999 ? yb : -1, a._pf._overflowDayOfYear && (sb > b || b > ub) && (b = ub), a._pf.overflow = b)
  }

  function A(a) {
    return null == a._isValid && (a._isValid = !isNaN(a._d.getTime()) && a._pf.overflow < 0 && !a._pf.empty && !a._pf.invalidMonth && !a._pf.nullInput && !a._pf.invalidFormat && !a._pf.userInvalidated, a._strict && (a._isValid = a._isValid && 0 === a._pf.charsLeftOver && 0 === a._pf.unusedTokens.length)), a._isValid
  }

  function B(a) {
    return a ? a.toLowerCase().replace("_", "-") : a
  }

  function C(a, b) {
    return b._isUTC ? mb(a).zone(b._offset || 0) : mb(a).local()
  }

  function D(a, b) {
    return b.abbr = a, zb[a] || (zb[a] = new g), zb[a].set(b), zb[a]
  }

  function E(a) {
    delete zb[a]
  }

  function F(a) {
    var b, c, d, e, f = 0,
      g = function(a) {
        if (!zb[a] && Bb) try {
          require("./lang/" + a)
        } catch (b) {}
        return zb[a]
      };
    if (!a) return mb.fn._lang;
    if (!o(a)) {
      if (c = g(a)) return c;
      a = [a]
    }
    for (; f < a.length;) {
      for (e = B(a[f]).split("-"), b = e.length, d = B(a[f + 1]), d = d ? d.split("-") : null; b > 0;) {
        if (c = g(e.slice(0, b).join("-"))) return c;
        if (d && d.length >= b && q(e, d, !0) >= b - 1) break;
        b--
      }
      f++
    }
    return mb.fn._lang
  }

  function G(a) {
    return a.match(/\[[\s\S]/) ? a.replace(/^\[|\]$/g, "") : a.replace(/\\/g, "")
  }

  function H(a) {
    var b, c, d = a.match(Fb);
    for (b = 0, c = d.length; c > b; b++) d[b] = hc[d[b]] ? hc[d[b]] : G(d[b]);
    return function(e) {
      var f = "";
      for (b = 0; c > b; b++) f += d[b] instanceof Function ? d[b].call(e, a) : d[b];
      return f
    }
  }

  function I(a, b) {
    return a.isValid() ? (b = J(b, a.lang()), dc[b] || (dc[b] = H(b)), dc[b](a)) : a.lang().invalidDate()
  }

  function J(a, b) {
    function c(a) {
      return b.longDateFormat(a) || a
    }
    var d = 5;
    for (Gb.lastIndex = 0; d >= 0 && Gb.test(a);) a = a.replace(Gb, c), Gb.lastIndex = 0, d -= 1;
    return a
  }

  function K(a, b) {
    var c, d = b._strict;
    switch (a) {
      case "Q":
        return Rb;
      case "DDDD":
        return Tb;
      case "YYYY":
      case "GGGG":
      case "gggg":
        return d ? Ub : Jb;
      case "Y":
      case "G":
      case "g":
        return Wb;
      case "YYYYYY":
      case "YYYYY":
      case "GGGGG":
      case "ggggg":
        return d ? Vb : Kb;
      case "S":
        if (d) return Rb;
      case "SS":
        if (d) return Sb;
      case "SSS":
        if (d) return Tb;
      case "DDD":
        return Ib;
      case "MMM":
      case "MMMM":
      case "dd":
      case "ddd":
      case "dddd":
        return Mb;
      case "a":
      case "A":
        return F(b._l)._meridiemParse;
      case "X":
        return Pb;
      case "Z":
      case "ZZ":
        return Nb;
      case "T":
        return Ob;
      case "SSSS":
        return Lb;
      case "MM":
      case "DD":
      case "YY":
      case "GG":
      case "gg":
      case "HH":
      case "hh":
      case "mm":
      case "ss":
      case "ww":
      case "WW":
        return d ? Sb : Hb;
      case "M":
      case "D":
      case "d":
      case "H":
      case "h":
      case "m":
      case "s":
      case "w":
      case "W":
      case "e":
      case "E":
        return Hb;
      case "Do":
        return Qb;
      default:
        return c = new RegExp(T(S(a.replace("\\", "")), "i"))
    }
  }

  function L(a) {
    a = a || "";
    var b = a.match(Nb) || [],
      c = b[b.length - 1] || [],
      d = (c + "").match(_b) || ["-", 0, 0],
      e = +(60 * d[1]) + u(d[2]);
    return "+" === d[0] ? -e : e
  }

  function M(a, b, c) {
    var d, e = c._a;
    switch (a) {
      case "Q":
        null != b && (e[tb] = 3 * (u(b) - 1));
        break;
      case "M":
      case "MM":
        null != b && (e[tb] = u(b) - 1);
        break;
      case "MMM":
      case "MMMM":
        d = F(c._l).monthsParse(b), null != d ? e[tb] = d : c._pf.invalidMonth = b;
        break;
      case "D":
      case "DD":
        null != b && (e[ub] = u(b));
        break;
      case "Do":
        null != b && (e[ub] = u(parseInt(b, 10)));
        break;
      case "DDD":
      case "DDDD":
        null != b && (c._dayOfYear = u(b));
        break;
      case "YY":
        e[sb] = mb.parseTwoDigitYear(b);
        break;
      case "YYYY":
      case "YYYYY":
      case "YYYYYY":
        e[sb] = u(b);
        break;
      case "a":
      case "A":
        c._isPm = F(c._l).isPM(b);
        break;
      case "H":
      case "HH":
      case "h":
      case "hh":
        e[vb] = u(b);
        break;
      case "m":
      case "mm":
        e[wb] = u(b);
        break;
      case "s":
      case "ss":
        e[xb] = u(b);
        break;
      case "S":
      case "SS":
      case "SSS":
      case "SSSS":
        e[yb] = u(1e3 * ("0." + b));
        break;
      case "X":
        c._d = new Date(1e3 * parseFloat(b));
        break;
      case "Z":
      case "ZZ":
        c._useUTC = !0, c._tzm = L(b);
        break;
      case "dd":
      case "ddd":
      case "dddd":
        d = F(c._l).weekdaysParse(b), null != d ? (c._w = c._w || {}, c._w.d = d) : c._pf.invalidWeekday = b;
        break;
      case "w":
      case "ww":
      case "W":
      case "WW":
      case "d":
      case "e":
      case "E":
        a = a.substr(0, 1);
      case "gggg":
      case "GGGG":
      case "GGGGG":
        a = a.substr(0, 2), b && (c._w = c._w || {}, c._w[a] = u(b));
        break;
      case "gg":
      case "GG":
        c._w = c._w || {}, c._w[a] = mb.parseTwoDigitYear(b)
    }
  }

  function N(a) {
    var c, d, e, f, g, h, i, j;
    c = a._w, null != c.GG || null != c.W || null != c.E ? (g = 1, h = 4, d = b(c.GG, a._a[sb], bb(mb(), 1, 4).year), e = b(c.W, 1), f = b(c.E, 1)) : (j = F(a._l), g = j._week.dow, h = j._week.doy, d = b(c.gg, a._a[sb], bb(mb(), g, h).year), e = b(c.w, 1), null != c.d ? (f = c.d, g > f && ++e) : f = null != c.e ? c.e + g : g), i = cb(d, e, f, h, g), a._a[sb] = i.year, a._dayOfYear = i.dayOfYear
  }

  function O(a) {
    var c, d, e, f, g = [];
    if (!a._d) {
      for (e = Q(a), a._w && null == a._a[ub] && null == a._a[tb] && N(a), a._dayOfYear && (f = b(a._a[sb], e[sb]), a._dayOfYear > x(f) && (a._pf._overflowDayOfYear = !0), d = Z(f, 0, a._dayOfYear), a._a[tb] = d.getUTCMonth(), a._a[ub] = d.getUTCDate()), c = 0; 3 > c && null == a._a[c]; ++c) a._a[c] = g[c] = e[c];
      for (; 7 > c; c++) a._a[c] = g[c] = null == a._a[c] ? 2 === c ? 1 : 0 : a._a[c];
      a._d = (a._useUTC ? Z : Y).apply(null, g), null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() + a._tzm)
    }
  }

  function P(a) {
    var b;
    a._d || (b = s(a._i), a._a = [b.year, b.month, b.day, b.hour, b.minute, b.second, b.millisecond], O(a))
  }

  function Q(a) {
    var b = new Date;
    return a._useUTC ? [b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate()] : [b.getFullYear(), b.getMonth(), b.getDate()]
  }

  function R(a) {
    if (a._f === mb.ISO_8601) return void V(a);
    a._a = [], a._pf.empty = !0;
    var b, c, d, e, f, g = F(a._l),
      h = "" + a._i,
      i = h.length,
      j = 0;
    for (d = J(a._f, g).match(Fb) || [], b = 0; b < d.length; b++) e = d[b], c = (h.match(K(e, a)) || [])[0], c && (f = h.substr(0, h.indexOf(c)), f.length > 0 && a._pf.unusedInput.push(f), h = h.slice(h.indexOf(c) + c.length), j += c.length), hc[e] ? (c ? a._pf.empty = !1 : a._pf.unusedTokens.push(e), M(e, c, a)) : a._strict && !c && a._pf.unusedTokens.push(e);
    a._pf.charsLeftOver = i - j, h.length > 0 && a._pf.unusedInput.push(h), a._isPm && a._a[vb] < 12 && (a._a[vb] += 12), a._isPm === !1 && 12 === a._a[vb] && (a._a[vb] = 0), O(a), z(a)
  }

  function S(a) {
    return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(a, b, c, d, e) {
      return b || c || d || e
    })
  }

  function T(a) {
    return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
  }

  function U(a) {
    var b, d, e, f, g;
    if (0 === a._f.length) return a._pf.invalidFormat = !0, void(a._d = new Date(0 / 0));
    for (f = 0; f < a._f.length; f++) g = 0, b = j({}, a), b._pf = c(), b._f = a._f[f], R(b), A(b) && (g += b._pf.charsLeftOver, g += 10 * b._pf.unusedTokens.length, b._pf.score = g, (null == e || e > g) && (e = g, d = b));
    j(a, d || b)
  }

  function V(a) {
    var b, c, d = a._i,
      e = Xb.exec(d);
    if (e) {
      for (a._pf.iso = !0, b = 0, c = Zb.length; c > b; b++)
        if (Zb[b][1].exec(d)) {
          a._f = Zb[b][0] + (e[6] || " ");
          break
        }
      for (b = 0, c = $b.length; c > b; b++)
        if ($b[b][1].exec(d)) {
          a._f += $b[b][0];
          break
        }
      d.match(Nb) && (a._f += "Z"), R(a)
    } else a._isValid = !1
  }

  function W(a) {
    V(a), a._isValid === !1 && (delete a._isValid, mb.createFromInputFallback(a))
  }

  function X(b) {
    var c = b._i,
      d = Cb.exec(c);
    c === a ? b._d = new Date : d ? b._d = new Date(+d[1]) : "string" == typeof c ? W(b) : o(c) ? (b._a = c.slice(0), O(b)) : p(c) ? b._d = new Date(+c) : "object" == typeof c ? P(b) : "number" == typeof c ? b._d = new Date(c) : mb.createFromInputFallback(b)
  }

  function Y(a, b, c, d, e, f, g) {
    var h = new Date(a, b, c, d, e, f, g);
    return 1970 > a && h.setFullYear(a), h
  }

  function Z(a) {
    var b = new Date(Date.UTC.apply(null, arguments));
    return 1970 > a && b.setUTCFullYear(a), b
  }

  function $(a, b) {
    if ("string" == typeof a)
      if (isNaN(a)) {
        if (a = b.weekdaysParse(a), "number" != typeof a) return null
      } else a = parseInt(a, 10);
    return a
  }

  function _(a, b, c, d, e) {
    return e.relativeTime(b || 1, !!c, a, d)
  }

  function ab(a, b, c) {
    var d = rb(Math.abs(a) / 1e3),
      e = rb(d / 60),
      f = rb(e / 60),
      g = rb(f / 24),
      h = rb(g / 365),
      i = d < ec.s && ["s", d] || 1 === e && ["m"] || e < ec.m && ["mm", e] || 1 === f && ["h"] || f < ec.h && ["hh", f] || 1 === g && ["d"] || g <= ec.dd && ["dd", g] || g <= ec.dm && ["M"] || g < ec.dy && ["MM", rb(g / 30)] || 1 === h && ["y"] || ["yy", h];
    return i[2] = b, i[3] = a > 0, i[4] = c, _.apply({}, i)
  }

  function bb(a, b, c) {
    var d, e = c - b,
      f = c - a.day();
    return f > e && (f -= 7), e - 7 > f && (f += 7), d = mb(a).add("d", f), {
      week: Math.ceil(d.dayOfYear() / 7),
      year: d.year()
    }
  }

  function cb(a, b, c, d, e) {
    var f, g, h = Z(a, 0, 1).getUTCDay();
    return h = 0 === h ? 7 : h, c = null != c ? c : e, f = e - h + (h > d ? 7 : 0) - (e > h ? 7 : 0), g = 7 * (b - 1) + (c - e) + f + 1, {
      year: g > 0 ? a : a - 1,
      dayOfYear: g > 0 ? g : x(a - 1) + g
    }
  }

  function db(b) {
    var c = b._i,
      d = b._f;
    return null === c || d === a && "" === c ? mb.invalid({
      nullInput: !0
    }) : ("string" == typeof c && (b._i = c = F().preparse(c)), mb.isMoment(c) ? (b = k(c), b._d = new Date(+c._d)) : d ? o(d) ? U(b) : R(b) : X(b), new h(b))
  }

  function eb(a, b) {
    var c, d;
    if (1 === b.length && o(b[0]) && (b = b[0]), !b.length) return mb();
    for (c = b[0], d = 1; d < b.length; ++d) b[d][a](c) && (c = b[d]);
    return c
  }

  function fb(a, b) {
    var c;
    return "string" == typeof b && (b = a.lang().monthsParse(b), "number" != typeof b) ? a : (c = Math.min(a.date(), v(a.year(), b)), a._d["set" + (a._isUTC ? "UTC" : "") + "Month"](b, c), a)
  }

  function gb(a, b) {
    return a._d["get" + (a._isUTC ? "UTC" : "") + b]()
  }

  function hb(a, b, c) {
    return "Month" === b ? fb(a, c) : a._d["set" + (a._isUTC ? "UTC" : "") + b](c)
  }

  function ib(a, b) {
    return function(c) {
      return null != c ? (hb(this, a, c), mb.updateOffset(this, b), this) : gb(this, a)
    }
  }

  function jb(a) {
    mb.duration.fn[a] = function() {
      return this._data[a]
    }
  }

  function kb(a, b) {
    mb.duration.fn["as" + a] = function() {
      return +this / b
    }
  }

  function lb(a) {
    "undefined" == typeof ender && (nb = qb.moment, qb.moment = a ? d("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.", mb) : mb)
  }
  for (var mb, nb, ob, pb = "2.7.0", qb = "undefined" != typeof global ? global : this, rb = Math.round, sb = 0, tb = 1, ub = 2, vb = 3, wb = 4, xb = 5, yb = 6, zb = {}, Ab = {
      _isAMomentObject: null,
      _i: null,
      _f: null,
      _l: null,
      _strict: null,
      _tzm: null,
      _isUTC: null,
      _offset: null,
      _pf: null,
      _lang: null
    }, Bb = "undefined" != typeof module && module.exports, Cb = /^\/?Date\((\-?\d+)/i, Db = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, Eb = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, Fb = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, Gb = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, Hb = /\d\d?/, Ib = /\d{1,3}/, Jb = /\d{1,4}/, Kb = /[+\-]?\d{1,6}/, Lb = /\d+/, Mb = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, Nb = /Z|[\+\-]\d\d:?\d\d/gi, Ob = /T/i, Pb = /[\+\-]?\d+(\.\d{1,3})?/, Qb = /\d{1,2}/, Rb = /\d/, Sb = /\d\d/, Tb = /\d{3}/, Ub = /\d{4}/, Vb = /[+-]?\d{6}/, Wb = /[+-]?\d+/, Xb = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Yb = "YYYY-MM-DDTHH:mm:ssZ", Zb = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/],
      ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/],
      ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d{2}/],
      ["YYYY-DDD", /\d{4}-\d{3}/]
    ], $b = [
      ["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/],
      ["HH:mm", /(T| )\d\d:\d\d/],
      ["HH", /(T| )\d\d/]
    ], _b = /([\+\-]|\d\d)/gi, ac = ("Date|Hours|Minutes|Seconds|Milliseconds".split("|"), {
      Milliseconds: 1,
      Seconds: 1e3,
      Minutes: 6e4,
      Hours: 36e5,
      Days: 864e5,
      Months: 2592e6,
      Years: 31536e6
    }), bc = {
      ms: "millisecond",
      s: "second",
      m: "minute",
      h: "hour",
      d: "day",
      D: "date",
      w: "week",
      W: "isoWeek",
      M: "month",
      Q: "quarter",
      y: "year",
      DDD: "dayOfYear",
      e: "weekday",
      E: "isoWeekday",
      gg: "weekYear",
      GG: "isoWeekYear"
    }, cc = {
      dayofyear: "dayOfYear",
      isoweekday: "isoWeekday",
      isoweek: "isoWeek",
      weekyear: "weekYear",
      isoweekyear: "isoWeekYear"
    }, dc = {}, ec = {
      s: 45,
      m: 45,
      h: 22,
      dd: 25,
      dm: 45,
      dy: 345
    }, fc = "DDD w W M D d".split(" "), gc = "M D H h m s w W".split(" "), hc = {
      M: function() {
        return this.month() + 1
      },
      MMM: function(a) {
        return this.lang().monthsShort(this, a)
      },
      MMMM: function(a) {
        return this.lang().months(this, a)
      },
      D: function() {
        return this.date()
      },
      DDD: function() {
        return this.dayOfYear()
      },
      d: function() {
        return this.day()
      },
      dd: function(a) {
        return this.lang().weekdaysMin(this, a)
      },
      ddd: function(a) {
        return this.lang().weekdaysShort(this, a)
      },
      dddd: function(a) {
        return this.lang().weekdays(this, a)
      },
      w: function() {
        return this.week()
      },
      W: function() {
        return this.isoWeek()
      },
      YY: function() {
        return m(this.year() % 100, 2)
      },
      YYYY: function() {
        return m(this.year(), 4)
      },
      YYYYY: function() {
        return m(this.year(), 5)
      },
      YYYYYY: function() {
        var a = this.year(),
          b = a >= 0 ? "+" : "-";
        return b + m(Math.abs(a), 6)
      },
      gg: function() {
        return m(this.weekYear() % 100, 2)
      },
      gggg: function() {
        return m(this.weekYear(), 4)
      },
      ggggg: function() {
        return m(this.weekYear(), 5)
      },
      GG: function() {
        return m(this.isoWeekYear() % 100, 2)
      },
      GGGG: function() {
        return m(this.isoWeekYear(), 4)
      },
      GGGGG: function() {
        return m(this.isoWeekYear(), 5)
      },
      e: function() {
        return this.weekday()
      },
      E: function() {
        return this.isoWeekday()
      },
      a: function() {
        return this.lang().meridiem(this.hours(), this.minutes(), !0)
      },
      A: function() {
        return this.lang().meridiem(this.hours(), this.minutes(), !1)
      },
      H: function() {
        return this.hours()
      },
      h: function() {
        return this.hours() % 12 || 12
      },
      m: function() {
        return this.minutes()
      },
      s: function() {
        return this.seconds()
      },
      S: function() {
        return u(this.milliseconds() / 100)
      },
      SS: function() {
        return m(u(this.milliseconds() / 10), 2)
      },
      SSS: function() {
        return m(this.milliseconds(), 3)
      },
      SSSS: function() {
        return m(this.milliseconds(), 3)
      },
      Z: function() {
        var a = -this.zone(),
          b = "+";
        return 0 > a && (a = -a, b = "-"), b + m(u(a / 60), 2) + ":" + m(u(a) % 60, 2)
      },
      ZZ: function() {
        var a = -this.zone(),
          b = "+";
        return 0 > a && (a = -a, b = "-"), b + m(u(a / 60), 2) + m(u(a) % 60, 2)
      },
      z: function() {
        return this.zoneAbbr()
      },
      zz: function() {
        return this.zoneName()
      },
      X: function() {
        return this.unix()
      },
      Q: function() {
        return this.quarter()
      }
    }, ic = ["months", "monthsShort", "weekdays", "weekdaysShort", "weekdaysMin"]; fc.length;) ob = fc.pop(), hc[ob + "o"] = f(hc[ob], ob);
  for (; gc.length;) ob = gc.pop(), hc[ob + ob] = e(hc[ob], 2);
  for (hc.DDDD = e(hc.DDD, 3), j(g.prototype, {
      set: function(a) {
        var b, c;
        for (c in a) b = a[c], "function" == typeof b ? this[c] = b : this["_" + c] = b
      },
      _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
      months: function(a) {
        return this._months[a.month()]
      },
      _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
      monthsShort: function(a) {
        return this._monthsShort[a.month()]
      },
      monthsParse: function(a) {
        var b, c, d;
        for (this._monthsParse || (this._monthsParse = []), b = 0; 12 > b; b++)
          if (this._monthsParse[b] || (c = mb.utc([2e3, b]), d = "^" + this.months(c, "") + "|^" + this.monthsShort(c, ""), this._monthsParse[b] = new RegExp(d.replace(".", ""), "i")), this._monthsParse[b].test(a)) return b
      },
      _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
      weekdays: function(a) {
        return this._weekdays[a.day()]
      },
      _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
      weekdaysShort: function(a) {
        return this._weekdaysShort[a.day()]
      },
      _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
      weekdaysMin: function(a) {
        return this._weekdaysMin[a.day()]
      },
      weekdaysParse: function(a) {
        var b, c, d;
        for (this._weekdaysParse || (this._weekdaysParse = []), b = 0; 7 > b; b++)
          if (this._weekdaysParse[b] || (c = mb([2e3, 1]).day(b), d = "^" + this.weekdays(c, "") + "|^" + this.weekdaysShort(c, "") + "|^" + this.weekdaysMin(c, ""), this._weekdaysParse[b] = new RegExp(d.replace(".", ""), "i")), this._weekdaysParse[b].test(a)) return b
      },
      _longDateFormat: {
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D YYYY",
        LLL: "MMMM D YYYY LT",
        LLLL: "dddd, MMMM D YYYY LT"
      },
      longDateFormat: function(a) {
        var b = this._longDateFormat[a];
        return !b && this._longDateFormat[a.toUpperCase()] && (b = this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function(a) {
          return a.slice(1)
        }), this._longDateFormat[a] = b), b
      },
      isPM: function(a) {
        return "p" === (a + "").toLowerCase().charAt(0)
      },
      _meridiemParse: /[ap]\.?m?\.?/i,
      meridiem: function(a, b, c) {
        return a > 11 ? c ? "pm" : "PM" : c ? "am" : "AM"
      },
      _calendar: {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      },
      calendar: function(a, b) {
        var c = this._calendar[a];
        return "function" == typeof c ? c.apply(b) : c
      },
      _relativeTime: {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      },
      relativeTime: function(a, b, c, d) {
        var e = this._relativeTime[c];
        return "function" == typeof e ? e(a, b, c, d) : e.replace(/%d/i, a)
      },
      pastFuture: function(a, b) {
        var c = this._relativeTime[a > 0 ? "future" : "past"];
        return "function" == typeof c ? c(b) : c.replace(/%s/i, b)
      },
      ordinal: function(a) {
        return this._ordinal.replace("%d", a)
      },
      _ordinal: "%d",
      preparse: function(a) {
        return a
      },
      postformat: function(a) {
        return a
      },
      week: function(a) {
        return bb(a, this._week.dow, this._week.doy).week
      },
      _week: {
        dow: 0,
        doy: 6
      },
      _invalidDate: "Invalid date",
      invalidDate: function() {
        return this._invalidDate
      }
    }), mb = function(b, d, e, f) {
      var g;
      return "boolean" == typeof e && (f = e, e = a), g = {}, g._isAMomentObject = !0, g._i = b, g._f = d, g._l = e, g._strict = f, g._isUTC = !1, g._pf = c(), db(g)
    }, mb.suppressDeprecationWarnings = !1, mb.createFromInputFallback = d("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.", function(a) {
      a._d = new Date(a._i)
    }), mb.min = function() {
      var a = [].slice.call(arguments, 0);
      return eb("isBefore", a)
    }, mb.max = function() {
      var a = [].slice.call(arguments, 0);
      return eb("isAfter", a)
    }, mb.utc = function(b, d, e, f) {
      var g;
      return "boolean" == typeof e && (f = e, e = a), g = {}, g._isAMomentObject = !0, g._useUTC = !0, g._isUTC = !0, g._l = e, g._i = b, g._f = d, g._strict = f, g._pf = c(), db(g).utc()
    }, mb.unix = function(a) {
      return mb(1e3 * a)
    }, mb.duration = function(a, b) {
      var c, d, e, f = a,
        g = null;
      return mb.isDuration(a) ? f = {
        ms: a._milliseconds,
        d: a._days,
        M: a._months
      } : "number" == typeof a ? (f = {}, b ? f[b] = a : f.milliseconds = a) : (g = Db.exec(a)) ? (c = "-" === g[1] ? -1 : 1, f = {
        y: 0,
        d: u(g[ub]) * c,
        h: u(g[vb]) * c,
        m: u(g[wb]) * c,
        s: u(g[xb]) * c,
        ms: u(g[yb]) * c
      }) : (g = Eb.exec(a)) && (c = "-" === g[1] ? -1 : 1, e = function(a) {
        var b = a && parseFloat(a.replace(",", "."));
        return (isNaN(b) ? 0 : b) * c
      }, f = {
        y: e(g[2]),
        M: e(g[3]),
        d: e(g[4]),
        h: e(g[5]),
        m: e(g[6]),
        s: e(g[7]),
        w: e(g[8])
      }), d = new i(f), mb.isDuration(a) && a.hasOwnProperty("_lang") && (d._lang = a._lang), d
    }, mb.version = pb, mb.defaultFormat = Yb, mb.ISO_8601 = function() {}, mb.momentProperties = Ab, mb.updateOffset = function() {}, mb.relativeTimeThreshold = function(b, c) {
      return ec[b] === a ? !1 : (ec[b] = c, !0)
    }, mb.lang = function(a, b) {
      var c;
      return a ? (b ? D(B(a), b) : null === b ? (E(a), a = "en") : zb[a] || F(a), c = mb.duration.fn._lang = mb.fn._lang = F(a), c._abbr) : mb.fn._lang._abbr
    }, mb.langData = function(a) {
      return a && a._lang && a._lang._abbr && (a = a._lang._abbr), F(a)
    }, mb.isMoment = function(a) {
      return a instanceof h || null != a && a.hasOwnProperty("_isAMomentObject")
    }, mb.isDuration = function(a) {
      return a instanceof i
    }, ob = ic.length - 1; ob >= 0; --ob) t(ic[ob]);
  mb.normalizeUnits = function(a) {
    return r(a)
  }, mb.invalid = function(a) {
    var b = mb.utc(0 / 0);
    return null != a ? j(b._pf, a) : b._pf.userInvalidated = !0, b
  }, mb.parseZone = function() {
    return mb.apply(null, arguments).parseZone()
  }, mb.parseTwoDigitYear = function(a) {
    return u(a) + (u(a) > 68 ? 1900 : 2e3)
  }, j(mb.fn = h.prototype, {
    clone: function() {
      return mb(this)
    },
    valueOf: function() {
      return +this._d + 6e4 * (this._offset || 0)
    },
    unix: function() {
      return Math.floor(+this / 1e3)
    },
    toString: function() {
      return this.clone().lang("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
    },
    toDate: function() {
      return this._offset ? new Date(+this) : this._d
    },
    toISOString: function() {
      var a = mb(this).utc();
      return 0 < a.year() && a.year() <= 9999 ? I(a, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : I(a, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
    },
    toArray: function() {
      var a = this;
      return [a.year(), a.month(), a.date(), a.hours(), a.minutes(), a.seconds(), a.milliseconds()]
    },
    isValid: function() {
      return A(this)
    },
    isDSTShifted: function() {
      return this._a ? this.isValid() && q(this._a, (this._isUTC ? mb.utc(this._a) : mb(this._a)).toArray()) > 0 : !1
    },
    parsingFlags: function() {
      return j({}, this._pf)
    },
    invalidAt: function() {
      return this._pf.overflow
    },
    utc: function() {
      return this.zone(0)
    },
    local: function() {
      return this.zone(0), this._isUTC = !1, this
    },
    format: function(a) {
      var b = I(this, a || mb.defaultFormat);
      return this.lang().postformat(b)
    },
    add: function(a, b) {
      var c;
      return c = "string" == typeof a && "string" == typeof b ? mb.duration(isNaN(+b) ? +a : +b, isNaN(+b) ? b : a) : "string" == typeof a ? mb.duration(+b, a) : mb.duration(a, b), n(this, c, 1), this
    },
    subtract: function(a, b) {
      var c;
      return c = "string" == typeof a && "string" == typeof b ? mb.duration(isNaN(+b) ? +a : +b, isNaN(+b) ? b : a) : "string" == typeof a ? mb.duration(+b, a) : mb.duration(a, b), n(this, c, -1), this
    },
    diff: function(a, b, c) {
      var d, e, f = C(a, this),
        g = 6e4 * (this.zone() - f.zone());
      return b = r(b), "year" === b || "month" === b ? (d = 432e5 * (this.daysInMonth() + f.daysInMonth()), e = 12 * (this.year() - f.year()) + (this.month() - f.month()), e += (this - mb(this).startOf("month") - (f - mb(f).startOf("month"))) / d, e -= 6e4 * (this.zone() - mb(this).startOf("month").zone() - (f.zone() - mb(f).startOf("month").zone())) / d, "year" === b && (e /= 12)) : (d = this - f, e = "second" === b ? d / 1e3 : "minute" === b ? d / 6e4 : "hour" === b ? d / 36e5 : "day" === b ? (d - g) / 864e5 : "week" === b ? (d - g) / 6048e5 : d), c ? e : l(e)
    },
    from: function(a, b) {
      return mb.duration(this.diff(a)).lang(this.lang()._abbr).humanize(!b)
    },
    fromNow: function(a) {
      return this.from(mb(), a)
    },
    calendar: function(a) {
      var b = a || mb(),
        c = C(b, this).startOf("day"),
        d = this.diff(c, "days", !0),
        e = -6 > d ? "sameElse" : -1 > d ? "lastWeek" : 0 > d ? "lastDay" : 1 > d ? "sameDay" : 2 > d ? "nextDay" : 7 > d ? "nextWeek" : "sameElse";
      return this.format(this.lang().calendar(e, this))
    },
    isLeapYear: function() {
      return y(this.year())
    },
    isDST: function() {
      return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone()
    },
    day: function(a) {
      var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      return null != a ? (a = $(a, this.lang()), this.add({
        d: a - b
      })) : b
    },
    month: ib("Month", !0),
    startOf: function(a) {
      switch (a = r(a)) {
        case "year":
          this.month(0);
        case "quarter":
        case "month":
          this.date(1);
        case "week":
        case "isoWeek":
        case "day":
          this.hours(0);
        case "hour":
          this.minutes(0);
        case "minute":
          this.seconds(0);
        case "second":
          this.milliseconds(0)
      }
      return "week" === a ? this.weekday(0) : "isoWeek" === a && this.isoWeekday(1), "quarter" === a && this.month(3 * Math.floor(this.month() / 3)), this
    },
    endOf: function(a) {
      return a = r(a), this.startOf(a).add("isoWeek" === a ? "week" : a, 1).subtract("ms", 1)
    },
    isAfter: function(a, b) {
      return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) > +mb(a).startOf(b)
    },
    isBefore: function(a, b) {
      return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) < +mb(a).startOf(b)
    },
    isSame: function(a, b) {
      return b = b || "ms", +this.clone().startOf(b) === +C(a, this).startOf(b)
    },
    min: d("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548", function(a) {
      return a = mb.apply(null, arguments), this > a ? this : a
    }),
    max: d("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548", function(a) {
      return a = mb.apply(null, arguments), a > this ? this : a
    }),
    zone: function(a, b) {
      var c = this._offset || 0;
      return null == a ? this._isUTC ? c : this._d.getTimezoneOffset() : ("string" == typeof a && (a = L(a)), Math.abs(a) < 16 && (a = 60 * a), this._offset = a, this._isUTC = !0, c !== a && (!b || this._changeInProgress ? n(this, mb.duration(c - a, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, mb.updateOffset(this, !0), this._changeInProgress = null)), this)
    },
    zoneAbbr: function() {
      return this._isUTC ? "UTC" : ""
    },
    zoneName: function() {
      return this._isUTC ? "Coordinated Universal Time" : ""
    },
    parseZone: function() {
      return this._tzm ? this.zone(this._tzm) : "string" == typeof this._i && this.zone(this._i), this
    },
    hasAlignedHourOffset: function(a) {
      return a = a ? mb(a).zone() : 0, (this.zone() - a) % 60 === 0
    },
    daysInMonth: function() {
      return v(this.year(), this.month())
    },
    dayOfYear: function(a) {
      var b = rb((mb(this).startOf("day") - mb(this).startOf("year")) / 864e5) + 1;
      return null == a ? b : this.add("d", a - b)
    },
    quarter: function(a) {
      return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3)
    },
    weekYear: function(a) {
      var b = bb(this, this.lang()._week.dow, this.lang()._week.doy).year;
      return null == a ? b : this.add("y", a - b)
    },
    isoWeekYear: function(a) {
      var b = bb(this, 1, 4).year;
      return null == a ? b : this.add("y", a - b)
    },
    week: function(a) {
      var b = this.lang().week(this);
      return null == a ? b : this.add("d", 7 * (a - b))
    },
    isoWeek: function(a) {
      var b = bb(this, 1, 4).week;
      return null == a ? b : this.add("d", 7 * (a - b))
    },
    weekday: function(a) {
      var b = (this.day() + 7 - this.lang()._week.dow) % 7;
      return null == a ? b : this.add("d", a - b)
    },
    isoWeekday: function(a) {
      return null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7)
    },
    isoWeeksInYear: function() {
      return w(this.year(), 1, 4)
    },
    weeksInYear: function() {
      var a = this._lang._week;
      return w(this.year(), a.dow, a.doy)
    },
    get: function(a) {
      return a = r(a), this[a]()
    },
    set: function(a, b) {
      return a = r(a), "function" == typeof this[a] && this[a](b), this
    },
    lang: function(b) {
      return b === a ? this._lang : (this._lang = F(b), this)
    }
  }), mb.fn.millisecond = mb.fn.milliseconds = ib("Milliseconds", !1), mb.fn.second = mb.fn.seconds = ib("Seconds", !1), mb.fn.minute = mb.fn.minutes = ib("Minutes", !1), mb.fn.hour = mb.fn.hours = ib("Hours", !0), mb.fn.date = ib("Date", !0), mb.fn.dates = d("dates accessor is deprecated. Use date instead.", ib("Date", !0)), mb.fn.year = ib("FullYear", !0), mb.fn.years = d("years accessor is deprecated. Use year instead.", ib("FullYear", !0)), mb.fn.days = mb.fn.day, mb.fn.months = mb.fn.month, mb.fn.weeks = mb.fn.week, mb.fn.isoWeeks = mb.fn.isoWeek, mb.fn.quarters = mb.fn.quarter, mb.fn.toJSON = mb.fn.toISOString, j(mb.duration.fn = i.prototype, {
    _bubble: function() {
      var a, b, c, d, e = this._milliseconds,
        f = this._days,
        g = this._months,
        h = this._data;
      h.milliseconds = e % 1e3, a = l(e / 1e3), h.seconds = a % 60, b = l(a / 60), h.minutes = b % 60, c = l(b / 60), h.hours = c % 24, f += l(c / 24), h.days = f % 30, g += l(f / 30), h.months = g % 12, d = l(g / 12), h.years = d
    },
    weeks: function() {
      return l(this.days() / 7)
    },
    valueOf: function() {
      return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * u(this._months / 12)
    },
    humanize: function(a) {
      var b = +this,
        c = ab(b, !a, this.lang());
      return a && (c = this.lang().pastFuture(b, c)), this.lang().postformat(c)
    },
    add: function(a, b) {
      var c = mb.duration(a, b);
      return this._milliseconds += c._milliseconds, this._days += c._days, this._months += c._months, this._bubble(), this
    },
    subtract: function(a, b) {
      var c = mb.duration(a, b);
      return this._milliseconds -= c._milliseconds, this._days -= c._days, this._months -= c._months, this._bubble(), this
    },
    get: function(a) {
      return a = r(a), this[a.toLowerCase() + "s"]()
    },
    as: function(a) {
      return a = r(a), this["as" + a.charAt(0).toUpperCase() + a.slice(1) + "s"]()
    },
    lang: mb.fn.lang,
    toIsoString: function() {
      var a = Math.abs(this.years()),
        b = Math.abs(this.months()),
        c = Math.abs(this.days()),
        d = Math.abs(this.hours()),
        e = Math.abs(this.minutes()),
        f = Math.abs(this.seconds() + this.milliseconds() / 1e3);
      return this.asSeconds() ? (this.asSeconds() < 0 ? "-" : "") + "P" + (a ? a + "Y" : "") + (b ? b + "M" : "") + (c ? c + "D" : "") + (d || e || f ? "T" : "") + (d ? d + "H" : "") + (e ? e + "M" : "") + (f ? f + "S" : "") : "P0D"
    }
  });
  for (ob in ac) ac.hasOwnProperty(ob) && (kb(ob, ac[ob]), jb(ob.toLowerCase()));
  kb("Weeks", 6048e5), mb.duration.fn.asMonths = function() {
      return (+this - 31536e6 * this.years()) / 2592e6 + 12 * this.years()
    }, mb.lang("en", {
      ordinal: function(a) {
        var b = a % 10,
          c = 1 === u(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";
        return a + c
      }
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ar-ma", {
        months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "١",
          2: "٢",
          3: "٣",
          4: "٤",
          5: "٥",
          6: "٦",
          7: "٧",
          8: "٨",
          9: "٩",
          0: "٠"
        },
        c = {
          "١": "1",
          "٢": "2",
          "٣": "3",
          "٤": "4",
          "٥": "5",
          "٦": "6",
          "٧": "7",
          "٨": "8",
          "٩": "9",
          "٠": "0"
        };
      return a.lang("ar-sa", {
        months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        meridiem: function(a) {
          return 12 > a ? "ص" : "م"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        preparse: function(a) {
          return a.replace(/[۰-۹]/g, function(a) {
            return c[a]
          }).replace(/،/g, ",")
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          }).replace(/,/g, "،")
        },
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "١",
          2: "٢",
          3: "٣",
          4: "٤",
          5: "٥",
          6: "٦",
          7: "٧",
          8: "٨",
          9: "٩",
          0: "٠"
        },
        c = {
          "١": "1",
          "٢": "2",
          "٣": "3",
          "٤": "4",
          "٥": "5",
          "٦": "6",
          "٧": "7",
          "٨": "8",
          "٩": "9",
          "٠": "0"
        };
      return a.lang("ar", {
        months: "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        monthsShort: "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        meridiem: function(a) {
          return 12 > a ? "ص" : "م"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        preparse: function(a) {
          return a.replace(/[۰-۹]/g, function(a) {
            return c[a]
          }).replace(/،/g, ",")
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          }).replace(/,/g, "،")
        },
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
        1: "-inci",
        5: "-inci",
        8: "-inci",
        70: "-inci",
        80: "-inci",
        2: "-nci",
        7: "-nci",
        20: "-nci",
        50: "-nci",
        3: "-üncü",
        4: "-üncü",
        100: "-üncü",
        6: "-ncı",
        9: "-uncu",
        10: "-uncu",
        30: "-uncu",
        60: "-ıncı",
        90: "-ıncı"
      };
      return a.lang("az", {
        months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
        monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
        weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
        weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
        weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[bugün saat] LT",
          nextDay: "[sabah saat] LT",
          nextWeek: "[gələn həftə] dddd [saat] LT",
          lastDay: "[dünən] LT",
          lastWeek: "[keçən həftə] dddd [saat] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s sonra",
          past: "%s əvvəl",
          s: "birneçə saniyyə",
          m: "bir dəqiqə",
          mm: "%d dəqiqə",
          h: "bir saat",
          hh: "%d saat",
          d: "bir gün",
          dd: "%d gün",
          M: "bir ay",
          MM: "%d ay",
          y: "bir il",
          yy: "%d il"
        },
        meridiem: function(a) {
          return 4 > a ? "gecə" : 12 > a ? "səhər" : 17 > a ? "gündüz" : "axşam"
        },
        ordinal: function(a) {
          if (0 === a) return a + "-ıncı";
          var c = a % 10,
            d = a % 100 - c,
            e = a >= 100 ? 100 : null;
          return a + (b[c] || b[d] || b[e])
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("bg", {
        months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "D.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Днес в] LT",
          nextDay: "[Утре в] LT",
          nextWeek: "dddd [в] LT",
          lastDay: "[Вчера в] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return "[В изминалата] dddd [в] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[В изминалия] dddd [в] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "след %s",
          past: "преди %s",
          s: "няколко секунди",
          m: "минута",
          mm: "%d минути",
          h: "час",
          hh: "%d часа",
          d: "ден",
          dd: "%d дни",
          M: "месец",
          MM: "%d месеца",
          y: "година",
          yy: "%d години"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = a % 100;
          return 0 === a ? a + "-ев" : 0 === c ? a + "-ен" : c > 10 && 20 > c ? a + "-ти" : 1 === b ? a + "-ви" : 2 === b ? a + "-ри" : 7 === b || 8 === b ? a + "-ми" : a + "-ти"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "১",
          2: "২",
          3: "৩",
          4: "৪",
          5: "৫",
          6: "৬",
          7: "৭",
          8: "৮",
          9: "৯",
          0: "০"
        },
        c = {
          "১": "1",
          "২": "2",
          "৩": "3",
          "৪": "4",
          "৫": "5",
          "৬": "6",
          "৭": "7",
          "৮": "8",
          "৯": "9",
          "০": "0"
        };
      return a.lang("bn", {
        months: "জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
        monthsShort: "জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"),
        weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার".split("_"),
        weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি".split("_"),
        weekdaysMin: "রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"),
        longDateFormat: {
          LT: "A h:mm সময়",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        calendar: {
          sameDay: "[আজ] LT",
          nextDay: "[আগামীকাল] LT",
          nextWeek: "dddd, LT",
          lastDay: "[গতকাল] LT",
          lastWeek: "[গত] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s পরে",
          past: "%s আগে",
          s: "কএক সেকেন্ড",
          m: "এক মিনিট",
          mm: "%d মিনিট",
          h: "এক ঘন্টা",
          hh: "%d ঘন্টা",
          d: "এক দিন",
          dd: "%d দিন",
          M: "এক মাস",
          MM: "%d মাস",
          y: "এক বছর",
          yy: "%d বছর"
        },
        preparse: function(a) {
          return a.replace(/[১২৩৪৫৬৭৮৯০]/g, function(a) {
            return c[a]
          })
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          })
        },
        meridiem: function(a) {
          return 4 > a ? "রাত" : 10 > a ? "শকাল" : 17 > a ? "দুপুর" : 20 > a ? "বিকেল" : "রাত"
        },
        week: {
          dow: 0,
          doy: 6
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(b) {
      function c(a, b, c) {
        var d = {
          mm: "munutenn",
          MM: "miz",
          dd: "devezh"
        };
        return a + " " + f(d[c], a)
      }

      function d(a) {
        switch (e(a)) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
            return a + " bloaz";
          default:
            return a + " vloaz"
        }
      }

      function e(a) {
        return a > 9 ? e(a % 10) : a
      }

      function f(a, b) {
        return 2 === b ? g(a) : a
      }

      function g(b) {
        var c = {
          m: "v",
          b: "v",
          d: "z"
        };
        return c[b.charAt(0)] === a ? b : c[b.charAt(0)] + b.substring(1)
      }
      return b.lang("br", {
        months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        longDateFormat: {
          LT: "h[e]mm A",
          L: "DD/MM/YYYY",
          LL: "D [a viz] MMMM YYYY",
          LLL: "D [a viz] MMMM YYYY LT",
          LLLL: "dddd, D [a viz] MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Hiziv da] LT",
          nextDay: "[Warc'hoazh da] LT",
          nextWeek: "dddd [da] LT",
          lastDay: "[Dec'h da] LT",
          lastWeek: "dddd [paset da] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "a-benn %s",
          past: "%s 'zo",
          s: "un nebeud segondennoù",
          m: "ur vunutenn",
          mm: c,
          h: "un eur",
          hh: "%d eur",
          d: "un devezh",
          dd: c,
          M: "ur miz",
          MM: c,
          y: "ur bloaz",
          yy: d
        },
        ordinal: function(a) {
          var b = 1 === a ? "añ" : "vet";
          return a + b
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = a + " ";
        switch (c) {
          case "m":
            return b ? "jedna minuta" : "jedne minute";
          case "mm":
            return d += 1 === a ? "minuta" : 2 === a || 3 === a || 4 === a ? "minute" : "minuta";
          case "h":
            return b ? "jedan sat" : "jednog sata";
          case "hh":
            return d += 1 === a ? "sat" : 2 === a || 3 === a || 4 === a ? "sata" : "sati";
          case "dd":
            return d += 1 === a ? "dan" : "dana";
          case "MM":
            return d += 1 === a ? "mjesec" : 2 === a || 3 === a || 4 === a ? "mjeseca" : "mjeseci";
          case "yy":
            return d += 1 === a ? "godina" : 2 === a || 3 === a || 4 === a ? "godine" : "godina"
        }
      }
      return a.lang("bs", {
        months: "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedjelju] [u] LT";
              case 3:
                return "[u] [srijedu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT"
            }
          },
          lastDay: "[jučer u] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
                return "[prošlu] dddd [u] LT";
              case 6:
                return "[prošle] [subote] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prošli] dddd [u] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "prije %s",
          s: "par sekundi",
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: "dan",
          dd: b,
          M: "mjesec",
          MM: b,
          y: "godinu",
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ca", {
        months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
        monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
        weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
        weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
        weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: function() {
            return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT"
          },
          nextDay: function() {
            return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT"
          },
          nextWeek: function() {
            return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT"
          },
          lastDay: function() {
            return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT"
          },
          lastWeek: function() {
            return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "en %s",
          past: "fa %s",
          s: "uns segons",
          m: "un minut",
          mm: "%d minuts",
          h: "una hora",
          hh: "%d hores",
          d: "un dia",
          dd: "%d dies",
          M: "un mes",
          MM: "%d mesos",
          y: "un any",
          yy: "%d anys"
        },
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a) {
        return a > 1 && 5 > a && 1 !== ~~(a / 10)
      }

      function c(a, c, d, e) {
        var f = a + " ";
        switch (d) {
          case "s":
            return c || e ? "pár sekund" : "pár sekundami";
          case "m":
            return c ? "minuta" : e ? "minutu" : "minutou";
          case "mm":
            return c || e ? f + (b(a) ? "minuty" : "minut") : f + "minutami";
            break;
          case "h":
            return c ? "hodina" : e ? "hodinu" : "hodinou";
          case "hh":
            return c || e ? f + (b(a) ? "hodiny" : "hodin") : f + "hodinami";
            break;
          case "d":
            return c || e ? "den" : "dnem";
          case "dd":
            return c || e ? f + (b(a) ? "dny" : "dní") : f + "dny";
            break;
          case "M":
            return c || e ? "měsíc" : "měsícem";
          case "MM":
            return c || e ? f + (b(a) ? "měsíce" : "měsíců") : f + "měsíci";
            break;
          case "y":
            return c || e ? "rok" : "rokem";
          case "yy":
            return c || e ? f + (b(a) ? "roky" : "let") : f + "lety"
        }
      }
      var d = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
        e = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");
      return a.lang("cs", {
        months: d,
        monthsShort: e,
        monthsParse: function(a, b) {
          var c, d = [];
          for (c = 0; 12 > c; c++) d[c] = new RegExp("^" + a[c] + "$|^" + b[c] + "$", "i");
          return d
        }(d, e),
        weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat: {
          LT: "H.mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[dnes v] LT",
          nextDay: "[zítra v] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v neděli v] LT";
              case 1:
              case 2:
                return "[v] dddd [v] LT";
              case 3:
                return "[ve středu v] LT";
              case 4:
                return "[ve čtvrtek v] LT";
              case 5:
                return "[v pátek v] LT";
              case 6:
                return "[v sobotu v] LT"
            }
          },
          lastDay: "[včera v] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[minulou neděli v] LT";
              case 1:
              case 2:
                return "[minulé] dddd [v] LT";
              case 3:
                return "[minulou středu v] LT";
              case 4:
              case 5:
                return "[minulý] dddd [v] LT";
              case 6:
                return "[minulou sobotu v] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "před %s",
          s: c,
          m: c,
          mm: c,
          h: c,
          hh: c,
          d: c,
          dd: c,
          M: c,
          MM: c,
          y: c,
          yy: c
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("cv", {
        months: "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),
        monthsShort: "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),
        weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),
        weekdaysShort: "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),
        weekdaysMin: "вр_тн_ыт_юн_кç_эр_шм".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD-MM-YYYY",
          LL: "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",
          LLL: "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",
          LLLL: "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"
        },
        calendar: {
          sameDay: "[Паян] LT [сехетре]",
          nextDay: "[Ыран] LT [сехетре]",
          lastDay: "[Ĕнер] LT [сехетре]",
          nextWeek: "[Çитес] dddd LT [сехетре]",
          lastWeek: "[Иртнĕ] dddd LT [сехетре]",
          sameElse: "L"
        },
        relativeTime: {
          future: function(a) {
            var b = /сехет$/i.exec(a) ? "рен" : /çул$/i.exec(a) ? "тан" : "ран";
            return a + b
          },
          past: "%s каялла",
          s: "пĕр-ик çеккунт",
          m: "пĕр минут",
          mm: "%d минут",
          h: "пĕр сехет",
          hh: "%d сехет",
          d: "пĕр кун",
          dd: "%d кун",
          M: "пĕр уйăх",
          MM: "%d уйăх",
          y: "пĕр çул",
          yy: "%d çул"
        },
        ordinal: "%d-мĕш",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Heddiw am] LT",
          nextDay: "[Yfory am] LT",
          nextWeek: "dddd [am] LT",
          lastDay: "[Ddoe am] LT",
          lastWeek: "dddd [diwethaf am] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "mewn %s",
          past: "%s yn ôl",
          s: "ychydig eiliadau",
          m: "munud",
          mm: "%d munud",
          h: "awr",
          hh: "%d awr",
          d: "diwrnod",
          dd: "%d diwrnod",
          M: "mis",
          MM: "%d mis",
          y: "blwyddyn",
          yy: "%d flynedd"
        },
        ordinal: function(a) {
          var b = a,
            c = "",
            d = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"];
          return b > 20 ? c = 40 === b || 50 === b || 60 === b || 80 === b || 100 === b ? "fed" : "ain" : b > 0 && (c = d[b]), a + c
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("da", {
        months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd [d.] D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[I dag kl.] LT",
          nextDay: "[I morgen kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[I går kl.] LT",
          lastWeek: "[sidste] dddd [kl] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "%s siden",
          s: "få sekunder",
          m: "et minut",
          mm: "%d minutter",
          h: "en time",
          hh: "%d timer",
          d: "en dag",
          dd: "%d dage",
          M: "en måned",
          MM: "%d måneder",
          y: "et år",
          yy: "%d år"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = {
          m: ["eine Minute", "einer Minute"],
          h: ["eine Stunde", "einer Stunde"],
          d: ["ein Tag", "einem Tag"],
          dd: [a + " Tage", a + " Tagen"],
          M: ["ein Monat", "einem Monat"],
          MM: [a + " Monate", a + " Monaten"],
          y: ["ein Jahr", "einem Jahr"],
          yy: [a + " Jahre", a + " Jahren"]
        };
        return b ? d[c][0] : d[c][1]
      }
      return a.lang("de-at", {
        months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm [Uhr]",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Heute um] LT",
          sameElse: "L",
          nextDay: "[Morgen um] LT",
          nextWeek: "dddd [um] LT",
          lastDay: "[Gestern um] LT",
          lastWeek: "[letzten] dddd [um] LT"
        },
        relativeTime: {
          future: "in %s",
          past: "vor %s",
          s: "ein paar Sekunden",
          m: b,
          mm: "%d Minuten",
          h: b,
          hh: "%d Stunden",
          d: b,
          dd: b,
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = {
          m: ["eine Minute", "einer Minute"],
          h: ["eine Stunde", "einer Stunde"],
          d: ["ein Tag", "einem Tag"],
          dd: [a + " Tage", a + " Tagen"],
          M: ["ein Monat", "einem Monat"],
          MM: [a + " Monate", a + " Monaten"],
          y: ["ein Jahr", "einem Jahr"],
          yy: [a + " Jahre", a + " Jahren"]
        };
        return b ? d[c][0] : d[c][1]
      }
      return a.lang("de", {
        months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm [Uhr]",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Heute um] LT",
          sameElse: "L",
          nextDay: "[Morgen um] LT",
          nextWeek: "dddd [um] LT",
          lastDay: "[Gestern um] LT",
          lastWeek: "[letzten] dddd [um] LT"
        },
        relativeTime: {
          future: "in %s",
          past: "vor %s",
          s: "ein paar Sekunden",
          m: b,
          mm: "%d Minuten",
          h: b,
          hh: "%d Stunden",
          d: b,
          dd: b,
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("el", {
        monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months: function(a, b) {
          return /D/.test(b.substring(0, b.indexOf("MMMM"))) ? this._monthsGenitiveEl[a.month()] : this._monthsNominativeEl[a.month()]
        },
        monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem: function(a, b, c) {
          return a > 11 ? c ? "μμ" : "ΜΜ" : c ? "πμ" : "ΠΜ"
        },
        longDateFormat: {
          LT: "h:mm A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendarEl: {
          sameDay: "[Σήμερα {}] LT",
          nextDay: "[Αύριο {}] LT",
          nextWeek: "dddd [{}] LT",
          lastDay: "[Χθες {}] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 6:
                return "[το προηγούμενο] dddd [{}] LT";
              default:
                return "[την προηγούμενη] dddd [{}] LT"
            }
          },
          sameElse: "L"
        },
        calendar: function(a, b) {
          var c = this._calendarEl[a],
            d = b && b.hours();
          return "function" == typeof c && (c = c.apply(b)), c.replace("{}", d % 12 === 1 ? "στη" : "στις")
        },
        relativeTime: {
          future: "σε %s",
          past: "%s πριν",
          s: "δευτερόλεπτα",
          m: "ένα λεπτό",
          mm: "%d λεπτά",
          h: "μία ώρα",
          hh: "%d ώρες",
          d: "μία μέρα",
          dd: "%d μέρες",
          M: "ένας μήνας",
          MM: "%d μήνες",
          y: "ένας χρόνος",
          yy: "%d χρόνια"
        },
        ordinal: function(a) {
          return a + "η"
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("en-au", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";
          return a + c
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("en-ca", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          L: "YYYY-MM-DD",
          LL: "D MMMM, YYYY",
          LLL: "D MMMM, YYYY LT",
          LLLL: "dddd, D MMMM, YYYY LT"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";
          return a + c
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("en-gb", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";
          return a + c
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("eo", {
        months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays: "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort: "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "YYYY-MM-DD",
          LL: "D[-an de] MMMM, YYYY",
          LLL: "D[-an de] MMMM, YYYY LT",
          LLLL: "dddd, [la] D[-an de] MMMM, YYYY LT"
        },
        meridiem: function(a, b, c) {
          return a > 11 ? c ? "p.t.m." : "P.T.M." : c ? "a.t.m." : "A.T.M."
        },
        calendar: {
          sameDay: "[Hodiaŭ je] LT",
          nextDay: "[Morgaŭ je] LT",
          nextWeek: "dddd [je] LT",
          lastDay: "[Hieraŭ je] LT",
          lastWeek: "[pasinta] dddd [je] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "je %s",
          past: "antaŭ %s",
          s: "sekundoj",
          m: "minuto",
          mm: "%d minutoj",
          h: "horo",
          hh: "%d horoj",
          d: "tago",
          dd: "%d tagoj",
          M: "monato",
          MM: "%d monatoj",
          y: "jaro",
          yy: "%d jaroj"
        },
        ordinal: "%da",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        c = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");
      return a.lang("es", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort: function(a, d) {
          return /-MMM-/.test(d) ? c[a.month()] : b[a.month()]
        },
        weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin: "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [del] YYYY",
          LLL: "D [de] MMMM [del] YYYY LT",
          LLLL: "dddd, D [de] MMMM [del] YYYY LT"
        },
        calendar: {
          sameDay: function() {
            return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT"
          },
          nextDay: function() {
            return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT"
          },
          nextWeek: function() {
            return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT"
          },
          lastDay: function() {
            return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT"
          },
          lastWeek: function() {
            return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "en %s",
          past: "hace %s",
          s: "unos segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "una hora",
          hh: "%d horas",
          d: "un día",
          dd: "%d días",
          M: "un mes",
          MM: "%d meses",
          y: "un año",
          yy: "%d años"
        },
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c, d) {
        var e = {
          s: ["mõne sekundi", "mõni sekund", "paar sekundit"],
          m: ["ühe minuti", "üks minut"],
          mm: [a + " minuti", a + " minutit"],
          h: ["ühe tunni", "tund aega", "üks tund"],
          hh: [a + " tunni", a + " tundi"],
          d: ["ühe päeva", "üks päev"],
          M: ["kuu aja", "kuu aega", "üks kuu"],
          MM: [a + " kuu", a + " kuud"],
          y: ["ühe aasta", "aasta", "üks aasta"],
          yy: [a + " aasta", a + " aastat"]
        };
        return b ? e[c][2] ? e[c][2] : e[c][1] : d ? e[c][0] : e[c][1]
      }
      return a.lang("et", {
        months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort: "P_E_T_K_N_R_L".split("_"),
        weekdaysMin: "P_E_T_K_N_R_L".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Täna,] LT",
          nextDay: "[Homme,] LT",
          nextWeek: "[Järgmine] dddd LT",
          lastDay: "[Eile,] LT",
          lastWeek: "[Eelmine] dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s pärast",
          past: "%s tagasi",
          s: b,
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: b,
          dd: "%d päeva",
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("eu", {
        months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "YYYY-MM-DD",
          LL: "YYYY[ko] MMMM[ren] D[a]",
          LLL: "YYYY[ko] MMMM[ren] D[a] LT",
          LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] LT",
          l: "YYYY-M-D",
          ll: "YYYY[ko] MMM D[a]",
          lll: "YYYY[ko] MMM D[a] LT",
          llll: "ddd, YYYY[ko] MMM D[a] LT"
        },
        calendar: {
          sameDay: "[gaur] LT[etan]",
          nextDay: "[bihar] LT[etan]",
          nextWeek: "dddd LT[etan]",
          lastDay: "[atzo] LT[etan]",
          lastWeek: "[aurreko] dddd LT[etan]",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s barru",
          past: "duela %s",
          s: "segundo batzuk",
          m: "minutu bat",
          mm: "%d minutu",
          h: "ordu bat",
          hh: "%d ordu",
          d: "egun bat",
          dd: "%d egun",
          M: "hilabete bat",
          MM: "%d hilabete",
          y: "urte bat",
          yy: "%d urte"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "۱",
          2: "۲",
          3: "۳",
          4: "۴",
          5: "۵",
          6: "۶",
          7: "۷",
          8: "۸",
          9: "۹",
          0: "۰"
        },
        c = {
          "۱": "1",
          "۲": "2",
          "۳": "3",
          "۴": "4",
          "۵": "5",
          "۶": "6",
          "۷": "7",
          "۸": "8",
          "۹": "9",
          "۰": "0"
        };
      return a.lang("fa", {
        months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
        weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
        weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        meridiem: function(a) {
          return 12 > a ? "قبل از ظهر" : "بعد از ظهر"
        },
        calendar: {
          sameDay: "[امروز ساعت] LT",
          nextDay: "[فردا ساعت] LT",
          nextWeek: "dddd [ساعت] LT",
          lastDay: "[دیروز ساعت] LT",
          lastWeek: "dddd [پیش] [ساعت] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "در %s",
          past: "%s پیش",
          s: "چندین ثانیه",
          m: "یک دقیقه",
          mm: "%d دقیقه",
          h: "یک ساعت",
          hh: "%d ساعت",
          d: "یک روز",
          dd: "%d روز",
          M: "یک ماه",
          MM: "%d ماه",
          y: "یک سال",
          yy: "%d سال"
        },
        preparse: function(a) {
          return a.replace(/[۰-۹]/g, function(a) {
            return c[a]
          }).replace(/،/g, ",")
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          }).replace(/,/g, "،")
        },
        ordinal: "%dم",
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, d, e) {
        var f = "";
        switch (d) {
          case "s":
            return e ? "muutaman sekunnin" : "muutama sekunti";
          case "m":
            return e ? "minuutin" : "minuutti";
          case "mm":
            f = e ? "minuutin" : "minuuttia";
            break;
          case "h":
            return e ? "tunnin" : "tunti";
          case "hh":
            f = e ? "tunnin" : "tuntia";
            break;
          case "d":
            return e ? "päivän" : "päivä";
          case "dd":
            f = e ? "päivän" : "päivää";
            break;
          case "M":
            return e ? "kuukauden" : "kuukausi";
          case "MM":
            f = e ? "kuukauden" : "kuukautta";
            break;
          case "y":
            return e ? "vuoden" : "vuosi";
          case "yy":
            f = e ? "vuoden" : "vuotta"
        }
        return f = c(a, e) + " " + f
      }

      function c(a, b) {
        return 10 > a ? b ? e[a] : d[a] : a
      }
      var d = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),
        e = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", d[7], d[8], d[9]];
      return a.lang("fi", {
        months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          L: "DD.MM.YYYY",
          LL: "Do MMMM[ta] YYYY",
          LLL: "Do MMMM[ta] YYYY, [klo] LT",
          LLLL: "dddd, Do MMMM[ta] YYYY, [klo] LT",
          l: "D.M.YYYY",
          ll: "Do MMM YYYY",
          lll: "Do MMM YYYY, [klo] LT",
          llll: "ddd, Do MMM YYYY, [klo] LT"
        },
        calendar: {
          sameDay: "[tänään] [klo] LT",
          nextDay: "[huomenna] [klo] LT",
          nextWeek: "dddd [klo] LT",
          lastDay: "[eilen] [klo] LT",
          lastWeek: "[viime] dddd[na] [klo] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s päästä",
          past: "%s sitten",
          s: b,
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: b,
          dd: b,
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("fo", {
        months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D. MMMM, YYYY LT"
        },
        calendar: {
          sameDay: "[Í dag kl.] LT",
          nextDay: "[Í morgin kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[Í gjár kl.] LT",
          lastWeek: "[síðstu] dddd [kl] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "um %s",
          past: "%s síðani",
          s: "fá sekund",
          m: "ein minutt",
          mm: "%d minuttir",
          h: "ein tími",
          hh: "%d tímar",
          d: "ein dagur",
          dd: "%d dagar",
          M: "ein mánaði",
          MM: "%d mánaðir",
          y: "eitt ár",
          yy: "%d ár"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("fr-ca", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "YYYY-MM-DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Aujourd'hui à] LT",
          nextDay: "[Demain à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[Hier à] LT",
          lastWeek: "dddd [dernier à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        ordinal: function(a) {
          return a + (1 === a ? "er" : "")
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("fr", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Aujourd'hui à] LT",
          nextDay: "[Demain à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[Hier à] LT",
          lastWeek: "dddd [dernier à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        ordinal: function(a) {
          return a + (1 === a ? "er" : "")
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("gl", {
        months: "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
        monthsShort: "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
        weekdays: "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),
        weekdaysShort: "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),
        weekdaysMin: "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: function() {
            return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT"
          },
          nextDay: function() {
            return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT"
          },
          nextWeek: function() {
            return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT"
          },
          lastDay: function() {
            return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT"
          },
          lastWeek: function() {
            return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: function(a) {
            return "uns segundos" === a ? "nuns segundos" : "en " + a
          },
          past: "hai %s",
          s: "uns segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "unha hora",
          hh: "%d horas",
          d: "un día",
          dd: "%d días",
          M: "un mes",
          MM: "%d meses",
          y: "un ano",
          yy: "%d anos"
        },
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("he", {
        months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D [ב]MMMM YYYY",
          LLL: "D [ב]MMMM YYYY LT",
          LLLL: "dddd, D [ב]MMMM YYYY LT",
          l: "D/M/YYYY",
          ll: "D MMM YYYY",
          lll: "D MMM YYYY LT",
          llll: "ddd, D MMM YYYY LT"
        },
        calendar: {
          sameDay: "[היום ב־]LT",
          nextDay: "[מחר ב־]LT",
          nextWeek: "dddd [בשעה] LT",
          lastDay: "[אתמול ב־]LT",
          lastWeek: "[ביום] dddd [האחרון בשעה] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "בעוד %s",
          past: "לפני %s",
          s: "מספר שניות",
          m: "דקה",
          mm: "%d דקות",
          h: "שעה",
          hh: function(a) {
            return 2 === a ? "שעתיים" : a + " שעות"
          },
          d: "יום",
          dd: function(a) {
            return 2 === a ? "יומיים" : a + " ימים"
          },
          M: "חודש",
          MM: function(a) {
            return 2 === a ? "חודשיים" : a + " חודשים"
          },
          y: "שנה",
          yy: function(a) {
            return 2 === a ? "שנתיים" : a + " שנים"
          }
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        c = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      return a.lang("hi", {
        months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
        monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
        weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
          LT: "A h:mm बजे",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[कल] LT",
          nextWeek: "dddd, LT",
          lastDay: "[कल] LT",
          lastWeek: "[पिछले] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s में",
          past: "%s पहले",
          s: "कुछ ही क्षण",
          m: "एक मिनट",
          mm: "%d मिनट",
          h: "एक घंटा",
          hh: "%d घंटे",
          d: "एक दिन",
          dd: "%d दिन",
          M: "एक महीने",
          MM: "%d महीने",
          y: "एक वर्ष",
          yy: "%d वर्ष"
        },
        preparse: function(a) {
          return a.replace(/[१२३४५६७८९०]/g, function(a) {
            return c[a]
          })
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          })
        },
        meridiem: function(a) {
          return 4 > a ? "रात" : 10 > a ? "सुबह" : 17 > a ? "दोपहर" : 20 > a ? "शाम" : "रात"
        },
        week: {
          dow: 0,
          doy: 6
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = a + " ";
        switch (c) {
          case "m":
            return b ? "jedna minuta" : "jedne minute";
          case "mm":
            return d += 1 === a ? "minuta" : 2 === a || 3 === a || 4 === a ? "minute" : "minuta";
          case "h":
            return b ? "jedan sat" : "jednog sata";
          case "hh":
            return d += 1 === a ? "sat" : 2 === a || 3 === a || 4 === a ? "sata" : "sati";
          case "dd":
            return d += 1 === a ? "dan" : "dana";
          case "MM":
            return d += 1 === a ? "mjesec" : 2 === a || 3 === a || 4 === a ? "mjeseca" : "mjeseci";
          case "yy":
            return d += 1 === a ? "godina" : 2 === a || 3 === a || 4 === a ? "godine" : "godina"
        }
      }
      return a.lang("hr", {
        months: "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
        monthsShort: "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedjelju] [u] LT";
              case 3:
                return "[u] [srijedu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT"
            }
          },
          lastDay: "[jučer u] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
                return "[prošlu] dddd [u] LT";
              case 6:
                return "[prošle] [subote] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prošli] dddd [u] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "prije %s",
          s: "par sekundi",
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: "dan",
          dd: b,
          M: "mjesec",
          MM: b,
          y: "godinu",
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c, d) {
        var e = a;
        switch (c) {
          case "s":
            return d || b ? "néhány másodperc" : "néhány másodperce";
          case "m":
            return "egy" + (d || b ? " perc" : " perce");
          case "mm":
            return e + (d || b ? " perc" : " perce");
          case "h":
            return "egy" + (d || b ? " óra" : " órája");
          case "hh":
            return e + (d || b ? " óra" : " órája");
          case "d":
            return "egy" + (d || b ? " nap" : " napja");
          case "dd":
            return e + (d || b ? " nap" : " napja");
          case "M":
            return "egy" + (d || b ? " hónap" : " hónapja");
          case "MM":
            return e + (d || b ? " hónap" : " hónapja");
          case "y":
            return "egy" + (d || b ? " év" : " éve");
          case "yy":
            return e + (d || b ? " év" : " éve")
        }
        return ""
      }

      function c(a) {
        return (a ? "" : "[múlt] ") + "[" + d[this.day()] + "] LT[-kor]"
      }
      var d = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");
      return a.lang("hu", {
        months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "YYYY.MM.DD.",
          LL: "YYYY. MMMM D.",
          LLL: "YYYY. MMMM D., LT",
          LLLL: "YYYY. MMMM D., dddd LT"
        },
        meridiem: function(a, b, c) {
          return 12 > a ? c === !0 ? "de" : "DE" : c === !0 ? "du" : "DU"
        },
        calendar: {
          sameDay: "[ma] LT[-kor]",
          nextDay: "[holnap] LT[-kor]",
          nextWeek: function() {
            return c.call(this, !0)
          },
          lastDay: "[tegnap] LT[-kor]",
          lastWeek: function() {
            return c.call(this, !1)
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "%s múlva",
          past: "%s",
          s: b,
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: b,
          dd: b,
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b) {
        var c = {
            nominative: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_"),
            accusative: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_")
          },
          d = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b) ? "accusative" : "nominative";
        return c[d][a.month()]
      }

      function c(a) {
        var b = "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_");
        return b[a.month()]
      }

      function d(a) {
        var b = "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_");
        return b[a.day()]
      }
      return a.lang("hy-am", {
        months: b,
        monthsShort: c,
        weekdays: d,
        weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY թ.",
          LLL: "D MMMM YYYY թ., LT",
          LLLL: "dddd, D MMMM YYYY թ., LT"
        },
        calendar: {
          sameDay: "[այսօր] LT",
          nextDay: "[վաղը] LT",
          lastDay: "[երեկ] LT",
          nextWeek: function() {
            return "dddd [օրը ժամը] LT"
          },
          lastWeek: function() {
            return "[անցած] dddd [օրը ժամը] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "%s հետո",
          past: "%s առաջ",
          s: "մի քանի վայրկյան",
          m: "րոպե",
          mm: "%d րոպե",
          h: "ժամ",
          hh: "%d ժամ",
          d: "օր",
          dd: "%d օր",
          M: "ամիս",
          MM: "%d ամիս",
          y: "տարի",
          yy: "%d տարի"
        },
        meridiem: function(a) {
          return 4 > a ? "գիշերվա" : 12 > a ? "առավոտվա" : 17 > a ? "ցերեկվա" : "երեկոյան"
        },
        ordinal: function(a, b) {
          switch (b) {
            case "DDD":
            case "w":
            case "W":
            case "DDDo":
              return 1 === a ? a + "-ին" : a + "-րդ";
            default:
              return a
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("id", {
        months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] LT",
          LLLL: "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem: function(a) {
          return 11 > a ? "pagi" : 15 > a ? "siang" : 19 > a ? "sore" : "malam"
        },
        calendar: {
          sameDay: "[Hari ini pukul] LT",
          nextDay: "[Besok pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kemarin pukul] LT",
          lastWeek: "dddd [lalu pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dalam %s",
          past: "%s yang lalu",
          s: "beberapa detik",
          m: "semenit",
          mm: "%d menit",
          h: "sejam",
          hh: "%d jam",
          d: "sehari",
          dd: "%d hari",
          M: "sebulan",
          MM: "%d bulan",
          y: "setahun",
          yy: "%d tahun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a) {
        return a % 100 === 11 ? !0 : a % 10 === 1 ? !1 : !0
      }

      function c(a, c, d, e) {
        var f = a + " ";
        switch (d) {
          case "s":
            return c || e ? "nokkrar sekúndur" : "nokkrum sekúndum";
          case "m":
            return c ? "mínúta" : "mínútu";
          case "mm":
            return b(a) ? f + (c || e ? "mínútur" : "mínútum") : c ? f + "mínúta" : f + "mínútu";
          case "hh":
            return b(a) ? f + (c || e ? "klukkustundir" : "klukkustundum") : f + "klukkustund";
          case "d":
            return c ? "dagur" : e ? "dag" : "degi";
          case "dd":
            return b(a) ? c ? f + "dagar" : f + (e ? "daga" : "dögum") : c ? f + "dagur" : f + (e ? "dag" : "degi");
          case "M":
            return c ? "mánuður" : e ? "mánuð" : "mánuði";
          case "MM":
            return b(a) ? c ? f + "mánuðir" : f + (e ? "mánuði" : "mánuðum") : c ? f + "mánuður" : f + (e ? "mánuð" : "mánuði");
          case "y":
            return c || e ? "ár" : "ári";
          case "yy":
            return b(a) ? f + (c || e ? "ár" : "árum") : f + (c || e ? "ár" : "ári")
        }
      }
      return a.lang("is", {
        months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD/MM/YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY [kl.] LT",
          LLLL: "dddd, D. MMMM YYYY [kl.] LT"
        },
        calendar: {
          sameDay: "[í dag kl.] LT",
          nextDay: "[á morgun kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[í gær kl.] LT",
          lastWeek: "[síðasta] dddd [kl.] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "eftir %s",
          past: "fyrir %s síðan",
          s: c,
          m: c,
          mm: c,
          h: "klukkustund",
          hh: c,
          d: c,
          dd: c,
          M: c,
          MM: c,
          y: c,
          yy: c
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("it", {
        months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
        monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin: "D_L_Ma_Me_G_V_S".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Oggi alle] LT",
          nextDay: "[Domani alle] LT",
          nextWeek: "dddd [alle] LT",
          lastDay: "[Ieri alle] LT",
          lastWeek: "[lo scorso] dddd [alle] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: function(a) {
            return (/^[0-9].+$/.test(a) ? "tra" : "in") + " " + a
          },
          past: "%s fa",
          s: "alcuni secondi",
          m: "un minuto",
          mm: "%d minuti",
          h: "un'ora",
          hh: "%d ore",
          d: "un giorno",
          dd: "%d giorni",
          M: "un mese",
          MM: "%d mesi",
          y: "un anno",
          yy: "%d anni"
        },
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ja", {
        months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort: "日_月_火_水_木_金_土".split("_"),
        weekdaysMin: "日_月_火_水_木_金_土".split("_"),
        longDateFormat: {
          LT: "Ah時m分",
          L: "YYYY/MM/DD",
          LL: "YYYY年M月D日",
          LLL: "YYYY年M月D日LT",
          LLLL: "YYYY年M月D日LT dddd"
        },
        meridiem: function(a) {
          return 12 > a ? "午前" : "午後"
        },
        calendar: {
          sameDay: "[今日] LT",
          nextDay: "[明日] LT",
          nextWeek: "[来週]dddd LT",
          lastDay: "[昨日] LT",
          lastWeek: "[前週]dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s後",
          past: "%s前",
          s: "数秒",
          m: "1分",
          mm: "%d分",
          h: "1時間",
          hh: "%d時間",
          d: "1日",
          dd: "%d日",
          M: "1ヶ月",
          MM: "%dヶ月",
          y: "1年",
          yy: "%d年"
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b) {
        var c = {
            nominative: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
            accusative: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")
          },
          d = /D[oD] *MMMM?/.test(b) ? "accusative" : "nominative";
        return c[d][a.month()]
      }

      function c(a, b) {
        var c = {
            nominative: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
            accusative: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_")
          },
          d = /(წინა|შემდეგ)/.test(b) ? "accusative" : "nominative";
        return c[d][a.day()]
      }
      return a.lang("ka", {
        months: b,
        monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays: c,
        weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[დღეს] LT[-ზე]",
          nextDay: "[ხვალ] LT[-ზე]",
          lastDay: "[გუშინ] LT[-ზე]",
          nextWeek: "[შემდეგ] dddd LT[-ზე]",
          lastWeek: "[წინა] dddd LT-ზე",
          sameElse: "L"
        },
        relativeTime: {
          future: function(a) {
            return /(წამი|წუთი|საათი|წელი)/.test(a) ? a.replace(/ი$/, "ში") : a + "ში"
          },
          past: function(a) {
            return /(წამი|წუთი|საათი|დღე|თვე)/.test(a) ? a.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(a) ? a.replace(/წელი$/, "წლის წინ") : void 0
          },
          s: "რამდენიმე წამი",
          m: "წუთი",
          mm: "%d წუთი",
          h: "საათი",
          hh: "%d საათი",
          d: "დღე",
          dd: "%d დღე",
          M: "თვე",
          MM: "%d თვე",
          y: "წელი",
          yy: "%d წელი"
        },
        ordinal: function(a) {
          return 0 === a ? a : 1 === a ? a + "-ლი" : 20 > a || 100 >= a && a % 20 === 0 || a % 100 === 0 ? "მე-" + a : a + "-ე"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("km", {
        months: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[ថ្ងៃនៈ ម៉ោង] LT",
          nextDay: "[ស្អែក ម៉ោង] LT",
          nextWeek: "dddd [ម៉ោង] LT",
          lastDay: "[ម្សិលមិញ ម៉ោង] LT",
          lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sទៀត",
          past: "%sមុន",
          s: "ប៉ុន្មានវិនាទី",
          m: "មួយនាទី",
          mm: "%d នាទី",
          h: "មួយម៉ោង",
          hh: "%d ម៉ោង",
          d: "មួយថ្ងៃ",
          dd: "%d ថ្ងៃ",
          M: "មួយខែ",
          MM: "%d ខែ",
          y: "មួយឆ្នាំ",
          yy: "%d ឆ្នាំ"
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ko", {
        months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort: "일_월_화_수_목_금_토".split("_"),
        weekdaysMin: "일_월_화_수_목_금_토".split("_"),
        longDateFormat: {
          LT: "A h시 mm분",
          L: "YYYY.MM.DD",
          LL: "YYYY년 MMMM D일",
          LLL: "YYYY년 MMMM D일 LT",
          LLLL: "YYYY년 MMMM D일 dddd LT"
        },
        meridiem: function(a) {
          return 12 > a ? "오전" : "오후"
        },
        calendar: {
          sameDay: "오늘 LT",
          nextDay: "내일 LT",
          nextWeek: "dddd LT",
          lastDay: "어제 LT",
          lastWeek: "지난주 dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s 후",
          past: "%s 전",
          s: "몇초",
          ss: "%d초",
          m: "일분",
          mm: "%d분",
          h: "한시간",
          hh: "%d시간",
          d: "하루",
          dd: "%d일",
          M: "한달",
          MM: "%d달",
          y: "일년",
          yy: "%d년"
        },
        ordinal: "%d일",
        meridiemParse: /(오전|오후)/,
        isPM: function(a) {
          return "오후" === a
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = {
          m: ["eng Minutt", "enger Minutt"],
          h: ["eng Stonn", "enger Stonn"],
          d: ["een Dag", "engem Dag"],
          dd: [a + " Deeg", a + " Deeg"],
          M: ["ee Mount", "engem Mount"],
          MM: [a + " Méint", a + " Méint"],
          y: ["ee Joer", "engem Joer"],
          yy: [a + " Joer", a + " Joer"]
        };
        return b ? d[c][0] : d[c][1]
      }

      function c(a) {
        var b = a.substr(0, a.indexOf(" "));
        return g(b) ? "a " + a : "an " + a
      }

      function d(a) {
        var b = a.substr(0, a.indexOf(" "));
        return g(b) ? "viru " + a : "virun " + a
      }

      function e() {
        var a = this.format("d");
        return f(a) ? "[Leschte] dddd [um] LT" : "[Leschten] dddd [um] LT"
      }

      function f(a) {
        switch (a = parseInt(a, 10)) {
          case 0:
          case 1:
          case 3:
          case 5:
          case 6:
            return !0;
          default:
            return !1
        }
      }

      function g(a) {
        if (a = parseInt(a, 10), isNaN(a)) return !1;
        if (0 > a) return !0;
        if (10 > a) return a >= 4 && 7 >= a ? !0 : !1;
        if (100 > a) {
          var b = a % 10,
            c = a / 10;
          return g(0 === b ? c : b)
        }
        if (1e4 > a) {
          for (; a >= 10;) a /= 10;
          return g(a)
        }
        return a /= 1e3, g(a)
      }
      return a.lang("lb", {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "H:mm [Auer]",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Haut um] LT",
          sameElse: "L",
          nextDay: "[Muer um] LT",
          nextWeek: "dddd [um] LT",
          lastDay: "[Gëschter um] LT",
          lastWeek: e
        },
        relativeTime: {
          future: c,
          past: d,
          s: "e puer Sekonnen",
          m: b,
          mm: "%d Minutten",
          h: b,
          hh: "%d Stonnen",
          d: b,
          dd: b,
          M: b,
          MM: b,
          y: b,
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c, d) {
        return b ? "kelios sekundės" : d ? "kelių sekundžių" : "kelias sekundes"
      }

      function c(a, b, c, d) {
        return b ? e(c)[0] : d ? e(c)[1] : e(c)[2]
      }

      function d(a) {
        return a % 10 === 0 || a > 10 && 20 > a
      }

      function e(a) {
        return h[a].split("_")
      }

      function f(a, b, f, g) {
        var h = a + " ";
        return 1 === a ? h + c(a, b, f[0], g) : b ? h + (d(a) ? e(f)[1] : e(f)[0]) : g ? h + e(f)[1] : h + (d(a) ? e(f)[1] : e(f)[2])
      }

      function g(a, b) {
        var c = -1 === b.indexOf("dddd HH:mm"),
          d = i[a.day()];
        return c ? d : d.substring(0, d.length - 2) + "į"
      }
      var h = {
          m: "minutė_minutės_minutę",
          mm: "minutės_minučių_minutes",
          h: "valanda_valandos_valandą",
          hh: "valandos_valandų_valandas",
          d: "diena_dienos_dieną",
          dd: "dienos_dienų_dienas",
          M: "mėnuo_mėnesio_mėnesį",
          MM: "mėnesiai_mėnesių_mėnesius",
          y: "metai_metų_metus",
          yy: "metai_metų_metus"
        },
        i = "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");
      return a.lang("lt", {
        months: "sausio_vasario_kovo_balandžio_gegužės_biržėlio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
        monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays: g,
        weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "YYYY-MM-DD",
          LL: "YYYY [m.] MMMM D [d.]",
          LLL: "YYYY [m.] MMMM D [d.], LT [val.]",
          LLLL: "YYYY [m.] MMMM D [d.], dddd, LT [val.]",
          l: "YYYY-MM-DD",
          ll: "YYYY [m.] MMMM D [d.]",
          lll: "YYYY [m.] MMMM D [d.], LT [val.]",
          llll: "YYYY [m.] MMMM D [d.], ddd, LT [val.]"
        },
        calendar: {
          sameDay: "[Šiandien] LT",
          nextDay: "[Rytoj] LT",
          nextWeek: "dddd LT",
          lastDay: "[Vakar] LT",
          lastWeek: "[Praėjusį] dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "po %s",
          past: "prieš %s",
          s: b,
          m: c,
          mm: f,
          h: c,
          hh: f,
          d: c,
          dd: f,
          M: c,
          MM: f,
          y: c,
          yy: f
        },
        ordinal: function(a) {
          return a + "-oji"
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = a.split("_");
        return c ? b % 10 === 1 && 11 !== b ? d[2] : d[3] : b % 10 === 1 && 11 !== b ? d[0] : d[1]
      }

      function c(a, c, e) {
        return a + " " + b(d[e], a, c)
      }
      var d = {
        mm: "minūti_minūtes_minūte_minūtes",
        hh: "stundu_stundas_stunda_stundas",
        dd: "dienu_dienas_diena_dienas",
        MM: "mēnesi_mēnešus_mēnesis_mēneši",
        yy: "gadu_gadus_gads_gadi"
      };
      return a.lang("lv", {
        months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "YYYY. [gada] D. MMMM",
          LLL: "YYYY. [gada] D. MMMM, LT",
          LLLL: "YYYY. [gada] D. MMMM, dddd, LT"
        },
        calendar: {
          sameDay: "[Šodien pulksten] LT",
          nextDay: "[Rīt pulksten] LT",
          nextWeek: "dddd [pulksten] LT",
          lastDay: "[Vakar pulksten] LT",
          lastWeek: "[Pagājušā] dddd [pulksten] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s vēlāk",
          past: "%s agrāk",
          s: "dažas sekundes",
          m: "minūti",
          mm: c,
          h: "stundu",
          hh: c,
          d: "dienu",
          dd: c,
          M: "mēnesi",
          MM: c,
          y: "gadu",
          yy: c
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("mk", {
        months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
        weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
        weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "D.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Денес во] LT",
          nextDay: "[Утре во] LT",
          nextWeek: "dddd [во] LT",
          lastDay: "[Вчера во] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return "[Во изминатата] dddd [во] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[Во изминатиот] dddd [во] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "после %s",
          past: "пред %s",
          s: "неколку секунди",
          m: "минута",
          mm: "%d минути",
          h: "час",
          hh: "%d часа",
          d: "ден",
          dd: "%d дена",
          M: "месец",
          MM: "%d месеци",
          y: "година",
          yy: "%d години"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = a % 100;
          return 0 === a ? a + "-ев" : 0 === c ? a + "-ен" : c > 10 && 20 > c ? a + "-ти" : 1 === b ? a + "-ви" : 2 === b ? a + "-ри" : 7 === b || 8 === b ? a + "-ми" : a + "-ти"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ml", {
        months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
        monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
        weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
        weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
        weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
        longDateFormat: {
          LT: "A h:mm -നു",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        calendar: {
          sameDay: "[ഇന്ന്] LT",
          nextDay: "[നാളെ] LT",
          nextWeek: "dddd, LT",
          lastDay: "[ഇന്നലെ] LT",
          lastWeek: "[കഴിഞ്ഞ] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s കഴിഞ്ഞ്",
          past: "%s മുൻപ്",
          s: "അൽപ നിമിഷങ്ങൾ",
          m: "ഒരു മിനിറ്റ്",
          mm: "%d മിനിറ്റ്",
          h: "ഒരു മണിക്കൂർ",
          hh: "%d മണിക്കൂർ",
          d: "ഒരു ദിവസം",
          dd: "%d ദിവസം",
          M: "ഒരു മാസം",
          MM: "%d മാസം",
          y: "ഒരു വർഷം",
          yy: "%d വർഷം"
        },
        meridiem: function(a) {
          return 4 > a ? "രാത്രി" : 12 > a ? "രാവിലെ" : 17 > a ? "ഉച്ച കഴിഞ്ഞ്" : 20 > a ? "വൈകുന്നേരം" : "രാത്രി"
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        c = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      return a.lang("mr", {
        months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
        monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
        weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
          LT: "A h:mm वाजता",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[उद्या] LT",
          nextWeek: "dddd, LT",
          lastDay: "[काल] LT",
          lastWeek: "[मागील] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s नंतर",
          past: "%s पूर्वी",
          s: "सेकंद",
          m: "एक मिनिट",
          mm: "%d मिनिटे",
          h: "एक तास",
          hh: "%d तास",
          d: "एक दिवस",
          dd: "%d दिवस",
          M: "एक महिना",
          MM: "%d महिने",
          y: "एक वर्ष",
          yy: "%d वर्षे"
        },
        preparse: function(a) {
          return a.replace(/[१२३४५६७८९०]/g, function(a) {
            return c[a]
          })
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          })
        },
        meridiem: function(a) {
          return 4 > a ? "रात्री" : 10 > a ? "सकाळी" : 17 > a ? "दुपारी" : 20 > a ? "सायंकाळी" : "रात्री"
        },
        week: {
          dow: 0,
          doy: 6
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ms-my", {
        months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] LT",
          LLLL: "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem: function(a) {
          return 11 > a ? "pagi" : 15 > a ? "tengahari" : 19 > a ? "petang" : "malam"
        },
        calendar: {
          sameDay: "[Hari ini pukul] LT",
          nextDay: "[Esok pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kelmarin pukul] LT",
          lastWeek: "dddd [lepas pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dalam %s",
          past: "%s yang lepas",
          s: "beberapa saat",
          m: "seminit",
          mm: "%d minit",
          h: "sejam",
          hh: "%d jam",
          d: "sehari",
          dd: "%d hari",
          M: "sebulan",
          MM: "%d bulan",
          y: "setahun",
          yy: "%d tahun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("nb", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat: {
          LT: "H.mm",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY [kl.] LT",
          LLLL: "dddd D. MMMM YYYY [kl.] LT"
        },
        calendar: {
          sameDay: "[i dag kl.] LT",
          nextDay: "[i morgen kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[i går kl.] LT",
          lastWeek: "[forrige] dddd [kl.] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "for %s siden",
          s: "noen sekunder",
          m: "ett minutt",
          mm: "%d minutter",
          h: "en time",
          hh: "%d timer",
          d: "en dag",
          dd: "%d dager",
          M: "en måned",
          MM: "%d måneder",
          y: "ett år",
          yy: "%d år"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        c = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      return a.lang("ne", {
        months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
        monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
        weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
        weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
        weekdaysMin: "आइ._सो._मङ्_बु._बि._शु._श.".split("_"),
        longDateFormat: {
          LT: "Aको h:mm बजे",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        preparse: function(a) {
          return a.replace(/[१२३४५६७८९०]/g, function(a) {
            return c[a]
          })
        },
        postformat: function(a) {
          return a.replace(/\d/g, function(a) {
            return b[a]
          })
        },
        meridiem: function(a) {
          return 3 > a ? "राती" : 10 > a ? "बिहान" : 15 > a ? "दिउँसो" : 18 > a ? "बेलुका" : 20 > a ? "साँझ" : "राती"
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[भोली] LT",
          nextWeek: "[आउँदो] dddd[,] LT",
          lastDay: "[हिजो] LT",
          lastWeek: "[गएको] dddd[,] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sमा",
          past: "%s अगाडी",
          s: "केही समय",
          m: "एक मिनेट",
          mm: "%d मिनेट",
          h: "एक घण्टा",
          hh: "%d घण्टा",
          d: "एक दिन",
          dd: "%d दिन",
          M: "एक महिना",
          MM: "%d महिना",
          y: "एक बर्ष",
          yy: "%d बर्ष"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        c = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");
      return a.lang("nl", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort: function(a, d) {
          return /-MMM-/.test(d) ? c[a.month()] : b[a.month()]
        },
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD-MM-YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[vandaag om] LT",
          nextDay: "[morgen om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[gisteren om] LT",
          lastWeek: "[afgelopen] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "over %s",
          past: "%s geleden",
          s: "een paar seconden",
          m: "één minuut",
          mm: "%d minuten",
          h: "één uur",
          hh: "%d uur",
          d: "één dag",
          dd: "%d dagen",
          M: "één maand",
          MM: "%d maanden",
          y: "één jaar",
          yy: "%d jaar"
        },
        ordinal: function(a) {
          return a + (1 === a || 8 === a || a >= 20 ? "ste" : "de")
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("nn", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[I dag klokka] LT",
          nextDay: "[I morgon klokka] LT",
          nextWeek: "dddd [klokka] LT",
          lastDay: "[I går klokka] LT",
          lastWeek: "[Føregåande] dddd [klokka] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "for %s sidan",
          s: "nokre sekund",
          m: "eit minutt",
          mm: "%d minutt",
          h: "ein time",
          hh: "%d timar",
          d: "ein dag",
          dd: "%d dagar",
          M: "ein månad",
          MM: "%d månader",
          y: "eit år",
          yy: "%d år"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a) {
        return 5 > a % 10 && a % 10 > 1 && ~~(a / 10) % 10 !== 1
      }

      function c(a, c, d) {
        var e = a + " ";
        switch (d) {
          case "m":
            return c ? "minuta" : "minutę";
          case "mm":
            return e + (b(a) ? "minuty" : "minut");
          case "h":
            return c ? "godzina" : "godzinę";
          case "hh":
            return e + (b(a) ? "godziny" : "godzin");
          case "MM":
            return e + (b(a) ? "miesiące" : "miesięcy");
          case "yy":
            return e + (b(a) ? "lata" : "lat")
        }
      }
      var d = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
        e = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");
      return a.lang("pl", {
        months: function(a, b) {
          return /D MMMM/.test(b) ? e[a.month()] : d[a.month()]
        },
        monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort: "nie_pon_wt_śr_czw_pt_sb".split("_"),
        weekdaysMin: "N_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Dziś o] LT",
          nextDay: "[Jutro o] LT",
          nextWeek: "[W] dddd [o] LT",
          lastDay: "[Wczoraj o] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[W zeszłą niedzielę o] LT";
              case 3:
                return "[W zeszłą środę o] LT";
              case 6:
                return "[W zeszłą sobotę o] LT";
              default:
                return "[W zeszły] dddd [o] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "%s temu",
          s: "kilka sekund",
          m: c,
          mm: c,
          h: c,
          hh: c,
          d: "1 dzień",
          dd: "%d dni",
          M: "miesiąc",
          MM: c,
          y: "rok",
          yy: c
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("pt-br", {
        months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin: "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY [às] LT",
          LLLL: "dddd, D [de] MMMM [de] YYYY [às] LT"
        },
        calendar: {
          sameDay: "[Hoje às] LT",
          nextDay: "[Amanhã às] LT",
          nextWeek: "dddd [às] LT",
          lastDay: "[Ontem às] LT",
          lastWeek: function() {
            return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "em %s",
          past: "%s atrás",
          s: "segundos",
          m: "um minuto",
          mm: "%d minutos",
          h: "uma hora",
          hh: "%d horas",
          d: "um dia",
          dd: "%d dias",
          M: "um mês",
          MM: "%d meses",
          y: "um ano",
          yy: "%d anos"
        },
        ordinal: "%dº"
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("pt", {
        months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin: "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY LT",
          LLLL: "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar: {
          sameDay: "[Hoje às] LT",
          nextDay: "[Amanhã às] LT",
          nextWeek: "dddd [às] LT",
          lastDay: "[Ontem às] LT",
          lastWeek: function() {
            return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "em %s",
          past: "há %s",
          s: "segundos",
          m: "um minuto",
          mm: "%d minutos",
          h: "uma hora",
          hh: "%d horas",
          d: "um dia",
          dd: "%d dias",
          M: "um mês",
          MM: "%d meses",
          y: "um ano",
          yy: "%d anos"
        },
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = {
            mm: "minute",
            hh: "ore",
            dd: "zile",
            MM: "luni",
            yy: "ani"
          },
          e = " ";
        return (a % 100 >= 20 || a >= 100 && a % 100 === 0) && (e = " de "), a + e + d[c]
      }
      return a.lang("ro", {
        months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
        monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
        weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
        weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY H:mm",
          LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[azi la] LT",
          nextDay: "[mâine la] LT",
          nextWeek: "dddd [la] LT",
          lastDay: "[ieri la] LT",
          lastWeek: "[fosta] dddd [la] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "peste %s",
          past: "%s în urmă",
          s: "câteva secunde",
          m: "un minut",
          mm: b,
          h: "o oră",
          hh: b,
          d: "o zi",
          dd: b,
          M: "o lună",
          MM: b,
          y: "un an",
          yy: b
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b) {
        var c = a.split("_");
        return b % 10 === 1 && b % 100 !== 11 ? c[0] : b % 10 >= 2 && 4 >= b % 10 && (10 > b % 100 || b % 100 >= 20) ? c[1] : c[2]
      }

      function c(a, c, d) {
        var e = {
          mm: c ? "минута_минуты_минут" : "минуту_минуты_минут",
          hh: "час_часа_часов",
          dd: "день_дня_дней",
          MM: "месяц_месяца_месяцев",
          yy: "год_года_лет"
        };
        return "m" === d ? c ? "минута" : "минуту" : a + " " + b(e[d], +a)
      }

      function d(a, b) {
        var c = {
            nominative: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
            accusative: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")
          },
          d = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b) ? "accusative" : "nominative";
        return c[d][a.month()]
      }

      function e(a, b) {
        var c = {
            nominative: "янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
            accusative: "янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")
          },
          d = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b) ? "accusative" : "nominative";
        return c[d][a.month()]
      }

      function f(a, b) {
        var c = {
            nominative: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
            accusative: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")
          },
          d = /\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/.test(b) ? "accusative" : "nominative";
        return c[d][a.day()]
      }
      return a.lang("ru", {
        months: d,
        monthsShort: e,
        weekdays: f,
        weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse: [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY г.",
          LLL: "D MMMM YYYY г., LT",
          LLLL: "dddd, D MMMM YYYY г., LT"
        },
        calendar: {
          sameDay: "[Сегодня в] LT",
          nextDay: "[Завтра в] LT",
          lastDay: "[Вчера в] LT",
          nextWeek: function() {
            return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT"
          },
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[В прошлое] dddd [в] LT";
              case 1:
              case 2:
              case 4:
                return "[В прошлый] dddd [в] LT";
              case 3:
              case 5:
              case 6:
                return "[В прошлую] dddd [в] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "через %s",
          past: "%s назад",
          s: "несколько секунд",
          m: c,
          mm: c,
          h: "час",
          hh: c,
          d: "день",
          dd: c,
          M: "месяц",
          MM: c,
          y: "год",
          yy: c
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function(a) {
          return /^(дня|вечера)$/.test(a)
        },
        meridiem: function(a) {
          return 4 > a ? "ночи" : 12 > a ? "утра" : 17 > a ? "дня" : "вечера"
        },
        ordinal: function(a, b) {
          switch (b) {
            case "M":
            case "d":
            case "DDD":
              return a + "-й";
            case "D":
              return a + "-го";
            case "w":
            case "W":
              return a + "-я";
            default:
              return a
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a) {
        return a > 1 && 5 > a
      }

      function c(a, c, d, e) {
        var f = a + " ";
        switch (d) {
          case "s":
            return c || e ? "pár sekúnd" : "pár sekundami";
          case "m":
            return c ? "minúta" : e ? "minútu" : "minútou";
          case "mm":
            return c || e ? f + (b(a) ? "minúty" : "minút") : f + "minútami";
            break;
          case "h":
            return c ? "hodina" : e ? "hodinu" : "hodinou";
          case "hh":
            return c || e ? f + (b(a) ? "hodiny" : "hodín") : f + "hodinami";
            break;
          case "d":
            return c || e ? "deň" : "dňom";
          case "dd":
            return c || e ? f + (b(a) ? "dni" : "dní") : f + "dňami";
            break;
          case "M":
            return c || e ? "mesiac" : "mesiacom";
          case "MM":
            return c || e ? f + (b(a) ? "mesiace" : "mesiacov") : f + "mesiacmi";
            break;
          case "y":
            return c || e ? "rok" : "rokom";
          case "yy":
            return c || e ? f + (b(a) ? "roky" : "rokov") : f + "rokmi"
        }
      }
      var d = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
        e = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");
      return a.lang("sk", {
        months: d,
        monthsShort: e,
        monthsParse: function(a, b) {
          var c, d = [];
          for (c = 0; 12 > c; c++) d[c] = new RegExp("^" + a[c] + "$|^" + b[c] + "$", "i");
          return d
        }(d, e),
        weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[dnes o] LT",
          nextDay: "[zajtra o] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v nedeľu o] LT";
              case 1:
              case 2:
                return "[v] dddd [o] LT";
              case 3:
                return "[v stredu o] LT";
              case 4:
                return "[vo štvrtok o] LT";
              case 5:
                return "[v piatok o] LT";
              case 6:
                return "[v sobotu o] LT"
            }
          },
          lastDay: "[včera o] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[minulú nedeľu o] LT";
              case 1:
              case 2:
                return "[minulý] dddd [o] LT";
              case 3:
                return "[minulú stredu o] LT";
              case 4:
              case 5:
                return "[minulý] dddd [o] LT";
              case 6:
                return "[minulú sobotu o] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "pred %s",
          s: c,
          m: c,
          mm: c,
          h: c,
          hh: c,
          d: c,
          dd: c,
          M: c,
          MM: c,
          y: c,
          yy: c
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b, c) {
        var d = a + " ";
        switch (c) {
          case "m":
            return b ? "ena minuta" : "eno minuto";
          case "mm":
            return d += 1 === a ? "minuta" : 2 === a ? "minuti" : 3 === a || 4 === a ? "minute" : "minut";
          case "h":
            return b ? "ena ura" : "eno uro";
          case "hh":
            return d += 1 === a ? "ura" : 2 === a ? "uri" : 3 === a || 4 === a ? "ure" : "ur";
          case "dd":
            return d += 1 === a ? "dan" : "dni";
          case "MM":
            return d += 1 === a ? "mesec" : 2 === a ? "meseca" : 3 === a || 4 === a ? "mesece" : "mesecev";
          case "yy":
            return d += 1 === a ? "leto" : 2 === a ? "leti" : 3 === a || 4 === a ? "leta" : "let"
        }
      }
      return a.lang("sl", {
        months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
        longDateFormat: {
          LT: "H:mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[danes ob] LT",
          nextDay: "[jutri ob] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v] [nedeljo] [ob] LT";
              case 3:
                return "[v] [sredo] [ob] LT";
              case 6:
                return "[v] [soboto] [ob] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[v] dddd [ob] LT"
            }
          },
          lastDay: "[včeraj ob] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return "[prejšnja] dddd [ob] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prejšnji] dddd [ob] LT"
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "čez %s",
          past: "%s nazaj",
          s: "nekaj sekund",
          m: b,
          mm: b,
          h: b,
          hh: b,
          d: "en dan",
          dd: b,
          M: "en mesec",
          MM: b,
          y: "eno leto",
          yy: b
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("sq", {
        months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
        meridiem: function(a) {
          return 12 > a ? "PD" : "MD"
        },
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Sot në] LT",
          nextDay: "[Nesër në] LT",
          nextWeek: "dddd [në] LT",
          lastDay: "[Dje në] LT",
          lastWeek: "dddd [e kaluar në] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "në %s",
          past: "%s më parë",
          s: "disa sekonda",
          m: "një minutë",
          mm: "%d minuta",
          h: "një orë",
          hh: "%d orë",
          d: "një ditë",
          dd: "%d ditë",
          M: "një muaj",
          MM: "%d muaj",
          y: "një vit",
          yy: "%d vite"
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
        words: {
          m: ["један минут", "једне минуте"],
          mm: ["минут", "минуте", "минута"],
          h: ["један сат", "једног сата"],
          hh: ["сат", "сата", "сати"],
          dd: ["дан", "дана", "дана"],
          MM: ["месец", "месеца", "месеци"],
          yy: ["година", "године", "година"]
        },
        correctGrammaticalCase: function(a, b) {
          return 1 === a ? b[0] : a >= 2 && 4 >= a ? b[1] : b[2]
        },
        translate: function(a, c, d) {
          var e = b.words[d];
          return 1 === d.length ? c ? e[0] : e[1] : a + " " + b.correctGrammaticalCase(a, e)
        }
      };
      return a.lang("sr-cyrl", {
        months: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар"],
        monthsShort: ["јан.", "феб.", "мар.", "апр.", "мај", "јун", "јул", "авг.", "сеп.", "окт.", "нов.", "дец."],
        weekdays: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
        weekdaysShort: ["нед.", "пон.", "уто.", "сре.", "чет.", "пет.", "суб."],
        weekdaysMin: ["не", "по", "ут", "ср", "че", "пе", "су"],
        longDateFormat: {
          LT: "H:mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[данас у] LT",
          nextDay: "[сутра у] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[у] [недељу] [у] LT";
              case 3:
                return "[у] [среду] [у] LT";
              case 6:
                return "[у] [суботу] [у] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[у] dddd [у] LT"
            }
          },
          lastDay: "[јуче у] LT",
          lastWeek: function() {
            var a = ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"];
            return a[this.day()]
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "за %s",
          past: "пре %s",
          s: "неколико секунди",
          m: b.translate,
          mm: b.translate,
          h: b.translate,
          hh: b.translate,
          d: "дан",
          dd: b.translate,
          M: "месец",
          MM: b.translate,
          y: "годину",
          yy: b.translate
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
        words: {
          m: ["jedan minut", "jedne minute"],
          mm: ["minut", "minute", "minuta"],
          h: ["jedan sat", "jednog sata"],
          hh: ["sat", "sata", "sati"],
          dd: ["dan", "dana", "dana"],
          MM: ["mesec", "meseca", "meseci"],
          yy: ["godina", "godine", "godina"]
        },
        correctGrammaticalCase: function(a, b) {
          return 1 === a ? b[0] : a >= 2 && 4 >= a ? b[1] : b[2]
        },
        translate: function(a, c, d) {
          var e = b.words[d];
          return 1 === d.length ? c ? e[0] : e[1] : a + " " + b.correctGrammaticalCase(a, e)
        }
      };
      return a.lang("sr", {
        months: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"],
        monthsShort: ["jan.", "feb.", "mar.", "apr.", "maj", "jun", "jul", "avg.", "sep.", "okt.", "nov.", "dec."],
        weekdays: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
        weekdaysShort: ["ned.", "pon.", "uto.", "sre.", "čet.", "pet.", "sub."],
        weekdaysMin: ["ne", "po", "ut", "sr", "če", "pe", "su"],
        longDateFormat: {
          LT: "H:mm",
          L: "DD. MM. YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY LT",
          LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedelju] [u] LT";
              case 3:
                return "[u] [sredu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT"
            }
          },
          lastDay: "[juče u] LT",
          lastWeek: function() {
            var a = ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"];
            return a[this.day()]
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "pre %s",
          s: "nekoliko sekundi",
          m: b.translate,
          mm: b.translate,
          h: b.translate,
          hh: b.translate,
          d: "dan",
          dd: b.translate,
          M: "mesec",
          MM: b.translate,
          y: "godinu",
          yy: b.translate
        },
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("sv", {
        months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "YYYY-MM-DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[Idag] LT",
          nextDay: "[Imorgon] LT",
          lastDay: "[Igår] LT",
          nextWeek: "dddd LT",
          lastWeek: "[Förra] dddd[en] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "för %s sedan",
          s: "några sekunder",
          m: "en minut",
          mm: "%d minuter",
          h: "en timme",
          hh: "%d timmar",
          d: "en dag",
          dd: "%d dagar",
          M: "en månad",
          MM: "%d månader",
          y: "ett år",
          yy: "%d år"
        },
        ordinal: function(a) {
          var b = a % 10,
            c = 1 === ~~(a % 100 / 10) ? "e" : 1 === b ? "a" : 2 === b ? "a" : 3 === b ? "e" : "e";
          return a + c
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("ta", {
        months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
        weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
        weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, LT",
          LLLL: "dddd, D MMMM YYYY, LT"
        },
        calendar: {
          sameDay: "[இன்று] LT",
          nextDay: "[நாளை] LT",
          nextWeek: "dddd, LT",
          lastDay: "[நேற்று] LT",
          lastWeek: "[கடந்த வாரம்] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s இல்",
          past: "%s முன்",
          s: "ஒரு சில விநாடிகள்",
          m: "ஒரு நிமிடம்",
          mm: "%d நிமிடங்கள்",
          h: "ஒரு மணி நேரம்",
          hh: "%d மணி நேரம்",
          d: "ஒரு நாள்",
          dd: "%d நாட்கள்",
          M: "ஒரு மாதம்",
          MM: "%d மாதங்கள்",
          y: "ஒரு வருடம்",
          yy: "%d ஆண்டுகள்"
        },
        ordinal: function(a) {
          return a + "வது"
        },
        meridiem: function(a) {
          return a >= 6 && 10 >= a ? " காலை" : a >= 10 && 14 >= a ? " நண்பகல்" : a >= 14 && 18 >= a ? " எற்பாடு" : a >= 18 && 20 >= a ? " மாலை" : a >= 20 && 24 >= a ? " இரவு" : a >= 0 && 6 >= a ? " வைகறை" : void 0
        },
        week: {
          dow: 0,
          doy: 6
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("th", {
        months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort: "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),
        weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
        weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        longDateFormat: {
          LT: "H นาฬิกา m นาที",
          L: "YYYY/MM/DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY เวลา LT",
          LLLL: "วันddddที่ D MMMM YYYY เวลา LT"
        },
        meridiem: function(a) {
          return 12 > a ? "ก่อนเที่ยง" : "หลังเที่ยง"
        },
        calendar: {
          sameDay: "[วันนี้ เวลา] LT",
          nextDay: "[พรุ่งนี้ เวลา] LT",
          nextWeek: "dddd[หน้า เวลา] LT",
          lastDay: "[เมื่อวานนี้ เวลา] LT",
          lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "อีก %s",
          past: "%sที่แล้ว",
          s: "ไม่กี่วินาที",
          m: "1 นาที",
          mm: "%d นาที",
          h: "1 ชั่วโมง",
          hh: "%d ชั่วโมง",
          d: "1 วัน",
          dd: "%d วัน",
          M: "1 เดือน",
          MM: "%d เดือน",
          y: "1 ปี",
          yy: "%d ปี"
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("tl-ph", {
        months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "MM/D/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY LT",
          LLLL: "dddd, MMMM DD, YYYY LT"
        },
        calendar: {
          sameDay: "[Ngayon sa] LT",
          nextDay: "[Bukas sa] LT",
          nextWeek: "dddd [sa] LT",
          lastDay: "[Kahapon sa] LT",
          lastWeek: "dddd [huling linggo] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "sa loob ng %s",
          past: "%s ang nakalipas",
          s: "ilang segundo",
          m: "isang minuto",
          mm: "%d minuto",
          h: "isang oras",
          hh: "%d oras",
          d: "isang araw",
          dd: "%d araw",
          M: "isang buwan",
          MM: "%d buwan",
          y: "isang taon",
          yy: "%d taon"
        },
        ordinal: function(a) {
          return a
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      var b = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı"
      };
      return a.lang("tr", {
        months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[bugün saat] LT",
          nextDay: "[yarın saat] LT",
          nextWeek: "[haftaya] dddd [saat] LT",
          lastDay: "[dün] LT",
          lastWeek: "[geçen hafta] dddd [saat] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s sonra",
          past: "%s önce",
          s: "birkaç saniye",
          m: "bir dakika",
          mm: "%d dakika",
          h: "bir saat",
          hh: "%d saat",
          d: "bir gün",
          dd: "%d gün",
          M: "bir ay",
          MM: "%d ay",
          y: "bir yıl",
          yy: "%d yıl"
        },
        ordinal: function(a) {
          if (0 === a) return a + "'ıncı";
          var c = a % 10,
            d = a % 100 - c,
            e = a >= 100 ? 100 : null;
          return a + (b[c] || b[d] || b[e])
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("tzm-latn", {
        months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[asdkh g] LT",
          nextDay: "[aska g] LT",
          nextWeek: "dddd [g] LT",
          lastDay: "[assant g] LT",
          lastWeek: "dddd [g] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dadkh s yan %s",
          past: "yan %s",
          s: "imik",
          m: "minuḍ",
          mm: "%d minuḍ",
          h: "saɛa",
          hh: "%d tassaɛin",
          d: "ass",
          dd: "%d ossan",
          M: "ayowr",
          MM: "%d iyyirn",
          y: "asgas",
          yy: "%d isgasn"
        },
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("tzm", {
        months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
          sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
          nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
          nextWeek: "dddd [ⴴ] LT",
          lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
          lastWeek: "dddd [ⴴ] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
          past: "ⵢⴰⵏ %s",
          s: "ⵉⵎⵉⴽ",
          m: "ⵎⵉⵏⵓⴺ",
          mm: "%d ⵎⵉⵏⵓⴺ",
          h: "ⵙⴰⵄⴰ",
          hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
          d: "ⴰⵙⵙ",
          dd: "%d oⵙⵙⴰⵏ",
          M: "ⴰⵢoⵓⵔ",
          MM: "%d ⵉⵢⵢⵉⵔⵏ",
          y: "ⴰⵙⴳⴰⵙ",
          yy: "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week: {
          dow: 6,
          doy: 12
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      function b(a, b) {
        var c = a.split("_");
        return b % 10 === 1 && b % 100 !== 11 ? c[0] : b % 10 >= 2 && 4 >= b % 10 && (10 > b % 100 || b % 100 >= 20) ? c[1] : c[2]
      }

      function c(a, c, d) {
        var e = {
          mm: "хвилина_хвилини_хвилин",
          hh: "година_години_годин",
          dd: "день_дні_днів",
          MM: "місяць_місяці_місяців",
          yy: "рік_роки_років"
        };
        return "m" === d ? c ? "хвилина" : "хвилину" : "h" === d ? c ? "година" : "годину" : a + " " + b(e[d], +a)
      }

      function d(a, b) {
        var c = {
            nominative: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),
            accusative: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")
          },
          d = /D[oD]? *MMMM?/.test(b) ? "accusative" : "nominative";
        return c[d][a.month()]
      }

      function e(a, b) {
        var c = {
            nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
            accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
            genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
          },
          d = /(\[[ВвУу]\]) ?dddd/.test(b) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(b) ? "genitive" : "nominative";
        return c[d][a.day()]
      }

      function f(a) {
        return function() {
          return a + "о" + (11 === this.hours() ? "б" : "") + "] LT"
        }
      }
      return a.lang("uk", {
        months: d,
        monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays: e,
        weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY р.",
          LLL: "D MMMM YYYY р., LT",
          LLLL: "dddd, D MMMM YYYY р., LT"
        },
        calendar: {
          sameDay: f("[Сьогодні "),
          nextDay: f("[Завтра "),
          lastDay: f("[Вчора "),
          nextWeek: f("[У] dddd ["),
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return f("[Минулої] dddd [").call(this);
              case 1:
              case 2:
              case 4:
                return f("[Минулого] dddd [").call(this)
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "за %s",
          past: "%s тому",
          s: "декілька секунд",
          m: c,
          mm: c,
          h: "годину",
          hh: c,
          d: "день",
          dd: c,
          M: "місяць",
          MM: c,
          y: "рік",
          yy: c
        },
        meridiem: function(a) {
          return 4 > a ? "ночі" : 12 > a ? "ранку" : 17 > a ? "дня" : "вечора"
        },
        ordinal: function(a, b) {
          switch (b) {
            case "M":
            case "d":
            case "DDD":
            case "w":
            case "W":
              return a + "-й";
            case "D":
              return a + "-го";
            default:
              return a
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("uz", {
        months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY LT",
          LLLL: "D MMMM YYYY, dddd LT"
        },
        calendar: {
          sameDay: "[Бугун соат] LT [да]",
          nextDay: "[Эртага] LT [да]",
          nextWeek: "dddd [куни соат] LT [да]",
          lastDay: "[Кеча соат] LT [да]",
          lastWeek: "[Утган] dddd [куни соат] LT [да]",
          sameElse: "L"
        },
        relativeTime: {
          future: "Якин %s ичида",
          past: "Бир неча %s олдин",
          s: "фурсат",
          m: "бир дакика",
          mm: "%d дакика",
          h: "бир соат",
          hh: "%d соат",
          d: "бир кун",
          dd: "%d кун",
          M: "бир ой",
          MM: "%d ой",
          y: "бир йил",
          yy: "%d йил"
        },
        week: {
          dow: 1,
          doy: 7
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("vi", {
        months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM [năm] YYYY",
          LLL: "D MMMM [năm] YYYY LT",
          LLLL: "dddd, D MMMM [năm] YYYY LT",
          l: "DD/M/YYYY",
          ll: "D MMM YYYY",
          lll: "D MMM YYYY LT",
          llll: "ddd, D MMM YYYY LT"
        },
        calendar: {
          sameDay: "[Hôm nay lúc] LT",
          nextDay: "[Ngày mai lúc] LT",
          nextWeek: "dddd [tuần tới lúc] LT",
          lastDay: "[Hôm qua lúc] LT",
          lastWeek: "dddd [tuần rồi lúc] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s tới",
          past: "%s trước",
          s: "vài giây",
          m: "một phút",
          mm: "%d phút",
          h: "một giờ",
          hh: "%d giờ",
          d: "một ngày",
          dd: "%d ngày",
          M: "một tháng",
          MM: "%d tháng",
          y: "một năm",
          yy: "%d năm"
        },
        ordinal: function(a) {
          return a
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("zh-cn", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
          LT: "Ah点mm",
          L: "YYYY-MM-DD",
          LL: "YYYY年MMMD日",
          LLL: "YYYY年MMMD日LT",
          LLLL: "YYYY年MMMD日ddddLT",
          l: "YYYY-MM-DD",
          ll: "YYYY年MMMD日",
          lll: "YYYY年MMMD日LT",
          llll: "YYYY年MMMD日ddddLT"
        },
        meridiem: function(a, b) {
          var c = 100 * a + b;
          return 600 > c ? "凌晨" : 900 > c ? "早上" : 1130 > c ? "上午" : 1230 > c ? "中午" : 1800 > c ? "下午" : "晚上"
        },
        calendar: {
          sameDay: function() {
            return 0 === this.minutes() ? "[今天]Ah[点整]" : "[今天]LT"
          },
          nextDay: function() {
            return 0 === this.minutes() ? "[明天]Ah[点整]" : "[明天]LT"
          },
          lastDay: function() {
            return 0 === this.minutes() ? "[昨天]Ah[点整]" : "[昨天]LT"
          },
          nextWeek: function() {
            var b, c;
            return b = a().startOf("week"), c = this.unix() - b.unix() >= 604800 ? "[下]" : "[本]", 0 === this.minutes() ? c + "dddAh点整" : c + "dddAh点mm"
          },
          lastWeek: function() {
            var b, c;
            return b = a().startOf("week"), c = this.unix() < b.unix() ? "[上]" : "[本]", 0 === this.minutes() ? c + "dddAh点整" : c + "dddAh点mm"
          },
          sameElse: "LL"
        },
        ordinal: function(a, b) {
          switch (b) {
            case "d":
            case "D":
            case "DDD":
              return a + "日";
            case "M":
              return a + "月";
            case "w":
            case "W":
              return a + "周";
            default:
              return a
          }
        },
        relativeTime: {
          future: "%s内",
          past: "%s前",
          s: "几秒",
          m: "1分钟",
          mm: "%d分钟",
          h: "1小时",
          hh: "%d小时",
          d: "1天",
          dd: "%d天",
          M: "1个月",
          MM: "%d个月",
          y: "1年",
          yy: "%d年"
        },
        week: {
          dow: 1,
          doy: 4
        }
      })
    }),
    function(a) {
      a(mb)
    }(function(a) {
      return a.lang("zh-tw", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
          LT: "Ah點mm",
          L: "YYYY年MMMD日",
          LL: "YYYY年MMMD日",
          LLL: "YYYY年MMMD日LT",
          LLLL: "YYYY年MMMD日ddddLT",
          l: "YYYY年MMMD日",
          ll: "YYYY年MMMD日",
          lll: "YYYY年MMMD日LT",
          llll: "YYYY年MMMD日ddddLT"
        },
        meridiem: function(a, b) {
          var c = 100 * a + b;
          return 900 > c ? "早上" : 1130 > c ? "上午" : 1230 > c ? "中午" : 1800 > c ? "下午" : "晚上"
        },
        calendar: {
          sameDay: "[今天]LT",
          nextDay: "[明天]LT",
          nextWeek: "[下]ddddLT",
          lastDay: "[昨天]LT",
          lastWeek: "[上]ddddLT",
          sameElse: "L"
        },
        ordinal: function(a, b) {
          switch (b) {
            case "d":
            case "D":
            case "DDD":
              return a + "日";
            case "M":
              return a + "月";
            case "w":
            case "W":
              return a + "週";
            default:
              return a
          }
        },
        relativeTime: {
          future: "%s內",
          past: "%s前",
          s: "幾秒",
          m: "一分鐘",
          mm: "%d分鐘",
          h: "一小時",
          hh: "%d小時",
          d: "一天",
          dd: "%d天",
          M: "一個月",
          MM: "%d個月",
          y: "一年",
          yy: "%d年"
        }
      })
    }), mb.lang("en"), Bb ? module.exports = mb : "function" == typeof define && define.amd ? (define("moment", function(a, b, c) {
      return c.config && c.config() && c.config().noGlobal === !0 && (qb.moment = nb), mb
    }), lb(!0)) : lb()
}).call(this);


/**
 * jquery.rangecalendar.js v 1.0.1 

 * Copyright 2013, Angelo Libero Mangieri
 * Email: angelo@afreeux.com
 */




;( function( $, window, undefined ) {
  
$.fn.rangeCalendar = function(options) {
    
    var defaults = {
    
      lang: "en",
      theme: "default-theme",
      themeContext: this,
      startDate: moment(),
      endDate: moment().add('months', 12),
      start : "+7",
      startRangeWidth : 3, 
      minRangeWidth: 1,
      maxRangeWidth: 14,
      autoHideMonths: false,
      visible: true,
      trigger: null,
      changeRangeCallback : function( el, cont, dateProp ) { return false; }
    };
  
    var returnObj;
    
    
  this.each(function(i, el) {

    var obj = el,
              $el = $(el),
              settings = $.extend( true, {},defaults, options );
        obj.options = settings;
          
          
        
     
    obj.showCalendar = function(animate) {
        
        var calPos = obj.calendarObj.position();
        var lastItemPos = obj.calendarObj.find(".cell").last().position();
        var lastItemRight =  (lastItemPos.left + obj.calendarObj.find(".cell").last().outerWidth() );
        var selectedItemPos = obj.calendarObj.find(".cell").eq(0).position();
         
        $el.slideDown((animate ? 300 : 0), function() {

        var windowWidth = $(window).outerWidth();
        $(obj.calendarObj).css({left: windowWidth });
        $(obj.monthsObj).css({left: windowWidth });
          obj._placeElement(obj.calendarObj,(!selectedItemPos ? 0 : selectedItemPos.left) );
        obj._placeElement(obj.monthsObj);
        });
        
        obj.visible = true;
    },
    obj.hideCalendar = function() {
        
        $el.slideUp(50);
        obj.visible = false;
    },
    obj.toggleCalendar = function () {
    
      if(obj.visible)
          obj.showCalendar();
      else
          obj.hideCalendar();
    },
  
    obj.rangeWidth = function(){
        
        var cellWidth = obj.calendarObj.find(".cell").outerWidth();
        var rangeWidth = parseInt(obj.calendarObj.find('.range-bar').outerWidth()/cellWidth); 
        obj._rangeWidth = ( !rangeWidth ? obj._rangeWidth : rangeWidth) ; 
         
        return obj._rangeWidth;
    },
    obj.setRangeWidth = function(rangeWidth) {
      
      var cellWidth = obj.calendarObj.find(".cal-cell").eq(0).outerWidth();
        var rangeWidth = parseInt(!rangeWidth || rangeWidth < obj.minRangeWidth ? obj.minRangeWidth : rangeWidth);
        $el.find(".range-bar").width(cellWidth*rangeWidth);
        $el.find(".range-bar").trigger("resize");
    },
    obj.range = function() {

        var startDateIndex = obj.calendarObj.find('.cell.selected:eq(0)').index();
        var endDateIndex = obj.calendarObj.find('.cell.selected').last().index(); 
        var startDate = moment().add('days', startDateIndex+obj.start);
        var startDateFormatted = (startDateIndex>=0 ? moment().add('days', startDateIndex+obj.start).format() : null);
        var endDateFormatted = (endDateIndex>=0 ? moment().add('days', endDateIndex+obj.start).format() : null);
        var range = $.data( obj, "range", {
                  start: startDateFormatted,
                end: endDateFormatted,
                width: obj.rangeWidth(),
                fromNow: startDate.fromNow()     
              });
        return range;
    },
    
    obj.setStartDate = function(startDate) {
      
      var date = moment(startDate);
      var fullYear = date.format("YYYY");
      var monthNumber = date.format("MM");
      var dayNumber = date.format('D');
      var dateId =  fullYear+monthNumber+dayNumber;
      var monthId =  fullYear+monthNumber;
      
      var dateCell = obj.calendarObj.find('.cell[date-id="'+dateId+'"]').eq(0);
      dateCell.trigger("click");
      
      var monthCell = obj.monthsObj.find('.cell[month-id="'+monthId+'"]').eq(0);
      monthCell.trigger("click");
    },
    
    obj.lang = function (){
      return obj.lang;
    },
    
    obj.setTheme = function (themeName){
      
      var _themeName = $(obj.themeContext).attr("theme");
      
      if(_themeName)
        $(obj.themeContext).removeClass(_themeName);
      
      $(obj.themeContext).attr("theme",""+themeName+"");
      $(obj.themeContext).addClass(""+themeName+"");      
      obj.theme = themeName;
    },
    
    //EVENTS
    obj.didResizeBar = function() {
            
      var prevRangeWidth = obj.rangeWidth();
      var rangeWidth = prevRangeWidth;
      var resizeBarPos = obj.calendarObj.find('.range-bar').position();
      var resizeBarWidth = obj.calendarObj.find('.range-bar').outerWidth();
      var resizeBarRight = resizeBarPos.left+resizeBarWidth;
      var cellWidth = $(obj).find(".cell").first().outerWidth();
      var lastCellPos = $(obj).find(".cell").last().position();
      var deltaWidth = 0
      var objWidth = (lastCellPos.left+cellWidth);
      
      if(resizeBarRight > objWidth){
          
          deltaWidth = objWidth-resizeBarWidth;
          prevRangeWidth = (resizeBarWidth-deltaWidth)/cellWidth;
      }
          
      
      obj.calendarObj.find('.cell').removeClass("selected");
      obj.calendarObj.find('.cell').removeClass("last");
      obj.calendarObj.find('.cell.start').addClass("selected");
      obj.calendarObj.find('.cell.start').nextAll().slice(0, (!rangeWidth ? obj.minRangeWidth-1 : rangeWidth-1)).addClass('selected');
      obj.calendarObj.find('.cell.selected').last().addClass("last");
      obj._dispatchEvent(obj.changeRangeCallback,obj.range(),obj);
    },
    obj.didSelectMonth = function(e) {
    
      
      if(obj.isDragging || $(obj.lastTarget).is(obj.monthsObj) ){
      
        delete obj.lastTarget;
            return;
        }
        
        var currentMonthId = $(this).attr("month-id");
        var currentCellMonth = obj.calendarObj.find('.cell[month-id="'+currentMonthId+'"].selected').eq(0);
        var monthPosition = (!currentCellMonth.length  ? obj.calendarObj.find('.cell[month-id="'+currentMonthId+'"]').eq(0).position() : currentCellMonth.position());
        var calendarViewWidth = $($el).outerWidth();
        
        obj.monthsObj.find('.cell').not(this).removeClass('selected');
        $(this).addClass('selected');
        
      obj._placeElement(obj.calendarObj,monthPosition);
      obj._dispatchEvent(obj.changeRangeCallback,obj.range(),obj);  
      
    },
    
    
    
    obj.didChangeRange = function(e,ui) {
        
        if(obj.isDragging || $(obj.lastTarget).is(obj.calendarObj)){
      
        delete obj.lastTarget;
            return;
        }
        var rangeWidth = obj.rangeWidth();
        var currentCalItem = $(this); 
        var lastCalItem = obj.calendarObj.find('.cell').last();
        var delta = lastCalItem.index()-currentCalItem.index();
        
        var rightBar  = currentCalItem.index()+rangeWidth-1;
        if(rightBar > lastCalItem.index()){
            obj.calendarObj.find(' .cell').eq(currentCalItem.index()-rangeWidth+delta+1).trigger("click");
            return;
        }
            
        obj.calendarObj.find(".start").removeClass("start");
        currentCalItem.addClass("start");
        
        obj._updateRangeBar();
        obj._updateMonths();
      obj._dispatchEvent(obj.changeRangeCallback,obj.range(),obj);
        
    },
    
    ///////////////////////////////////////////////////////*
    
    // PRIVATE METHODS
    
    
    obj._initRangeBar = function(){
      
      $(window).unbind("resize"); //Prevents window.resize event triggering
        var rangeWidth = obj.rangeWidth()  ;
        var cellWidth = obj.calendarObj.find(".cell").eq(0).outerWidth();
        var cellHeight = obj.calendarObj.find(".cell").eq(0).outerHeight();
        var selectedCell = obj.calendarObj.find(".cell.selected:eq(0)");
        
        
        if(!selectedCell.length)
          return;
          
        
        obj.calendarObj.find(".range-bar").unbind( "resize");
        obj.calendarObj.find(".range-bar").remove();
        
        $(selectedCell).append('<div class="range-bar resizable"><div class="range-bar-content"></div></div>');
        
        if(obj.maxRangeWidth > 1){
        obj.calendarObj.find(".range-bar").resizable({
              grid:[cellWidth,0],
                maxWidth: obj.maxRangeWidth*cellWidth,
                minWidth: cellWidth*obj.minRangeWidth,
                maxHeight:cellHeight,
                minHeight:cellHeight,
                handles: "e"
        });
        }
        

        obj.setRangeWidth(rangeWidth);
        obj.calendarObj.find(".range-bar").on( "resize", obj.didResizeBar);
        
        $(window).bind("resize",obj._resize);
        
    },
    obj._initMonths  = function() {
        
        
        
        obj.monthsObj.draggable({ 
          
          axis: "x" ,
            scrollSensitivity: 100,
            scrollSpeed: 100 ,
            cursor: "move",
            
            create: function (e, ui) {
              
              obj._updateMonths();
              obj._placeElement(obj.monthsObj);
              
            },
            start: function (e, ui) {
                
                obj.isDragging = true;
                obj.monthsObj.find('.cell').unbind("click");
                
                
            },
            drag: function (e, ui) {
               
            },
              
            stop: function(e, ui) {
          
          
          $(this).css({top: 0});
          obj.lastTarget = e.target;
          
                setTimeout(function(){
                  obj.isDragging = false;
                  delete obj.lastTarget;
                  obj._placeElement(obj.monthsObj);
                  obj.monthsObj.find('.cell').bind("click",obj.didSelectMonth); 
                },10);
            }
        });
        
    },
    
    obj._initCalendar = function() {

      var xpos;
      
        obj.calendarObj.draggable({ 
    
            axis: "x" ,
            scrollSensitivity: 100,
            scrollSpeed: 100 ,
            cursor: "move",
            
              create: function () {
                
                obj.calendarObj.find('.cell').removeClass("selected");
              obj.calendarObj.find('.cell').removeClass("last");
              obj.calendarObj.find(".cell").eq(obj.start-1).addClass("start");
              obj.calendarObj.find(".cell").eq(obj.start-1).addClass("selected");     
              obj.calendarObj.find('.cell.start').nextAll().slice(0, obj._rangeWidth-1).addClass('selected');
              obj.calendarObj.find('.cell').bind("click",obj.didChangeRange);
              obj.calendarObj.find('.cell.selected').last().addClass("last");
      
              obj._placeElement(obj.calendarObj); 
              },
            start: function(e, ui) {
              
              xpos = ui.position.left;
                $(window).unbind("resize"); //Prevents window.resize event triggering
                obj.isDragging = true;
                obj.calendarObj.find('.cell').unbind("click");
            },
            drag: function (e, ui) {
              
               var xmove = ui.position.left - xpos;
               var direction = xmove >= 0 ? 'right' : 'left';
      
              var rangeCalendarWidth = $el.outerWidth();
              var calendarOffset = obj.calendarObj.position();
              
            var monthMaxId = parseInt(obj.monthsObj.find(".cell").last().attr("month-id"));
            var monthMinId = parseInt(obj.monthsObj.find(".cell").first().attr("month-id"));
  
              var currentMonthId = parseInt(obj.monthsObj.find(".cell.selected").attr("month-id"));
            var nextMonthId = parseInt(obj.monthsObj.find(".cell.selected").next().attr("month-id"));
            var prevMonthId = parseInt(obj.monthsObj.find(".cell.selected").prev().attr("month-id"));
            
  
            if(nextMonthId && currentMonthId && nextMonthId <= monthMaxId && direction == "left") {
            
              var nextMonthsCell = obj.monthsObj.find('.cell[month-id="'+nextMonthId+'"]');
              var nextMonthCalendarCell = obj.calendarObj.find('.cell[month-id="'+nextMonthId+'"]').first();
              var nextMonthCalendarCellPos = nextMonthCalendarCell.position();
              
              
              var nextMonthLeftCenter = (rangeCalendarWidth/2 -(nextMonthCalendarCellPos.left )) ;
              
              if( nextMonthLeftCenter >= calendarOffset.left && calendarOffset.left != 0){
                    
                    obj.monthsObj.find(".cell").removeClass("selected");
                    $(nextMonthsCell).addClass("selected");
                    obj._placeElement(obj.monthsObj,nextMonthsCell.position());
                  }
                  
                }
                else if(prevMonthId && currentMonthId && prevMonthId >= monthMinId && direction == "right") {
            
              var prevMonthCell = obj.monthsObj.find('.cell[month-id="'+prevMonthId+'"]');
              var prevMonthCalendarCell = obj.calendarObj.find('.cell[month-id="'+prevMonthId+'"]').last();
              var prevMonthCalendarCellPos = prevMonthCalendarCell.position();
              var prevMonthLeftCenter = (rangeCalendarWidth/2 -(prevMonthCalendarCellPos.left )) ;
                          
                  if(prevMonthLeftCenter <= calendarOffset.left+prevMonthCalendarCell.outerWidth() ) {
                    
                    obj.monthsObj.find(".cell").removeClass("selected");
                    $(prevMonthCell).addClass("selected");
                    
                    obj._placeElement(obj.monthsObj,prevMonthCell.position());
                  }
                }
            },
            stop: function(e, ui) {

              //alert("Drag easing da inserire");
              //var calendarOffset = obj.calendarObj.position();
              //obj.calendarObj.animate({left: parseInt(calendarOffset.left)-100},300,'easeOutCirc');
              obj.lastTarget = e.target;
              obj._placeElement(obj.calendarObj);
              
              setTimeout(function(){
                  obj.isDragging = false;
                  delete obj.lastTarget;
                  
                  obj.calendarObj.find('.cell').bind("click",obj.didChangeRange); 
                  $(window).bind("resize",obj._resize);
                  obj._placeElement(obj.monthsObj);
              },100);
                
            }
        });
    },
    
    
    obj._attachDragEasing = function(obj){
    
      return;
        var draggableObj = $(obj);
    
        var x1, x2, y1, y2, t1, t2,
            minDistance = 40,
            friction = 10;
        
        var onMouseMove = function(e) {
            var mouseEvents = draggableObj.data("mouseEvents");
            if (e.timeStamp - mouseEvents[mouseEvents.length - 1].timeStamp > 40) {
                mouseEvents.push(e);
                if (mouseEvents.length > 2) {
                    mouseEvents.shift();
                }
            }
        };
    
        var onMouseUp = function() {
            //$(draggableObj).unbind("mousemove mouseup");
        };
    
        draggableObj.bind('dragstart',function (e){
        
          draggableObj.data("mouseEvents", [e]);
            $(document).mousemove(onMouseMove).mouseup(onMouseUp);
        });
        
        draggableObj.bind('dragstop',function (e){
        
                draggableObj.stop();
    
                var lastE = draggableObj.data("mouseEvents").shift();
    
                x1 = lastE.pageX;
                y1 = lastE.pageY;
                t1 = lastE.timeStamp;
                x2 = e.pageX;
                y2 = e.pageY;
                t2 = e.timeStamp;
    
                // Deltas
                var dX = x2 - x1,
                    dY = y2 - y1,
                    dMs = Math.max(t2 - t1, 1);
    
                // Speeds
                var speedX = Math.max(Math.min(dX / dMs, 1), -1),
                    speedY = Math.max(Math.min(dY / dMs, 1), -1);
    
                // Distance moved (Euclidean distance)
                var distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    
                if (distance > minDistance) {
                    // Momentum
                    var lastStepTime = new Date();
                    
                    var maxLeft = $(window).width() - (draggableObj.width() + 10),
                        maxTop = 0;
    
                    draggableObj.animate({
                        textIndent: 0
                    }, {
                        duration: Math.max(Math.abs(speedX), Math.abs(speedY)) * 2000,
                        step: function(currentStep) {
                            speedX *= (currentStep / 100);
                            speedY *= (currentStep / 100);
    
                            var now = new Date();
                            var stepDuration = now.getTime() - lastStepTime.getTime();
    
                            lastStepTime = now;
    
                            var position = draggableObj.position();
    
                            var newLeft = (position.left + (speedX * stepDuration / friction)),
                                newTop = (position.top + (speedY * stepDuration / friction));
                                
                            console.log(newLeft);
                            newLeft = newLeft > maxLeft ? maxLeft : newLeft < 10 ? 10 : newLeft;
                            newTop  = newTop  > maxTop  ? maxTop  : newTop  < 10 ? 10 : newTop;
    
                            draggableObj.css({
                                left: newLeft + "px",
                                top: 0 + "px"
                            });
                        }
                    });
                }
            });
    },
    obj._getCalendarHTML = function(startDate,endDate) {

      var calendarHtml = '';
      var cell;
      var date = moment(startDate).add('days', obj.start);
      var endDate = moment(endDate).add('days', obj.start);
      var rangeWidth = obj.rangeWidth();
      
      for (var index = 1; (date.isBefore(endDate) || date.isSame(endDate)) ; index++){
      
        var fullYear = date.format("YYYY");
        var month = date.format("MMM");
        var monthNumber = date.format("MM");
        var day = date.format('ddd');
        var dayNumber = date.format('DD');
        
        
        cell = '<div class="cal-cell cell" date-id="'+fullYear+monthNumber+dayNumber+'" month-id="'+fullYear+''+monthNumber+'" month="'+monthNumber+'">';
        cell += '<div class="cell-content">';
          cell += '<div class="day-number">'+dayNumber+'</div>';
          cell += '<div class="day '+(date.day() == 0 || date.day() == 6? 'ferial' : '') +'">'+day+'</div>';
          cell += '</div>';
          cell += '</div>';
          
          calendarHtml += cell;
        date.add('days', 1);
      }
      
      
      
      return calendarHtml;
    },
    obj._getMonthsHTML = function(startDate,endDate) {
      
      var monthsHtml = '';
      var cell;
      var date = moment(startDate).add('days', obj.start);
      var endDate = moment(endDate).add('days', obj.start);
      for (var index = 1; (date.isBefore(endDate) || date.isSame(endDate)) ; index++){
      
        var year = date.format("YYYY");
        var fullYear = date.format("YYYY");
        var month = date.format("MM");
        var monthNumber = date.format("MM");
        
        cell = '<div class="month-cell cell" month-id="'+fullYear+''+monthNumber+'" month="'+monthNumber+'">';
        cell += '<i class="bullet"></i>';
        cell += '<div class="date-formatted"><span class="month-name">'+month+'</span> '+year+'</span></div>';
        cell += '</div>'; 
                
          monthsHtml += cell;
        date.add('month', 1);
      }

      return monthsHtml;
    },
    obj._updateMonths = function() {

        var currentMonth = obj.calendarObj.find('.cell.selected:eq(0)').attr("month-id");
        obj.monthsObj.find('.cell').removeClass('selected');
        obj.monthsObj.find('.cell').removeClass('current');
        obj.monthsObj.find('.cell[month-id="'+currentMonth+'"]').addClass('selected');
        obj.monthsObj.find('.cell[month-id="'+currentMonth+'"]').addClass('current');
    },
    obj._updateRangeBar  = function() {

        obj.didResizeBar();
        obj._initRangeBar();
    },
    obj._dispatchEvent = function (callback,options,el) {
      
      if(!callback)
        return false;
        
      callback(el,options);
    },
    obj._placeElement = function (el) {
      
      obj._placeElement(el,null);
    },
    obj._placeElement = function (el, position) {
      
      var calendarViewWidth = $el.outerWidth();
      var cellWidth = $(el).find(".cell").first().outerWidth();
      var objChildrens = $(el).children().length;
      var objWidth = (objChildrens*cellWidth);
      
      var elPos =  $(el).position();
      left = (  !position ? parseInt(elPos.left) :  -position.left);
      
      if(calendarViewWidth > objWidth )
          left = (calendarViewWidth-objWidth)/2;
      else if (calendarViewWidth < objWidth && left >= 0)
        left = 0 ;
      else if(left < calendarViewWidth-objWidth)
        left = -objWidth+calendarViewWidth;
                  
      $(el).stop().animate({left: left},300,'easeOutCirc');
    },
    obj._timedResize = function() {
        
      clearTimeout(obj.resizeTimer);
      obj.resizeTimer = setTimeout(obj._resize, obj.timeoutTime);
    },
    obj._bindEvents = function () {
    
      if(obj.trigger){
      
        $(obj.trigger).unbind("click");
        $(obj.trigger).click(obj.toggleCalendar);
      }
        
      obj.timeout = false;
      obj.timeoutTime = 100;
            
      obj.calendarObj.find(".range-bar").on( "resize", obj.didResizeBar);
        obj.monthsObj.find('.cell').bind("click",obj.didSelectMonth);
        
        $(window).bind('resize',obj._timedResize);
      
        $el.hover(
        
        function() {
        
            if(obj.autoHideMonths)
              obj.monthsObj.slideDown(100,'easeOutCirc');
        }, 
        function() {
        
            if(obj.autoHideMonths)
              obj.monthsObj.slideUp(0,'easeOutCirc');
            
        }
        );
        
        $(obj).on('mousedown', '.range-bar', function (e) {
        
        
        var topElement = document.elementFromPoint(e.clientX, e.clientY);
        if($(topElement).hasClass('ui-resizable-handle')){
          
          e.stopPropagation();
          return false;
        }
          
      });
      
      
      $(obj).on('mouseup', '.range-bar', function (e) {
      
        if($(obj).find('.range-bar').hasClass('ui-resizable-resizing'))
          return true;
          
          $(this).hide();
          var BottomElement = document.elementFromPoint(e.clientX, e.clientY);
          $(this).show();
          
          $(BottomElement).trigger('click'); //Manually fire the event for desired underlying element
          return true;
      });
        
    },
    
    obj._resize = function(){ 
        
      
      obj._placeElement(obj.calendarObj);
      obj._placeElement(obj.monthsObj);
      obj.timeout = false;
        
    },
    
    obj._updateView = function (startDate,endDate){
      
      obj.calendarObj.append(obj._getCalendarHTML(startDate,endDate));
      obj.monthsObj.append(obj._getMonthsHTML(startDate,endDate));
      
      if(obj.visible){  
        $el.css({display:"block"});
        obj.showCalendar();
      }
      else
        $el.css({display:"none"});  
      
      obj._initCalendar();
      obj._initMonths();
      obj._initRangeBar();
      
      obj._attachDragEasing(obj.calendarObj);
    },
    obj._generateView = function () {
      
      var mainClass = "range-calendar";
      
      $el.removeClass(mainClass)
      $el.addClass(mainClass);
      $el.empty();
      
      obj.monthsObj = $('<div class="wrapper"><div class="months"></div></div>');
      $el.append( obj.monthsObj );
      obj.monthsObj = obj.monthsObj.find(".months");
      (obj.autoHideMonths ?  obj.monthsObj.addClass("auto-hide-months") : '');
      
      obj.calendarObj = $('<div class="wrapper"><div class="calendar"></div></div>');
      $el.append( obj.calendarObj );
      obj.calendarObj = obj.calendarObj.find(".calendar");

      
      obj._updateView(obj.startDate,obj.endDate);
      obj._bindEvents();
      obj._dispatchEvent(obj.changeRangeCallback,obj.range(),obj);
    }

    
    
    obj._init = function( element,options ) {
      
      obj.themeContext = options.themeContext;
      obj.lang  = options.lang ; 
      obj.isDragging = false;
      obj.minRangeWidth = options.minRangeWidth;
      obj.maxRangeWidth = options.maxRangeWidth;
      obj.startDate = options.startDate;
      obj.endDate = options.endDate;
      obj.start = (!options.start ? "+7" : parseInt(options.start)) ;
      obj.startRangeWidth = ( options.startRangeWidth > options.maxRangeWidth ? options.maxRangeWidth : options.startRangeWidth); 
      obj._rangeWidth = obj.startRangeWidth;
      obj.trigger = options.trigger;
      obj.visible = options.visible;
      obj.changeRangeCallback = options.changeRangeCallback;
      obj.autoHideMonths = options.autoHideMonths ;
      
      moment.lang(obj.lang);
      
      obj.setTheme((options.theme ? options.theme : defaults.theme ));
      obj._generateView();
      
      
      
    },
    
    obj._init(el,obj.options);
    $(obj).data('rangeCalendar', obj );
    
    
  });
  
  
  return this.data("rangeCalendar");
   
  
};

} )( jQuery, window );











